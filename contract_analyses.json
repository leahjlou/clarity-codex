[
  {
    "rank": 1,
    "contract": "SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01",
    "calls": 26905,
    "source": "(use-trait ft-trait .trait-sip-010.sip-010-trait)\n(define-constant ERR-NOT-AUTHORIZED (err u1000))\n(define-constant ERR-POOL-ALREADY-EXISTS (err u2000))\n(define-constant ERR-INVALID-POOL (err u2001))\n(define-constant ERR-BLOCKLISTED (err u2002))\n(define-constant ERR-INVALID-LIQUIDITY (err u2003))\n(define-constant ERR-PERCENT-GREATER-THAN-ONE (err u2004))\n(define-constant ERR-EXCEEDS-MAX-SLIPPAGE (err u2005))\n(define-constant ERR-ORACLE-NOT-ENABLED (err u2006))\n(define-constant ERR-ORACLE-AVERAGE-BIGGER-THAN-ONE (err u2007))\n(define-constant ERR-PAUSED (err u2008))\n(define-constant ERR-SWITCH-THRESHOLD-BIGGER-THAN-ONE (err u2009))\n(define-constant ERR-NO-LIQUIDITY (err u2010))\n(define-constant ERR-MAX-IN-RATIO (err u2011))\n(define-constant ERR-MAX-OUT-RATIO (err u2012))\n(define-data-var paused bool true)\n(define-read-only (is-dao-or-extension)\n    (ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) ERR-NOT-AUTHORIZED)))\n(define-read-only (is-blocklisted-or-default (sender principal))\n\t(contract-call? .amm-registry-v2-01 is-blocklisted-or-default sender))\n(define-read-only (get-switch-threshold)\n    (contract-call? .amm-registry-v2-01 get-switch-threshold))\n(define-read-only (get-pool-details-by-id (pool-id uint))\n    (contract-call? .amm-registry-v2-01 get-pool-details-by-id pool-id))\n(define-read-only (get-pool-details (token-x principal) (token-y principal) (factor uint))\n    (contract-call? .amm-registry-v2-01 get-pool-details token-x token-y factor))\n(define-read-only (get-pool-exists (token-x principal) (token-y principal) (factor uint))\n    (contract-call? .amm-registry-v2-01 get-pool-exists token-x token-y factor))\n(define-read-only (is-paused)\n\t(var-get paused))\n(define-read-only (get-balances (token-x principal) (token-y principal) (factor uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t)\n\t\t(ok {balance-x: (get balance-x pool), balance-y: (get balance-y pool)})))\n(define-read-only (get-start-block (token-x principal) (token-y principal) (factor uint))\n\t(ok (get start-block (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-end-block (token-x principal) (token-y principal) (factor uint))\n\t(ok (get end-block (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-max-in-ratio (token-x principal) (token-y principal) (factor uint))\n\t(ok (get max-in-ratio (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-max-out-ratio (token-x principal) (token-y principal) (factor uint))\n\t(ok (get max-out-ratio (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (check-pool-status (token-x principal) (token-y principal) (factor uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t)\n\t\t(ok (asserts! (and (>= block-height (get start-block pool)) (<= block-height (get end-block pool))) ERR-NOT-AUTHORIZED))))\n(define-read-only (get-oracle-enabled (token-x principal) (token-y principal) (factor uint))\n\t(ok (get oracle-enabled (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-oracle-average (token-x principal) (token-y principal) (factor uint))\n\t(ok (get oracle-average (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-oracle-resilient (token-x principal) (token-y principal) (factor uint))\n    (let (\n            (exists (is-some (get-pool-exists token-x token-y factor)))\n            (pool (if exists (try! (get-pool-details token-x token-y factor)) (try! (get-pool-details token-y token-x factor))))\n            (oracle-instant (try! (get-oracle-instant token-x token-y factor))))\n        (asserts! (get oracle-enabled pool) ERR-ORACLE-NOT-ENABLED)\n        (ok (+ (mul-down (- ONE_8 (get oracle-average pool)) oracle-instant) \n            (mul-down (get oracle-average pool) (if (is-eq (get oracle-resilient pool) u0) oracle-instant (get oracle-resilient pool)))))))\n(define-read-only (get-oracle-instant (token-x principal) (token-y principal) (factor uint))\n\t(let (\n\t\t\t(exists (is-some (get-pool-exists token-x token-y factor)))\n\t\t\t(pool (if exists (try! (get-pool-details token-x token-y factor)) (try! (get-pool-details token-y token-x factor))))\n\t\t)\n\t\t(asserts! (get oracle-enabled pool) ERR-ORACLE-NOT-ENABLED)\n\t\t(if exists\n\t\t\t(ok (get-price-internal (get balance-x pool) (get balance-y pool) factor))\n\t\t\t(ok (get-price-internal (get balance-y pool) (get balance-x pool) factor)))))\n(define-read-only (get-price (token-x principal) (token-y principal) (factor uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t)\n\t\t(ok (get-price-internal (get balance-x pool) (get balance-y pool) factor))))\n(define-read-only (get-threshold-x (token-x principal) (token-y principal) (factor uint))\n\t(ok (get threshold-x (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-threshold-y (token-x principal) (token-y principal) (factor uint))\n\t(ok (get threshold-y (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-fee-rebate (token-x principal) (token-y principal) (factor uint))\n\t(ok (get fee-rebate (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-fee-rate-x (token-x principal) (token-y principal) (factor uint))\n\t(ok (get fee-rate-x (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-fee-rate-y (token-x principal) (token-y principal) (factor uint))\n\t(ok (get fee-rate-y (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-pool-owner (token-x principal) (token-y principal) (factor uint))\n\t(ok (get pool-owner (try! (get-pool-details token-x token-y factor)))))\n(define-read-only (get-y-given-x (token-x principal) (token-y principal) (factor uint) (dx uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t\t(threshold (get threshold-x pool))\n\t\t\t(dy (if (>= dx threshold)\n\t\t\t\t(get-y-given-x-internal (get balance-x pool) (get balance-y pool) factor dx)\n\t\t\t\t(div-down (mul-down dx (get-y-given-x-internal (get balance-x pool) (get balance-y pool) factor threshold)) threshold)))\n\t\t)\n\t\t(asserts! (< dx (mul-down (get balance-x pool) (get max-in-ratio pool))) ERR-MAX-IN-RATIO)\n\t\t(asserts! (< dy (mul-down (get balance-y pool) (get max-out-ratio pool))) ERR-MAX-OUT-RATIO)\n\t\t(ok dy)))\n(define-read-only (get-x-given-y (token-x principal) (token-y principal) (factor uint) (dy uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t\t(threshold (get threshold-y pool))\n\t\t\t(dx (if (>= dy threshold)\n\t\t\t\t\t(get-x-given-y-internal (get balance-x pool) (get balance-y pool) factor dy)\n\t\t\t\t\t(div-down (mul-down dy (get-x-given-y-internal (get balance-x pool) (get balance-y pool) factor threshold)) threshold)))\n\t\t)\n\t\t(asserts! (< dy (mul-down (get balance-y pool) (get max-in-ratio pool))) ERR-MAX-IN-RATIO)\n\t\t(asserts! (< dx (mul-down (get balance-x pool) (get max-out-ratio pool))) ERR-MAX-OUT-RATIO)\n\t\t(ok dx)))\n(define-read-only (get-y-in-given-x-out (token-x principal) (token-y principal) (factor uint) (dx uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t\t(threshold (get threshold-x pool))\n\t\t\t(dy (if (>= dx threshold)\n\t\t\t\t\t(get-y-in-given-x-out-internal (get balance-x pool) (get balance-y pool) factor dx)\n\t\t\t\t\t(div-down (mul-down dx (get-y-in-given-x-out-internal (get balance-x pool) (get balance-y pool) factor threshold)) threshold)))\n\t\t)\n\t\t(asserts! (< dy (mul-down (get balance-y pool) (get max-in-ratio pool))) ERR-MAX-IN-RATIO)\n\t\t(asserts! (< dx (mul-down (get balance-x pool) (get max-out-ratio pool))) ERR-MAX-OUT-RATIO)\n\t\t(ok dy)))\n(define-read-only (get-x-in-given-y-out (token-x principal) (token-y principal) (factor uint) (dy uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t\t(threshold (get threshold-y pool))\n\t\t\t(dx (if (>= dy threshold)\n\t\t\t\t\t(get-x-in-given-y-out-internal (get balance-x pool) (get balance-y pool) factor dy)\n\t\t\t\t\t(div-down (mul-down dy (get-x-in-given-y-out-internal (get balance-x pool) (get balance-y pool) factor threshold)) threshold)))\n\t\t)\n\t\t(asserts! (< dx (mul-down (get balance-x pool) (get max-in-ratio pool))) ERR-MAX-IN-RATIO)\n\t\t(asserts! (< dy (mul-down (get balance-y pool) (get max-out-ratio pool))) ERR-MAX-OUT-RATIO)\n\t\t(ok dx)))\n(define-read-only (get-x-given-price (token-x principal) (token-y principal) (factor uint) (price uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t)\n\t\t(asserts! (< price (get-price-internal (get balance-x pool) (get balance-y pool) factor)) ERR-NO-LIQUIDITY)\n\t\t(ok (get-x-given-price-internal (get balance-x pool) (get balance-y pool) factor price))))\n(define-read-only (get-y-given-price (token-x principal) (token-y principal) (factor uint) (price uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t)\n\t\t(asserts! (> price (get-price-internal (get balance-x pool) (get balance-y pool) factor)) ERR-NO-LIQUIDITY)\n\t\t(ok (get-y-given-price-internal (get balance-x pool) (get balance-y pool) factor price))))\n(define-read-only (get-token-given-position (token-x principal) (token-y principal) (factor uint) (dx uint) (max-dy (optional uint)))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t\t(dy (default-to u340282366920938463463374607431768211455 max-dy))\n\t\t)\n\t\t(asserts! (and (> dx u0) (> dy u0))  ERR-NO-LIQUIDITY)\n\t\t(ok (get-token-given-position-internal (get balance-x pool) (get balance-y pool) factor (get total-supply pool) dx dy))))\n(define-read-only (get-position-given-mint (token-x principal) (token-y principal) (factor uint) (token-amount uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t)\n\t\t(asserts! (> (get total-supply pool) u0) ERR-NO-LIQUIDITY)\n\t\t(ok (get-position-given-mint-internal (get balance-x pool) (get balance-y pool) factor (get total-supply pool) token-amount))))\n(define-read-only (get-position-given-burn (token-x principal) (token-y principal) (factor uint) (token-amount uint))\n\t(let (\n\t\t\t(pool (try! (get-pool-details token-x token-y factor)))\n\t\t)\n\t\t(asserts! (> (get total-supply pool) u0) ERR-NO-LIQUIDITY)\n\t\t(ok (get-position-given-burn-internal (get balance-x pool) (get balance-y pool) factor (get total-supply pool) token-amount))))\n(define-read-only (get-helper (token-x principal) (token-y principal) (factor uint) (dx uint))\n\t(if (is-some (get-pool-exists token-x token-y factor))\n\t\t(get-y-given-x token-x token-y factor dx)\n\t\t(get-x-given-y token-y token-x factor dx)))\n(define-read-only (get-helper-a (token-x principal) (token-y principal) (token-z principal) (factor-x uint) (factor-y uint) (dx uint))\n\t(get-helper token-y token-z factor-y (try! (get-helper token-x token-y factor-x dx))))\n(define-read-only (get-helper-b\n\t\t(token-x principal) (token-y principal) (token-z principal) (token-w principal)\n\t\t(factor-x uint) (factor-y uint) (factor-z uint)\n\t\t(dx uint))\n\t(get-helper token-z token-w factor-z (try! (get-helper-a token-x token-y token-z factor-x factor-y dx))))\n(define-read-only (get-helper-c\n\t\t(token-x principal) (token-y principal) (token-z principal) (token-w principal) (token-v principal)\n\t\t(factor-x uint) (factor-y uint) (factor-z uint) (factor-w uint)\n\t\t(dx uint))\n\t(get-helper-a token-z token-w token-v factor-z factor-w (try! (get-helper-a token-x token-y token-z factor-x factor-y dx))))\n(define-read-only (fee-helper (token-x principal) (token-y principal) (factor uint))\n\t(if (is-some (get-pool-exists token-x token-y factor))\n\t\t(get-fee-rate-x token-x token-y factor)\n\t\t(get-fee-rate-y token-y token-x factor)))\n(define-read-only (fee-helper-a (token-x principal) (token-y principal) (token-z principal) (factor-x uint) (factor-y uint))\n\t(ok (+ (try! (fee-helper token-x token-y factor-x)) (try! (fee-helper token-y token-z factor-y)))))\n(define-read-only (fee-helper-b\n\t\t(token-x principal) (token-y principal) (token-z principal) (token-w principal)\n\t\t(factor-x uint) (factor-y uint) (factor-z uint))\n\t(ok (+ (try! (fee-helper-a token-x token-y token-z factor-x factor-y)) (try! (fee-helper token-z token-w factor-z)))))\n(define-read-only (fee-helper-c\n\t\t(token-x principal) (token-y principal) (token-z principal) (token-w principal) (token-v principal)\n\t\t(factor-x uint) (factor-y uint) (factor-z uint) (factor-w uint))\n\t(ok (+ (try! (fee-helper-a token-x token-y token-z factor-x factor-y)) (try! (fee-helper-a token-z token-w token-v factor-z factor-w)))))\n(define-read-only (get-invariant (balance-x uint) (balance-y uint) (t uint))\n    (if (>= t (get-switch-threshold))\n        (+ (mul-down (- ONE_8 t) (+ balance-x balance-y)) (mul-down t (mul-down balance-x balance-y)))\n        (+ (pow-down balance-x (- ONE_8 t)) (pow-down balance-y (- ONE_8 t)))))\n(define-read-only (get-max-ratio-limit)\n    (contract-call? .amm-registry-v2-01 get-max-ratio-limit))\n(define-public (pause (new-paused bool))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set paused new-paused))))\n(define-public (set-start-block (token-x principal) (token-y principal) (factor uint) (new-start-block uint))\n    (let (\n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-start-block token-x token-y factor new-start-block))))\n(define-public (set-end-block (token-x principal) (token-y principal) (factor uint) (new-end-block uint))\n    (let (\n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-end-block token-x token-y factor new-end-block))))\n(define-public (set-max-in-ratio (token-x principal) (token-y principal) (factor uint) (new-max-in-ratio uint))\n    (let (\n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-max-in-ratio token-x token-y factor new-max-in-ratio))))\n(define-public (set-max-out-ratio (token-x principal) (token-y principal) (factor uint) (new-max-out-ratio uint))\n    (let (\n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-max-out-ratio token-x token-y factor new-max-out-ratio))))\n(define-public (set-oracle-enabled (token-x principal) (token-y principal) (factor uint) (enabled bool))\n    (let (\n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-oracle-enabled token-x token-y factor enabled))))\n(define-public (set-oracle-average (token-x principal) (token-y principal) (factor uint) (new-oracle-average uint))\n    (let (\n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-oracle-average token-x token-y factor new-oracle-average))))\n(define-public (set-threshold-x (token-x principal) (token-y principal) (factor uint) (new-threshold uint))\n    (let (\n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-threshold-x token-x token-y factor new-threshold))))\n(define-public (set-threshold-y (token-x principal) (token-y principal) (factor uint) (new-threshold uint))\n    (let (\n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-threshold-y token-x token-y factor new-threshold))))\n(define-public (set-fee-rate-x (token-x principal) (token-y principal) (factor uint) (fee-rate-x uint))\n    (let (        \n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-fee-rate-x token-x token-y factor fee-rate-x))))\n(define-public (set-fee-rate-y (token-x principal) (token-y principal) (factor uint) (fee-rate-y uint))\n    (let (    \n            (pool (try! (get-pool-details token-x token-y factor))))\n        (asserts! (or (is-eq tx-sender (get pool-owner pool)) (is-ok (is-dao-or-extension))) ERR-NOT-AUTHORIZED)\n        (as-contract (contract-call? .amm-registry-v2-01 set-fee-rate-y token-x token-y factor fee-rate-y))))\n(define-public (create-pool (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (factor uint) (pool-owner principal) (dx uint) (dy uint)) \n    (begin\n\t\t\t\t(asserts! (not (is-blocklisted-or-default tx-sender)) ERR-BLOCKLISTED)\n        (as-contract (try! (contract-call? .amm-registry-v2-01 create-pool token-x-trait token-y-trait factor pool-owner)))\n        (add-to-position token-x-trait token-y-trait factor dx (some dy))))\n(define-public (add-to-position (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (factor uint) (dx uint) (max-dy (optional uint)))\n    (let (\n            (token-x (contract-of token-x-trait))\n            (token-y (contract-of token-y-trait))\n            (pool (try! (get-pool-details token-x token-y factor)))\n            (balance-x (get balance-x pool))\n            (balance-y (get balance-y pool))\n            (total-supply (get total-supply pool))\n            (add-data (try! (get-token-given-position token-x token-y factor dx max-dy)))\n            (new-supply (get token add-data))\n            (dy (get dy add-data))\n            (pool-updated (merge pool { total-supply: (+ new-supply total-supply), balance-x: (+ balance-x dx), balance-y: (+ balance-y dy) }))\n            (sender tx-sender))\n        (asserts! (not (is-paused)) ERR-PAUSED)\n        (asserts! (and (> dx u0) (> dy u0)) ERR-INVALID-LIQUIDITY)\n        (asserts! (>= (default-to u340282366920938463463374607431768211455 max-dy) dy) ERR-EXCEEDS-MAX-SLIPPAGE)\n        (try! (contract-call? token-x-trait transfer-fixed dx sender .amm-vault-v2-01 none))\n        (try! (contract-call? token-y-trait transfer-fixed dy sender .amm-vault-v2-01 none))\n        (as-contract (try! (contract-call? .amm-registry-v2-01 update-pool token-x token-y factor pool-updated)))\n        (as-contract (try! (contract-call? .token-amm-pool-v2-01 mint-fixed (get pool-id pool) new-supply sender)))\n        (print { object: \"pool\", action: \"liquidity-added\", data: pool-updated, dx: dx, dy: dy, token-x: token-x, token-y: token-y, sender: sender })\n        (ok {supply: new-supply, dx: dx, dy: dy})))\n(define-public (reduce-position (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (factor uint) (percent uint))\n    (let (\n            (token-x (contract-of token-x-trait))\n            (token-y (contract-of token-y-trait))\n            (pool (try! (get-pool-details token-x token-y factor)))\n            (balance-x (get balance-x pool))\n            (balance-y (get balance-y pool))\n            (total-shares (unwrap-panic (contract-call? .token-amm-pool-v2-01 get-balance-fixed (get pool-id pool) tx-sender)))\n            (shares (if (is-eq percent ONE_8) total-shares (mul-down total-shares percent)))\n            (total-supply (get total-supply pool))\n            (reduce-data (try! (get-position-given-burn token-x token-y factor shares)))\n            (dx (get dx reduce-data))\n            (dy (get dy reduce-data))\n            (pool-updated (merge pool { total-supply: (if (<= total-supply shares) u0 (- total-supply shares)), balance-x: (if (<= balance-x dx) u0 (- balance-x dx)), balance-y: (if (<= balance-y dy) u0 (- balance-y dy)) }))\n            (sender tx-sender))  \n\t\t\t\t(asserts! (not (is-blocklisted-or-default tx-sender)) ERR-BLOCKLISTED)\t\t\n        (asserts! (not (is-paused)) ERR-PAUSED)       \n        (asserts! (<= percent ONE_8) ERR-PERCENT-GREATER-THAN-ONE)\n        (as-contract (try! (contract-call? .amm-vault-v2-01 transfer-ft-two token-x-trait dx token-y-trait dy sender)))\n        (as-contract (try! (contract-call? .amm-registry-v2-01 update-pool token-x token-y factor pool-updated)))\n        (as-contract (try! (contract-call? .token-amm-pool-v2-01 burn-fixed (get pool-id pool) shares sender)))\n        (print { object: \"pool\", action: \"liquidity-removed\", data: pool-updated, dx: dx, dy: dy, token-x: token-x, token-y: token-y, sender: sender })\n        (ok {dx: dx, dy: dy})))\n(define-public (swap-x-for-y (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (factor uint) (dx uint) (min-dy (optional uint)))\n    (let (\n            (token-x (contract-of token-x-trait))\n            (token-y (contract-of token-y-trait))\n            (pool (try! (get-pool-details token-x token-y factor)))\n            (balance-x (get balance-x pool))\n            (balance-y (get balance-y pool))\n            (fee (mul-up dx (get fee-rate-x pool)))\n            (dx-net-fees (if (<= dx fee) u0 (- dx fee)))\n            (fee-rebate (mul-down fee (get fee-rebate pool)))\n            (dy (try! (get-y-given-x token-x token-y factor dx-net-fees)))                \n            (pool-updated (merge pool {\n                balance-x: (+ balance-x dx-net-fees fee-rebate),\n                balance-y: (if (<= balance-y dy) u0 (- balance-y dy)),\n                oracle-resilient: (if (get oracle-enabled pool) (try! (get-oracle-resilient token-x token-y factor)) u0)\n                }))\n            (sender tx-sender))\n\t\t\t\t(asserts! (not (is-blocklisted-or-default tx-sender)) ERR-BLOCKLISTED)\n        (asserts! (not (is-paused)) ERR-PAUSED)\n        (try! (check-pool-status token-x token-y factor))\n        (asserts! (> dx u0) ERR-INVALID-LIQUIDITY)\n        (asserts! (<= (div-down dy dx-net-fees) (get-price-internal balance-x balance-y factor)) ERR-INVALID-LIQUIDITY)\n        (asserts! (<= (default-to u0 min-dy) dy) ERR-EXCEEDS-MAX-SLIPPAGE)\n        (try! (contract-call? token-x-trait transfer-fixed dx sender .amm-vault-v2-01 none))\n        (and (> dy u0) (as-contract (try! (contract-call? .amm-vault-v2-01 transfer-ft token-y-trait dy sender))))\n        (as-contract (try! (contract-call? .amm-vault-v2-01 add-to-reserve token-x (- fee fee-rebate))))\n        (as-contract (try! (contract-call? .amm-registry-v2-01 update-pool token-x token-y factor pool-updated)))\n        (print { object: \"pool\", action: \"swap-x-for-y\", data: pool-updated, dx: dx, dy: dy, token-x: token-x, token-y: token-y, sender: sender, fee: fee, fee-rebate: fee-rebate })\n        (ok {dx: dx-net-fees, dy: dy})))\n(define-public (swap-y-for-x (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (factor uint) (dy uint) (min-dx (optional uint)))\n    (let (\n            (token-x (contract-of token-x-trait))\n            (token-y (contract-of token-y-trait))\n            (pool (try! (get-pool-details token-x token-y factor)))\n            (balance-x (get balance-x pool))\n            (balance-y (get balance-y pool))\n            (fee (mul-up dy (get fee-rate-y pool)))\n            (dy-net-fees (if (<= dy fee) u0 (- dy fee)))\n            (fee-rebate (mul-down fee (get fee-rebate pool)))\n            (dx (try! (get-x-given-y token-x token-y factor dy-net-fees)))\n            (pool-updated (merge pool {\n                balance-x: (if (<= balance-x dx) u0 (- balance-x dx)),\n                balance-y: (+ balance-y dy-net-fees fee-rebate),\n                oracle-resilient: (if (get oracle-enabled pool) (try! (get-oracle-resilient token-x token-y factor)) u0)\n                }))\n            (sender tx-sender))\n\t\t\t\t(asserts! (not (is-blocklisted-or-default tx-sender)) ERR-BLOCKLISTED)\n        (asserts! (not (is-paused)) ERR-PAUSED)\n        (try! (check-pool-status token-x token-y factor))\n        (asserts! (> dy u0) ERR-INVALID-LIQUIDITY)        \n        (asserts! (>= (div-down dy-net-fees dx) (get-price-internal balance-x balance-y factor)) ERR-INVALID-LIQUIDITY)\n        (asserts! (<= (default-to u0 min-dx) dx) ERR-EXCEEDS-MAX-SLIPPAGE)        \n        (try! (contract-call? token-y-trait transfer-fixed dy sender .amm-vault-v2-01 none))\n        (and (> dx u0) (as-contract (try! (contract-call? .amm-vault-v2-01 transfer-ft token-x-trait dx sender))))            \n        (as-contract (try! (contract-call? .amm-vault-v2-01 add-to-reserve token-y (- fee fee-rebate))))\n        (as-contract (try! (contract-call? .amm-registry-v2-01 update-pool token-x token-y factor pool-updated)))\n        (print { object: \"pool\", action: \"swap-y-for-x\", data: pool-updated, dx: dx, dy: dy, token-x: token-x, token-y: token-y, sender: sender, fee: fee, fee-rebate: fee-rebate })\n        (ok {dx: dx, dy: dy-net-fees})))\n(define-public (swap-helper (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (factor uint) (dx uint) (min-dy (optional uint)))\n\t(if (is-some (get-pool-exists (contract-of token-x-trait) (contract-of token-y-trait) factor))\n\t\t(ok (get dy (try! (swap-x-for-y token-x-trait token-y-trait factor dx min-dy))))\n\t\t(ok (get dx (try! (swap-y-for-x token-y-trait token-x-trait factor dx min-dy))))))\n(define-public (swap-helper-a (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (token-z-trait <ft-trait>) (factor-x uint) (factor-y uint) (dx uint) (min-dz (optional uint)))\n\t(swap-helper token-y-trait token-z-trait factor-y (try! (swap-helper token-x-trait token-y-trait factor-x dx none)) min-dz))\n(define-public (swap-helper-b\n\t\t(token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (token-z-trait <ft-trait>) (token-w-trait <ft-trait>)\n\t\t(factor-x uint) (factor-y uint) (factor-z uint)\n\t\t(dx uint) (min-dw (optional uint)))\n\t(swap-helper token-z-trait token-w-trait factor-z (try! (swap-helper-a token-x-trait token-y-trait token-z-trait factor-x factor-y dx none)) min-dw))\n(define-public (swap-helper-c\n\t\t(token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (token-z-trait <ft-trait>) (token-w-trait <ft-trait>) (token-v-trait <ft-trait>)\n\t\t(factor-x uint) (factor-y uint) (factor-z uint) (factor-w uint)\n\t\t(dx uint) (min-dv (optional uint)))\n\t(swap-helper-a token-z-trait token-w-trait token-v-trait factor-z factor-w (try! (swap-helper-a token-x-trait token-y-trait token-z-trait factor-x factor-y dx none)) min-dv))\n(define-private (get-price-internal (balance-x uint) (balance-y uint) (factor uint))\n    (if (>= factor (get-switch-threshold))\n        (div-down (+ (- ONE_8 factor) (mul-down factor balance-y)) (+ (- ONE_8 factor) (mul-down factor balance-x)))\n        (pow-down (div-down balance-y balance-x) factor)))\n(define-private (get-y-given-x-internal (balance-x uint) (balance-y uint) (t uint) (dx uint))\n    (if (>= t (get-switch-threshold))\n        (let (\n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t))))        \n            (div-down (+ (mul-down t-comp dx) (mul-down t (mul-down dx balance-y))) (+ t-comp (mul-down t (+ balance-x dx)))))\n        (let (\n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t)))\n                (t-comp-num-uncapped (div-up ONE_8 t-comp))\n                (t-comp-num (if (< t-comp-num-uncapped MILD_EXPONENT_BOUND) t-comp-num-uncapped MILD_EXPONENT_BOUND))            \n                (x-pow (pow-up balance-x t-comp))\n                (y-pow (pow-up balance-y t-comp))\n                (x-dx-pow (pow-down (+ balance-x dx) t-comp))\n                (add-term (+ x-pow y-pow))\n                (term (if (<= add-term x-dx-pow) u0 (- add-term x-dx-pow)))\n                (final-term (pow-up term t-comp-num)))        \n            (if (<= balance-y final-term) u0 (- balance-y final-term)))))\n(define-private (get-x-given-y-internal (balance-x uint) (balance-y uint) (t uint) (dy uint))\n    (if (>= t (get-switch-threshold))\n        (let (\n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t))))        \n            (div-down (+ (mul-down t-comp dy) (mul-down t (mul-down dy balance-x))) (+ t-comp (mul-down t (+ balance-y dy)))))  \n        (let (          \n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t)))\n                (t-comp-num-uncapped (div-up ONE_8 t-comp))\n                (t-comp-num (if (< t-comp-num-uncapped MILD_EXPONENT_BOUND) t-comp-num-uncapped MILD_EXPONENT_BOUND))            \n                (x-pow (pow-up balance-x t-comp))\n                (y-pow (pow-up balance-y t-comp))\n                (y-dy-pow (pow-down (+ balance-y dy) t-comp))\n                (add-term (+ x-pow y-pow))\n                (term (if (<= add-term y-dy-pow) u0 (- add-term y-dy-pow)))\n                (final-term (pow-up term t-comp-num)))\n            (if (<= balance-x final-term) u0 (- balance-x final-term)))))\n(define-private (get-y-in-given-x-out-internal (balance-x uint) (balance-y uint) (t uint) (dx uint))    \n    (if (>= t (get-switch-threshold))\n        (let (\n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t))))\n            (div-down (+ (mul-down t-comp dx) (mul-down t (mul-down dx balance-y))) (+ t-comp (mul-down t (- balance-x dx)))))\n        (let (\n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t)))\n                (t-comp-num-uncapped (div-down ONE_8 t-comp))\n                (t-comp-num (if (< t-comp-num-uncapped MILD_EXPONENT_BOUND) t-comp-num-uncapped MILD_EXPONENT_BOUND))            \n                (x-pow (pow-down balance-x t-comp))\n                (y-pow (pow-down balance-y t-comp))\n                (x-dx-pow (pow-up (if (<= balance-x dx) u0 (- balance-x dx)) t-comp))\n                (add-term (+ x-pow y-pow))\n                (term (if (<= add-term x-dx-pow) u0 (- add-term x-dx-pow)))\n                (final-term (pow-down term t-comp-num)))\n            (if (<= final-term balance-y) u0 (- final-term balance-y)))))\n(define-private (get-x-in-given-y-out-internal (balance-x uint) (balance-y uint) (t uint) (dy uint))\n    (if (>= t (get-switch-threshold))\n        (let (          \n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t))))\n            (div-down (+ (mul-down t-comp dy) (mul-down t (mul-down dy balance-x))) (+ t-comp (mul-down t (- balance-y dy)))))\n        (let (          \n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t)))\n                (t-comp-num-uncapped (div-down ONE_8 t-comp))\n                (t-comp-num (if (< t-comp-num-uncapped MILD_EXPONENT_BOUND) t-comp-num-uncapped MILD_EXPONENT_BOUND))            \n                (x-pow (pow-down balance-x t-comp))\n                (y-pow (pow-down balance-y t-comp))\n                (y-dy-pow (pow-up (if (<= balance-y dy) u0 (- balance-y dy)) t-comp))\n                (add-term (+ x-pow y-pow))\n                (term (if (<= add-term y-dy-pow) u0 (- add-term y-dy-pow)))\n                (final-term (pow-down term t-comp-num)))\n            (if (<= final-term balance-x) u0 (- final-term balance-x)))))\n(define-private (get-x-given-price-internal (balance-x uint) (balance-y uint) (t uint) (price uint))\n    (if (>= t (get-switch-threshold))\n        (let (\n                (power (pow-down (div-down (get-price-internal balance-x balance-y t) price) u50000000)))\n            (mul-down balance-x (if (<= power ONE_8) u0 (- power ONE_8)))) \n        (let (\n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t)))\n                (t-comp-num-uncapped (div-down ONE_8 t-comp))\n                (t-comp-num (if (< t-comp-num-uncapped MILD_EXPONENT_BOUND) t-comp-num-uncapped MILD_EXPONENT_BOUND))            \n                (numer (+ ONE_8 (pow-down (get-price-internal balance-x balance-y t) (div-down t-comp t))))\n                (denom (+ ONE_8 (pow-down price (div-down t-comp t))))\n                (lead-term (pow-down (div-down numer denom) t-comp-num)))\n            (if (<= lead-term ONE_8) u0 (mul-up balance-x (- lead-term ONE_8))))))\n(define-private (get-y-given-price-internal (balance-x uint) (balance-y uint) (t uint) (price uint))\n    (if (>= t (get-switch-threshold))\n        (let (            \n                (power (pow-down (div-down price (get-price-internal balance-x balance-y t)) u50000000)))\n            (mul-down balance-y (if (<= power ONE_8) u0 (- power ONE_8))))\n        (let (\n                (t-comp (if (<= ONE_8 t) u0 (- ONE_8 t)))\n                (t-comp-num-uncapped (div-down ONE_8 t-comp))\n                (t-comp-num (if (< t-comp-num-uncapped MILD_EXPONENT_BOUND) t-comp-num-uncapped MILD_EXPONENT_BOUND))            \n                (numer (+ ONE_8 (pow-down (get-price-internal balance-x balance-y t) (div-down t-comp t))))\n                (denom (+ ONE_8 (pow-down price (div-down t-comp t))))\n                (lead-term (pow-down (div-down numer denom) t-comp-num)))\n            (if (<= ONE_8 lead-term) u0 (mul-up balance-y (- ONE_8 lead-term))))))\n(define-private (get-token-given-position-internal (balance-x uint) (balance-y uint) (t uint) (total-supply uint) (dx uint) (dy uint))\n\t(if (is-eq total-supply u0)\n\t\t{token: (get-invariant dx dy t), dy: dy}\n\t\t{token: (div-down (mul-down total-supply dx) balance-x), dy: (div-down (mul-down balance-y dx) balance-x)}))\n(define-private (get-position-given-mint-internal (balance-x uint) (balance-y uint) (t uint) (total-supply uint) (token-amount uint))\n\t(let (\n\t\t\t(token-div-supply (div-down token-amount total-supply))\n\t\t)\n\t\t{dx: (mul-down balance-x token-div-supply), dy: (mul-down balance-y token-div-supply)}))\n(define-private (get-position-given-burn-internal (balance-x uint) (balance-y uint) (t uint) (total-supply uint) (token-amount uint))\n\t(get-position-given-mint-internal balance-x balance-y t total-supply token-amount))\n(define-constant ONE_8 u100000000) ;; 8 decimal places\n(define-constant MAX_POW_RELATIVE_ERROR u4)\n(define-private (mul-down (a uint) (b uint))\n\t(/ (* a b) ONE_8))\n(define-private (mul-up (a uint) (b uint))\n\t(let (\n\t\t\t(product (* a b))\n\t\t)\n\t\t(if (is-eq product u0) u0 (+ u1 (/ (- product u1) ONE_8)))))\n(define-private (div-down (a uint) (b uint))\n\t(if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n(define-private (div-up (a uint) (b uint))\n\t(if (is-eq a u0) u0 (+ u1 (/ (- (* a ONE_8) u1) b))))\n(define-private (pow-down (a uint) (b uint))\n\t(let (\n\t\t\t(raw (unwrap-panic (pow-fixed a b)))\n\t\t\t(max-error (+ u1 (mul-up raw MAX_POW_RELATIVE_ERROR)))\n\t\t)\n\t\t(if (< raw max-error) u0 (- raw max-error))))\n(define-private (pow-up (a uint) (b uint))\n\t(let (\n\t\t\t(raw (unwrap-panic (pow-fixed a b)))\n\t\t\t(max-error (+ u1 (mul-up raw MAX_POW_RELATIVE_ERROR)))\n\t\t)\n\t\t(+ raw max-error)))\n(define-constant UNSIGNED_ONE_8 (pow 10 8))\n(define-constant MAX_NATURAL_EXPONENT (* 69 UNSIGNED_ONE_8))\n(define-constant MIN_NATURAL_EXPONENT (* -18 UNSIGNED_ONE_8))\n(define-constant MILD_EXPONENT_BOUND (/ (pow u2 u126) (to-uint UNSIGNED_ONE_8)))\n(define-constant x_a_list_no_deci (list {x_pre: 6400000000, a_pre: 62351490808116168829, use_deci: false} ))\n(define-constant x_a_list (list\n\t{x_pre: 3200000000, a_pre: 78962960182680695161, use_deci: true} ;; x2 = 2^5, a2 = e^(x2)\n\t{x_pre: 1600000000, a_pre: 888611052050787, use_deci: true} ;; x3 = 2^4, a3 = e^(x3)\n\t{x_pre: 800000000, a_pre: 298095798704, use_deci: true} ;; x4 = 2^3, a4 = e^(x4)\n\t{x_pre: 400000000, a_pre: 5459815003, use_deci: true} ;; x5 = 2^2, a5 = e^(x5)\n\t{x_pre: 200000000, a_pre: 738905610, use_deci: true} ;; x6 = 2^1, a6 = e^(x6)\n\t{x_pre: 100000000, a_pre: 271828183, use_deci: true} ;; x7 = 2^0, a7 = e^(x7)\n\t{x_pre: 50000000, a_pre: 164872127, use_deci: true} ;; x8 = 2^-1, a8 = e^(x8)\n\t{x_pre: 25000000, a_pre: 128402542, use_deci: true} ;; x9 = 2^-2, a9 = e^(x9)\n\t{x_pre: 12500000, a_pre: 113314845, use_deci: true} ;; x10 = 2^-3, a10 = e^(x10)\n\t{x_pre: 6250000, a_pre: 106449446, use_deci: true} ;; x11 = 2^-4, a11 = e^x(11)\n))\n(define-constant ERR-X-OUT-OF-BOUNDS (err u5009))\n(define-constant ERR-Y-OUT-OF-BOUNDS (err u5010))\n(define-constant ERR-PRODUCT-OUT-OF-BOUNDS (err u5011))\n(define-constant ERR-INVALID-EXPONENT (err u5012))\n(define-constant ERR-OUT-OF-BOUNDS (err u5013))\n(define-private (ln-priv (a int))\n\t(let (\n\t\t\t(a_sum_no_deci (fold accumulate_division x_a_list_no_deci {a: a, sum: 0}))\n\t\t\t(a_sum (fold accumulate_division x_a_list {a: (get a a_sum_no_deci), sum: (get sum a_sum_no_deci)}))\n\t\t\t(out_a (get a a_sum))\n\t\t\t(out_sum (get sum a_sum))\n\t\t\t(z (/ (* (- out_a UNSIGNED_ONE_8) UNSIGNED_ONE_8) (+ out_a UNSIGNED_ONE_8)))\n\t\t\t(z_squared (/ (* z z) UNSIGNED_ONE_8))\n\t\t\t(div_list (list 3 5 7 9 11))\n\t\t\t(num_sum_zsq (fold rolling_sum_div div_list {num: z, seriesSum: z, z_squared: z_squared}))\n\t\t\t(seriesSum (get seriesSum num_sum_zsq))\n\t\t)\n\t\t(+ out_sum (* seriesSum 2))))\n(define-private (accumulate_division (x_a_pre (tuple (x_pre int) (a_pre int) (use_deci bool))) (rolling_a_sum (tuple (a int) (sum int))))\n\t(let (\n\t\t\t(a_pre (get a_pre x_a_pre))\n\t\t\t(x_pre (get x_pre x_a_pre))\n\t\t\t(use_deci (get use_deci x_a_pre))\n\t\t\t(rolling_a (get a rolling_a_sum))\n\t\t\t(rolling_sum (get sum rolling_a_sum))\n\t\t)\n\t\t(if (>= rolling_a (if use_deci a_pre (* a_pre UNSIGNED_ONE_8)))\n\t\t\t\t{a: (/ (* rolling_a (if use_deci UNSIGNED_ONE_8 1)) a_pre), sum: (+ rolling_sum x_pre)}\n\t\t\t\t{a: rolling_a, sum: rolling_sum})))\n(define-private (rolling_sum_div (n int) (rolling (tuple (num int) (seriesSum int) (z_squared int))))\n\t(let (\n\t\t\t(rolling_num (get num rolling))\n\t\t\t(rolling_sum (get seriesSum rolling))\n\t\t\t(z_squared (get z_squared rolling))\n\t\t\t(next_num (/ (* rolling_num z_squared) UNSIGNED_ONE_8))\n\t\t\t(next_sum (+ rolling_sum (/ next_num n)))\n\t\t)\n\t\t{num: next_num, seriesSum: next_sum, z_squared: z_squared}))\n(define-private (pow-priv (x uint) (y uint))\n    (let (\n            (x-int (to-int x))\n            (y-int (to-int y))\n            (lnx (ln-priv x-int))\n            (logx-times-y (/ (* lnx y-int) UNSIGNED_ONE_8)))\n        (asserts! (and (<= MIN_NATURAL_EXPONENT logx-times-y) (<= logx-times-y MAX_NATURAL_EXPONENT)) ERR-PRODUCT-OUT-OF-BOUNDS)\n        (ok (to-uint (try! (exp-fixed logx-times-y))))))\n(define-private (exp-pos (x int))\n\t(begin\n\t\t(asserts! (and (<= 0 x) (<= x MAX_NATURAL_EXPONENT)) ERR-INVALID-EXPONENT)\n\t\t(let (\n\t\t\t\t(x_product_no_deci (fold accumulate_product x_a_list_no_deci {x: x, product: 1}))\n\t\t\t\t(x_adj (get x x_product_no_deci))\n\t\t\t\t(firstAN (get product x_product_no_deci))\n\t\t\t\t(x_product (fold accumulate_product x_a_list {x: x_adj, product: UNSIGNED_ONE_8}))\n\t\t\t\t(product_out (get product x_product))\n\t\t\t\t(x_out (get x x_product))\n\t\t\t\t(seriesSum (+ UNSIGNED_ONE_8 x_out))\n\t\t\t\t(div_list (list 2 3 4 5 6 7 8 9 10 11 12))\n\t\t\t\t(term_sum_x (fold rolling_div_sum div_list {term: x_out, seriesSum: seriesSum, x: x_out}))\n\t\t\t\t(sum (get seriesSum term_sum_x)))\n\t\t\t(ok (* (/ (* product_out sum) UNSIGNED_ONE_8) firstAN)))))\n(define-private (accumulate_product (x_a_pre (tuple (x_pre int) (a_pre int) (use_deci bool))) (rolling_x_p (tuple (x int) (product int))))\n\t(let (\n\t\t\t(x_pre (get x_pre x_a_pre))\n\t\t\t(a_pre (get a_pre x_a_pre))\n\t\t\t(use_deci (get use_deci x_a_pre))\n\t\t\t(rolling_x (get x rolling_x_p))\n\t\t\t(rolling_product (get product rolling_x_p)))\n\t\t(if (>= rolling_x x_pre)\n\t\t\t{x: (- rolling_x x_pre), product: (/ (* rolling_product a_pre) (if use_deci UNSIGNED_ONE_8 1))}\n\t\t\t{x: rolling_x, product: rolling_product})))\n(define-private (rolling_div_sum (n int) (rolling (tuple (term int) (seriesSum int) (x int))))\n\t(let (\n\t\t\t(rolling_term (get term rolling))\n\t\t\t(rolling_sum (get seriesSum rolling))\n\t\t\t(x (get x rolling))\n\t\t\t(next_term (/ (/ (* rolling_term x) UNSIGNED_ONE_8) n))\n\t\t\t(next_sum (+ rolling_sum next_term))\n\t\t)\n\t\t{term: next_term, seriesSum: next_sum, x: x}))\n(define-private (pow-fixed (x uint) (y uint))\n\t(begin\n\t\t(asserts! (< x (pow u2 u127)) ERR-X-OUT-OF-BOUNDS)\n\t\t(asserts! (< y MILD_EXPONENT_BOUND) ERR-Y-OUT-OF-BOUNDS)\n\t\t(if (is-eq y u0)\n\t\t\t(ok (to-uint UNSIGNED_ONE_8))\n\t\t\t(if (is-eq x u0) (ok u0) (pow-priv x y)))))\n(define-private (exp-fixed (x int))\n\t(begin\n\t\t(asserts! (and (<= MIN_NATURAL_EXPONENT x) (<= x MAX_NATURAL_EXPONENT)) ERR-INVALID-EXPONENT)\n\t\t(if (< x 0) (ok (/ (* UNSIGNED_ONE_8 UNSIGNED_ONE_8) (try! (exp-pos (* -1 x))))) (exp-pos x))))\n(define-private (log-fixed (arg int) (base int))\n\t(let (\n\t\t\t(logBase (* (ln-priv base) UNSIGNED_ONE_8))\n\t\t\t(logArg (* (ln-priv arg) UNSIGNED_ONE_8)))\n\t\t(ok (/ (* logArg UNSIGNED_ONE_8) logBase))))\n(define-private (ln-fixed (a int))\n\t(begin\n\t\t(asserts! (> a 0) ERR-OUT-OF-BOUNDS)\n\t\t(if (< a UNSIGNED_ONE_8) (ok (- 0 (ln-priv (/ (* UNSIGNED_ONE_8 UNSIGNED_ONE_8) a)))) (ok (ln-priv a)))))",
    "analysis": {
      "summary": "This contract implements an Automated Market Maker (AMM) for the Stacks blockchain, enabling liquidity provision, token swaps, and dynamic pricing based on supply and demand.",
      "explanation": "The contract is a comprehensive implementation of an AMM, leveraging Clarity's capabilities for decentralized finance (DeFi) applications. It includes features such as liquidity pools, swapping mechanisms, and oracle integration for price feeds. Key functionalities are detailed below:\n\n- **Liquidity Pool Management**: Functions like `create-pool` and `add-to-position` allow users to create new liquidity pools and add liquidity to existing ones, respectively. The contract interacts with a registry contract (`.amm-registry-v2-01`) to store and manage pool details.\n\n- **Swapping Tokens**: Functions `swap-x-for-y` and `swap-y-for-x` enable users to swap tokens, adjusting pool balances and ensuring price updates according to the constant product formula. Swaps consider transaction fees and slippage.\n\n- **Oracle Integration**: The contract can interact with oracles for price feeds (`get-oracle-instant`, `get-oracle-average`), allowing for more accurate pricing and the possibility to integrate external data into the AMM's operations.\n\n- **Governance and Security**: Features like `pause` and `set-*` functions allow for governance actions, including pausing the contract and adjusting pool parameters. Security checks prevent unauthorized access and actions, such as blocklisting addresses and ensuring transactions are sent by authorized entities.\n\n- **Mathematical Operations**: Extensive use of mathematical operations for pricing and liquidity calculations, including custom implementations of logarithmic and exponential functions, showcases Clarity's capability to handle complex financial logic.\n\nOverall, the contract is a sophisticated example of a DeFi application on Stacks, demonstrating advanced features like liquidity management, token swapping, and integration with external data sources.",
      "tags": [
        "DeFi",
        "AMM",
        "Liquidity-Pool",
        "Token-Swap",
        "Oracle",
        "Governance"
      ]
    }
  },
  {
    "rank": 2,
    "contract": "SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.path-apply_staging",
    "calls": 23235,
    "source": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n\n(use-trait share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n\n(use-trait univ2v2-pool-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait)\n(use-trait univ2v2-fees-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait)\n\n(use-trait curve-pool-trait   'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-pool-trait_v1_0_0.curve-pool-trait)\n(use-trait curve-fees-trait   'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-fees-trait_v1_0_0.curve-fees-trait)\n\n(use-trait ststx-pool-trait   'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.curve-pool-trait_ststx.curve-pool-trait)\n(use-trait ststx-proxy-trait  'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.curve-proxy-trait_ststx.curve-proxy-trait)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; max 2047 edge tuples\n(define-constant MAX-EDGES    u500) ;;effectively max nr of pools (stx -> *)\n(define-constant MAX-PATH-LEN u4)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; pool types\n(define-constant UNIV2   \"u\")\n(define-constant UNIV2V2 \"v\")\n(define-constant CURVE   \"c\")\n(define-constant USDH    \"h\")\n(define-constant STSTX   \"s\")\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; edges\n(define-read-only\n  (is-univ2 (edge {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool}))\n  (is-eq (get a edge) UNIV2))\n(define-read-only\n  (is-univ2v2 (edge {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool}))\n  (is-eq (get a edge) UNIV2V2))\n(define-read-only\n  (is-curve (edge {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool}))\n  (is-eq (get a edge) CURVE))\n(define-read-only\n (is-usdh (edge {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool}))\n (is-eq (get a edge) USDH))\n(define-read-only\n  (is-ststx (edge {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool}))\n  (is-eq (get a edge) STSTX))\n\n(define-read-only\n (id (edge {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool}))\n (get c edge))\n(define-read-only\n (from-is-token0 (edge {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool}))\n (get f edge))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public\n  (apply\n   (path   (list 4 {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool}))\n   (amt-in uint)\n\n   ;; ctx\n   (token1         (optional <ft-trait>))\n   (token2         (optional <ft-trait>))\n   (token3         (optional <ft-trait>))\n   (token4         (optional <ft-trait>))\n   (token5         (optional <ft-trait>))\n\n   ;; v1\n   (share-fee-to   (optional <share-fee-to-trait>))\n\n   ;; v2\n   (univ2v2-pool-1 (optional <univ2v2-pool-trait>))\n   (univ2v2-pool-2 (optional <univ2v2-pool-trait>))\n   (univ2v2-pool-3 (optional <univ2v2-pool-trait>))\n   (univ2v2-pool-4 (optional <univ2v2-pool-trait>))\n\n   (univ2v2-fees-1 (optional <univ2v2-fees-trait>))\n   (univ2v2-fees-2 (optional <univ2v2-fees-trait>))\n   (univ2v2-fees-3 (optional <univ2v2-fees-trait>))\n   (univ2v2-fees-4 (optional <univ2v2-fees-trait>))\n\n   (curve-pool-1   (optional <curve-pool-trait>))\n   (curve-pool-2   (optional <curve-pool-trait>))\n   (curve-pool-3   (optional <curve-pool-trait>))\n   (curve-pool-4   (optional <curve-pool-trait>))\n\n   (curve-fees-1   (optional <curve-fees-trait>))\n   (curve-fees-2   (optional <curve-fees-trait>))\n   (curve-fees-3   (optional <curve-fees-trait>))\n   (curve-fees-4   (optional <curve-fees-trait>))\n\n   (ststx-pool-1   (optional <ststx-pool-trait>))\n   (ststx-pool-2   (optional <ststx-pool-trait>))\n   (ststx-pool-3   (optional <ststx-pool-trait>))\n   (ststx-pool-4   (optional <ststx-pool-trait>))\n\n   (ststx-proxy-1   (optional <ststx-proxy-trait>))\n   (ststx-proxy-2   (optional <ststx-proxy-trait>))\n   (ststx-proxy-3   (optional <ststx-proxy-trait>))\n   (ststx-proxy-4   (optional <ststx-proxy-trait>))\n   )\n  (let ((swap1 (try! (swap (element-at? path u0) amt-in\n                           token1 token2\n                           share-fee-to\n                           univ2v2-pool-1 univ2v2-fees-1\n                           curve-pool-1 curve-fees-1\n                           ststx-pool-1 ststx-proxy-1\n                           )))\n        (swap2 (try! (swap (element-at? path u1) (get amt-out swap1)\n                           token2 token3\n                           share-fee-to\n                           univ2v2-pool-2 univ2v2-fees-2\n                           curve-pool-2 curve-fees-2\n                           ststx-pool-2 ststx-proxy-2\n                           )))\n        (swap3 (try! (swap (element-at? path u2) (get amt-out swap2)\n                           token3 token4\n                           share-fee-to\n                           univ2v2-pool-3 univ2v2-fees-3\n                           curve-pool-3 curve-fees-3\n                           ststx-pool-3 ststx-proxy-3\n                           )))\n        (swap4 (try! (swap (element-at? path u3) (get amt-out swap3)\n                           token4 token5\n                           share-fee-to\n                           univ2v2-pool-4 univ2v2-fees-4\n                           curve-pool-4 curve-fees-4\n                           ststx-pool-4 ststx-proxy-4\n                           )))\n        )\n    (ok\n    {swap1: swap1,\n     swap2: swap2,\n     swap3: swap3,\n     swap4: swap4,\n    }) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-private\n  (swap\n   (edge   (optional {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool}))\n   (amt-in uint)\n\n   (token-in     (optional <ft-trait>))\n   (token-out    (optional <ft-trait>))\n   (share-fee-to (optional <share-fee-to-trait>))\n   (univ2v2-pool (optional <univ2v2-pool-trait>))\n   (univ2v2-fees (optional <univ2v2-fees-trait>))\n   (curve-pool   (optional <curve-pool-trait>))\n   (curve-fees   (optional <curve-fees-trait>))\n   (ststx-pool   (optional <ststx-pool-trait>))\n   (ststx-proxy  (optional <ststx-proxy-trait>))\n\n   )\n  (match\n   edge\n   e\n    (if (is-univ2   e) (swap-univ2   e amt-in\n                                     (unwrap-panic token-in) (unwrap-panic token-out)\n                                     (unwrap-panic share-fee-to))\n    (if (is-univ2v2 e) (swap-univ2v2 e amt-in\n                                     (unwrap-panic token-in) (unwrap-panic token-out)\n                                     (unwrap-panic univ2v2-pool) (unwrap-panic univ2v2-fees))\n    (if (is-curve   e) (swap-curve   e amt-in\n                                     (unwrap-panic token-in) (unwrap-panic token-out)\n                                     (unwrap-panic curve-pool) (unwrap-panic curve-fees))\n    (if (is-usdh    e) (swap-curve   e amt-in\n                                     (unwrap-panic token-in) (unwrap-panic token-out)\n                                     (unwrap-panic curve-pool) (unwrap-panic curve-fees))\n    (if (is-ststx   e) (swap-ststx   e amt-in\n                                     (unwrap-panic token-in) (unwrap-panic token-out)\n                                     (unwrap-panic ststx-pool) (unwrap-panic curve-fees)\n                                     (unwrap-panic ststx-proxy))\n\n    (err u0))))))\n   (ok {amt-in: amt-in, amt-out: amt-in}) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public\n  (swap-univ2\n   (edge         {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool})\n   (amt-in       uint)\n   (token-in     <ft-trait>)\n   (token-out    <ft-trait>)\n   (share-fee-to <share-fee-to-trait>) )\n  (let ((res\n         (try!\n          (contract-call?\n           'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router\n           swap-exact-tokens-for-tokens\n           (id edge)\n           (if (from-is-token0 edge) token-in token-out)\n           (if (from-is-token0 edge) token-out token-in)\n           token-in\n           token-out\n           share-fee-to\n           amt-in\n           u1 ;;amt-out-min\n           ))))\n    (ok {amt-in: amt-in, amt-out: (get amt-out res)}) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public\n  (swap-univ2v2\n   (edge         {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool})\n   (amt-in       uint)\n   (token-in     <ft-trait>)\n   (token-out    <ft-trait>)\n   (univ2v2-pool <univ2v2-pool-trait>)\n   (univ2v2-fees <univ2v2-fees-trait>)\n   )\n  (let ((res\n         (try!\n          (contract-call?\n           univ2v2-pool\n           swap\n           token-in\n           token-out\n           univ2v2-fees\n           amt-in\n           u1 ;;amt-out-min\n           ))))\n    (ok {amt-in: amt-in, amt-out: (get amt-out res)}) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public\n  (swap-curve\n   (edge         {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool})\n   (amt-in       uint)\n   (token-in     <ft-trait>)\n   (token-out    <ft-trait>)\n   (curve-pool   <curve-pool-trait>)\n   (curve-fees   <curve-fees-trait>)\n   )\n  (let ((res (try! (contract-call?\n                      curve-pool\n                      swap\n                      token-in\n                      token-out\n                      curve-fees\n                      amt-in\n                      u1 ;;amt-out-min\n                      ))))\n    (ok {amt-in: amt-in, amt-out: (get amt-out res)}) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public\n (swap-ststx\n  (edge         {a:(string-ascii 1),b:principal,c:uint,d:principal,e:principal,f:bool})\n  (amt-in       uint)\n  (token-in     <ft-trait>)\n  (token-out    <ft-trait>)\n  (ststx-pool   <ststx-pool-trait>)\n  (curve-fees   <curve-fees-trait>)\n  (ststx-proxy  <ststx-proxy-trait>)\n  )\n (let ((res (try! (contract-call?\n                   ststx-pool\n                   swap\n                   token-in\n                   token-out\n                   curve-fees\n                   ststx-proxy\n                   amt-in\n                   u1 ;;amt-out-min\n                   ))))\n   (ok {amt-in: amt-in, amt-out: (get amt-out res)}) ))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract facilitates multi-step token swaps across different liquidity pool types on the Stacks blockchain.",
      "explanation": "The contract integrates with multiple liquidity pool types (Uniswap V2, Uniswap V2 V2, Curve, USDH, and STSTX) to perform token swaps. It defines a maximum path length for swaps and identifies each pool type with a unique identifier. The contract's core functionality allows for constructing a swap path across different pool types and executing the swap in a sequential manner, handling each pool's specific swap logic. The contract uses traits to interact with external contracts representing different pool types and fee models, ensuring flexibility and composability.\n\n- The contract starts by defining constants for maximum edges and path length, followed by identifiers for each pool type <L7-19>.\n- It then checks the type of each edge in a swap path to determine the pool type <L22-44>.\n- The `apply` function orchestrates the swap across up to four different pools by sequentially calling the `swap` function with the appropriate parameters based on the path provided <L46-79>.\n- The `swap` function <L82-111> delegates to specific swap functions based on the pool type. It uses pattern matching to determine the correct swap function to call and passes along the necessary parameters for each pool type.\n- Each pool type has a dedicated swap function (`swap-univ2`, `swap-univ2v2`, `swap-curve`, `swap-ststx`) that interacts with the corresponding external contract to execute the swap. These functions handle the specifics of each pool, such as token in/out and minimum amount out <L114-163>.\n\nThis contract exemplifies the use of Clarity's trait system for interoperability with external contracts and showcases pattern matching for control flow. It also demonstrates how to structure complex, multi-step operations in a smart contract, including error handling and external contract interactions.",
      "tags": [
        "DeFi",
        "swap",
        "liquidity-pool",
        "interoperability",
        "token-swap"
      ]
    }
  },
  {
    "rank": 3,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.wrapper-alex-v-2-1",
    "calls": 20083,
    "source": "\n;; wrapper-alex-v-2-1\n\n(use-trait ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n\n(define-public (swap-helper\n    (token-x-trait <ft-trait>) (token-y-trait <ft-trait>)\n    (factor uint)\n    (dx uint) (min-dy (optional uint))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper\n                  token-x-trait\n                  token-y-trait\n                  factor\n                  dx min-dy)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-public (swap-helper-a\n    (token-x-trait <ft-trait>) (token-y-trait <ft-trait>)\n    (token-z-trait <ft-trait>)\n    (factor-x uint) (factor-y uint)\n    (dx uint) (min-dz (optional uint))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a\n                  token-x-trait token-y-trait\n                  token-z-trait\n                  factor-x factor-y\n                  dx min-dz)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-public (swap-helper-b\n    (token-x-trait <ft-trait>) (token-y-trait <ft-trait>)\n    (token-z-trait <ft-trait>) (token-w-trait <ft-trait>)\n    (factor-x uint) (factor-y uint) (factor-z uint)\n    (dx uint) (min-dw (optional uint))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-b\n                  token-x-trait token-y-trait\n                  token-z-trait token-w-trait\n                  factor-x factor-y factor-z\n                  dx min-dw)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-public (swap-helper-c\n    (token-x-trait <ft-trait>) (token-y-trait <ft-trait>)\n    (token-z-trait <ft-trait>) (token-w-trait <ft-trait>)\n    (token-v-trait <ft-trait>)\n    (factor-x uint) (factor-y uint) (factor-z uint) (factor-w uint)\n    (dx uint) (min-dv (optional uint))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-c\n                  token-x-trait token-y-trait\n                  token-z-trait token-w-trait\n                  token-v-trait\n                  factor-x factor-y factor-z factor-w\n                  dx min-dv)))\n  )\n    (ok swap-a)\n  )\n)\n",
    "analysis": {
      "summary": "This contract provides wrapper functions for swapping tokens through an automated market maker (AMM) pool on the Stacks blockchain.",
      "explanation": "The contract defines a series of public functions (`swap-helper`, `swap-helper-a`, `swap-helper-b`, `swap-helper-c`) that interface with an AMM pool contract to facilitate token swaps. Each function is designed to handle different swap scenarios, ranging from a simple two-token swap to more complex multi-token swaps. The contract uses the SIP-010 trait for fungible tokens to ensure that the tokens being swapped conform to the standard interface for fungible tokens on Stacks.\n\n- The `swap-helper` function <L5-14> allows for a basic swap between two tokens (X and Y) with a specified `factor` and amount (`dx`) to swap, and an optional minimum amount of token Y (`min-dy`) to receive.\n- `swap-helper-a` <L16-27> extends this by allowing a swap involving three tokens (X, Y, and Z), where tokens X and Y are swapped for Z, using two factors (`factor-x` and `factor-y`) to determine the swap rates.\n- `swap-helper-b` <L29-42> further extends the functionality to include a fourth token (W), allowing for a sequence of swaps across four tokens (X, Y, Z, W) with three factors guiding the swap rates.\n- Finally, `swap-helper-c` <L44-59> supports swaps involving five tokens (X, Y, Z, W, V), with each token swap being influenced by its respective factor (`factor-x` to `factor-w`).\n\nEach function performs a `contract-call?` to the specified AMM pool contract (`SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01`), passing the necessary parameters for the swap. The `try!` Clarity construct is used to attempt these calls, which will cause the transaction to abort if the called function returns an error. If the swap is successful, the function returns an `ok` response with the result of the swap.",
      "tags": [
        "DeFi",
        "AMM",
        "Token Swap",
        "SIP-010",
        "Fungible Token"
      ]
    }
  },
  {
    "rank": 4,
    "contract": "SP2QEZ06AGJ3RKJPBV14SY1V5BBFNAW33D96YPGZF.BNS-V2",
    "calls": 16340,
    "source": ";; title: BNS-V2\n;; version: V-2\n;; summary: Updated BNS contract, handles the creation of new namespaces and new names on each namespace\n\n;; traits\n;; (new) Import SIP-09 NFT trait \n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n;; (new) Import a custom commission trait for handling commissions for NFT marketplaces functions\n(use-trait commission-trait .commission-trait.commission)\n\n;; token definition\n;; (new) Define the non-fungible token (NFT) called BNS-V2 with unique identifiers as unsigned integers\n(define-non-fungible-token BNS-V2 uint)\n;; Time-to-live (TTL) constants for namespace preorders and name preorders, and the duration for name grace period.\n;; The TTL for namespace and names preorders. (1 day)\n(define-constant PREORDER-CLAIMABILITY-TTL u144) \n;; The duration after revealing a namespace within which it must be launched. (1 year)\n(define-constant NAMESPACE-LAUNCHABILITY-TTL u52595) \n;; The grace period duration for name renewals post-expiration. (34 days)\n(define-constant NAME-GRACE-PERIOD-DURATION u5000) \n;; (new) The length of the hash should match this\n(define-constant HASH160LEN u20)\n;; Defines the price tiers for namespaces based on their lengths.\n(define-constant NAMESPACE-PRICE-TIERS (list\n    u640000000000\n    u64000000000 u64000000000 \n    u6400000000 u6400000000 u6400000000 u6400000000 \n    u640000000 u640000000 u640000000 u640000000 u640000000 u640000000 u640000000 u640000000 u640000000 u640000000 u640000000 u640000000 u640000000)\n)\n\n;; Only authorized caller to flip the switch and update URI\n(define-constant DEPLOYER tx-sender)\n\n;; (new) Var to store the token URI, allowing for metadata association with the NFT\n(define-data-var token-uri (string-ascii 256) \"ipfs://QmUQY1aZ799SPRaNBFqeCvvmZ4fTQfZvWHauRvHAukyQDB\")\n\n(define-public (update-token-uri (new-token-uri (string-ascii 256)))\n    (ok \n        (begin \n            (asserts! (is-eq contract-caller DEPLOYER) ERR-NOT-AUTHORIZED) \n            (var-set token-uri new-token-uri)\n        )\n    )\n)\n\n(define-data-var contract-uri (string-ascii 256) \"ipfs://QmWKTZEMQNWngp23i7bgPzkineYC9LDvcxYkwNyVQVoH8y\")\n\n(define-public (update-contract-uri (new-contract-uri (string-ascii 256)))\n    (ok \n        (begin \n            (asserts! (is-eq contract-caller DEPLOYER) ERR-NOT-AUTHORIZED) \n            (var-set token-uri new-contract-uri)\n        )\n    )\n)\n\n;; errors\n(define-constant ERR-UNWRAP (err u101))\n(define-constant ERR-NOT-AUTHORIZED (err u102))\n(define-constant ERR-NOT-LISTED (err u103))\n(define-constant ERR-WRONG-COMMISSION (err u104))\n(define-constant ERR-LISTED (err u105))\n(define-constant ERR-NO-NAME (err u106))\n(define-constant ERR-HASH-MALFORMED (err u107))\n(define-constant ERR-STX-BURNT-INSUFFICIENT (err u108))\n(define-constant ERR-PREORDER-NOT-FOUND (err u109))\n(define-constant ERR-CHARSET-INVALID (err u110))\n(define-constant ERR-NAMESPACE-ALREADY-EXISTS (err u111))\n(define-constant ERR-PREORDER-CLAIMABILITY-EXPIRED (err u112))\n(define-constant ERR-NAMESPACE-NOT-FOUND (err u113))\n(define-constant ERR-OPERATION-UNAUTHORIZED (err u114))\n(define-constant ERR-NAMESPACE-ALREADY-LAUNCHED (err u115))\n(define-constant ERR-NAMESPACE-PREORDER-LAUNCHABILITY-EXPIRED (err u116))\n(define-constant ERR-NAMESPACE-NOT-LAUNCHED (err u117))\n(define-constant ERR-NAME-NOT-AVAILABLE (err u118))\n(define-constant ERR-NAMESPACE-BLANK (err u119))\n(define-constant ERR-NAME-BLANK (err u120))\n(define-constant ERR-NAME-PREORDERED-BEFORE-NAMESPACE-LAUNCH (err u121))\n(define-constant ERR-NAMESPACE-HAS-MANAGER (err u122))\n(define-constant ERR-OVERFLOW (err u123))\n(define-constant ERR-NO-NAMESPACE-MANAGER (err u124))\n(define-constant ERR-FAST-MINTED-BEFORE (err u125))\n(define-constant ERR-PREORDERED-BEFORE (err u126))\n(define-constant ERR-NAME-NOT-CLAIMABLE-YET (err u127))\n(define-constant ERR-IMPORTED-BEFORE (err u128))\n(define-constant ERR-LIFETIME-EQUAL-0 (err u129))\n(define-constant ERR-MIGRATION-IN-PROGRESS (err u130))\n(define-constant ERR-NO-PRIMARY-NAME (err u131))\n\n;; variables\n;; (new) Variable to see if migration is complete\n(define-data-var migration-complete bool false)\n\n;; (new) Counter to keep track of the last minted NFT ID, ensuring unique identifiers\n(define-data-var bns-index uint u0)\n\n;; maps\n;; (new) Map to track market listings, associating NFT IDs with price and commission details\n(define-map market uint {price: uint, commission: principal})\n\n;; (new) Define a map to link NFT IDs to their respective names and namespaces.\n(define-map index-to-name uint \n    {\n        name: (buff 48), namespace: (buff 20)\n    } \n)\n;; (new) Define a map to link names and namespaces to their respective NFT IDs.\n(define-map name-to-index \n    {\n        name: (buff 48), namespace: (buff 20)\n    } \n    uint\n)\n\n;; (updated) Contains detailed properties of names, including registration and importation times\n(define-map name-properties\n    { name: (buff 48), namespace: (buff 20) }\n    {\n        registered-at: (optional uint),\n        imported-at: (optional uint),\n        ;; The fqn used to make the earliest preorder at any given point\n        hashed-salted-fqn-preorder: (optional (buff 20)),\n        ;; Added this field in name-properties to know exactly who has the earliest preorder at any given point\n        preordered-by: (optional principal),\n        renewal-height: uint,\n        stx-burn: uint,\n        owner: principal,\n    }\n)\n\n;; (update) Stores properties of namespaces, including their import principals, reveal and launch times, and pricing functions.\n(define-map namespaces (buff 20)\n    { \n        namespace-manager: (optional principal),\n        manager-transferable: bool,\n        manager-frozen: bool,\n        namespace-import: principal,\n        revealed-at: uint,\n        launched-at: (optional uint),\n        lifetime: uint,\n        can-update-price-function: bool,\n        price-function: \n            {\n                buckets: (list 16 uint),\n                base: uint, \n                coeff: uint, \n                nonalpha-discount: uint, \n                no-vowel-discount: uint\n            }\n    }\n)\n\n;; Records namespace preorder transactions with their creation times, and STX burned.\n(define-map namespace-preorders\n    { hashed-salted-namespace: (buff 20), buyer: principal }\n    { created-at: uint, stx-burned: uint, claimed: bool}\n)\n\n;; Tracks preorders, to avoid attacks\n(define-map namespace-single-preorder (buff 20) bool)\n\n;; Tracks preorders, to avoid attacks\n(define-map name-single-preorder (buff 20) bool)\n\n;; Tracks preorders for names, including their creation times, and STX burned.\n(define-map name-preorders\n    { hashed-salted-fqn: (buff 20), buyer: principal }\n    { created-at: uint, stx-burned: uint, claimed: bool}\n)\n\n;; It maps a user's principal to the ID of their primary name.\n(define-map primary-name principal uint)\n\n;; read-only\n;; @desc (new) SIP-09 compliant function to get the last minted token's ID\n(define-read-only (get-last-token-id)\n    ;; Returns the current value of bns-index variable, which tracks the last token ID\n    (ok (var-get bns-index))\n)\n\n(define-read-only (get-renewal-height (id uint))\n    (let \n        (\n            (name-namespace (unwrap! (get-bns-from-id id) ERR-NO-NAME))\n            (namespace-props (unwrap! (map-get? namespaces (get namespace name-namespace)) ERR-NAMESPACE-NOT-FOUND))\n            (name-props (unwrap! (map-get? name-properties name-namespace) ERR-NO-NAME))\n            (renewal-height (get renewal-height name-props))\n            (namespace-lifetime (get lifetime namespace-props))\n        )\n        ;; Check if the namespace requires renewals\n        (asserts! (not (is-eq namespace-lifetime u0)) ERR-LIFETIME-EQUAL-0) \n        ;; If the check passes then check the renewal-height of the name\n        (ok \n            (if (is-eq renewal-height u0)\n                ;; If it is true then it means it was imported so return the namespace launch blockheight + lifetime\n                (+ (unwrap! (get launched-at namespace-props) ERR-NAMESPACE-NOT-LAUNCHED) namespace-lifetime) \n                renewal-height\n            )\n        )\n    )\n)\n\n(define-read-only (can-resolve-name (namespace (buff 20)) (name (buff 48)))\n    (let \n        (\n            (name-id (unwrap! (get-id-from-bns name namespace) ERR-NO-NAME))\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            (name-props (unwrap! (map-get? name-properties {name: name, namespace: namespace}) ERR-NO-NAME))\n            (renewal-height (get renewal-height name-props))\n            (namespace-lifetime (get lifetime namespace-props))\n        )\n        ;; Check if the name can resolve\n        (ok \n            (if (is-eq u0 namespace-lifetime)\n                ;; If true it means that the name is in a managed namespace or the namespace does not require renewals\n                {renewal: u0, owner: (get owner name-props)}\n                ;; If false then calculate renewal-height\n                {renewal: (try! (get-renewal-height name-id)), owner: (get owner name-props)}\n            )\n        )\n    )\n)\n\n;; @desc (new) SIP-09 compliant function to get token URI\n(define-read-only (get-token-uri (id uint))\n    ;; Returns a predefined set URI for the token metadata\n    (ok (some (var-get token-uri)))\n)\n\n(define-read-only (get-contract-uri)\n    ;; Returns a predefined set URI for the contract metadata\n    (ok (some (var-get contract-uri)))\n)\n\n;; @desc (new) SIP-09 compliant function to get the owner of a specific token by its ID\n(define-read-only (get-owner (id uint))\n    ;; Check and return the owner of the specified NFT\n    (ok (nft-get-owner? BNS-V2 id))\n)\n\n;; @desc (new) New get owner function\n(define-read-only (get-owner-name (name (buff 48)) (namespace (buff 20)))\n    ;; Check and return the owner of the specified NFT\n    (ok (nft-get-owner? BNS-V2 (unwrap! (get-id-from-bns name namespace) ERR-NO-NAME)))\n)\n\n;; Read-only function `get-namespace-price` calculates the registration price for a namespace based on its length.\n;; @params:\n    ;; namespace (buff 20): The namespace for which the price is being calculated.\n(define-read-only (get-namespace-price (namespace (buff 20)))\n    (let \n        (\n            ;; Calculate the length of the namespace.\n            (namespace-len (len namespace))\n        )\n        ;; Ensure the namespace is not blank, its length is greater than 0.\n        (asserts! (> namespace-len u0) ERR-NAMESPACE-BLANK)\n        ;; Retrieve the price for the namespace based on its length from the NAMESPACE-PRICE-TIERS list.\n        ;; The price tier is determined by the minimum of 7 or the namespace length minus one.\n        (ok (unwrap! (element-at? NAMESPACE-PRICE-TIERS (min u7 (- namespace-len u1))) ERR-UNWRAP))\n    )\n)\n\n;; Read-only function `get-name-price` calculates the registration price for a name based on the price buckets of the namespace\n;; @params:\n    ;; namespace (buff 20): The namespace for which the price is being calculated.\n    ;; name (buff 48): The name for which the price is being calculated.\n(define-read-only (get-name-price (namespace (buff 20)) (name (buff 48)))\n    (let \n        (\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n        )\n        (ok (compute-name-price name (get price-function namespace-props)))\n    )\n)\n\n;; Read-only function `can-namespace-be-registered` checks if a namespace is available for registration.\n;; @params:\n    ;; namespace (buff 20): The namespace being checked for availability.\n(define-read-only (can-namespace-be-registered (namespace (buff 20)))\n    ;; Returns the result of `is-namespace-available` directly, indicating if the namespace can be registered.\n    (ok (is-namespace-available namespace))\n)\n\n;; Read-only function `get-namespace-properties` for retrieving properties of a specific namespace.\n;; @params:\n    ;; namespace (buff 20): The namespace whose properties are being queried.\n(define-read-only (get-namespace-properties (namespace (buff 20)))\n    (let \n        (\n            ;; Fetch the properties of the specified namespace from the `namespaces` map.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n        )\n        ;; Returns the namespace along with its associated properties.\n        (ok { namespace: namespace, properties: namespace-props })\n    )\n)\n\n;; Read only function to get name properties\n(define-read-only (get-bns-info (name (buff 48)) (namespace (buff 20)))\n    (map-get? name-properties {name: name, namespace: namespace})\n)\n\n;; (new) Defines a read-only function to fetch the unique ID of a BNS name given its name and the namespace it belongs to.\n(define-read-only (get-id-from-bns (name (buff 48)) (namespace (buff 20))) \n    ;; Attempts to retrieve the ID from the 'name-to-index' map using the provided name and namespace as the key.\n    (map-get? name-to-index {name: name, namespace: namespace})\n)\n\n;; (new) Defines a read-only function to fetch the BNS name and the namespace given a unique ID.\n(define-read-only (get-bns-from-id (id uint)) \n    ;; Attempts to retrieve the name and namespace from the 'index-to-name' map using the provided id as the key.\n    (map-get? index-to-name id)\n)\n\n;; (new) Fetcher for primary name\n(define-read-only (get-primary-name (owner principal))\n    (map-get? primary-name owner)\n)\n\n;; (new) Fetcher for primary name returns name and namespace\n(define-read-only (get-primary (owner principal))\n    (ok (get-bns-from-id (unwrap! (map-get? primary-name owner) ERR-NO-PRIMARY-NAME)))\n)\n\n;; public functions\n;; @desc (new) SIP-09 compliant function to transfer a token from one owner to another.\n;; @param id: ID of the NFT being transferred.\n;; @param owner: Principal of the current owner of the NFT.\n;; @param recipient: Principal of the recipient of the NFT.\n(define-public (transfer (id uint) (owner principal) (recipient principal))\n    (let \n        (\n            ;; Get the name and namespace of the NFT.\n            (name-and-namespace (unwrap! (get-bns-from-id id) ERR-NO-NAME))\n            (namespace (get namespace name-and-namespace))\n            (name (get name name-and-namespace))\n            ;; Get namespace properties and manager.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            (manager-transfers (get manager-transferable namespace-props))\n            ;; Get name properties and owner.\n            (name-props (unwrap! (map-get? name-properties name-and-namespace) ERR-NO-NAME))\n            (registered-at-value (get registered-at name-props))\n            (nft-current-owner (unwrap! (nft-get-owner? BNS-V2 id) ERR-NO-NAME))\n        )\n        ;; First check if the name was registered\n        (match registered-at-value\n            is-registered\n            ;; If it was registered, check if registered-at is lower than current blockheight\n            ;; This check works to make sure that if a name is fast-claimed they have to wait 1 block to transfer it\n            (asserts! (< is-registered burn-block-height) ERR-OPERATION-UNAUTHORIZED)\n            ;; If it is not registered then continue\n            true \n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Check that the namespace is launched\n        (asserts! (is-some (get launched-at namespace-props)) ERR-NAMESPACE-NOT-LAUNCHED)\n        ;; Check owner and recipient is not the same\n        (asserts! (not (is-eq nft-current-owner recipient)) ERR-OPERATION-UNAUTHORIZED)\n        ;; We only need to check if manager transfers are true or false, if true then they have to do transfers through the manager contract that calls into mng-transfer, if false then they can call into this function\n        (asserts! (not manager-transfers) ERR-NOT-AUTHORIZED)\n        ;; Check contract-caller\n        (asserts! (is-eq contract-caller nft-current-owner) ERR-NOT-AUTHORIZED)\n        ;; Check if in fact the owner is-eq to nft-current-owner\n        (asserts! (is-eq owner nft-current-owner) ERR-NOT-AUTHORIZED)\n        ;; Ensures the NFT is not currently listed in the market.\n        (asserts! (is-none (map-get? market id)) ERR-LISTED)\n        ;; Update the name properties with the new owner\n        (map-set name-properties name-and-namespace (merge name-props {owner: recipient}))\n        ;; Update primary name if needed for owner\n        (update-primary-name-owner id owner)\n        ;; Update primary name if needed for recipient\n        (update-primary-name-recipient id recipient)\n        ;; Execute the NFT transfer.\n        (try! (nft-transfer? BNS-V2 id nft-current-owner recipient))\n        (print \n            {\n                topic: \"transfer-name\", \n                owner: recipient, \n                name: {name: name, namespace: namespace}, \n                id: id,\n                properties: (map-get? name-properties {name: name, namespace: namespace})\n            }\n        )\n        (ok true)\n    )\n)\n\n;; @desc (new) manager function to be called by managed namespaces that allows manager transfers.\n;; @param id: ID of the NFT being transferred.\n;; @param owner: Principal of the current owner of the NFT.\n;; @param recipient: Principal of the recipient of the NFT.\n(define-public (mng-transfer (id uint) (owner principal) (recipient principal))\n    (let \n        (\n            ;; Get the name and namespace of the NFT.\n            (name-and-namespace (unwrap! (get-bns-from-id id) ERR-NO-NAME))\n            (namespace (get namespace name-and-namespace))\n            (name (get name name-and-namespace))\n            ;; Get namespace properties and manager.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            (manager-transfers (get manager-transferable namespace-props))\n            (manager (get namespace-manager namespace-props))\n            ;; Get name properties and owner.\n            (name-props (unwrap! (map-get? name-properties name-and-namespace) ERR-NO-NAME))\n            (registered-at-value (get registered-at name-props))\n            (nft-current-owner (unwrap! (nft-get-owner? BNS-V2 id) ERR-NO-NAME))\n        )\n        ;; First check if the name was registered\n        (match registered-at-value\n            is-registered\n            ;; If it was registered, check if registered-at is lower than current blockheight\n            ;; This check works to make sure that if a name is fast-claimed they have to wait 1 block to transfer it\n            (asserts! (< is-registered burn-block-height) ERR-OPERATION-UNAUTHORIZED)\n            ;; If it is not registered then continue\n            true \n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Check that the namespace is launched\n        (asserts! (is-some (get launched-at namespace-props)) ERR-NAMESPACE-NOT-LAUNCHED)\n        ;; Check owner and recipient is not the same\n        (asserts! (not (is-eq nft-current-owner recipient)) ERR-OPERATION-UNAUTHORIZED)\n        ;; We only need to check if manager transfers are true or false, if true then continue, if false then they can call into `transfer` function\n        (asserts! manager-transfers ERR-NOT-AUTHORIZED)\n        ;; Check contract-caller, we unwrap-panic because if manager-transfers is true then there has to be a manager\n        (asserts! (is-eq contract-caller (unwrap-panic manager)) ERR-NOT-AUTHORIZED)\n        ;; Check if in fact the owner is-eq to nft-current-owner\n        (asserts! (is-eq owner nft-current-owner) ERR-NOT-AUTHORIZED)\n        ;; Ensures the NFT is not currently listed in the market.\n        (asserts! (is-none (map-get? market id)) ERR-LISTED)\n        ;; Update primary name if needed for owner\n        (update-primary-name-owner id owner)\n        ;; Update primary name if needed for recipient\n        (update-primary-name-recipient id recipient)\n        ;; Update the name properties with the new owner\n        (map-set name-properties name-and-namespace (merge name-props {owner: recipient}))\n        ;; Execute the NFT transfer.\n        (try! (nft-transfer? BNS-V2 id nft-current-owner recipient))\n        (print \n            {\n                topic: \"transfer-name\", \n                owner: recipient, \n                name: {name: name, namespace: namespace}, \n                id: id,\n                properties: (map-get? name-properties {name: name, namespace: namespace})\n            }\n        )\n        (ok true)\n    )\n)\n\n;; @desc (new) Function to list an NFT for sale.\n;; @param id: ID of the NFT being listed.\n;; @param price: Listing price.\n;; @param comm-trait: Address of the commission-trait.\n(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))\n    (let\n        (\n            ;; Get the name and namespace of the NFT.\n            (name-and-namespace (unwrap! (map-get? index-to-name id) ERR-NO-NAME))\n            (namespace (get namespace name-and-namespace))\n            ;; Get namespace properties and manager.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            (namespace-manager (get namespace-manager namespace-props))\n            ;; Get name properties and registered-at value.\n            (name-props (unwrap! (map-get? name-properties name-and-namespace) ERR-NO-NAME))\n            (registered-at-value (get registered-at name-props))\n            ;; Creates a listing record with price and commission details\n            (listing {price: price, commission: (contract-of comm-trait)})\n        )\n        ;; Checks if the name was registered\n        (match registered-at-value\n            is-registered\n            ;; If it was registered, check if registered-at is lower than current blockheight\n            ;; Same as transfers, this check works to make sure that if a name is fast-claimed they have to wait 1 block to list it\n            (asserts! (< is-registered burn-block-height) ERR-OPERATION-UNAUTHORIZED)\n            ;; If it is not registered then continue\n            true \n        )\n        ;; Check if there is a namespace manager\n        (match namespace-manager \n            manager \n            ;; If there is then check that the contract-caller is the manager\n            (asserts! (is-eq manager contract-caller) ERR-NOT-AUTHORIZED)\n            ;; If there isn't assert that the owner is the contract-caller\n            (asserts! (is-eq (some contract-caller) (nft-get-owner? BNS-V2 id)) ERR-NOT-AUTHORIZED)\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Updates the market map with the new listing details\n        (map-set market id listing)\n        ;; Prints listing details\n        (ok (print (merge listing {a: \"list-in-ustx\", id: id})))\n    )\n)\n\n;; @desc (new) Function to remove an NFT listing from the market.\n;; @param id: ID of the NFT being unlisted.\n(define-public (unlist-in-ustx (id uint))\n    (let\n        (\n            ;; Get the name and namespace of the NFT.\n            (name-and-namespace (unwrap! (map-get? index-to-name id) ERR-NO-NAME))\n            (namespace (get namespace name-and-namespace))\n            ;; Verify if the NFT is listed in the market.\n            (market-map (unwrap! (map-get? market id) ERR-NOT-LISTED))\n            ;; Get namespace properties and manager.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            (namespace-manager (get namespace-manager namespace-props))\n        )\n        ;; Check if there is a namespace manager\n        (match namespace-manager \n            manager \n            ;; If there is then check that the contract-caller is the manager\n            (asserts! (is-eq manager contract-caller) ERR-NOT-AUTHORIZED)\n            ;; If there isn't assert that the owner is the contract-caller\n            (asserts! (is-eq (some contract-caller) (nft-get-owner? BNS-V2 id)) ERR-NOT-AUTHORIZED)\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Deletes the listing from the market map\n        (map-delete market id)\n        ;; Prints unlisting details\n        (ok (print {a: \"unlist-in-ustx\", id: id}))\n    )\n)   \n\n;; @desc (new) Function to buy an NFT listed for sale, transferring ownership and handling commission.\n;; @param id: ID of the NFT being purchased.\n;; @param comm-trait: Address of the commission-trait.\n(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))\n    (let\n        (\n            ;; Retrieves current owner and listing details\n            (owner (unwrap! (nft-get-owner? BNS-V2 id) ERR-NO-NAME))\n            (listing (unwrap! (map-get? market id) ERR-NOT-LISTED))\n            (price (get price listing))\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Verifies the commission details match the listing\n        (asserts! (is-eq (contract-of comm-trait) (get commission listing)) ERR-WRONG-COMMISSION)\n        ;; Transfers STX from buyer to seller\n        (try! (stx-transfer? price contract-caller owner))\n        ;; Handle commission payment\n        (try! (contract-call? comm-trait pay id price))\n        ;; Transfers the NFT to the buyer\n        ;; This function differs from the `transfer` method by not checking who the contract-caller is, otherwise trasnfers would never be executed\n        (try! (purchase-transfer id owner contract-caller))\n        ;; Removes the listing from the market map\n        (map-delete market id)\n        ;; Prints purchase details\n        (ok (print {a: \"buy-in-ustx\", id: id}))\n    )\n)\n\n;; @desc (new) Sets the primary name for the caller to a specific BNS name they own.\n;; @param primary-name-id: ID of the name to be set as primary.\n(define-public (set-primary-name (primary-name-id uint))\n    (begin \n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Verify the contract-caller is the owner of the name.\n        (asserts! (is-eq (unwrap! (nft-get-owner? BNS-V2 primary-name-id) ERR-NO-NAME) contract-caller) ERR-NOT-AUTHORIZED)\n        ;; Update the contract-caller's primary name.\n        (map-set primary-name contract-caller primary-name-id)\n        ;; Return true upon successful execution.\n        (ok true)\n    )\n)\n\n;; @desc (new) Defines a public function to burn an NFT, under managed namespaces.\n;; @param id: ID of the NFT to be burned.\n(define-public (mng-burn (id uint)) \n    (let \n        (\n            ;; Get the name details associated with the given ID.\n            (name-and-namespace (unwrap! (get-bns-from-id id) ERR-NO-NAME))\n            ;; Get the owner of the name.\n            (owner (unwrap! (nft-get-owner? BNS-V2 id) ERR-UNWRAP)) \n        ) \n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the caller is the current namespace manager.\n        (asserts! (is-eq contract-caller (unwrap! (get namespace-manager (unwrap! (map-get? namespaces (get namespace name-and-namespace)) ERR-NAMESPACE-NOT-FOUND)) ERR-NO-NAMESPACE-MANAGER)) ERR-NOT-AUTHORIZED)\n        ;; Unlist the NFT if it is listed.\n        (match (map-get? market id)\n            listed-name \n            (map-delete market id) \n            true\n        )\n        ;; Update primary name if needed for the owner of the name\n        (update-primary-name-owner id owner)\n        ;; Delete the name from all maps:\n        ;; Remove the name-to-index.\n        (map-delete name-to-index name-and-namespace)\n        ;; Remove the index-to-name.\n        (map-delete index-to-name id)\n        ;; Remove the name-properties.\n        (map-delete name-properties name-and-namespace)\n        ;; Executes the burn operation for the specified NFT.\n        (try! (nft-burn? BNS-V2 id (unwrap! (nft-get-owner? BNS-V2 id) ERR-UNWRAP)))\n        (print \n            {\n                topic: \"burn-name\", \n                owner: \"\", \n                name: {name: (get name name-and-namespace), namespace: (get namespace name-and-namespace)}, \n                id: id\n            }\n        )\n        (ok true)\n    )\n)\n\n;; @desc (new) Transfers the management role of a specific namespace to a new principal.\n;; @param new-manager: Principal of the new manager.\n;; @param namespace: Buffer of the namespace.\n(define-public (mng-manager-transfer (new-manager (optional principal)) (namespace (buff 20)))\n    (let \n        (\n            ;; Retrieve namespace properties and current manager.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS) \n        ;; Ensure the caller is the current namespace manager.\n        (asserts! (is-eq contract-caller (unwrap! (get namespace-manager namespace-props) ERR-NO-NAMESPACE-MANAGER)) ERR-NOT-AUTHORIZED)\n        ;; Ensure manager can be changed\n        (asserts! (not (get manager-frozen namespace-props)) ERR-NOT-AUTHORIZED)\n        ;; Update the namespace manager to the new manager.\n        (map-set namespaces namespace \n            (merge \n                namespace-props \n                {namespace-manager: new-manager}\n            )\n        )\n        (print { namespace: namespace, status: \"transfer-manager\", properties: (map-get? namespaces namespace) })\n        (ok true)\n    )\n)\n\n;; @desc (new) freezes the ability to make manager transfers\n;; @param namespace: Buffer of the namespace.\n(define-public (freeze-manager (namespace (buff 20)))\n    (let \n        (\n            ;; Retrieve namespace properties and current manager.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the caller is the current namespace manager.\n        (asserts! (is-eq contract-caller (unwrap! (get namespace-manager namespace-props) ERR-NO-NAMESPACE-MANAGER)) ERR-NOT-AUTHORIZED)\n        ;; Update the namespace manager to the new manager.\n        (map-set namespaces namespace \n                (merge \n                    namespace-props \n                    {manager-frozen: true}\n                )\n            )\n        (print { namespace: namespace, status: \"freeze-manager\", properties: (map-get? namespaces namespace) })\n        (ok true)\n    )\n)\n\n;;;; NAMESPACES\n;; @desc Public function `namespace-preorder` initiates the registration process for a namespace by sending a transaction with a salted hash of the namespace.\n;; This transaction burns the registration fee as a commitment.\n;; @params: hashed-salted-namespace (buff 20): The hashed and salted namespace being preordered.\n;; @params: stx-to-burn (uint): The amount of STX tokens to be burned as part of the preorder process.\n(define-public (namespace-preorder (hashed-salted-namespace (buff 20)) (stx-to-burn uint))\n    (begin\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS) \n        ;; Validate that the hashed-salted-namespace is exactly 20 bytes long.\n        (asserts! (is-eq (len hashed-salted-namespace) HASH160LEN) ERR-HASH-MALFORMED)\n        ;; Check if the same hashed-salted-fqn has been used before\n        (asserts! (is-none (map-get? namespace-single-preorder hashed-salted-namespace)) ERR-PREORDERED-BEFORE)\n        ;; Confirm that the STX amount to be burned is positive\n        (asserts! (> stx-to-burn u0) ERR-STX-BURNT-INSUFFICIENT)\n        ;; Execute the token burn operation.\n        (try! (stx-burn? stx-to-burn contract-caller))\n        ;; Record the preorder details in the `namespace-preorders` map\n        (map-set namespace-preorders\n            { hashed-salted-namespace: hashed-salted-namespace, buyer: contract-caller }\n            { created-at: burn-block-height, stx-burned: stx-to-burn, claimed: false }\n        )\n        ;; Sets the map with just the hashed-salted-namespace as the key\n        (map-set namespace-single-preorder hashed-salted-namespace true)\n        ;; Return the block height at which the preorder claimability expires.\n        (ok (+ burn-block-height PREORDER-CLAIMABILITY-TTL))\n    )\n)\n\n;; @desc Public function `namespace-reveal` completes the second step in the namespace registration process.\n;; It associates the revealed namespace with its corresponding preorder, establishes the namespace's pricing function, and sets its lifetime and ownership details.\n;; @param: namespace (buff 20): The namespace being revealed.\n;; @param: namespace-salt (buff 20): The salt used during the preorder to generate a unique hash.\n;; @param: p-func-base, p-func-coeff, p-func-b1 to p-func-b16: Parameters defining the price function for registering names within this namespace.\n;; @param: p-func-non-alpha-discount (uint): Discount applied to names with non-alphabetic characters.\n;; @param: p-func-no-vowel-discount (uint): Discount applied to names without vowels.\n;; @param: lifetime (uint): Duration that names within this namespace are valid before needing renewal.\n;; @param: namespace-import (principal): The principal authorized to import names into this namespace.\n;; @param: namespace-manager (optional principal): The principal authorized to manage the namespace.\n(define-public (namespace-reveal \n    (namespace (buff 20)) \n    (namespace-salt (buff 20)) \n    (p-func-base uint) \n    (p-func-coeff uint) \n    (p-func-b1 uint) \n    (p-func-b2 uint) \n    (p-func-b3 uint) \n    (p-func-b4 uint) \n    (p-func-b5 uint) \n    (p-func-b6 uint) \n    (p-func-b7 uint) \n    (p-func-b8 uint) \n    (p-func-b9 uint) \n    (p-func-b10 uint) \n    (p-func-b11 uint) \n    (p-func-b12 uint) \n    (p-func-b13 uint) \n    (p-func-b14 uint) \n    (p-func-b15 uint) \n    (p-func-b16 uint) \n    (p-func-non-alpha-discount uint) \n    (p-func-no-vowel-discount uint) \n    (lifetime uint) \n    (namespace-import principal) \n    (namespace-manager (optional principal)) \n    (can-update-price bool) \n    (manager-transfers bool) \n    (manager-frozen bool)\n)\n    (let \n        (\n            ;; Generate the hashed, salted namespace identifier to match with its preorder.\n            (hashed-salted-namespace (hash160 (concat (concat namespace 0x2e) namespace-salt)))\n            ;; Define the price function based on the provided parameters.\n            (price-function  \n                {\n                    buckets: (list p-func-b1 p-func-b2 p-func-b3 p-func-b4 p-func-b5 p-func-b6 p-func-b7 p-func-b8 p-func-b9 p-func-b10 p-func-b11 p-func-b12 p-func-b13 p-func-b14 p-func-b15 p-func-b16),\n                    base: p-func-base,\n                    coeff: p-func-coeff,\n                    nonalpha-discount: p-func-non-alpha-discount,\n                    no-vowel-discount: p-func-no-vowel-discount\n                }\n            )\n            ;; Retrieve the preorder record to ensure it exists and is valid for the revealing namespace\n            (preorder (unwrap! (map-get? namespace-preorders { hashed-salted-namespace: hashed-salted-namespace, buyer: contract-caller}) ERR-PREORDER-NOT-FOUND))\n            ;; Calculate the namespace's registration price for validation.\n            (namespace-price (try! (get-namespace-price namespace)))\n        )\n        ;; Ensure the preorder has not been claimed before\n        (asserts! (not (get claimed preorder)) ERR-NAMESPACE-ALREADY-EXISTS)\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the namespace consists of valid characters only.\n        (asserts! (not (has-invalid-chars namespace)) ERR-CHARSET-INVALID)\n        ;; Check that the namespace is available for reveal.\n        (asserts! (unwrap! (can-namespace-be-registered namespace) ERR-NAMESPACE-ALREADY-EXISTS) ERR-NAMESPACE-ALREADY-EXISTS)\n        ;; Verify the burned amount during preorder meets or exceeds the namespace's registration price.\n        (asserts! (>= (get stx-burned preorder) namespace-price) ERR-STX-BURNT-INSUFFICIENT)\n        ;; Confirm the reveal action is performed within the allowed timeframe from the preorder.\n        (asserts! (< burn-block-height (+ (get created-at preorder) PREORDER-CLAIMABILITY-TTL)) ERR-PREORDER-CLAIMABILITY-EXPIRED)\n        ;; Ensure at least 1 block has passed after the preorder to avoid namespace sniping.\n        (asserts! (>= burn-block-height (+ (get created-at preorder) u1)) ERR-OPERATION-UNAUTHORIZED)\n        ;; Check if the namespace manager is assigned\n        (match namespace-manager \n            namespace-m\n            ;; If namespace-manager is assigned, then assign everything except the lifetime, that is set to u0 sinces renewals will be made in the namespace manager contract and set the can update price function to false, since no changes will ever need to be made there.\n            (map-set namespaces namespace\n                {\n                    namespace-manager: namespace-manager,\n                    manager-transferable: manager-transfers,\n                    manager-frozen: manager-frozen,\n                    namespace-import: namespace-import,\n                    revealed-at: burn-block-height,\n                    launched-at: none,\n                    lifetime: u0,\n                    can-update-price-function: can-update-price,\n                    price-function: price-function \n                }\n            )\n            ;; If no manager is assigned\n            (map-set namespaces namespace\n                {\n                    namespace-manager: none,\n                    manager-transferable: manager-transfers,\n                    manager-frozen: manager-frozen,\n                    namespace-import: namespace-import,\n                    revealed-at: burn-block-height,\n                    launched-at: none,\n                    lifetime: lifetime,\n                    can-update-price-function: can-update-price,\n                    price-function: price-function \n                }\n            )\n        )\n        ;; Update the claimed value for the preorder\n        (map-set namespace-preorders { hashed-salted-namespace: hashed-salted-namespace, buyer: contract-caller } \n            (merge preorder \n                {\n                    claimed: true\n                }\n            )\n        )   \n        ;; Confirm successful reveal of the namespace\n        (ok true)\n    )\n)\n\n;; @desc Public function `namespace-launch` marks a namespace as launched and available for public name registrations.\n;; @param: namespace (buff 20): The namespace to be launched and made available for public registrations.\n(define-public (namespace-launch (namespace (buff 20)))\n    (let \n        (\n            ;; Retrieve the properties of the namespace to ensure it exists and to check its current state.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the transaction sender is the namespace's designated import principal.\n        (asserts! (is-eq (get namespace-import namespace-props) contract-caller) ERR-OPERATION-UNAUTHORIZED)\n        ;; Verify the namespace has not already been launched.\n        (asserts! (is-none (get launched-at namespace-props)) ERR-NAMESPACE-ALREADY-LAUNCHED)\n        ;; Confirm that the action is taken within the permissible time frame since the namespace was revealed.\n        (asserts! (< burn-block-height (+ (get revealed-at namespace-props) NAMESPACE-LAUNCHABILITY-TTL)) ERR-NAMESPACE-PREORDER-LAUNCHABILITY-EXPIRED)\n        ;; Update the `namespaces` map with the newly launched status.\n        (map-set namespaces namespace (merge namespace-props { launched-at: (some burn-block-height) }))      \n        ;; Emit an event to indicate the namespace is now ready and launched.\n        (print { namespace: namespace, status: \"launch\", properties: (map-get? namespaces namespace) })\n        ;; Confirm the successful launch of the namespace.\n        (ok true)\n    )\n)\n\n;; @desc (new) Public function `turn-off-manager-transfers` disables manager transfers for a namespace (callable only once).\n;; @param: namespace (buff 20): The namespace for which manager transfers will be disabled.\n(define-public (turn-off-manager-transfers (namespace (buff 20)))\n    (let \n        (\n            ;; Retrieve the properties of the namespace and manager.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            (namespace-manager (unwrap! (get namespace-manager namespace-props) ERR-NO-NAMESPACE-MANAGER))\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the function caller is the namespace manager.\n        (asserts! (is-eq contract-caller namespace-manager) ERR-NOT-AUTHORIZED)\n        ;; Disable manager transfers.\n        (map-set namespaces namespace (merge namespace-props {manager-transferable: false}))\n        (print { namespace: namespace, status: \"turn-off-manager-transfers\", properties: (map-get? namespaces namespace) })\n        ;; Confirm successful execution.\n        (ok true)\n    )\n)\n\n;; @desc Public function `name-import` allows the insertion of names into a namespace that has been revealed but not yet launched.\n;; This facilitates pre-populating the namespace with specific names, assigning owners.\n;; @param: namespace (buff 20): The namespace into which the name is being imported.\n;; @param: name (buff 48): The name being imported into the namespace.\n;; @param: beneficiary (principal): The principal who will own the imported name.\n;; @param: stx-burn (uint): The amount of STX tokens to be burned as part of the import process.\n(define-public (name-import (namespace (buff 20)) (name (buff 48)) (beneficiary principal))\n    (let \n        (\n            ;; Fetch properties of the specified namespace.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            ;; Fetch the latest index to mint\n            (current-mint (+ (var-get bns-index) u1))\n            (price (if (is-none (get namespace-manager namespace-props))\n                        (try! (compute-name-price name (get price-function namespace-props)))\n                        u0\n                    )\n            )\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the name is not already registered.\n        (asserts! (is-none (map-get? name-properties {name: name, namespace: namespace})) ERR-NAME-NOT-AVAILABLE)\n        ;; Verify that the name contains only valid characters.\n        (asserts! (not (has-invalid-chars name)) ERR-CHARSET-INVALID)\n        ;; Ensure the contract-caller is the namespace's designated import principal or the namespace manager\n        (asserts! (or (is-eq (get namespace-import namespace-props) contract-caller) (is-eq (get namespace-manager namespace-props) (some contract-caller))) ERR-OPERATION-UNAUTHORIZED)\n        ;; Check that the namespace has not been launched yet, as names can only be imported to namespaces that are revealed but not launched.\n        (asserts! (is-none (get launched-at namespace-props)) ERR-NAMESPACE-ALREADY-LAUNCHED)\n        ;; Confirm that the import is occurring within the allowed timeframe since the namespace was revealed.\n        (asserts! (< burn-block-height (+ (get revealed-at namespace-props) NAMESPACE-LAUNCHABILITY-TTL)) ERR-NAMESPACE-PREORDER-LAUNCHABILITY-EXPIRED)\n        ;; Set the name properties\n        (map-set name-properties {name: name, namespace: namespace}\n            {\n                registered-at: none,\n                imported-at: (some burn-block-height),\n                hashed-salted-fqn-preorder: none,\n                preordered-by: none,\n                renewal-height: u0,\n                stx-burn: price,\n                owner: beneficiary,\n            }\n        )\n        (map-set name-to-index {name: name, namespace: namespace} current-mint)\n        (map-set index-to-name current-mint {name: name, namespace: namespace})\n        ;; Update primary name if needed for send-to\n        (update-primary-name-recipient current-mint beneficiary)\n        ;; Update the index of the minting\n        (var-set bns-index current-mint)\n        ;; Mint the name to the beneficiary\n        (try! (nft-mint? BNS-V2 current-mint beneficiary))\n        ;; Log the new name registration\n        (print \n            {\n                topic: \"new-name\",\n                owner: beneficiary,\n                name: {name: name, namespace: namespace},\n                id: current-mint,\n                properties: (map-get? name-properties {name: name, namespace: namespace})\n            }\n        )\n        ;; Confirm successful import of the name.\n        (ok true)\n    )\n)\n\n;; @desc Public function `namespace-update-price` updates the pricing function for a specific namespace.\n;; @param: namespace (buff 20): The namespace for which the price function is being updated.\n;; @param: p-func-base (uint): The base price used in the pricing function.\n;; @param: p-func-coeff (uint): The coefficient used in the pricing function.\n;; @param: p-func-b1 to p-func-b16 (uint): The bucket-specific multipliers for the pricing function.\n;; @param: p-func-non-alpha-discount (uint): The discount applied for non-alphabetic characters.\n;; @param: p-func-no-vowel-discount (uint): The discount applied when no vowels are present.\n(define-public (namespace-update-price \n    (namespace (buff 20)) \n    (p-func-base uint) \n    (p-func-coeff uint) \n    (p-func-b1 uint) \n    (p-func-b2 uint) \n    (p-func-b3 uint) \n    (p-func-b4 uint) \n    (p-func-b5 uint) \n    (p-func-b6 uint) \n    (p-func-b7 uint) \n    (p-func-b8 uint) \n    (p-func-b9 uint) \n    (p-func-b10 uint) \n    (p-func-b11 uint) \n    (p-func-b12 uint) \n    (p-func-b13 uint) \n    (p-func-b14 uint) \n    (p-func-b15 uint) \n    (p-func-b16 uint) \n    (p-func-non-alpha-discount uint) \n    (p-func-no-vowel-discount uint)\n)\n    (let \n        (\n            ;; Retrieve the current properties of the namespace.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            ;; Construct the new price function.\n            (price-function \n                {\n                    buckets: (list p-func-b1 p-func-b2 p-func-b3 p-func-b4 p-func-b5 p-func-b6 p-func-b7 p-func-b8 p-func-b9 p-func-b10 p-func-b11 p-func-b12 p-func-b13 p-func-b14 p-func-b15 p-func-b16),\n                    base: p-func-base,\n                    coeff: p-func-coeff,\n                    nonalpha-discount: p-func-non-alpha-discount,\n                    no-vowel-discount: p-func-no-vowel-discount\n                }\n            )\n        )\n        (match (get namespace-manager namespace-props) \n            manager\n            ;; Ensure that the transaction sender is the namespace's designated import principal.\n            (asserts! (is-eq manager contract-caller) ERR-OPERATION-UNAUTHORIZED)\n            ;; Ensure that the contract-caller is the namespace's designated import principal.\n            (asserts! (is-eq (get namespace-import namespace-props) contract-caller) ERR-OPERATION-UNAUTHORIZED)\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Verify the namespace's price function can still be updated.\n        (asserts! (get can-update-price-function namespace-props) ERR-OPERATION-UNAUTHORIZED)\n        ;; Update the namespace's record in the `namespaces` map with the new price function.\n        (map-set namespaces namespace (merge namespace-props { price-function: price-function }))\n        (print { namespace: namespace, status: \"update-price-manager\", properties: (map-get? namespaces namespace) })\n        ;; Confirm the successful update of the price function.\n        (ok true)\n    )\n)\n\n;; @desc Public function `namespace-freeze-price` disables the ability to update the price function for a given namespace.\n;; @param: namespace (buff 20): The target namespace for which the price function update capability is being revoked.\n(define-public (namespace-freeze-price (namespace (buff 20)))\n    (let \n        (\n            ;; Retrieve the properties of the specified namespace to verify its existence and fetch its current settings.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n        )\n        (match (get namespace-manager namespace-props) \n            manager \n            ;; Ensure that the transaction sender is the same as the namespace's designated import principal.\n            (asserts! (is-eq manager contract-caller) ERR-OPERATION-UNAUTHORIZED)\n            ;; Ensure that the contract-caller is the same as the namespace's designated import principal.\n            (asserts! (is-eq (get namespace-import namespace-props) contract-caller) ERR-OPERATION-UNAUTHORIZED)\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Update the namespace properties in the `namespaces` map, setting `can-update-price-function` to false.\n        (map-set namespaces namespace \n            (merge namespace-props { can-update-price-function: false })\n        )\n        (print { namespace: namespace, status: \"freeze-price-manager\", properties: (map-get? namespaces namespace) })\n        ;; Return a success confirmation.\n        (ok true)\n    )\n)\n\n;; @desc (new) A 'fast' one-block registration function: (name-claim-fast)\n;; Warning: this *is* snipeable, for a slower but un-snipeable claim, use the pre-order & register functions\n;; @param: name (buff 48): The name being claimed.\n;; @param: namespace (buff 20): The namespace under which the name is being claimed.\n;; @param: stx-burn (uint): The amount of STX to burn for the claim.\n;; @param: send-to (principal): The principal to whom the name will be sent.\n(define-public (name-claim-fast (name (buff 48)) (namespace (buff 20)) (send-to principal)) \n    (let \n        (\n            ;; Retrieve namespace properties.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            (current-namespace-manager (get namespace-manager namespace-props))\n            ;; Calculates the ID for the new name to be minted.\n            (id-to-be-minted (+ (var-get bns-index) u1))\n            ;; Check if the name already exists.\n            (name-props (map-get? name-properties {name: name, namespace: namespace}))\n            ;; new to get the price of the name\n            (name-price (if (is-none current-namespace-manager)\n                            (try! (compute-name-price name (get price-function namespace-props)))\n                            u0\n                        )\n            )\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the name is not already registered.\n        (asserts! (is-none name-props) ERR-NAME-NOT-AVAILABLE)\n        ;; Verify that the name contains only valid characters.\n        (asserts! (not (has-invalid-chars name)) ERR-CHARSET-INVALID)\n        ;; Ensure that the namespace is launched\n        (asserts! (is-some (get launched-at namespace-props)) ERR-NAMESPACE-NOT-LAUNCHED)\n        ;; Check namespace manager\n        (match current-namespace-manager \n            manager \n            ;; If manager, check contract-caller is manager\n            (asserts! (is-eq contract-caller manager) ERR-NOT-AUTHORIZED)\n            ;; If no manager\n            (begin \n                ;; Asserts contract-caller is the send-to if not a managed namespace\n                (asserts! (is-eq contract-caller send-to) ERR-NOT-AUTHORIZED)\n                ;; Updated this to burn the actual ammount of the name-price\n                (try! (stx-burn? name-price send-to))\n            )\n        )\n        ;; Update the index\n        (var-set bns-index id-to-be-minted)\n        ;; Sets properties for the newly registered name.\n        (map-set name-properties\n            {\n                name: name, namespace: namespace\n            } \n            {\n                registered-at: (some (+ burn-block-height u1)),\n                imported-at: none,\n                hashed-salted-fqn-preorder: none,\n                preordered-by: none,\n                ;; Updated this to actually start with the registered-at date/block, and also to be u0 if it is a managed namespace\n                renewal-height: (if (is-eq (get lifetime namespace-props) u0)\n                                    u0\n                                    (+ (get lifetime namespace-props) burn-block-height u1)\n                                ),\n                stx-burn: name-price,\n                owner: send-to,\n            }\n        )\n        (map-set name-to-index {name: name, namespace: namespace} id-to-be-minted) \n        (map-set index-to-name id-to-be-minted {name: name, namespace: namespace}) \n        ;; Update primary name if needed for send-to\n        (update-primary-name-recipient id-to-be-minted send-to)\n        ;; Mints the new BNS name.\n        (try! (nft-mint? BNS-V2 id-to-be-minted send-to))\n        ;; Log the new name registration\n        (print \n            {\n                topic: \"new-name\",\n                owner: send-to,\n                name: {name: name, namespace: namespace},\n                id: id-to-be-minted,\n                properties: (map-get? name-properties {name: name, namespace: namespace})\n            }\n        )\n        ;; Signals successful completion.\n        (ok id-to-be-minted)\n    )\n)\n\n;; @desc Defines a public function `name-preorder` for preordering BNS names by burning the registration fee and submitting the salted hash.\n;; Callable by anyone; the actual check for authorization happens in the `name-register` function.\n;; @param: hashed-salted-fqn (buff 20): The hashed and salted fully qualified name.\n;; @param: stx-to-burn (uint): The amount of STX to burn for the preorder.\n(define-public (name-preorder (hashed-salted-fqn (buff 20)) (stx-to-burn uint))\n    (begin\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS) \n        ;; Validate the length of the hashed-salted FQN.\n        (asserts! (is-eq (len hashed-salted-fqn) HASH160LEN) ERR-HASH-MALFORMED)\n        ;; Ensures that the amount of STX specified to burn is greater than zero.\n        (asserts! (> stx-to-burn u0) ERR-STX-BURNT-INSUFFICIENT)\n        ;; Check if the same hashed-salted-fqn has been used before\n        (asserts! (is-none (map-get? name-single-preorder hashed-salted-fqn)) ERR-PREORDERED-BEFORE)\n        ;; Transfers the specified amount of stx to the BNS contract to burn on register\n        (try! (stx-transfer? stx-to-burn contract-caller .BNS-V2))\n        ;; Records the preorder in the 'name-preorders' map.\n        (map-set name-preorders\n            { hashed-salted-fqn: hashed-salted-fqn, buyer: contract-caller }\n            { created-at: burn-block-height, stx-burned: stx-to-burn, claimed: false}\n        )\n        ;; Sets the map with just the hashed-salted-fqn as the key\n        (map-set name-single-preorder hashed-salted-fqn true)\n        ;; Returns the block height at which the preorder's claimability period will expire.\n        (ok (+ burn-block-height PREORDER-CLAIMABILITY-TTL))\n    )\n)\n\n;; @desc Public function `name-register` finalizes the registration of a BNS name for users from unmanaged namespaces.\n;; @param: namespace (buff 20): The namespace to which the name belongs.\n;; @param: name (buff 48): The name to be registered.\n;; @param: salt (buff 20): The salt used during the preorder.\n(define-public (name-register (namespace (buff 20)) (name (buff 48)) (salt (buff 20)))\n    (let \n        (\n            ;; Generate a unique identifier for the name by hashing the fully-qualified name with salt\n            (hashed-salted-fqn (hash160 (concat (concat (concat name 0x2e) namespace) salt)))\n            ;; Retrieve the preorder details for this name\n            (preorder (unwrap! (map-get? name-preorders { hashed-salted-fqn: hashed-salted-fqn, buyer: contract-caller }) ERR-PREORDER-NOT-FOUND))\n            ;; Fetch the properties of the namespace\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            ;; Get the amount of burned STX\n            (stx-burned (get stx-burned preorder))\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure that the namespace is launched\n        (asserts! (is-some (get launched-at namespace-props)) ERR-NAMESPACE-NOT-LAUNCHED)\n        ;; Ensure the preorder hasn't been claimed before\n        (asserts! (not (get claimed preorder)) ERR-OPERATION-UNAUTHORIZED)\n        ;; Check that the namespace doesn't have a manager (implying it's open for registration)\n        (asserts! (is-none (get namespace-manager namespace-props)) ERR-NOT-AUTHORIZED)\n        ;; Verify that the preorder was made after the namespace was launched\n        (asserts! (> (get created-at preorder) (unwrap! (get launched-at namespace-props) ERR-UNWRAP)) ERR-NAME-PREORDERED-BEFORE-NAMESPACE-LAUNCH)\n        ;; Ensure the registration is happening within the allowed time window after preorder\n        (asserts! (< burn-block-height (+ (get created-at preorder) PREORDER-CLAIMABILITY-TTL)) ERR-PREORDER-CLAIMABILITY-EXPIRED)\n        ;; Make sure at least one block has passed since the preorder (prevents front-running)\n        (asserts! (> burn-block-height (+ (get created-at preorder) u1)) ERR-NAME-NOT-CLAIMABLE-YET)\n        ;; Verify that enough STX was burned during preorder to cover the name price\n        (asserts! (is-eq stx-burned (try! (compute-name-price name (get price-function namespace-props)))) ERR-STX-BURNT-INSUFFICIENT)\n        ;; Verify that the name contains only valid characters.\n        (asserts! (not (has-invalid-chars name)) ERR-CHARSET-INVALID)\n        ;; Mark the preorder as claimed to prevent double-spending\n        (map-set name-preorders { hashed-salted-fqn: hashed-salted-fqn, buyer: contract-caller } (merge preorder {claimed: true}))\n        ;; Check if the name already exists\n        (match (map-get? name-properties {name: name, namespace: namespace})\n            name-props-exist\n            ;; If the name exists \n            (handle-existing-name name-props-exist hashed-salted-fqn (get created-at preorder) stx-burned name namespace (get lifetime namespace-props))\n            ;; If the name does not exist\n            (register-new-name (+ (var-get bns-index) u1) hashed-salted-fqn stx-burned name namespace (get lifetime namespace-props))    \n        )\n    )\n)\n\n;; @desc (new) Defines a public function `claim-preorder` for claiming back the STX commited to be burnt on registration.\n;; This should only be allowed to go through if preorder-claimability-ttl has passed\n;; @param: hashed-salted-fqn (buff 20): The hashed and salted fully qualified name.\n(define-public (claim-preorder (hashed-salted-fqn (buff 20)))\n    (let\n        (\n            ;; Retrieves the preorder details.\n            (preorder (unwrap! (map-get? name-preorders { hashed-salted-fqn: hashed-salted-fqn, buyer: contract-caller }) ERR-PREORDER-NOT-FOUND))\n            (claimer contract-caller)\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS) \n        ;; Check if the preorder-claimability-ttl has passed\n        (asserts! (> burn-block-height (+ (get created-at preorder) PREORDER-CLAIMABILITY-TTL)) ERR-OPERATION-UNAUTHORIZED)\n        ;; Asserts that the preorder has not been claimed\n        (asserts! (not (get claimed preorder)) ERR-OPERATION-UNAUTHORIZED)\n        ;; Transfers back the specified amount of stx from the BNS contract to the contract-caller\n        (try! (as-contract (stx-transfer? (get stx-burned preorder) .BNS-V2 claimer)))\n        ;; Deletes the preorder in the 'name-preorders' map.\n        (map-delete name-preorders { hashed-salted-fqn: hashed-salted-fqn, buyer: contract-caller })\n        ;; Remove the entry from the name-single-preorder map\n        (map-delete name-single-preorder hashed-salted-fqn)\n        ;; Returns ok true\n        (ok true)\n    )\n)\n\n;; @desc (new) This function is similar to `name-preorder` but only for namespace managers, without the burning of STX tokens.\n;; Intended only for managers as mng-name-register & name-register will validate.\n;; @param: hashed-salted-fqn (buff 20): The hashed and salted fully-qualified name (FQN) being preordered.\n(define-public (mng-name-preorder (hashed-salted-fqn (buff 20)))\n    (begin\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Validates that the length of the hashed and salted FQN is exactly 20 bytes.\n        (asserts! (is-eq (len hashed-salted-fqn) HASH160LEN) ERR-HASH-MALFORMED)\n        ;; Check if the same hashed-salted-fqn has been used before\n        (asserts! (is-none (map-get? name-single-preorder hashed-salted-fqn)) ERR-PREORDERED-BEFORE)\n        ;; Records the preorder in the 'name-preorders' map. Buyer set to contract-caller\n        (map-set name-preorders\n            { hashed-salted-fqn: hashed-salted-fqn, buyer: contract-caller }\n            { created-at: burn-block-height, stx-burned: u0, claimed: false }\n        )\n        ;; Sets the map with just the hashed-salted-fqn as the key\n        (map-set name-single-preorder hashed-salted-fqn true)\n        ;; Returns the block height at which the preorder's claimability period will expire.\n        (ok (+ burn-block-height PREORDER-CLAIMABILITY-TTL))\n    )\n)\n\n;; @desc (new) This function uses provided details to verify the preorder, register the name, and assign it initial properties.\n;; This should only allow Managers from MANAGED namespaces to register names.\n;; @param: namespace (buff 20): The namespace for the name.\n;; @param: name (buff 48): The name being registered.\n;; @param: salt (buff 20): The salt used in hashing.\n;; @param: send-to (principal): The principal to whom the name will be registered.\n(define-public (mng-name-register (namespace (buff 20)) (name (buff 48)) (salt (buff 20)) (send-to principal))\n    (let \n        (\n            ;; Generates the hashed, salted fully-qualified name.\n            (hashed-salted-fqn (hash160 (concat (concat (concat name 0x2e) namespace) salt)))\n            ;; Retrieves the existing properties of the namespace to confirm its existence and management details.\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            (current-namespace-manager (unwrap! (get namespace-manager namespace-props) ERR-NO-NAMESPACE-MANAGER))\n            ;; Retrieves the preorder information using the hashed-salted FQN to verify the preorder exists\n            (preorder (unwrap! (map-get? name-preorders { hashed-salted-fqn: hashed-salted-fqn, buyer: current-namespace-manager }) ERR-PREORDER-NOT-FOUND))\n            ;; Calculates the ID for the new name to be minted.\n            (id-to-be-minted (+ (var-get bns-index) u1))\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the preorder has not been claimed before\n        (asserts! (not (get claimed preorder)) ERR-OPERATION-UNAUTHORIZED)\n        ;; Ensure the name is not already registered\n        (asserts! (is-none (map-get? name-properties {name: name, namespace: namespace})) ERR-NAME-NOT-AVAILABLE)\n        ;; Verify that the name contains only valid characters.\n        (asserts! (not (has-invalid-chars name)) ERR-CHARSET-INVALID)\n        ;; Verifies that the caller is the namespace manager.\n        (asserts! (is-eq contract-caller current-namespace-manager) ERR-NOT-AUTHORIZED)\n        ;; Validates that the preorder was made after the namespace was officially launched.\n        (asserts! (> (get created-at preorder) (unwrap! (get launched-at namespace-props) ERR-UNWRAP)) ERR-NAME-PREORDERED-BEFORE-NAMESPACE-LAUNCH)\n        ;; Verifies the registration is completed within the claimability period.\n        (asserts! (< burn-block-height (+ (get created-at preorder) PREORDER-CLAIMABILITY-TTL)) ERR-PREORDER-CLAIMABILITY-EXPIRED)\n        ;; Sets properties for the newly registered name.\n        (map-set name-properties\n            {\n                name: name, namespace: namespace\n            } \n            {\n                registered-at: (some burn-block-height),\n                imported-at: none,\n                hashed-salted-fqn-preorder: (some hashed-salted-fqn),\n                preordered-by: (some send-to),\n                ;; Updated this to be u0, so that renewals are handled through the namespace manager \n                renewal-height: u0,\n                stx-burn: u0,\n                owner: send-to,\n            }\n        )\n        (map-set name-to-index {name: name, namespace: namespace} id-to-be-minted)\n        (map-set index-to-name id-to-be-minted {name: name, namespace: namespace})\n        ;; Update primary name if needed for send-to\n        (update-primary-name-recipient id-to-be-minted send-to)\n        ;; Updates BNS-index variable to the newly minted ID.\n        (var-set bns-index id-to-be-minted)\n        ;; Update map to claimed for preorder, to avoid people reclaiming stx from an already registered name\n        (map-set name-preorders { hashed-salted-fqn: hashed-salted-fqn, buyer: current-namespace-manager } (merge preorder {claimed: true}))\n        ;; Mints the BNS name as an NFT to the send-to address, finalizing the registration.\n        (try! (nft-mint? BNS-V2 id-to-be-minted send-to))\n        ;; Log the new name registration\n        (print \n            {\n                topic: \"new-name\",\n                owner: send-to,\n                name: {name: name, namespace: namespace},\n                id: id-to-be-minted,\n                properties: (map-get? name-properties {name: name, namespace: namespace})\n            }\n        )\n        ;; Confirms successful registration of the name.\n        (ok id-to-be-minted)\n    )\n)\n\n;; Public function `name-renewal` for renewing ownership of a name.\n;; @param: namespace (buff 20): The namespace of the name to be renewed.\n;; @param: name (buff 48): The actual name to be renewed.\n;; @param: stx-to-burn (uint): The amount of STX tokens to be burned for renewal.\n(define-public (name-renewal (namespace (buff 20)) (name (buff 48)))\n    (let \n        (\n            ;; Get the unique identifier for this name\n            (name-index (unwrap! (get-id-from-bns name namespace) ERR-NO-NAME))\n            ;; Retrieve the properties of the namespace\n            (namespace-props (unwrap! (map-get? namespaces namespace) ERR-NAMESPACE-NOT-FOUND))\n            ;; Get the manager of the namespace, if any\n            (namespace-manager (get namespace-manager namespace-props))\n            ;; Get the current owner of the name\n            (owner (unwrap! (nft-get-owner? BNS-V2 name-index) ERR-NO-NAME))\n            ;; Retrieve the properties of the name\n            (name-props (unwrap! (map-get? name-properties { name: name, namespace: namespace }) ERR-NO-NAME))\n            ;; Get the lifetime of names in this namespace\n            (lifetime (get lifetime namespace-props))\n            ;; Get the current renewal height of the name\n            (renewal-height (try! (get-renewal-height name-index)))\n            ;; Calculate the new renewal height based on current block height\n            (new-renewal-height (+ burn-block-height lifetime))\n        )\n        ;; Check if migration is complete\n        (asserts! (var-get migration-complete) ERR-MIGRATION-IN-PROGRESS)\n        ;; Verify that the namespace has been launched\n        (asserts! (is-some (get launched-at namespace-props)) ERR-NAMESPACE-NOT-LAUNCHED)\n        ;; Ensure the namespace doesn't have a manager\n        (asserts! (is-none namespace-manager) ERR-NAMESPACE-HAS-MANAGER)\n        ;; Check if renewals are required for this namespace\n        (asserts! (> lifetime u0) ERR-LIFETIME-EQUAL-0)\n        ;; Handle renewal based on whether it's within the grace period or not\n        (if (< burn-block-height (+ renewal-height NAME-GRACE-PERIOD-DURATION))   \n            (try! (handle-renewal-in-grace-period name namespace name-props owner lifetime new-renewal-height))\n            (try! (handle-renewal-after-grace-period name namespace name-props owner name-index new-renewal-height))\n        )\n        ;; Burn the specified amount of STX\n        (try! (stx-burn? (try! (compute-name-price name (get price-function namespace-props))) contract-caller))\n        ;; update the new stx-burn to the one paid in renewal\n        (map-set name-properties { name: name, namespace: namespace } (merge (unwrap-panic (map-get? name-properties { name: name, namespace: namespace })) {stx-burn: (try! (compute-name-price name (get price-function namespace-props)))}))\n        ;; Return success\n        (ok true)\n    )\n)\n\n;; Private function to handle renewals within the grace period\n(define-private (handle-renewal-in-grace-period \n    (name (buff 48)) \n    (namespace (buff 20)) \n    (name-props \n        {\n            registered-at: (optional uint), \n            imported-at: (optional uint), \n            hashed-salted-fqn-preorder: (optional (buff 20)), \n            preordered-by: (optional principal), \n            renewal-height: uint, \n            stx-burn: uint, \n            owner: principal\n        }\n    ) \n    (owner principal) \n    (lifetime uint) \n    (new-renewal-height uint)\n)\n    (begin\n        ;; Ensure only the owner can renew within the grace period\n        (asserts! (is-eq contract-caller owner) ERR-NOT-AUTHORIZED)\n        ;; Update the name properties with the new renewal height\n        (map-set name-properties {name: name, namespace: namespace} \n            (merge name-props \n                {\n                    renewal-height: \n                        ;; If still within lifetime, extend from current renewal height; otherwise, use new renewal height\n                        (if (< burn-block-height (unwrap-panic (get-renewal-height (unwrap-panic (get-id-from-bns name namespace)))))\n                            (+ (unwrap-panic (get-renewal-height (unwrap-panic (get-id-from-bns name namespace)))) lifetime)\n                            new-renewal-height\n                        )\n                }\n            )\n        )\n        (print \n            {\n                topic: \"renew-name\", \n                owner: owner, \n                name: {name: name, namespace: namespace}, \n                id: (get-id-from-bns name namespace),\n                properties: (map-get? name-properties {name: name, namespace: namespace})\n            }\n        )\n        (ok true)\n    )\n)\n\n;; Private function to handle renewals after the grace period\n(define-private (handle-renewal-after-grace-period \n    (name (buff 48)) \n    (namespace (buff 20)) \n    (name-props \n        {\n            registered-at: (optional uint), \n            imported-at: (optional uint), \n            hashed-salted-fqn-preorder: (optional (buff 20)), \n            preordered-by: (optional principal), \n            renewal-height: uint, \n            stx-burn: uint, \n            owner: principal\n        }\n    ) \n    (owner principal) \n    (name-index uint) \n    (new-renewal-height uint)\n)\n    (if (is-eq contract-caller owner)\n        ;; If the owner is renewing, simply update the renewal height\n        (ok \n            (map-set name-properties {name: name, namespace: namespace}\n                (merge name-props {renewal-height: new-renewal-height})\n            )\n        )\n        ;; If someone else is renewing (taking over the name)\n        (begin \n            ;; Check if the name is listed on the market and remove the listing if it is\n            (match (map-get? market name-index)\n                listed-name \n                (map-delete market name-index) \n                true\n            )\n            (map-set name-properties {name: name, namespace: namespace}\n                    (merge name-props {renewal-height: new-renewal-height})\n            )\n            ;; Update the name properties with the new renewal height and owner\n            (ok (try! (purchase-transfer name-index owner contract-caller)))\n        )\n    )  \n)\n\n;; Returns the minimum of two uint values.\n(define-private (min (a uint) (b uint))\n    ;; If 'a' is less than or equal to 'b', return 'a', else return 'b'.\n    (if (<= a b) a b)  \n)\n\n;; Returns the maximum of two uint values.\n(define-private (max (a uint) (b uint))\n    ;; If 'a' is greater than 'b', return 'a', else return 'b'.\n    (if (> a b) a b)  \n)\n\n;; Retrieves an exponent value from a list of buckets based on the provided index.\n(define-private (get-exp-at-index (buckets (list 16 uint)) (index uint))\n    ;; Retrieves the element at the specified index.\n    (unwrap-panic (element-at? buckets index))  \n)\n\n;; Determines if a character is a digit (0-9).\n(define-private (is-digit (char (buff 1)))\n    (or \n        ;; Checks if the character is between '0' and '9' using hex values.\n        (is-eq char 0x30) ;; 0\n        (is-eq char 0x31) ;; 1\n        (is-eq char 0x32) ;; 2\n        (is-eq char 0x33) ;; 3\n        (is-eq char 0x34) ;; 4\n        (is-eq char 0x35) ;; 5\n        (is-eq char 0x36) ;; 6\n        (is-eq char 0x37) ;; 7\n        (is-eq char 0x38) ;; 8\n        (is-eq char 0x39) ;; 9\n    )\n) \n\n;; Checks if a character is a lowercase alphabetic character (a-z).\n(define-private (is-lowercase-alpha (char (buff 1)))\n    (or \n        ;; Checks for each lowercase letter using hex values.\n        (is-eq char 0x61) ;; a\n        (is-eq char 0x62) ;; b\n        (is-eq char 0x63) ;; c\n        (is-eq char 0x64) ;; d\n        (is-eq char 0x65) ;; e\n        (is-eq char 0x66) ;; f\n        (is-eq char 0x67) ;; g\n        (is-eq char 0x68) ;; h\n        (is-eq char 0x69) ;; i\n        (is-eq char 0x6a) ;; j\n        (is-eq char 0x6b) ;; k\n        (is-eq char 0x6c) ;; l\n        (is-eq char 0x6d) ;; m\n        (is-eq char 0x6e) ;; n\n        (is-eq char 0x6f) ;; o\n        (is-eq char 0x70) ;; p\n        (is-eq char 0x71) ;; q\n        (is-eq char 0x72) ;; r\n        (is-eq char 0x73) ;; s\n        (is-eq char 0x74) ;; t\n        (is-eq char 0x75) ;; u\n        (is-eq char 0x76) ;; v\n        (is-eq char 0x77) ;; w\n        (is-eq char 0x78) ;; x\n        (is-eq char 0x79) ;; y\n        (is-eq char 0x7a) ;; z\n    )\n) \n\n;; Determines if a character is a vowel (a, e, i, o, u, and y).\n(define-private (is-vowel (char (buff 1)))\n    (or \n        (is-eq char 0x61) ;; a\n        (is-eq char 0x65) ;; e\n        (is-eq char 0x69) ;; i\n        (is-eq char 0x6f) ;; o\n        (is-eq char 0x75) ;; u\n        (is-eq char 0x79) ;; y\n    )\n)\n\n;; Identifies if a character is a special character, specifically '-' or '_'.\n(define-private (is-special-char (char (buff 1)))\n    (or \n        (is-eq char 0x2d) ;; -\n        (is-eq char 0x5f)) ;; _\n) \n\n;; Determines if a character is valid within a name, based on allowed character sets.\n(define-private (is-char-valid (char (buff 1)))\n    (or (is-lowercase-alpha char) (is-digit char) (is-special-char char))\n)\n\n;; Checks if a character is non-alphabetic, either a digit or a special character.\n(define-private (is-nonalpha (char (buff 1)))\n    (or (is-digit char) (is-special-char char))\n)\n\n;; Evaluates if a name contains any vowel characters.\n(define-private (has-vowels-chars (name (buff 48)))\n    (> (len (filter is-vowel name)) u0)\n)\n\n;; Determines if a name contains non-alphabetic characters.\n(define-private (has-nonalpha-chars (name (buff 48)))\n    (> (len (filter is-nonalpha name)) u0)\n)\n\n;; Identifies if a name contains any characters that are not considered valid.\n(define-private (has-invalid-chars (name (buff 48)))\n    (< (len (filter is-char-valid name)) (len name))\n)\n\n;; Private helper function `is-namespace-available` checks if a namespace is available for registration or other operations.\n;; It considers if the namespace has been launched and whether it has expired.\n;; @params:\n    ;; namespace (buff 20): The namespace to check for availability.\n(define-private (is-namespace-available (namespace (buff 20)))\n    ;; Check if the namespace exists\n    (match (map-get? namespaces namespace) \n        namespace-props\n        ;; If it exists\n        ;; Check if the namespace has been launched.\n        (match (get launched-at namespace-props) \n            launched\n            ;; If the namespace is launched, it's considered unavailable if it hasn't expired.\n            false\n            ;; Check if the namespace is expired by comparing the current block height to the reveal time plus the launchability TTL.\n            (> burn-block-height (+ (get revealed-at namespace-props) NAMESPACE-LAUNCHABILITY-TTL))\n        )\n        ;; If the namespace doesn't exist in the map, it's considered available.\n        true\n    )\n)\n\n;; Private helper function `compute-name-price` calculates the registration price for a name based on its length and character composition.\n;; It utilizes a configurable pricing function that can adjust prices based on the name's characteristics.\n;; @params:\n;;     name (buff 48): The name for which the price is being calculated.\n;;     price-function (tuple): A tuple containing the parameters of the pricing function, including:\n;;         buckets (list 16 uint): A list defining price multipliers for different name lengths.\n;;         base (uint): The base price multiplier.\n;;         coeff (uint): A coefficient that adjusts the base price.\n;;         nonalpha-discount (uint): A discount applied to names containing non-alphabetic characters.\n;;         no-vowel-discount (uint): A discount applied to names lacking vowel characters.\n(define-private (compute-name-price (name (buff 48)) (price-function {buckets: (list 16 uint), base: uint, coeff: uint, nonalpha-discount: uint, no-vowel-discount: uint}))\n    (let \n        (\n            ;; Determine the appropriate exponent based on the name's length.\n            ;; This corresponds to a specific bucket in the pricing function.\n            ;; The length of the name is used to index into the buckets list, with a maximum index of 15.\n            (exponent (get-exp-at-index (get buckets price-function) (min u15 (- (len name) u1)))) \n            ;; Calculate the no-vowel discount.\n            ;; If the name has no vowels, apply the no-vowel discount from the price function.\n            ;; Otherwise, use 1 indicating no discount.\n            (no-vowel-discount (if (not (has-vowels-chars name)) (get no-vowel-discount price-function) u1))\n            ;; Calculate the non-alphabetic character discount.\n            ;; If the name contains non-alphabetic characters, apply the non-alpha discount from the price function.\n            ;; Otherwise, use 1 indicating no discount.\n            (nonalpha-discount (if (has-nonalpha-chars name) (get nonalpha-discount price-function) u1))\n            (len-name (len name))\n        )\n        (asserts! (> len-name u0) ERR-NAME-BLANK)\n        ;; Compute the final price.\n        ;; The base price, adjusted by the coefficient and exponent, is divided by the greater of the two discounts (non-alpha or no-vowel).\n        ;; The result is then multiplied by 10 to adjust for unit precision.\n        (ok (* (/ (* (get coeff price-function) (pow (get base price-function) exponent)) (max nonalpha-discount no-vowel-discount)) u10))\n    )\n)\n\n;; This function is similar to the 'transfer' function but does not check that the owner is the contract-caller.\n;; @param id: the id of the nft being transferred.\n;; @param owner: the principal of the current owner of the nft being transferred.\n;; @param recipient: the principal of the recipient to whom the nft is being transferred.\n(define-private (purchase-transfer (id uint) (owner principal) (recipient principal))\n    (let \n        (\n            ;; Attempts to retrieve the name and namespace associated with the given NFT ID.\n            (name-and-namespace (unwrap! (map-get? index-to-name id) ERR-NO-NAME))\n            ;; Retrieves the properties of the name within the namespace.\n            (name-props (unwrap! (map-get? name-properties name-and-namespace) ERR-NO-NAME))\n        )\n        ;; Check owner and recipient is not the same\n        (asserts! (not (is-eq owner recipient)) ERR-OPERATION-UNAUTHORIZED)\n        (asserts! (is-eq owner (get owner name-props)) ERR-NOT-AUTHORIZED)\n        ;; Update primary name if needed for owner\n        (update-primary-name-owner id owner)\n        ;; Update primary name if needed for recipient\n        (update-primary-name-recipient id recipient)\n        ;; Updates the owner to the recipient.\n        (map-set name-properties name-and-namespace (merge name-props {owner: recipient}))\n        ;; Executes the NFT transfer from the current owner to the recipient.\n        (try! (nft-transfer? BNS-V2 id owner recipient))\n        (print \n            {\n                topic: \"transfer-name\", \n                owner: recipient, \n                name: {name: (get name name-and-namespace), namespace: (get namespace name-and-namespace)}, \n                id: id,\n                properties: (map-get? name-properties {name: (get name name-and-namespace), namespace: (get namespace name-and-namespace)})\n            }\n        )\n        (ok true)\n    )\n)\n\n;; Private function to update the primary name of an address when transfering a name\n;; If the id is = to the primary name then it means that a transfer is happening and we should delete it\n(define-private (update-primary-name-owner (id uint) (owner principal)) \n    ;; Check if the owner is transferring the primary name\n    (if (is-eq (map-get? primary-name owner) (some id)) \n        ;; If it is, then delete the primary name map\n        (map-delete primary-name owner)\n        ;; If it is not, do nothing, keep the current primary name\n        false\n    )\n)\n\n;; Private function to update the primary name of an address when recieving\n(define-private (update-primary-name-recipient (id uint) (recipient principal)) \n    ;; Check if recipient has a primary name\n    (match (map-get? primary-name recipient)\n        recipient-primary-name\n        ;; If recipient has a primary name do nothing\n        true\n        ;; If recipient doesn't have a primary name\n        (map-set primary-name recipient id)\n    )\n)\n\n(define-private (handle-existing-name \n    (name-props \n        {\n            registered-at: (optional uint), \n            imported-at: (optional uint), \n            hashed-salted-fqn-preorder: (optional (buff 20)), \n            preordered-by: (optional principal), \n            renewal-height: uint, \n            stx-burn: uint, \n            owner: principal\n        }\n    ) \n    (hashed-salted-fqn (buff 20)) \n    (contract-caller-preorder-height uint) \n    (stx-burned uint) (name (buff 48)) \n    (namespace (buff 20)) \n    (renewal uint)\n)\n    (let \n        (\n            ;; Retrieve the index of the existing name\n            (name-index (unwrap-panic (map-get? name-to-index {name: name, namespace: namespace})))\n        )\n        ;; Straight up check if the name was imported\n        (asserts! (is-none (get imported-at name-props)) ERR-IMPORTED-BEFORE)\n        ;; If the check passes then it is registered, we can straight up check the hashed-salted-fqn-preorder\n        (match (get hashed-salted-fqn-preorder name-props)\n            fqn \n            ;; Compare both preorder's height\n            (asserts! (> (unwrap-panic (get created-at (map-get? name-preorders {hashed-salted-fqn: fqn, buyer: (unwrap-panic (get preordered-by name-props))}))) contract-caller-preorder-height) ERR-PREORDERED-BEFORE)\n            ;; Compare registered with preorder height\n            (asserts! (> (unwrap-panic (get registered-at name-props)) contract-caller-preorder-height) ERR-FAST-MINTED-BEFORE)\n        )\n        ;; Update the name properties with the new preorder information since it is the best preorder\n        (map-set name-properties {name: name, namespace: namespace} \n            (merge name-props \n                {\n                    hashed-salted-fqn-preorder: (some hashed-salted-fqn), \n                    preordered-by: (some contract-caller), \n                    registered-at: (some burn-block-height), \n                    renewal-height: (if (is-eq renewal u0)\n                                        u0\n                                        (+ burn-block-height renewal)\n                                    ), \n                    stx-burn: stx-burned\n                }\n            )\n        )\n        (try! (as-contract (stx-transfer? stx-burned .BNS-V2 (get owner name-props))))\n        ;; Transfer ownership of the name to the new owner\n        (try! (purchase-transfer name-index (get owner name-props) contract-caller))\n        ;; Log the name transfer event\n        (print \n            {\n                topic: \"transfer-name\", \n                owner: contract-caller, \n                name: {name: name, namespace: namespace}, \n                id: name-index,\n                properties: (map-get? name-properties {name: name, namespace: namespace})\n            }\n        )\n        ;; Return the name index\n        (ok name-index)\n    )\n)\n\n(define-private (register-new-name (id-to-be-minted uint) (hashed-salted-fqn (buff 20)) (stx-burned uint) (name (buff 48)) (namespace (buff 20)) (lifetime uint))\n    (begin\n        ;; Set the properties for the newly registered name\n        (map-set name-properties\n            {name: name, namespace: namespace} \n            {\n                registered-at: (some burn-block-height),\n                imported-at: none,\n                hashed-salted-fqn-preorder: (some hashed-salted-fqn),\n                preordered-by: (some contract-caller),\n                renewal-height: (if (is-eq lifetime u0)\n                                    u0\n                                    (+ burn-block-height lifetime)\n                                ),\n                stx-burn: stx-burned,\n                owner: contract-caller,\n            }\n        )\n        ;; Update the index-to-name and name-to-index mappings\n        (map-set index-to-name id-to-be-minted {name: name, namespace: namespace})\n        (map-set name-to-index {name: name, namespace: namespace} id-to-be-minted)\n        ;; Increment the BNS index\n        (var-set bns-index id-to-be-minted)\n        ;; Update the primary name for the new owner if necessary\n        (update-primary-name-recipient id-to-be-minted contract-caller)\n        ;; Mint a new NFT for the BNS name\n        (try! (nft-mint? BNS-V2 id-to-be-minted contract-caller))\n        ;; Burn the STX paid for the name registration\n        (try! (as-contract (stx-burn? stx-burned .BNS-V2)))\n        ;; Log the new name registration event\n        (print \n            {\n                topic: \"new-name\", \n                owner: contract-caller, \n                name: {name: name, namespace: namespace}, \n                id: id-to-be-minted,\n                properties: (map-get? name-properties {name: name, namespace: namespace})\n            }\n        )\n        ;; Return the ID of the newly minted name\n        (ok id-to-be-minted)\n    )\n)\n\n;; Migration Functions\n(define-public (namespace-airdrop \n    (namespace (buff 20))\n    (pricing {base: uint, buckets: (list 16 uint), coeff: uint, no-vowel-discount: uint, nonalpha-discount: uint}) \n    (lifetime uint) \n    (namespace-import principal) \n    (namespace-manager (optional principal)) \n    (can-update-price bool) \n    (manager-transfers bool) \n    (manager-frozen bool)\n    (revealed-at uint)\n    (launched-at uint)\n)\n    (begin\n        ;; Check if migration is complete\n        (asserts! (not (var-get migration-complete)) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the contract-caller is the airdrop contract.\n        (asserts! (is-eq DEPLOYER tx-sender) ERR-OPERATION-UNAUTHORIZED)\n        ;; Ensure the namespace consists of valid characters only.\n        (asserts! (not (has-invalid-chars namespace)) ERR-CHARSET-INVALID)\n        ;; Check that the namespace is available for reveal.\n        (asserts! (unwrap! (can-namespace-be-registered namespace) ERR-NAMESPACE-ALREADY-EXISTS) ERR-NAMESPACE-ALREADY-EXISTS)\n        ;; Set all properties\n        (map-set namespaces namespace\n            {\n                namespace-manager: namespace-manager,\n                manager-transferable: manager-transfers,\n                manager-frozen: manager-frozen,\n                namespace-import: namespace-import,\n                revealed-at: revealed-at,\n                launched-at: (some launched-at),\n                lifetime: lifetime,\n                can-update-price-function: can-update-price,\n                price-function: pricing \n            }\n        )\n        ;; Emit an event to indicate the namespace is now ready and launched.\n        (print { namespace: namespace, status: \"launch\", properties: (map-get? namespaces namespace)})\n        ;; Confirm successful airdrop of the namespace\n        (ok namespace)\n    )\n)\n\n(define-public (name-airdrop\n    (name (buff 48))\n    (namespace (buff 20))\n    (registered-at uint)\n    (lifetime uint) \n    (owner principal)\n)\n    (let\n        (\n            (mint-index (+ u1 (var-get bns-index)))\n        )\n        ;; Check if migration is complete\n        (asserts! (not (var-get migration-complete)) ERR-MIGRATION-IN-PROGRESS)\n        ;; Ensure the contract-caller is the airdrop contract.\n        (asserts! (is-eq DEPLOYER tx-sender) ERR-OPERATION-UNAUTHORIZED)\n        ;; Set all properties\n        (map-set name-to-index {name: name, namespace: namespace} mint-index)\n        (map-set index-to-name mint-index {name: name, namespace: namespace})\n        (map-set name-properties {name: name, namespace: namespace}\n            {\n                registered-at: (some registered-at),\n                imported-at: none,\n                hashed-salted-fqn-preorder: none,\n                preordered-by: none,\n                renewal-height: (if (is-eq lifetime u0) u0 (+ burn-block-height lifetime)),\n                stx-burn: u0,\n                owner: owner,\n            }\n        )\n        ;; Update the index \n        (var-set bns-index mint-index)\n        ;; Update the primary name of the recipient\n        (map-set primary-name owner mint-index)\n        ;; Mint the Name to the owner\n        (try! (nft-mint? BNS-V2 mint-index owner))\n        (print \n            {\n                topic: \"new-airdrop\", \n                owner: owner, \n                name: {name: name, namespace: namespace}, \n                id: mint-index,\n                registered-at: registered-at, \n            }\n        )\n        ;; Confirm successful airdrop of the namespace\n        (ok mint-index)\n    )\n)\n\n(define-public (flip-migration-complete)\n    (ok \n        (begin \n            (asserts! (is-eq contract-caller DEPLOYER) ERR-NOT-AUTHORIZED) \n            (var-set migration-complete true)\n        )\n    )\n)\n\n",
    "analysis": {
      "summary": "The BNS-V2 contract manages the creation, transfer, and renewal of blockchain-based namespaces and names, including NFT minting for names.",
      "explanation": "This contract is an updated version of a Blockchain Name Service (BNS) system, which allows for the creation of namespaces and the registration of names within those namespaces. Each name is represented as a non-fungible token (NFT), making it unique and ownable. The contract includes features for preordering, revealing, and launching namespaces, as well as registering, transferring, and renewing names. It supports custom pricing models for namespace creation and name registration, based on name length and character composition. The contract also includes mechanisms for namespace managers to manage names and for users to list names on a marketplace. Importantly, it incorporates a migration system for existing names and namespaces to be airdropped into this new version. The contract is SIP-09 compliant, meaning it adheres to the standard for Stacks NFTs, allowing for interoperability with other contracts and applications on the Stacks blockchain.",
      "tags": [
        "NFT",
        "BNS",
        "namespace",
        "name-registration",
        "marketplace",
        "migration",
        "SIP-09"
      ]
    }
  },
  {
    "rank": 5,
    "contract": "SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex",
    "calls": 12242,
    "source": "(impl-trait .trait-sip-010.sip-010-trait)\n(impl-trait .extension-trait.extension-trait)\n(define-constant err-unauthorised (err u3000))\n(define-constant err-not-token-owner (err u4))\n(define-fungible-token alex)\n(define-fungible-token alex-locked)\n(define-data-var token-name (string-ascii 32) \"ALEX Token\")\n(define-data-var token-symbol (string-ascii 10) \"ALEX\")\n(define-data-var token-decimals uint u8)\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://cdn.alexlab.co/metadata/token-alex.json\"))\n(define-map approved-contracts principal bool)\n(define-public (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) err-unauthorised))\n)\n(define-private (check-is-approved)\n  (ok (asserts! (default-to false (map-get? approved-contracts tx-sender)) err-unauthorised))\n)\n(define-public (edg-transfer (amount uint) (sender principal) (recipient principal))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ft-transfer? alex amount sender recipient)\n\t)\n)\n(define-public (edg-lock (amount uint) (owner principal))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(try! (ft-burn? alex amount owner))\n\t\t(ft-mint? alex-locked amount owner)\n\t)\n)\n(define-public (edg-unlock (amount uint) (owner principal))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(try! (ft-burn? alex-locked amount owner))\n\t\t(ft-mint? alex amount owner)\n\t)\n)\n(define-public (edg-mint (amount uint) (recipient principal))\n\t(begin\t\t\n\t\t(asserts! (or (is-ok (is-dao-or-extension)) (is-ok (check-is-approved))) err-unauthorised)\n\t\t(ft-mint? alex amount recipient)\n\t)\n)\n(define-public (edg-burn (amount uint) (owner principal))\n\t(begin\n\t\t(asserts! (or (is-ok (is-dao-or-extension)) (is-ok (check-is-approved))) err-unauthorised)\n\t\t(ft-burn? alex amount owner)\n\t)\n)\n(define-public (set-name (new-name (string-ascii 32)))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set token-name new-name))\n\t)\n)\n(define-public (set-symbol (new-symbol (string-ascii 10)))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set token-symbol new-symbol))\n\t)\n)\n(define-public (set-decimals (new-decimals uint))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set token-decimals new-decimals))\n\t)\n)\n(define-public (set-token-uri (new-uri (optional (string-utf8 256))))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set token-uri new-uri))\n\t)\n)\n(define-private (edg-mint-many-iter (item {amount: uint, recipient: principal}))\n\t(ft-mint? alex (get amount item) (get recipient item))\n)\n(define-public (edg-mint-many (recipients (list 200 {amount: uint, recipient: principal})))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (map edg-mint-many-iter recipients))\n\t)\n)\n(define-public (edg-set-approved-contract (new-approved-contract principal) (approved bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (map-set approved-contracts new-approved-contract approved))\n  )\n)\n(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))\n\t(begin\n\t\t(asserts! (or (is-eq tx-sender sender) (is-eq contract-caller sender)) err-not-token-owner)\n\t\t(ft-transfer? alex amount sender recipient)\n\t)\n)\n(define-read-only (get-name)\n\t(ok (var-get token-name))\n)\n(define-read-only (get-symbol)\n\t(ok (var-get token-symbol))\n)\n(define-read-only (get-decimals)\n\t(ok (var-get token-decimals))\n)\n(define-read-only (get-balance (who principal))\n\t(ok (+ (ft-get-balance alex who) (ft-get-balance alex-locked who)))\n)\n(define-read-only (get-total-supply)\n\t(ok (+ (ft-get-supply alex) (ft-get-supply alex-locked)))\n)\n(define-read-only (get-token-uri)\n\t(ok (var-get token-uri))\n)\n(define-read-only (edg-get-balance (who principal))\n\t(get-balance who)\n)\n(define-read-only (edg-has-percentage-balance (who principal) (factor uint))\n\t(ok (>= (* (unwrap-panic (get-balance who)) factor) (* (unwrap-panic (get-total-supply)) u1000)))\n)\n(define-read-only (edg-get-locked (owner principal))\n\t(ok (ft-get-balance alex-locked owner))\n)\n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true)\n)\n(define-constant ONE_8 (pow u10 u8))\n(define-public (mint (amount uint) (recipient principal))\n  (edg-mint amount recipient)\n)\n(define-public (burn (amount uint) (sender principal))\n  (edg-burn amount sender)\n)\n(define-private (pow-decimals)\n  (pow u10 (unwrap-panic (get-decimals)))\n)\n(define-read-only (fixed-to-decimals (amount uint))\n  (/ (* amount (pow-decimals)) ONE_8)\n)\n(define-private (decimals-to-fixed (amount uint))\n  (/ (* amount ONE_8) (pow-decimals))\n)\n(define-read-only (get-total-supply-fixed)\n  (ok (decimals-to-fixed (unwrap-panic (get-total-supply))))\n)\n(define-read-only (get-balance-fixed (account principal))\n  (ok (decimals-to-fixed (unwrap-panic (get-balance account))))\n)\n(define-public (transfer-fixed (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))\n  (transfer (fixed-to-decimals amount) sender recipient memo)\n)\n(define-public (mint-fixed (amount uint) (recipient principal))\n  (mint (fixed-to-decimals amount) recipient)\n)\n(define-public (burn-fixed (amount uint) (sender principal))\n  (burn (fixed-to-decimals amount) sender)\n)",
    "analysis": {
      "summary": "This contract implements a fungible token with extended features such as locking, minting, burning, and setting token metadata, while enforcing access control.",
      "explanation": "The contract starts by implementing two traits, SIP-010 for standard fungible token operations and an extension trait for additional functionalities. It defines constants for error codes, two fungible tokens (`alex` and `alex-locked`), and data variables for token metadata. The contract includes a map to keep track of approved contracts and several public functions to manage the tokens and metadata, with access control enforced through `is-dao-or-extension` and `check-is-approved` functions.\n\n- <L3-4> Implementing traits ensures compatibility with Stacks standards and custom extensions.\n- <L5-10> Constants for error handling improve code readability and maintenance.\n- <L11-14> Token definitions and metadata setup are standard for fungible tokens.\n- <L15> The `approved-contracts` map enables dynamic access control.\n- <L16-18> `is-dao-or-extension` checks if the caller is authorized, crucial for secure contract operations.\n- <L19-21> `check-is-approved` provides an additional layer for verifying contract interactions.\n- Functions like `edg-transfer`, `edg-lock`, `edg-unlock`, `edg-mint`, and `edg-burn` <L22-63> offer advanced token management features, including locking mechanisms and controlled minting/burning, which are not typically available in basic token contracts.\n- Metadata management functions <L64-85> allow updating token information, adhering to the principle of administrative control over token properties.\n- The `edg-mint-many` function <L86-91> introduces batch minting, optimizing transaction throughput for multiple recipients.\n- Access control for setting approved contracts <L92-97> and standard token operations like `transfer` <L98-103> are enforced through custom checks, ensuring that only authorized entities can perform sensitive actions.\n- Read-only functions <L104-132> provide essential token information and utilities for interacting with the contract state without altering it.\n- The contract also includes functionality to adjust decimal precision <L133-150>, catering to different use cases and ensuring compatibility with external systems or contracts requiring specific decimal formats.",
      "tags": [
        "fungible-token",
        "DeFi",
        "token-locking",
        "access-control",
        "metadata-management"
      ]
    }
  },
  {
    "rank": 6,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.router-velar-alex-v-1-2",
    "calls": 9214,
    "source": ";; router-velar-alex-v-1-2\n\n(use-trait v-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait v-share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n(use-trait a-ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n\n(define-constant ERR_NOT_AUTHORIZED (err u1001))\n(define-constant ERR_INVALID_AMOUNT (err u1002))\n(define-constant ERR_INVALID_PRINCIPAL (err u1003))\n(define-constant ERR_ALREADY_ADMIN (err u2001))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u2002))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u2003))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u2004))\n(define-constant ERR_SWAP_STATUS (err u4001))\n(define-constant ERR_MINIMUM_RECEIVED (err u4002))\n(define-constant ERR_SWAP_A (err u5001))\n(define-constant ERR_SWAP_B (err u5002))\n(define-constant ERR_SCALED_AMOUNT_A (err u6001))\n(define-constant ERR_QUOTE_A (err u7001))\n(define-constant ERR_QUOTE_B (err u7002))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var swap-status bool true)\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n(define-public (set-swap-status (status bool))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (var-set swap-status status)\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller-in-list (index-of admins-list tx-sender))\n    (admin-to-remove-in-list (index-of admins-list admin))\n    (caller tx-sender)\n  )\n    (asserts! (is-some caller-in-list) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some admin-to-remove-in-list) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removeable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (get-quote-a\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (a-factors (tuple (a uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qa amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qa amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get b v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get b a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qa scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qa scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-b\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qa amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qb amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get b v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get c a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qb scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qa scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-c\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qa amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qc amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get b v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get d a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qc scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qa scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-d\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qa amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qd amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get b v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get e a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qd scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qa scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-e\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (a-factors (tuple (a uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qb amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qa amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get c v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get b a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qa scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qb scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-f\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qb amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qb amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get c v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get c a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qb scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qb scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-g\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qb amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qc amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get c v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get d a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qc scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qb scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-h\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qb amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qd amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get c v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get e a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qd scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qb scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-i\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (a-factors (tuple (a uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qc amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qa amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get d v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get b a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qa scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qc scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-j\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qc amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qb amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get d v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get c a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qb scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qc scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-k\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qc amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qc amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get d v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get d a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qc scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qc scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-l\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qc amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qd amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get d v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get e a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qd scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qc scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-m\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (a-factors (tuple (a uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qd amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qa amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get e v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get b a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qa scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qd scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-n\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qd amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qb amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get e v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get c a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qb scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qd scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-o\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qd amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qc amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get e v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get d a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qc scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qd scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-p\n    (amount uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qd amount v-tokens) ERR_QUOTE_A)\n                 (unwrap! (alex-qd amount a-tokens a-factors) ERR_QUOTE_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount quote-a (get e v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount quote-a (get e a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qd scaled-amount a-tokens a-factors) ERR_QUOTE_B)\n                 (unwrap! (velar-qd scaled-amount v-tokens) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (a-factors (tuple (a uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sa amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sa amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get b v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get b a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sa scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sa scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sa amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sb amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get b v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get c a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sb scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sa scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-b\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-c\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sa amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sc amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get b v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get d a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sc scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sa scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-c\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-d\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sa amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sd amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get b v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get e a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sd scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sa scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-d\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-e\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (a-factors (tuple (a uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sb amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sa amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get c v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get b a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sa scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sb scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-e\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-f\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sb amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sb amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get c v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get c a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sb scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sb scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-f\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-g\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sb amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sc amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get c v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get d a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sc scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sb scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-g\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-h\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sb amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sd amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get c v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get e a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sd scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sb scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-h\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-i\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (a-factors (tuple (a uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sc amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sa amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get d v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get b a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sa scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sc scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-i\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-j\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sc amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sb amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get d v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get c a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sb scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sc scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-j\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-k\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sc amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sc amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get d v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get d a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sc scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sc scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-k\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-l\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sc amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sd amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get d v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get e a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sd scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sc scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-l\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-m\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (a-factors (tuple (a uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sd amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sa amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get e v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get b a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sa scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sd scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-m\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-n\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sd amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sb amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get e v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get c a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sb scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sd scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-n\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-o\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sd amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sc amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get e v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get d a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sc scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sd scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-o\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-p\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (v-tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n    (v-share-fee-to <v-share-fee-to-trait>)\n    (a-tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (a-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sd amount v-tokens v-share-fee-to) ERR_SWAP_A)\n                (unwrap! (alex-sd amount a-tokens a-factors) ERR_SWAP_A)))\n    (scaled-amount (if (is-eq swaps-reversed false)\n                       (unwrap! (scale-velar-amount swap-a (get e v-tokens) (get a a-tokens)) ERR_SCALED_AMOUNT_A)\n                       (unwrap! (scale-alex-amount swap-a (get e a-tokens) (get a v-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sd scaled-amount a-tokens a-factors) ERR_SWAP_B)\n                (unwrap! (velar-sd scaled-amount v-tokens v-share-fee-to) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-p\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          velar-data: {\n            v-tokens: v-tokens,\n            v-share-fee-to: v-share-fee-to,\n            v-swap: (if (is-eq swaps-reversed false) swap-a swap-b)\n          },\n          alex-data: {\n            a-tokens: a-tokens,\n            a-factors: a-factors,\n            a-swap: (if (is-eq swaps-reversed false) swap-b swap-a)\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-private (velar-qa\n    (amount uint)\n    (tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n  )\n  (let (\n    (quote-a (contract-call?\n             'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 amount-out\n             amount\n             (get a tokens) (get b tokens)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (velar-qb\n    (amount uint)\n    (tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n  )\n  (let (\n    (quote-a (contract-call?\n             'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 get-amount-out-3\n             amount\n             (get a tokens) (get b tokens) (get c tokens)))\n  )\n    (ok (get c quote-a))\n  )\n)\n\n(define-private (velar-qc\n    (amount uint)\n    (tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n  )\n  (let (\n    (quote-a (contract-call?\n             'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 get-amount-out-4\n             amount\n             (get a tokens) (get b tokens) (get c tokens) (get d tokens)\n             (list u1 u2 u3 u4)))\n  )\n    (ok (get d quote-a))\n  )\n)\n\n(define-private (velar-qd\n    (amount uint)\n    (tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n  )\n  (let (\n    (quote-a (contract-call?\n             'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 get-amount-out-5\n             amount\n             (get a tokens) (get b tokens) (get c tokens) (get d tokens) (get e tokens)))\n  )\n    (ok (get e quote-a))\n  )\n)\n\n(define-private (alex-qa\n    (amount uint)\n    (tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (factors (tuple (a uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (quote-a (unwrap-panic (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper\n                           (contract-of a-token) (contract-of b-token)\n                           (get a factors)\n                           amount)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (alex-qb\n    (amount uint)\n    (tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (c-token (get c tokens))\n    (quote-a (unwrap-panic (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper-a\n                           (contract-of a-token) (contract-of b-token) (contract-of c-token)\n                           (get a factors) (get b factors)\n                           amount)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (alex-qc\n    (amount uint)\n    (tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (c-token (get c tokens))\n    (d-token (get d tokens))\n    (quote-a (unwrap-panic (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper-b\n                           (contract-of a-token) (contract-of b-token) (contract-of c-token)\n                           (contract-of d-token)\n                           (get a factors) (get b factors) (get c factors)\n                           amount)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (alex-qd\n    (amount uint)\n    (tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (c-token (get c tokens))\n    (d-token (get d tokens))\n    (e-token (get e tokens))\n    (quote-a (unwrap-panic (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper-c\n                           (contract-of a-token) (contract-of b-token) (contract-of c-token)\n                           (contract-of d-token) (contract-of e-token)\n                           (get a factors) (get b factors) (get c factors) (get d factors)\n                           amount)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (velar-sa\n    (amount uint)\n    (tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>)))\n    (share-fee-to <v-share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 do-swap\n                  amount\n                  (get a tokens) (get b tokens)\n                  share-fee-to)))\n  )\n    (ok (get amt-out swap-a))\n  )\n)\n\n(define-private (velar-sb\n    (amount uint)\n    (tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>)))\n    (share-fee-to <v-share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-3\n                  amount u1\n                  (get a tokens) (get b tokens) (get c tokens)\n                  share-fee-to)))\n  )\n    (ok (get amt-out (get c swap-a)))\n  )\n)\n\n(define-private (velar-sc\n    (amount uint)\n    (tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>)))\n    (share-fee-to <v-share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-4\n                  amount u1\n                  (get a tokens) (get b tokens) (get c tokens) (get d tokens)\n                  share-fee-to)))\n  )\n    (ok (get amt-out (get d swap-a)))\n  )\n)\n\n(define-private (velar-sd\n    (amount uint)\n    (tokens (tuple (a <v-ft-trait>) (b <v-ft-trait>) (c <v-ft-trait>) (d <v-ft-trait>) (e <v-ft-trait>)))\n    (share-fee-to <v-share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-5\n                  amount u1\n                  (get a tokens) (get b tokens) (get c tokens) (get d tokens) (get e tokens)\n                  share-fee-to)))\n  )\n    (ok (get amt-out (get e swap-a)))\n  )\n)\n\n(define-private (alex-sa\n    (amount uint)\n    (tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>)))\n    (factors (tuple (a uint)))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper\n                  (get a tokens) (get b tokens)\n                  (get a factors)\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (alex-sb\n    (amount uint)\n    (tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>)))\n    (factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a\n                  (get a tokens) (get b tokens) (get c tokens)\n                  (get a factors) (get b factors)\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (alex-sc\n    (amount uint)\n    (tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-b\n                  (get a tokens) (get b tokens) (get c tokens) (get d tokens)\n                  (get a factors) (get b factors) (get c factors)\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (alex-sd\n    (amount uint)\n    (tokens (tuple (a <a-ft-trait>) (b <a-ft-trait>) (c <a-ft-trait>) (d <a-ft-trait>) (e <a-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-c\n                  (get a tokens) (get b tokens) (get c tokens) (get d tokens) (get e tokens)\n                  (get a factors) (get b factors) (get c factors) (get d factors)\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (scale-velar-amount (amount uint) (v-token <v-ft-trait>) (a-token <a-ft-trait>))\n  (let (\n    (v-decimals (unwrap-panic (contract-call? v-token get-decimals)))\n    (a-decimals (unwrap-panic (contract-call? a-token get-decimals)))\n    (scaled-amount\n      (if (is-eq v-decimals a-decimals)\n        amount\n        (if (> v-decimals a-decimals)\n          (/ amount (pow u10 (- v-decimals a-decimals)))\n          (* amount (pow u10 (- a-decimals v-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n(define-private (scale-alex-amount (amount uint) (a-token <a-ft-trait>) (v-token <v-ft-trait>))\n  (let (\n    (a-decimals (unwrap-panic (contract-call? a-token get-decimals)))\n    (v-decimals (unwrap-panic (contract-call? v-token get-decimals)))\n    (scaled-amount\n      (if (is-eq a-decimals v-decimals)\n        amount\n        (if (> a-decimals v-decimals)\n          (/ amount (pow u10 (- a-decimals v-decimals)))\n          (* amount (pow u10 (- v-decimals a-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n(define-private (admin-not-removeable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)",
    "analysis": {
      "summary": "This contract facilitates token swaps with dynamic routing and admin management.",
      "explanation": "This Clarity smart contract provides a comprehensive solution for swapping tokens on the Stacks blockchain, leveraging multiple token standards and incorporating administrative functions for enhanced control. It uses traits to interact with different token contracts and implements a series of swap helper functions to facilitate token exchanges across various routes, adjusting for token decimals and ensuring minimum received amounts. Administrative features allow for managing access to critical functions, ensuring that only authorized users can alter swap statuses or modify admin lists.",
      "tags": [
        "DeFi",
        "token-swap",
        "admin-management",
        "multi-route",
        "token-decimal-adjustment"
      ]
    }
  },
  {
    "rank": 7,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2",
    "calls": 6992,
    "source": ";; Bitflow Stableswap Core Contract - v1.2\n;; This contract handles the core logic of the Stableswap protocol.\n;; The trading pair is stSTX/STX, where stSTX is the staked STX token.\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;; Cons, Vars, & Maps ;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(use-trait sip-010-trait .sip-010-trait-ft-standard.sip-010-trait)\n(use-trait lp-trait .lp-trait.lp-trait)\n\n;;;;;;;;;;;;;;;\n;; Constants ;;\n;;;;;;;;;;;;;;;\n\n;; This contract address\n(define-constant this-contract (as-contract tx-sender))\n\n;; Deployment height\n(define-constant deployment-height burn-block-height)\n\n;; Cycle length in blocks (1 day = 144 blocks)\n(define-constant cycle-length u144)\n\n;; Index loop for using Newton-Raphson method to converge square root that goes up to u384\n(define-constant index-list (list u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31 u32 u33 u34 u35 u36 u37 u38 u39 u40 u41 u42 u43 u44 u45 u46 u47 u48 u49 u50 u51 u52 u53 u54 u55 u56 u57 u58 u59 u60 u61 u62 u63 u64 u65 u66 u67 u68 u69 u70 u71 u72 u73 u74 u75 u76 u77 u78 u79 u80 u81 u82 u83 u84 u85 u86 u87 u88 u89 u90 u91 u92 u93 u94 u95 u96 u97 u98 u99 u100 u101 u102 u103 u104 u105 u106 u107 u108 u109 u110 u111 u112 u113 u114 u115 u116 u117 u118 u119 u120 u121 u122 u123 u124 u125 u126 u127 u128 u129 u130 u131 u132 u133 u134 u135 u136 u137 u138 u139 u140 u141 u142 u143 u144 u145 u146 u147 u148 u149 u150 u151 u152 u153 u154 u155 u156 u157 u158 u159 u160 u161 u162 u163 u164 u165 u166 u167 u168 u169 u170 u171 u172 u173 u174 u175 u176 u177 u178 u179 u180 u181 u182 u183 u184 u185 u186 u187 u188 u189 u190 u191 u192 u193 u194 u195 u196 u197 u198 u199 u200 u201 u202 u203 u204 u205 u206 u207 u208 u209 u210 u211 u212 u213 u214 u215 u216 u217 u218 u219 u220 u221 u222 u223 u224 u225 u226 u227 u228 u229 u230 u231 u232 u233 u234 u235 u236 u237 u238 u239 u240 u241 u242 u243 u244 u245 u246 u247 u248 u249 u250 u251 u252 u253 u254 u255 u256 u257 u258 u259 u260 u261 u262 u263 u264 u265 u266 u267 u268 u269 u270 u271 u272 u273 u274 u275 u276 u277 u278 u279 u280 u281 u282 u283 u284 u285 u286 u287 u288 u289 u290 u291 u292 u293 u294 u295 u296 u297 u298 u299 u300 u301 u302 u303 u304 u305 u306 u307 u308 u309 u310 u311 u312 u313 u314 u315 u316 u317 u318 u319 u320 u321 u322 u323 u324 u325 u326 u327 u328 u329 u330 u331 u332 u333 u334 u335 u336 u337 u338 u339 u340 u341 u342 u343 u344 u345 u346 u347 u348 u349 u350 u351 u352 u353 u354 u355 u356 u357 u358 u359 u360 u361 u362 u363 u364 u365 u366 u367 u368 u369 u370 u371 u372 u373 u374 u375 u376 u377 u378 u379 u380 u381 u382 u383 u384))\n\n;; Number of tokens per pair\n(define-constant number-of-tokens u2)\n\n;; Contract deployer\n(define-constant contract-deployer tx-sender)\n\n;;;;;;;;;;;;\n;; Errors ;;\n;;;;;;;;;;;;\n\n\n;;;;;;;;;;;;;;;\n;; Variables ;;\n;;;;;;;;;;;;;;;\n\n;; Contract for Stableswap Staking and Rewards\n(define-data-var staking-and-rewards-contract principal tx-sender)\n\n;; Define a variable to track whether the staking-and-rewards contract has been set\n(define-data-var staking-and-rewards-contract-is-set bool false)\n\n;; Contract for the Stacking DAO to receive fees\n(define-data-var stacking-dao-contract principal 'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG)\n\n;; Contract for the Bitflow protocol to receive fees\n(define-data-var bitflow-contract principal 'SP1G6QWV6X9EVXH7QMMFVHNC3VHWJC28MHR6P8TX2)\n\n;; Admin Governance List\n(define-data-var admins (list 5 principal) (list tx-sender))\n\n;; Swap Fees (5 total bps initialized, 3 bps to LPs, 0 bps to Stacking DAO protocol, 2bps to Bitflow protocol)\n(define-data-var buy-fees {lps: uint, stacking-dao: uint, bitflow: uint} {lps: u3, stacking-dao: u0, bitflow: u2})\n\n;; Swap Fees (200 total bps initialized, 3 bps to LPs, 195 bps to Stacking DAO protocol, 2bps to Bitflow protocol)\n(define-data-var sell-fees {lps: uint, stacking-dao: uint, bitflow: uint} {lps: u3, stacking-dao: u195, bitflow: u2})\n\n;; Admin Swap Fees - Set to Zero\n(define-data-var admin-swap-fees {lps: uint, stacking-dao: uint, bitflow: uint} {lps: u0, stacking-dao: u0, bitflow: u0})\n\n;; Liquidity Fees (3 bps initialized, all to protocol)\n(define-data-var liquidity-fees uint u3)\n\n;; Helper var to remove admin\n(define-data-var helper-principal principal tx-sender)\n\n;; Convergence Threshold\n(define-data-var convergence-threshold uint u2)\n\n\n;;;;;;;;;;\n;; Maps ;;\n;;;;;;;;;;\n\n(define-map PairsDataMap {y-token: principal, lp-token: principal} {\n    approval: bool,\n    total-shares: uint,\n    x-decimals: uint,\n    y-decimals: uint,\n    balance-x: uint,\n    balance-y: uint,\n    d: uint,\n    amplification-coefficient: uint,\n})\n\n(define-map CycleDataMap {y-token: principal, lp-token: principal, cycle-num: uint} {\n    cycle-fee-balance-x: uint\n})\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Read-Only Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Get pair data\n(define-read-only (get-pair-data (y-token <sip-010-trait>) (lp-token <sip-010-trait>)) \n    (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)})\n)\n\n;; Get cycle data\n(define-read-only (get-cycle-data (y-token principal) (lp-token principal) (cycle-num uint)) \n    (map-get? CycleDataMap {y-token: y-token, lp-token: lp-token, cycle-num: cycle-num})\n)\n\n;; Get current cycle\n(define-read-only (get-current-cycle) \n    (/ (- burn-block-height deployment-height) cycle-length)\n)\n\n;; Get cycle from height\n(define-read-only (get-cycle-from-height (height uint)) \n    (/ (- height deployment-height) cycle-length)\n)\n\n;; Get starting height from cycle\n(define-read-only (get-starting-height-from-cycle (cycle uint)) \n    (+ deployment-height (* cycle cycle-length))\n)\n\n;; Get deployment height\n(define-read-only (get-deployment-height) \n    deployment-height\n)\n\n;; Get up to last 120 cycle rewards -> nice to have\n;; (define-read-only (get-cycle-rewards) body)\n\n;; Get DX\n(define-read-only (get-dx (y-token <sip-010-trait>) (lp-token <lp-trait>) (y-amount uint))\n    (let \n        (\n            (pair-data (unwrap! (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get sell-fees)))\n            (swap-fee-stacking-dao (get stacking-dao (var-get sell-fees)))\n            (swap-fee-bitflow (get bitflow (var-get sell-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-stacking-dao swap-fee-bitflow))\n\n            ;; Scale up balances to perform AMM calculations with get-x\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts u0 y-amount x-decimals y-decimals))\n            (y-amount-scaled (get scaled-y scaled-up-swap-amount))\n            (updated-y-balance-scaled (+ current-balance-y-scaled y-amount-scaled))\n            (new-x-scaled (get-x updated-y-balance-scaled current-balance-x-scaled y-amount-scaled (* (get amplification-coefficient pair-data) number-of-tokens)))\n            (new-x (get scaled-x (get-scaled-down-token-amounts new-x-scaled u0 x-decimals y-decimals)))\n            (new-y (+ current-balance-y y-amount))\n\n            ;; Apply fees on the delta in x\n            (dx-without-fees (- current-balance-x new-x)) \n            (x-amount-fee-lps (/ (* dx-without-fees swap-fee-lps) u10000))\n            (x-amount-fee-stacking-dao (/ (* dx-without-fees swap-fee-stacking-dao) u10000))\n            (x-amount-fee-bitflow (/ (* dx-without-fees swap-fee-bitflow) u10000))\n            (dx (- dx-without-fees (+ x-amount-fee-lps x-amount-fee-stacking-dao x-amount-fee-bitflow)))\n        )\n        (ok dx)\n    )\n)\n\n;; Get X\n(define-read-only (get-x (y-bal uint) (x-bal uint) (y-amount uint) (ann uint))\n    (let \n        (\n            (y-bal-new (+ y-bal y-amount))\n            (current-D (get-D x-bal y-bal ann))\n            (c0 current-D)\n            (c1 (/ (* c0 current-D) (* number-of-tokens y-bal-new)))\n            (c2 (/ (* c1 current-D) (* ann number-of-tokens)))\n            (b (+ y-bal-new (/ current-D ann)))\n        )\n        (get converged (fold x-for-loop index-list {x: current-D, c: c2, b: b, D: current-D, converged: u0}))\n    )\n)\n\n;; Get X Helper\n(define-private (x-for-loop (n uint) (x-info {x: uint, c: uint, b: uint, D: uint, converged: uint})) \n    (let\n        (\n            (current-x (get x x-info))\n            (current-c (get c x-info))\n            (current-b (get b x-info))\n            (current-D (get D x-info))\n            (current-converged (get converged x-info))\n            (x-numerator (+ (* current-x current-x) current-c))\n            (x-denominator (- (+ (* u2 current-x) current-b) current-D))\n            (new-x (/ x-numerator x-denominator))\n            (threshold (var-get convergence-threshold))\n        )\n\n        (if (is-eq current-converged u0)\n            (if (> new-x  current-x)\n                (if (<= (- new-x current-x) threshold)\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: new-x}\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n                (if (<= (- current-x new-x) threshold)\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: new-x}\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n            )\n            x-info\n        )\n\n\n    )\n)\n\n;; Get DY\n(define-read-only (get-dy (y-token <sip-010-trait>) (lp-token <lp-trait>) (x-amount uint))\n    (let \n        (\n            \n            (pair-data (unwrap! (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get buy-fees)))\n            (swap-fee-stacking-dao (get stacking-dao (var-get buy-fees)))\n            (swap-fee-bitflow (get bitflow (var-get buy-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-stacking-dao swap-fee-bitflow))\n\n\n            ;; Scale up balances to perform AMM calculations with get-y\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts x-amount u0 x-decimals y-decimals))\n            (x-amount-scaled (get scaled-x scaled-up-swap-amount))\n            (x-amount-fees-lps-scaled (/ (* x-amount-scaled swap-fee-lps) u10000))\n            (x-amount-fees-stacking-dao-scaled (/ (* x-amount-scaled swap-fee-stacking-dao) u10000))\n            (x-amount-fees-bitflow-scaled (/ (* x-amount-scaled swap-fee-bitflow) u10000))\n            (x-amount-total-fees-scaled (/ (* x-amount total-swap-fee) u10000))\n            (updated-x-amount-scaled (- x-amount-scaled x-amount-total-fees-scaled))\n            (updated-x-balance-scaled (+ current-balance-x-scaled updated-x-amount-scaled))\n            (new-y-scaled (get-y updated-x-balance-scaled current-balance-y-scaled updated-x-amount-scaled (* (get amplification-coefficient pair-data) number-of-tokens)))\n            \n            ;; Scale down to precise amounts for y and dy, as well as x-amount-fee-lps, and x-amount-fee-stacking-dao\n            (new-y (get scaled-y (get-scaled-down-token-amounts u0 new-y-scaled x-decimals y-decimals)))\n            (dy (- current-balance-y new-y))\n        )\n        (ok dy)\n    )\n)\n\n;; Get Y\n(define-read-only (get-y (x-bal uint) (y-bal uint) (x-amount uint) (ann uint))\n    (let \n        (\n            (x-bal-new (+ x-bal x-amount))\n            (current-D (get-D x-bal y-bal ann))\n            (c0 current-D)\n            (c1 (/ (* c0 current-D) (* number-of-tokens x-bal-new)))\n            (c2 (/ (* c1 current-D) (* ann number-of-tokens)))\n            (b (+ x-bal-new (/ current-D ann)))\n        )\n        (get converged (fold y-for-loop index-list {y: current-D, c: c2, b: b, D: current-D, converged: u0}))\n    )\n)\n\n;; Get Y Helper\n(define-private (y-for-loop (n uint) (y-info {y: uint, c: uint, b: uint, D: uint, converged: uint})) \n    (let\n        (\n            (current-y (get y y-info))\n            (current-c (get c y-info))\n            (current-b (get b y-info))\n            (current-D (get D y-info))\n            (current-converged (get converged y-info))\n            (y-numerator (+ (* current-y current-y) current-c))\n            (y-denominator (- (+ (* u2 current-y) current-b) current-D))\n            (new-y (/ y-numerator y-denominator))\n            (threshold (var-get convergence-threshold))\n\n        )\n\n        (if (is-eq current-converged u0)\n            (if (> new-y  current-y)\n                (if (<= (- new-y current-y) threshold)\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: new-y}\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n                (if (<= (- current-y new-y) threshold)\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: new-y}\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n            )\n            y-info\n        )\n\n    )\n)\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;\n;;; Swap Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;\n\n;; Swap X -> Y\n;; @desc: Swaps X token for Y token\n;; @params:  y-token: principal, lp-token: principal, x-amount: uint, min-y-amount: uint\n(define-public (swap-x-for-y (y-token <sip-010-trait>) (lp-token <lp-trait>) (x-amount uint) (min-y-amount uint)) \n    (let \n        (\n            (swapper tx-sender)\n            (pair-data (unwrap! (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval pair-data))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            ;; Admins pay no fees on swaps\n            (swap-fee-lps (if (is-some (index-of (var-get admins) tx-sender ))\n                (get lps (var-get buy-fees))\n                (get lps (var-get admin-swap-fees))\n            ))\n            (swap-fee-stacking-dao (if (is-some (index-of (var-get admins) tx-sender ))\n                (get stacking-dao (var-get buy-fees))\n                (get stacking-dao (var-get admin-swap-fees))\n            ))\n            (swap-fee-bitflow (if (is-some (index-of (var-get admins) tx-sender ))\n                (get bitflow (var-get buy-fees))\n                (get bitflow (var-get admin-swap-fees))\n            ))\n            (total-swap-fee (+ swap-fee-lps swap-fee-stacking-dao swap-fee-bitflow))\n\n            ;; Scale up balances and the swap amount to perform AMM calculations with get-y\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts x-amount u0 x-decimals y-decimals))\n            (x-amount-scaled (get scaled-x scaled-up-swap-amount))\n            (x-amount-fees-lps-scaled (/ (* x-amount-scaled swap-fee-lps) u10000))\n            (x-amount-fees-stacking-dao-scaled (/ (* x-amount-scaled swap-fee-stacking-dao) u10000))\n            (x-amount-fees-bitflow-scaled (/ (* x-amount-scaled swap-fee-bitflow) u10000))\n            (updated-x-amount-scaled (- x-amount-scaled (+ x-amount-fees-lps-scaled x-amount-fees-stacking-dao-scaled x-amount-fees-bitflow-scaled)))\n            (updated-x-balance-scaled (+ current-balance-x-scaled updated-x-amount-scaled))\n            (new-y-scaled (get-y updated-x-balance-scaled current-balance-y-scaled updated-x-amount-scaled (* (get amplification-coefficient pair-data) number-of-tokens)))\n            \n            ;; Scale down to precise amounts for y and dy, as well as updated-x-amount and x-fees\n            (new-y (get scaled-y (get-scaled-down-token-amounts u0 new-y-scaled x-decimals y-decimals)))\n            (dy (- current-balance-y new-y))\n            (x-amount-fee-lps (get scaled-x (get-scaled-down-token-amounts x-amount-fees-lps-scaled u0 x-decimals y-decimals)))\n            (x-amount-fee-stacking-dao (get scaled-x (get-scaled-down-token-amounts x-amount-fees-stacking-dao-scaled u0 x-decimals y-decimals)))\n            (x-amount-fee-bitflow (get scaled-x (get-scaled-down-token-amounts x-amount-fees-bitflow-scaled u0 x-decimals y-decimals)))\n            (updated-x-amount (- x-amount (+ x-amount-fee-lps x-amount-fee-stacking-dao x-amount-fee-bitflow)))\n            (updated-x-balance (+ current-balance-x updated-x-amount))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! current-approval (err \"err-pair-not-approved\"))\n\n        ;; Assert that x-amount is less than x10 of current-balance-x\n        (asserts! (< x-amount (* u10 current-balance-x)) (err \"err-x-amount-too-high\"))\n\n        ;; Assert that dy is greater than min-y-amount\n        (asserts! (> dy min-y-amount) (err \"err-min-y-amount\"))\n\n        ;; Transfer updated-x-amount tokens from tx-sender to this contract\n        (if (> updated-x-amount u0) \n            (unwrap! (stx-transfer? updated-x-amount swapper (as-contract tx-sender)) (err \"err-transferring-token-x\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-lps tokens from tx-sender to staking-and-rewards-contract\n        (if (> x-amount-fee-lps u0) \n            (unwrap! (stx-transfer? x-amount-fee-lps swapper (var-get staking-and-rewards-contract)) (err \"err-transferring-token-x-fee-lps\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-stacking-dao tokens from tx-sender to stacking-dao-address\n        (if (> x-amount-fee-stacking-dao u0)\n            (unwrap! (stx-transfer? x-amount-fee-stacking-dao swapper (var-get stacking-dao-contract)) (err \"err-transferring-token-x-fee-stacking-dao\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-biflow tokens from tx-sender to bitflow-address\n        (if (> x-amount-fee-bitflow u0)\n            (unwrap! (stx-transfer? x-amount-fee-bitflow swapper (var-get bitflow-contract)) (err \"err-transferring-token-x-fee-bitflow\"))\n            false\n        )\n\n        ;; Transfer dy tokens from this contract to tx-sender\n        (if (> dy u0) \n            (unwrap! (as-contract (contract-call? y-token transfer dy tx-sender swapper none)) (err \"err-transferring-token-y\")) \n            false\n        )\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            pair-data \n            {\n                balance-x: updated-x-balance,\n                balance-y: new-y,\n                d: (get-D updated-x-balance-scaled new-y-scaled (* (get amplification-coefficient pair-data) number-of-tokens))\n            }\n        ))\n\n        ;; Match if map-get? returns some for CycleDataMap\n        (match (map-get? CycleDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)})\n            cycle-data\n                ;; Update CycleDataMap\n                (map-set CycleDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} (merge \n                    cycle-data \n                    {\n                        cycle-fee-balance-x: (+ (get cycle-fee-balance-x cycle-data) x-amount-fee-lps)\n                    }\n                ))\n                ;; Create new CycleDataMap\n                (map-set CycleDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} {\n                    cycle-fee-balance-x: x-amount-fee-lps,\n                })\n        )\n\n        ;; Return the number of y tokens returned from the swap\n        (ok dy)\n\n    )\n)\n;; Swap Y -> X\n;; @desc: Swaps Y token for X token\n;; @params: y-token: principal, lp-token: principal, x-amount: uint, min-x-amount: uint\n(define-public (swap-y-for-x (y-token <sip-010-trait>) (lp-token <lp-trait>) (y-amount uint) (min-x-amount uint)) \n    (let \n        (\n            (swapper tx-sender)\n            (pair-data (unwrap! (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval pair-data))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            ;; Admins pay no fees on swaps\n            (swap-fee-lps (if (is-some (index-of (var-get admins) tx-sender ))\n                (get lps (var-get sell-fees))\n                (get lps (var-get admin-swap-fees))\n            ))\n            (swap-fee-stacking-dao (if (is-some (index-of (var-get admins) tx-sender ))\n                (get stacking-dao (var-get sell-fees))\n                (get stacking-dao (var-get admin-swap-fees))\n            ))\n            (swap-fee-bitflow (if (is-some (index-of (var-get admins) tx-sender ))\n                (get bitflow (var-get sell-fees))\n                (get bitflow (var-get admin-swap-fees))\n            ))\n            (total-swap-fee (+ swap-fee-lps swap-fee-stacking-dao))\n\n            ;; Scale up balances and the swap amount to perform AMM calculations with get-x\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts u0 y-amount x-decimals y-decimals))\n            (y-amount-scaled (get scaled-y scaled-up-swap-amount))\n            (updated-y-balance-scaled (+ current-balance-y-scaled y-amount-scaled))\n            (new-x-scaled (get-x updated-y-balance-scaled current-balance-x-scaled y-amount-scaled (* (get amplification-coefficient pair-data) number-of-tokens)))\n            (new-x (get scaled-x (get-scaled-down-token-amounts new-x-scaled u0 x-decimals y-decimals)))\n            (new-y (+ current-balance-y y-amount))\n\n            ;; Apply fees on the delta in x\n            (dx-without-fees (- current-balance-x new-x)) \n            (x-amount-fee-lps (/ (* dx-without-fees swap-fee-lps) u10000))\n            (x-amount-fee-stacking-dao (/ (* dx-without-fees swap-fee-stacking-dao) u10000))\n            (x-amount-fee-bitflow (/ (* dx-without-fees swap-fee-bitflow) u10000))\n            (dx (- dx-without-fees (+ x-amount-fee-lps x-amount-fee-stacking-dao x-amount-fee-bitflow)))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! current-approval (err \"err-pair-not-approved\"))\n\n        ;; Assert that y-amount is less than x10 of current-balance-y\n        (asserts! (< y-amount (* u10 current-balance-y)) (err \"err-y-amount-too-high\"))\n\n        ;; Assert that dx is greater than min-x-amount\n        (asserts! (> dx min-x-amount) (err \"err-min-x-amount\"))\n\n        ;; Transfer y-amount tokens from tx-sender to this contract\n        (if (> y-amount u0) \n            (unwrap! (contract-call? y-token transfer y-amount swapper (as-contract tx-sender) none) (err \"err-transferring-token-y\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-lps tokens from this-contract to staking-and-rewards-contract\n        (if (> x-amount-fee-lps u0) \n            (unwrap! (as-contract (stx-transfer? x-amount-fee-lps tx-sender (var-get staking-and-rewards-contract))) (err \"err-transferring-token-x-swap-fee\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-stacking-dao tokens from this-contract to stacking-dao-address\n        (if (> x-amount-fee-stacking-dao u0) \n            (unwrap! (as-contract (stx-transfer? x-amount-fee-stacking-dao tx-sender (var-get stacking-dao-contract))) (err \"err-transferring-token-x-stacking-dao-fee\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-bitflow tokens from this-contract to bitflow-address\n        (if (> x-amount-fee-bitflow u0) \n            (unwrap! (as-contract (stx-transfer? x-amount-fee-bitflow tx-sender (var-get bitflow-contract))) (err \"err-transferring-token-x-bitflow-fee\"))\n            false\n        )\n\n        ;; Transfer dx tokens from this contract to tx-sender\n        (if (> dx u0) \n            (unwrap! (as-contract (stx-transfer? dx tx-sender swapper)) (err \"err-transferring-token-x\"))\n            false\n        )\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            pair-data \n            {\n                balance-x: new-x,\n                balance-y: new-y,\n                d: (get-D new-x-scaled updated-y-balance-scaled (* (get amplification-coefficient pair-data) number-of-tokens))\n            }\n        ))\n\n        ;; Match if map-get? returns some for CycleDataMap\n        (match (map-get? CycleDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)})\n            cycle-data\n                ;; Update CycleDataMap\n                (map-set CycleDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} (merge \n                    cycle-data \n                    {\n                        cycle-fee-balance-x: (+ (get cycle-fee-balance-x cycle-data) x-amount-fee-lps)\n                    }\n                ))\n                ;; Create new CycleDataMap\n                (map-set CycleDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} {\n                    cycle-fee-balance-x: x-amount-fee-lps,\n                })\n        )\n\n        ;; Return the number of x tokens returned from the swap\n        (ok dx)\n\n    )\n)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Liquidity Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Add Liquidity\n;; @desc: Adds liquidity to a pair, mints the appropriate amount of LP tokens\n;; @params:  y-token: principal, lp-token: principal, x-amount-added: uint, y-amount-added: uint\n(define-public (add-liquidity (y-token <sip-010-trait>) (lp-token <lp-trait>) (x-amount-added uint) (y-amount-added uint) (min-lp-amount uint) )\n    (let \n        (\n            ;; Grabbing all data from PairsDataMap\n            (liquidity-provider tx-sender)\n            (current-pair (unwrap! (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval current-pair))\n            (x-decimals (get x-decimals current-pair))\n            (y-decimals (get y-decimals current-pair))\n            (current-balance-x (get balance-x current-pair))\n            (new-balance-x (+ current-balance-x x-amount-added))\n            (current-balance-y (get balance-y current-pair))\n            (new-balance-y (+ current-balance-y y-amount-added))\n            (current-total-shares (get total-shares current-pair))\n            (current-amplification-coefficient (get amplification-coefficient current-pair))\n            \n            ;; Scale up for AMM calculations depending on decimal places assigned to tokens\n            (amounts-added-scaled (get-scaled-up-token-amounts x-amount-added y-amount-added x-decimals y-decimals))\n            (x-amount-added-scaled (get scaled-x amounts-added-scaled))\n            (y-amount-added-scaled (get scaled-y amounts-added-scaled))\n            (current-balances-scaled (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x current-balances-scaled))\n            (current-balance-y-scaled (get scaled-y current-balances-scaled))\n            (new-balances-scaled (get-scaled-up-token-amounts new-balance-x new-balance-y x-decimals y-decimals))\n            (new-balance-x-scaled (get scaled-x new-balances-scaled))\n            (new-balance-y-scaled (get scaled-y new-balances-scaled))\n            \n            ;; Calculating the ideal balance\n            (d0 (get-D current-balance-x-scaled current-balance-y-scaled current-amplification-coefficient))\n            (d1 (get-D new-balance-x-scaled new-balance-y-scaled current-amplification-coefficient))\n            (ideal-balance-x-scaled (/ (* d1 current-balance-x-scaled) d0))\n            (ideal-balance-y-scaled (/ (* d1 current-balance-y-scaled) d0))\n            (x-difference (if (> ideal-balance-x-scaled new-balance-x-scaled) (- ideal-balance-x-scaled new-balance-x-scaled) (- new-balance-x-scaled ideal-balance-x-scaled)))\n            (y-difference (if (> ideal-balance-y-scaled new-balance-y-scaled) (- ideal-balance-y-scaled new-balance-y-scaled) (- new-balance-y-scaled ideal-balance-y-scaled)))\n            \n            ;; Fees applied if adding imbalanced liquidity\n            (ideal-x-fee-scaled (/ (* x-difference (var-get liquidity-fees)) u10000))\n            (ideal-y-fee-scaled (/ (* y-difference (var-get liquidity-fees)) u10000))\n            (x-fee-scaled (if (> x-amount-added-scaled ideal-x-fee-scaled) ideal-x-fee-scaled x-amount-added-scaled))\n            (y-fee-scaled (if (> y-amount-added-scaled ideal-y-fee-scaled) ideal-y-fee-scaled y-amount-added-scaled))\n            (x-amount-added-updated-scaled (- x-amount-added-scaled x-fee-scaled))\n            (y-amount-added-updated-scaled (- y-amount-added-scaled y-fee-scaled))\n            (new-balance-x-post-fee-scaled (+ current-balance-x-scaled x-amount-added-updated-scaled))\n            (new-balance-y-post-fee-scaled (+ current-balance-y-scaled y-amount-added-updated-scaled))\n            (d2 (get-D new-balance-x-post-fee-scaled new-balance-y-post-fee-scaled current-amplification-coefficient))\n\n            ;; Scale down for precise token balance updates and transfers\n            (precise-fees (get-scaled-down-token-amounts x-fee-scaled y-fee-scaled x-decimals y-decimals))\n            (x-fee (get scaled-x precise-fees))\n            (y-fee (get scaled-y precise-fees))\n            (amounts-added-scaled-down (get-scaled-down-token-amounts x-amount-added-updated-scaled y-amount-added-updated-scaled x-decimals y-decimals))\n            (x-amount-added-updated (get scaled-x amounts-added-scaled-down))\n            (y-amount-added-updated (get scaled-y amounts-added-scaled-down))\n            (balances-post-fee-scaled-down (get-scaled-down-token-amounts new-balance-x-post-fee-scaled new-balance-y-post-fee-scaled x-decimals y-decimals))\n            (new-balance-x-post-fee (get scaled-x balances-post-fee-scaled-down))\n            (new-balance-y-post-fee (get scaled-y balances-post-fee-scaled-down))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! current-approval (err \"err-pair-not-approved\"))\n\n        ;; Assert that either x-amount-added or y-amount-added is greater than 0\n        (asserts! (or (> x-amount-added u0) (> y-amount-added u0)) (err \"err-x-or-y-amount-added-zero\"))\n\n        ;; Assert that d2 is greater than d0\n        (asserts! (> d2 d0) (err \"err-d2-less-than-d0\"))\n\n        ;; Assert that derived mint amount is greater than min-lp-amount\n        (asserts! (> (/ (* current-total-shares (- d2 d0)) d0) min-lp-amount) (err \"err-derived-amount-less-than-lp\"))\n\n        ;; ;; Transfer x-amount-added tokens from tx-sender to this contract\n        (if (> x-amount-added-updated u0)\n            (unwrap! (stx-transfer? x-amount-added-updated liquidity-provider (as-contract tx-sender)) (err \"err-transferring-token-x-escrow\"))\n            false\n        )\n\n        ;; Transfer y-amount-added tokens from tx-sender to this contract\n        (if (> y-amount-added-updated u0)\n            (unwrap! (contract-call? y-token transfer y-amount-added-updated liquidity-provider (as-contract tx-sender) none) (err \"err-transferring-token-y\"))\n            false\n        )\n        \n        ;; Transfer x-fees tokens from tx-sender to bitflow-address\n        (if (> x-fee u0)\n            (unwrap! (stx-transfer? x-fee liquidity-provider (var-get bitflow-contract)) (err \"err-transferring-token-x-protocol\"))\n            false\n        )\n         ;; Transfer y-fees tokens from tx-sender to bitflow-address\n        (if (> y-fee u0)\n            (unwrap! (contract-call? y-token transfer y-fee liquidity-provider (var-get bitflow-contract) none) (err \"err-transferring-token-y-protocol\"))\n            false\n        )\n\n        ;; Mint LP tokens to tx-sender\n        (unwrap! (as-contract (contract-call? lp-token mint liquidity-provider (/ (* current-total-shares (- d2 d0)) d0))) (err \"err-minting-lp-tokens\"))\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)} \n            (merge \n                current-pair \n                {\n                    balance-x: new-balance-x-post-fee,\n                    balance-y: new-balance-y-post-fee,\n                    total-shares: (+ current-total-shares (/ (* current-total-shares (- d2 d0)) d0)),\n                    d: d2\n                }\n        ))\n        \n        ;; Return the number of LP tokens minted\n        (ok (/ (* current-total-shares (- d2 d0)) d0))\n    )\n)\n\n;; Withdraw Liquidity\n;; @desc: Withdraws liquidity from both pairs & burns the appropriate amount of LP tokens\n;; @params:  y-token: principal, lp-token: principal, lp-amount: uint, min-x-amount: uint, min-y-amount: uint\n(define-public (withdraw-liquidity (y-token <sip-010-trait>) (lp-token <lp-trait>) (lp-amount uint) (min-x-amount uint) (min-y-amount uint))\n    (let \n        (\n            ;; Grabbing all data from PairsDataMap\n            (current-pair (unwrap! (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval current-pair))\n            (x-decimals (get x-decimals current-pair))\n            (y-decimals (get y-decimals current-pair))\n            (current-balance-x (get balance-x current-pair))\n            (current-balance-y (get balance-y current-pair))\n            (current-total-shares (get total-shares current-pair))\n            (current-amplification-coefficient (get amplification-coefficient current-pair))\n            (withdrawal-balance-x (/ (* current-balance-x lp-amount) current-total-shares))\n            (withdrawal-balance-y (/ (* current-balance-y lp-amount) current-total-shares))\n            (new-balance-x (- current-balance-x withdrawal-balance-x))\n            (new-balance-y (- current-balance-y withdrawal-balance-y))\n            (liquidity-remover tx-sender)\n            ;; get-D using the new-balance-x and new-balance-y\n            (new-balances-scaled (get-scaled-up-token-amounts new-balance-x new-balance-y x-decimals y-decimals))\n            (new-balance-x-scaled (get scaled-x new-balances-scaled))\n            (new-balance-y-scaled (get scaled-y new-balances-scaled))\n            (new-d (get-D new-balance-x-scaled new-balance-y-scaled current-amplification-coefficient))\n        )\n\n        ;; Assert that withdrawal-balance-x is greater than min-x-amount\n        (asserts! (> withdrawal-balance-x min-x-amount) (err \"err-withdrawal-balance-x-less-than-min-x-amount\"))\n\n        ;; Assert that withdrawal-balance-y is greater than min-y-amount\n        (asserts! (> withdrawal-balance-y min-y-amount) (err \"err-withdrawal-balance-y-less-than-min-y-amount\"))\n\n        ;; Burn LP tokens from tx-sender\n        (unwrap! (contract-call? lp-token burn liquidity-remover lp-amount) (err \"err-burning-lp-tokens\"))\n\n        ;; Transfer withdrawal-balance-x tokens from this contract to liquidity-taker\n        (unwrap! (as-contract (stx-transfer? withdrawal-balance-x  tx-sender liquidity-remover)) (err \"err-transferring-token-x\"))\n        ;; Transfer withdrawal-balance-y tokens from this contract to liquidity-taker\n        (unwrap! (as-contract (contract-call? y-token transfer withdrawal-balance-y tx-sender liquidity-remover none)) (err \"err-transferring-token-y\"))\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            current-pair \n            {\n                balance-x: new-balance-x,\n                balance-y: new-balance-y,\n                total-shares: (- current-total-shares lp-amount),\n                d: new-d\n            }\n        ))\n\n        ;; Return the number X tokens and Y tokens received after withdrawing from pool\n        (ok {withdrawal-x-balance: withdrawal-balance-x, withdrawal-y-balance: withdrawal-balance-y})\n    )\n)\n\n\n;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;\n;;; AMM Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;\n\n;; D for loop\n;; Get D\n(define-read-only (get-D (x-bal uint) (y-bal uint) (ann uint))\n    (get converged (fold D-for-loop index-list {D: (+ x-bal y-bal), x-bal: x-bal, y-bal: y-bal, ann: ann, converged: u0}))\n)\n\n;; Get D Helper\n(define-private (D-for-loop (n uint) (D-info {D: uint, x-bal: uint, y-bal: uint, ann: uint, converged: uint})) \n    (let \n        (\n            ;; Grabbing everything from D-info\n            (current-D-partial (get D D-info))\n            (current-D (get D D-info))\n            (current-x-bal (get x-bal D-info))\n            (current-y-bal (get y-bal D-info))\n            (current-S (+ current-x-bal current-y-bal))\n            (current-ann (get ann D-info))\n            (current-converged (get converged D-info))\n\n            ;; Start logic for calculating new D\n            ;; Calculate new partial D with respect to x\n            (new-D-partial-x (/ (* current-D current-D-partial) (* u2 current-x-bal)))\n            ;; Calculate new partial D with respect to now x & y\n            (new-D-partial (/ (* current-D new-D-partial-x ) (* u2 current-y-bal)))\n\n            (new-numerator (* (+ (* current-ann current-S) (* number-of-tokens new-D-partial)) current-D))\n            (new-denominator (+ (* (- current-ann u1) current-D) (* (+ number-of-tokens u1 ) new-D-partial)))\n\n            (new-D (/ new-numerator new-denominator))\n            (threshold (var-get convergence-threshold))\n\n            \n        )\n        \n        ;; Check if converged value / new D was already found\n        (if (is-eq current-converged u0)\n            (if (> new-D  current-D)\n                (if (<= (- new-D current-D) threshold)\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: new-D}\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: u0}\n                )\n                (if (<= (- current-D new-D) threshold)\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: new-D}\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: u0}\n                )\n            )\n            D-info\n        )\n    \n    )\n)\n\n;; Scale up the token amounts to the same level of precision before performing AMM calculations\n;; @params: x-amount-unscaled: uint, y-amount-unscaled:uint, x-num-decimals: uint, y-num-decimals: uint\n(define-private (get-scaled-up-token-amounts (x-amount-unscaled uint) (y-amount-unscaled uint) (x-num-decimals uint) (y-num-decimals uint))\n    (let \n        (\n            (scaled-x \n                ;; if same number of decimals, set to x-amount-unscaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    x-amount-unscaled\n                    ;; if x has more decimals, set to x-amount-unscaled; otherwise scale up by the difference in decimals\n                    (if (> x-num-decimals y-num-decimals) x-amount-unscaled (* x-amount-unscaled (pow u10 (- y-num-decimals x-num-decimals))))\n                )\n            )\n            (scaled-y \n                ;; if same number of decimals, set to y-amount-unscaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    y-amount-unscaled\n                    ;; if y has more decimals, set to y-amount-unscaled; otherwise scale up by the difference in decimals\n                    (if (> y-num-decimals x-num-decimals) y-amount-unscaled (* y-amount-unscaled (pow u10 (- x-num-decimals y-num-decimals))))\n                )\n            )\n        )\n        {scaled-x: scaled-x, scaled-y: scaled-y}\n    )\n)\n\n;; Scale down the token amounts to their respective levels of precision before performing any transfers\n;; @params: x-amount-scaled: uint, y-amount-scaled:uint, x-num-decimals: uint, y-num-decimals: uint\n(define-private (get-scaled-down-token-amounts (x-amount-scaled uint) (y-amount-scaled uint) (x-num-decimals uint) (y-num-decimals uint))\n    (let \n        (\n            (scaled-x \n                ;; if same number of decimals, set to x-amount-scaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    x-amount-scaled\n                    ;; if x has more decimals, set to x-amount-scaled; otherwise scale down by the difference in decimals\n                    (if (> x-num-decimals y-num-decimals) x-amount-scaled (/ x-amount-scaled (pow u10 (- y-num-decimals x-num-decimals))))\n                )\n            )\n            (scaled-y \n                ;; if same number of decimals, set to y-amount-scaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    y-amount-scaled\n                    ;; if y has more decimals, set to y-amount-scaled; otherwise scale down by the difference in decimals\n                    (if (> y-num-decimals x-num-decimals) y-amount-scaled (/ y-amount-scaled (pow u10 (- x-num-decimals y-num-decimals))))\n                )\n            )\n        )\n        {scaled-x: scaled-x, scaled-y: scaled-y}\n    )\n)\n\n;; @desc - Helper function for removing a admin\n(define-private (is-not-removeable (admin principal))\n  (not (is-eq admin (var-get helper-principal)))\n)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Goverance Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Create Pair\n;; @desc: Creates a new pair for trading\n;; @params:  y-token: principal, lp-token: principal, amplification-coefficient: uint, pair-name: string, x-balance: uint, y-balance: uint\n(define-public (create-pair (y-token <sip-010-trait>) (lp-token <lp-trait>) (amplification-coefficient uint) (pair-name (string-ascii 32)) (initial-x-bal uint) (initial-y-bal uint))\n    (let \n        (\n            (lp-owner tx-sender)\n            (x-decimals u6) ;; STX token has precision of 6 decimals\n            (y-decimals (unwrap! (contract-call? y-token get-decimals) (err \"err-getting-y-decimals\")))\n            (scaled-up-balances (get-scaled-up-token-amounts initial-x-bal initial-y-bal x-decimals y-decimals))\n            (initial-x-bal-scaled (get scaled-x scaled-up-balances))\n            (initial-y-bal-scaled (get scaled-y scaled-up-balances))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of (var-get admins) tx-sender )) (err \"err-not-admin\"))\n\n        ;; Assert using and that the pair does not already exist using is-none & map-get?\n        (asserts! (is-none (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)})) (err \"err-pair-xy-or-yx-exists\"))\n\n        ;; Assert that both initial balances are greater than 0\n        (asserts! (or (> initial-x-bal u0) (> initial-y-bal u0)) (err \"err-initial-bal-zero\"))\n\n        ;; Assert that x & y tokens are the same\n        (asserts! (is-eq initial-x-bal-scaled initial-y-bal-scaled) (err \"err-initial-bal-odd\"))\n\n        ;; Mint LP tokens to tx-sender\n        (unwrap! (as-contract (contract-call? lp-token mint lp-owner (+ initial-x-bal-scaled initial-y-bal-scaled))) (err \"err-minting-lp-tokens\"))\n\n        ;; Transfer token x liquidity to this contract\n        (unwrap! (stx-transfer? initial-x-bal tx-sender (as-contract tx-sender)) (err \"err-transferring-token-x\"))\n\n        ;; Transfer token y liquidity to this contract\n        (unwrap! (contract-call? y-token transfer initial-y-bal tx-sender (as-contract tx-sender) none) (err \"err-transferring-token-y\"))\n\n        ;; Update all appropriate maps\n        (ok (map-set PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)} {\n            approval: true,\n            total-shares: (+ initial-x-bal-scaled initial-y-bal-scaled),\n            x-decimals: x-decimals,\n            y-decimals: y-decimals,\n            balance-x: initial-x-bal,\n            balance-y: initial-y-bal,\n            d: (+ initial-x-bal-scaled initial-y-bal-scaled),\n            amplification-coefficient: amplification-coefficient,\n        }))\n    )\n)\n\n\n;; Setting Pair Approval\n;; @desc: Sets the approval of a pair\n;; @params:  y-token: principal, lp-token: principal, approval: bool\n(define-public (set-pair-approval (y-token <sip-010-trait>) (lp-token <lp-trait>) (approval bool))\n    (let \n        (\n            (current-pair (unwrap! (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of (var-get admins) tx-sender)) (err \"err-not-admin\"))\n\n        ;; Update all appropriate maps\n        (ok (map-set PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            current-pair\n            {\n                approval: approval\n            }\n        )))\n    )\n)\n\n;; Add Admin\n;; @desc: Adds an admin to the admins var list\n;; @params: admin: principal\n(define-public (add-admin (admin principal))\n    (let \n        (\n            (current-admins (var-get admins))\n            ;;(new-admins (unwrap! (as-max-len? (append current-admins admin) u5) (\"err-add-admin-overflow\")))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Assert that admin is not already an admin using is-none & index-of with the admins var\n        (asserts! (is-none (index-of current-admins admin)) (err \"err-already-admin\"))\n\n        ;; Update all appropriate maps\n        (ok (var-set admins (unwrap! (as-max-len? (append current-admins admin) u5) (err \"err-admin-overflow\"))))\n    )\n)\n\n;; Remove admin\n(define-public (remove-admin (admin principal))\n  (let\n    (\n      (current-admin-list (var-get admins))\n      (caller-principal-position-in-list (index-of current-admin-list tx-sender))\n      (removeable-principal-position-in-list (index-of current-admin-list admin))\n    )\n\n    ;; asserts tx-sender is an existing whitelist address\n    (asserts! (is-some caller-principal-position-in-list) (err \"err-not-auth\"))\n\n    ;; asserts param principal (removeable whitelist) already exist\n    (asserts! (is-some removeable-principal-position-in-list) (err \"err-not-whitelisted\"))\n\n    ;; asserts the initial contract deployer cannot be removed from admin list to protect against rogue admins\n    (asserts! (not (is-eq admin contract-deployer)) (err \"err-cannot-remove-contract-deployer\"))\n\n    ;; temporary var set to help remove param principal\n    (var-set helper-principal admin)\n\n    ;; filter existing whitelist address\n    (ok \n      (var-set admins (filter is-not-removeable current-admin-list))\n    )\n  )\n)\n\n;; Change Swap Fee\n(define-public (change-buy-fee (new-lps-fee uint) (new-protocol-fee uint) (new-bitflow-fee uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set buy-fees {lps: new-lps-fee, stacking-dao: new-protocol-fee, bitflow: new-bitflow-fee}))\n    )\n)\n\n;; Change Swap Fee\n(define-public (change-sell-fee (new-lps-fee uint) (new-protocol-fee uint) (new-bitflow-fee uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set sell-fees {lps: new-lps-fee, stacking-dao: new-protocol-fee, bitflow: new-bitflow-fee}))\n    )\n)\n\n;; Change Swap Fee\n(define-public (change-admin-swap-fee (new-lps-fee uint) (new-protocol-fee uint) (new-bitflow-fee uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set admin-swap-fees {lps: new-lps-fee, stacking-dao: new-protocol-fee, bitflow: new-bitflow-fee}))\n    )\n)\n\n;; Change Liquidity Fee\n(define-public (change-liquidity-fee (new-liquidity-fee uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set liquidity-fees new-liquidity-fee))\n    )\n)\n\n;; Admins can change the amplification coefficient in PairsDataMap\n;; @params:  y-token: principal, lp-token: principal, amplification-coefficient: uint\n(define-public (change-amplification-coefficient (y-token <sip-010-trait>) (lp-token <lp-trait>) (amplification-coefficient uint))\n    (let \n        (\n            (current-pair (unwrap! (map-get? PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-admins (var-get admins))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Update all appropriate maps\n        (ok (map-set PairsDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            current-pair\n            {\n                amplification-coefficient: amplification-coefficient\n            }\n        )))\n    )\n)\n\n;; Change Convergence Threshold \n(define-public (change-convergence-threshold (new-convergence-threshold uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set convergence-threshold new-convergence-threshold))\n    )\n)\n\n;; Admins can set the contract for handling staking and liquidity provider rewards\n;; @params: staking-contract: principal\n(define-public (set-staking-contract (staking-contract principal))\n    (let \n        (\n            (current-admins (var-get admins))\n            (is-set (var-get staking-and-rewards-contract-is-set))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Assert that the staking-and-rewards contract has not already been set\n        (asserts! (not is-set) (err \"err-staking-and-rewards-contract-already-assigned\"))\n\n        ;; Set contract for handling staking and rewards\n        (var-set staking-and-rewards-contract staking-contract)\n        (var-set staking-and-rewards-contract-is-set true)\n\n        ;; Set contract for handling staking and rewards\n        (ok staking-contract)\n    )\n)\n\n;; Admins can set the contract for the stacking dao to collect fees\n;; @params: stacking-dao-contract: principal\n(define-public (set-stacking-dao-contract (stacking-dao-address principal))\n    (let \n        (\n            (current-admins (var-get admins))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Set contract for handling staking and rewards\n        (ok (var-set stacking-dao-contract stacking-dao-address))\n    )\n)\n\n;; Admins can set the contract for bitflow protocol to collect fees\n;; @params: bitflow-contract: principal\n(define-public (set-bitflow-contract (bitflow-address principal))\n    (let \n        (\n            (current-admins (var-get admins))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Set contract for handling staking and rewards\n        (ok (var-set bitflow-contract bitflow-address))\n    )\n)\n",
    "analysis": {
      "summary": "This contract implements the core logic for the Bitflow Stableswap protocol, focusing on stSTX/STX trading pairs, including liquidity provision, swaps, and governance.",
      "explanation": "The contract is a complex implementation of a Stableswap protocol designed for trading pairs, specifically stSTX/STX. It includes features for liquidity management, swap functions, and governance mechanisms to adjust parameters and manage the protocol.\n\n- Constants like `cycle-length`, `index-list`, and `number-of-tokens` are used throughout for calculations and loop iterations <L15-28>.\n- The contract uses various data variables to track the state of staking rewards, admin governance, swap fees, and liquidity fees <L38-65>.\n- It defines maps for storing pair data and cycle-specific data, crucial for managing liquidity pools and fee distribution <L67-72>.\n- Read-only functions provide information about pairs, cycles, and swap calculations, employing mathematical formulas for AMM operations <L74-183>.\n- Swap functions `swap-x-for-y` and `swap-y-for-x` facilitate token exchanges, applying fees and updating balances accordingly <L185-365>.\n- Liquidity functions allow users to add or withdraw liquidity, adjusting the total shares and balances in the liquidity pool <L367-511>.\n- AMM functions, including `get-D`, `get-x`, and `get-y`, are critical for calculating the invariant and swap amounts, using iterative methods for convergence <L513-670>.\n- Governance functions enable admins to create pairs, set approvals, adjust fees, and modify contract parameters, ensuring flexibility and control over the protocol's operation <L672-904>.\n\nOverall, the contract is a comprehensive solution for a Stableswap protocol, with detailed mechanisms for swaps, liquidity management, and governance, tailored for the Stacks blockchain.",
      "tags": [
        "Stableswap",
        "DeFi",
        "protocol",
        "liquidity-management",
        "governance"
      ]
    }
  },
  {
    "rank": 8,
    "contract": "SP1NAZ59R1ED0V6NH9N0EQBEB3MKT48CQCMKC5Q41.swap-router-v21",
    "calls": 6086,
    "source": "(use-trait et 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (impl-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (define-constant E8 u100000000) (define-read-only (s2e (n uint)) (* n u100)) (define-public (i1 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1)) (ok u0))) (define-public (o1 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l in u1)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i2 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda u5000000 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o2 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda u5000000 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (ok u0))) (define-public (i3 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0))) (define-public (o3 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i4 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnyc E8 (s2e in) none)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kielx1jn7 (unwrap-panic (contract-call? 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 get-balance tx-sender)) u1)) (ok u0))) (define-public (o4 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kielx1jn7 in u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnyc E8 (s2e (unwrap-panic (contract-call? 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 get-balance tx-sender))) none)) (ok u0))) (define-public (i5 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wdiko E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o5 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wdiko E8 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i6 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o6 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda E8 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i7 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u1)) (ok u0))) (define-public (o7 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c in u1)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i8 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw in u1)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0))) (define-public (o8 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1)) (ok u0))) (define-public (i9 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0))) (define-public (o9 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1 )) (ok u0))) (define-public (i10 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (ok u0))) (define-public (o10 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i11 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o11 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i12 (in uint)) (begin (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc in u1)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u22 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u21 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token get-balance tx-sender)) u1 )) (ok u0))) (define-public (o12 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u21 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u22 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1)) (ok u0))) (define-public (i13 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4 swap-y-for-x 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-4 (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2 (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (o13 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-y-for-x 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2 (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-4 (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i14 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wpepe E8 (* u100000 (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (o14 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wpepe E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz get-balance tx-sender)) u1 )) (ok u0))) (define-public (i15 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc u5000000 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (ok u0))) (define-public (o15 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc u5000000 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (ok u0))) (define-public (i16 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (ok u0))) (define-public (o16 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (ok u0))) (define-public (i17 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wleo E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u28 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token get-balance tx-sender)) u1 )) (ok u0))) (define-public (o17 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u28 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wleo E8 (s2e (unwrap-panic (contract-call? 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i18 (in uint)) (begin (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc in u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-waeusdc E8 (s2e (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender))) none)) (ok u0))) (define-public (o18 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-waeusdc E8 (s2e in) none)) (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1)) (ok u0))) (define-public (i19 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1)) (ok u0))) (define-public (o19 (in uint)) (begin (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc in u1)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i20 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.migrate-wrapped migrate)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (ok u0))) (define-public (o20 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.migrate-wrapped migrate)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (ok u0))) (define-public (i21 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wgoat E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u36 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx get-balance tx-sender)) u1 )) (ok u0))) (define-public (o21 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u36 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wgoat E8 (s2e (unwrap-panic (contract-call? 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i22 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnot E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u16 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope get-balance tx-sender)) u1 )) (ok u0))) (define-public (o22 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u16 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnot E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnot get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i23 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-v1_0_0-0003 swap 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-v1_0_0-0003 in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2SF8P7AKN8NYHD57T96C51RRV9M0GKRN02BNHD2.token-wflat E8 (s2e (unwrap-panic (contract-call? 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity get-balance tx-sender))) none)) (ok u0))) (define-public (o23 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2SF8P7AKN8NYHD57T96C51RRV9M0GKRN02BNHD2.token-wflat E8 (s2e in) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-v1_0_0-0003 swap 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-v1_0_0-0003 (unwrap-panic (contract-call? 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity get-balance tx-sender)) u1 )) (ok u0))) (define-public (callback (p principal) (bp (buff 2048))) (let ((enc (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? bp u0 u16)) u16)))) (bh (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? bp u16 u20)) u4)))) (addr (get hashbytes (unwrap-panic (element-at? (get addrs (unwrap-panic (get-burn-block-info? pox-addrs bh))) u0)))) (di (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? addr u0 u4)) u4)))) (do (mod enc (+ di u4280000000 b0))) (c (mod do u100)) (in (* do u100)) (ts (if (< c u30) (if (<= c u11) (list (if (is-eq c u1) (i1 in) (err u0)) (if (is-eq c u2) (i2 in) (err u0)) (if (is-eq c u3) (i3 in) (err u0)) (if (is-eq c u4) (i4 in) (err u0)) (if (is-eq c u5) (i5 in) (err u0)) (if (is-eq c u6) (i6 in) (err u0)) (if (is-eq c u7) (i7 in) (err u0)) (if (is-eq c u8) (i8 in) (err u0)) (if (is-eq c u9) (i9 in) (err u0)) (if (is-eq c u10) (i10 in) (err u0)) (if (is-eq c u11) (i11 in) (err u0))) (list (if (is-eq c u12) (i12 in) (err u0)) (if (is-eq c u13) (i13 in) (err u0)) (if (is-eq c u14) (i14 in) (err u0)) (if (is-eq c u15) (i15 in) (err u0)) (if (is-eq c u16) (i16 in) (err u0)) (if (is-eq c u17) (i17 in) (err u0)) (if (is-eq c u18) (i18 in) (err u0)) (if (is-eq c u19) (i19 in) (err u0)) (if (is-eq c u20) (i20 in) (err u0)) (if (is-eq c u21) (i21 in) (err u0)) (if (is-eq c u22) (i22 in) (err u0)) (if (is-eq c u23) (i23 in) (err u0)))) (if (<= c u41) (list (if (is-eq c u31) (o1 in) (err u0)) (if (is-eq c u32) (o2 in) (err u0)) (if (is-eq c u33) (o3 in) (err u0)) (if (is-eq c u34) (o4 in) (err u0)) (if (is-eq c u35) (o5 in) (err u0)) (if (is-eq c u36) (o6 in) (err u0)) (if (is-eq c u37) (o7 in) (err u0)) (if (is-eq c u38) (o8 in) (err u0)) (if (is-eq c u39) (o9 in) (err u0)) (if (is-eq c u40) (o10 in) (err u0)) (if (is-eq c u41) (o11 in) (err u0))) (list (if (is-eq c u42) (o12 in) (err u0)) (if (is-eq c u43) (o13 in) (err u0)) (if (is-eq c u44) (o14 in) (err u0)) (if (is-eq c u45) (o15 in) (err u0)) (if (is-eq c u46) (o16 in) (err u0)) (if (is-eq c u47) (o17 in) (err u0)) (if (is-eq c u48) (o18 in) (err u0)) (if (is-eq c u49) (o19 in) (err u0)) (if (is-eq c u50) (o20 in) (err u0)) (if (is-eq c u51) (o21 in) (err u0)) (if (is-eq c u52) (o22 in) (err u0)) (if (is-eq c u53) (o23 in) (err u0))))))) (ok true))) (define-private (ee (bp (buff 2048)) (t <et>)) (as-contract (begin (asserts! (is-eq tx-sender (contract-of t)) (err u0)) (try! (contract-call? 'SPB75ZW15C90ZNDPQF4GSVNGBEJJA6WACZKNFVFK.vault-v1 flash-loan-stx t (stx-get-balance 'SPB75ZW15C90ZNDPQF4GSVNGBEJJA6WACZKNFVFK.vault-v1) tx-sender bp)) (let ((ba (stx-get-balance tx-sender))) (and (> ba u0) (try! (stx-transfer? ba tx-sender 'SP1VSDGJ3RCR2K8V1SY5DGNR733YACKPXPHEMXTFD)))) (ok true)))) (define-constant b0 block-height) (define-public (r0 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r1 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r2 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r3 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r4 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r5 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r6 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r7 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r8 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r9 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ra (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rb (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rc (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rd (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (re (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rf (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rg (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rh (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ri (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rj (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rk (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rl (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rm (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rn (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ro (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rp (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rq (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rr (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rs (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rt (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ru (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rv (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rw (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rx (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ry (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rz (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w0 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w1 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w2 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w3 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w4 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w5 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w6 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w7 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w8 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (w9 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wa (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wb (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wc (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wd (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (we (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wf (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wg (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wh (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wi (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wj (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wk (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wl (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wm (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wn (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wo (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wp (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wq (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wr (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ws (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wt (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wu (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wv (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ww (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wx (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wy (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (wz (bp (buff 2048)) (t <et>)) (ee bp t))",
    "analysis": {
      "summary": "This contract facilitates complex financial transactions involving multiple token swaps and flash loans, utilizing various DeFi protocols on the Stacks blockchain.",
      "explanation": "The contract integrates with multiple DeFi protocols to perform a series of token swaps and flash loans. It defines a set of public functions (`i1` to `i23` and `o1` to `o23`) for initiating swaps in different configurations, leveraging external contracts through `contract-call?`. Each swap function is designed to exchange tokens under specific conditions, using different tokens and amounts as parameters. The contract employs a unique callback mechanism to execute post-swap operations, ensuring the original loaned amount is returned. It also includes a comprehensive set of `r` functions (`r0` to `wz`) to handle flash loans from a vault contract, allowing users to borrow STX tokens, perform predefined swap operations, and repay the loan within a single transaction. The use of `define-constant` and `define-read-only` functions for utility operations, such as converting amounts (`s2e`), showcases the contract's optimization for reusability and efficiency in executing complex DeFi strategies.",
      "tags": [
        "DeFi",
        "swap",
        "flash-loan",
        "token",
        "multi-protocol"
      ]
    }
  },
  {
    "rank": 9,
    "contract": "SP000000000000000000002Q6VF78.pox-4",
    "calls": 5531,
    "source": ";; The .pox-4 contract\n;; Error codes\n(define-constant ERR_STACKING_UNREACHABLE 255)\n(define-constant ERR_STACKING_CORRUPTED_STATE 254)\n(define-constant ERR_STACKING_INSUFFICIENT_FUNDS 1)\n(define-constant ERR_STACKING_INVALID_LOCK_PERIOD 2)\n(define-constant ERR_STACKING_ALREADY_STACKED 3)\n(define-constant ERR_STACKING_NO_SUCH_PRINCIPAL 4)\n(define-constant ERR_STACKING_EXPIRED 5)\n(define-constant ERR_STACKING_STX_LOCKED 6)\n(define-constant ERR_STACKING_PERMISSION_DENIED 9)\n(define-constant ERR_STACKING_THRESHOLD_NOT_MET 11)\n(define-constant ERR_STACKING_POX_ADDRESS_IN_USE 12)\n(define-constant ERR_STACKING_INVALID_POX_ADDRESS 13)\n\n(define-constant ERR_STACKING_INVALID_AMOUNT 18)\n(define-constant ERR_NOT_ALLOWED 19)\n(define-constant ERR_STACKING_ALREADY_DELEGATED 20)\n(define-constant ERR_DELEGATION_EXPIRES_DURING_LOCK 21)\n(define-constant ERR_DELEGATION_TOO_MUCH_LOCKED 22)\n(define-constant ERR_DELEGATION_POX_ADDR_REQUIRED 23)\n(define-constant ERR_INVALID_START_BURN_HEIGHT 24)\n(define-constant ERR_NOT_CURRENT_STACKER 25)\n(define-constant ERR_STACK_EXTEND_NOT_LOCKED 26)\n(define-constant ERR_STACK_INCREASE_NOT_LOCKED 27)\n(define-constant ERR_DELEGATION_NO_REWARD_SLOT 28)\n(define-constant ERR_DELEGATION_WRONG_REWARD_SLOT 29)\n(define-constant ERR_STACKING_IS_DELEGATED 30)\n(define-constant ERR_STACKING_NOT_DELEGATED 31)\n(define-constant ERR_INVALID_SIGNER_KEY 32)\n(define-constant ERR_REUSED_SIGNER_KEY 33)\n(define-constant ERR_DELEGATION_ALREADY_REVOKED 34)\n(define-constant ERR_INVALID_SIGNATURE_PUBKEY 35)\n(define-constant ERR_INVALID_SIGNATURE_RECOVER 36)\n(define-constant ERR_INVALID_REWARD_CYCLE 37)\n(define-constant ERR_SIGNER_AUTH_AMOUNT_TOO_HIGH 38)\n(define-constant ERR_SIGNER_AUTH_USED 39)\n(define-constant ERR_INVALID_INCREASE 40)\n\n;; Valid values for burnchain address versions.\n;; These first four correspond to address hash modes in Stacks 2.1,\n;; and are defined in pox-mainnet.clar and pox-testnet.clar (so they\n;; cannot be defined here again).\n(define-constant ADDRESS_VERSION_P2PKH 0x00)\n(define-constant ADDRESS_VERSION_P2SH 0x01)\n(define-constant ADDRESS_VERSION_P2WPKH 0x02)\n(define-constant ADDRESS_VERSION_P2WSH 0x03)\n(define-constant ADDRESS_VERSION_NATIVE_P2WPKH 0x04)\n(define-constant ADDRESS_VERSION_NATIVE_P2WSH 0x05)\n(define-constant ADDRESS_VERSION_NATIVE_P2TR 0x06)\n\n;; Values for stacks address versions\n(define-constant STACKS_ADDR_VERSION_MAINNET 0x16)\n(define-constant STACKS_ADDR_VERSION_TESTNET 0x1a)\n\n;; Keep these constants in lock-step with the address version buffs above\n;; Maximum value of an address version as a uint\n(define-constant MAX_ADDRESS_VERSION u6)\n;; Maximum value of an address version that has a 20-byte hashbytes\n;; (0x00, 0x01, 0x02, 0x03, and 0x04 have 20-byte hashbytes)\n(define-constant MAX_ADDRESS_VERSION_BUFF_20 u4)\n;; Maximum value of an address version that has a 32-byte hashbytes\n;; (0x05 and 0x06 have 32-byte hashbytes)\n(define-constant MAX_ADDRESS_VERSION_BUFF_32 u6)\n\n;; PoX mainnet constants\n;; Min/max number of reward cycles uSTX can be locked for\n(define-constant MIN_POX_REWARD_CYCLES u1)\n(define-constant MAX_POX_REWARD_CYCLES u12)\n\n;; Default length of the PoX registration window, in burnchain blocks.\n(define-constant PREPARE_CYCLE_LENGTH (if is-in-mainnet u100 u50))\n\n;; Default length of the PoX reward cycle, in burnchain blocks.\n(define-constant REWARD_CYCLE_LENGTH (if is-in-mainnet u2100 u1050))\n\n;; Stacking thresholds\n(define-constant STACKING_THRESHOLD_25 (if is-in-mainnet u20000 u8000))\n\n;; SIP18 message prefix\n(define-constant SIP018_MSG_PREFIX 0x534950303138)\n\n;; Data vars that store a copy of the burnchain configuration.\n;; Implemented as data-vars, so that different configurations can be\n;; used in e.g. test harnesses.\n(define-data-var pox-prepare-cycle-length uint PREPARE_CYCLE_LENGTH)\n(define-data-var pox-reward-cycle-length uint REWARD_CYCLE_LENGTH)\n(define-data-var first-burnchain-block-height uint u0)\n(define-data-var configured bool false)\n(define-data-var first-pox-4-reward-cycle uint u0)\n\n;; This function can only be called once, when it boots up\n(define-public (set-burnchain-parameters (first-burn-height uint)\n                                         (prepare-cycle-length uint)\n                                         (reward-cycle-length uint)\n                                         (begin-pox-4-reward-cycle uint))\n    (begin\n        (asserts! (not (var-get configured)) (err ERR_NOT_ALLOWED))\n        (var-set first-burnchain-block-height first-burn-height)\n        (var-set pox-prepare-cycle-length prepare-cycle-length)\n        (var-set pox-reward-cycle-length reward-cycle-length)\n        (var-set first-pox-4-reward-cycle begin-pox-4-reward-cycle)\n        (var-set configured true)\n        (ok true))\n)\n\n;; The Stacking lock-up state and associated metadata.\n;; Records are inserted into this map via `stack-stx`, `delegate-stack-stx`, `stack-extend`\n;;  `delegate-stack-extend` and burnchain transactions for invoking `stack-stx`, etc.\n;; Records will be deleted from this map when auto-unlocks are processed\n;;\n;; This map de-normalizes some state from the `reward-cycle-pox-address-list` map\n;;  and the `pox-4` contract tries to keep this state in sync with the reward-cycle\n;;  state. The major invariants of this `stacking-state` map are:\n;;    (1) any entry in `reward-cycle-pox-address-list` with `some stacker` points to a real `stacking-state`\n;;    (2) `stacking-state.reward-set-indexes` matches the index of that `reward-cycle-pox-address-list`\n;;    (3) all `stacking-state.reward-set-indexes` match the index of their reward cycle entries\n;;    (4) `stacking-state.pox-addr` matches `reward-cycle-pox-address-list.pox-addr`\n;;    (5) if set, (len reward-set-indexes) == lock-period\n;;    (6) (reward-cycle-to-burn-height (+ lock-period first-reward-cycle)) == (get unlock-height (stx-account stacker))\n;;  These invariants only hold while `cur-reward-cycle < (+ lock-period first-reward-cycle)`\n;;\n(define-map stacking-state\n    { stacker: principal }\n    {\n        ;; Description of the underlying burnchain address that will\n        ;; receive PoX'ed tokens. Translating this into an address\n        ;; depends on the burnchain being used.  When Bitcoin is\n        ;; the burnchain, this gets translated into a p2pkh, p2sh,\n        ;; p2wpkh-p2sh, p2wsh-p2sh, p2wpkh, p2wsh, or p2tr UTXO,\n        ;; depending on the version.  The `hashbytes` field *must* be\n        ;; either 20 bytes or 32 bytes, depending on the output.\n        pox-addr: { version: (buff 1), hashbytes: (buff 32) },\n        ;; how long the uSTX are locked, in reward cycles.\n        lock-period: uint,\n        ;; reward cycle when rewards begin\n        first-reward-cycle: uint,\n        ;; indexes in each reward-set associated with this user.\n        ;; these indexes are only valid looking forward from\n        ;;  `first-reward-cycle` (i.e., they do not correspond\n        ;;  to entries in the reward set that may have been from\n        ;;  previous stack-stx calls, or prior to an extend)\n        reward-set-indexes: (list 12 uint),\n        ;; principal of the delegate, if stacker has delegated\n        delegated-to: (optional principal),\n    }\n)\n\n;; Delegation relationships\n(define-map delegation-state\n    { stacker: principal }\n    {\n        amount-ustx: uint,              ;; how many uSTX delegated?\n        delegated-to: principal,        ;; who are we delegating?\n        until-burn-ht: (optional uint), ;; how long does the delegation last?\n        ;; does the delegate _need_ to use a specific\n        ;; pox recipient address?\n        pox-addr: (optional { version: (buff 1), hashbytes: (buff 32) })\n    }\n)\n\n;; allowed contract-callers\n(define-map allowance-contract-callers\n    { sender: principal, contract-caller: principal }\n    { until-burn-ht: (optional uint) })\n\n;; How many uSTX are stacked in a given reward cycle.\n;; Updated when a new PoX address is registered, or when more STX are granted\n;; to it.\n(define-map reward-cycle-total-stacked\n    { reward-cycle: uint }\n    { total-ustx: uint }\n)\n\n;; Internal map read by the Stacks node to iterate through the list of\n;; PoX reward addresses on a per-reward-cycle basis.\n(define-map reward-cycle-pox-address-list\n    { reward-cycle: uint, index: uint }\n    {\n        pox-addr: { version: (buff 1), hashbytes: (buff 32) },\n        total-ustx: uint,\n        stacker: (optional principal),\n        signer: (buff 33)\n    }\n)\n\n(define-map reward-cycle-pox-address-list-len\n    { reward-cycle: uint }\n    { len: uint }\n)\n\n;; how much has been locked up for this address before\n;;   committing?\n;; this map allows stackers to stack amounts < minimum\n;;   by paying the cost of aggregation during the commit\n(define-map partial-stacked-by-cycle\n    {\n        pox-addr: { version: (buff 1), hashbytes: (buff 32) },\n        reward-cycle: uint,\n        sender: principal\n    }\n    { stacked-amount: uint }\n)\n\n;; This is identical to partial-stacked-by-cycle, but its data is never deleted.\n;; It is used to preserve data for downstream clients to observe aggregate\n;; commits.  Each key/value pair in this map is simply the last value of\n;; partial-stacked-by-cycle right after it was deleted (so, subsequent calls\n;; to the `stack-aggregation-*` functions will overwrite this).\n(define-map logged-partial-stacked-by-cycle\n    {\n        pox-addr: { version: (buff 1), hashbytes: (buff 32) },\n        reward-cycle: uint,\n        sender: principal\n    }\n    { stacked-amount: uint }\n)\n\n;; State for setting authorizations for signer keys to be used in\n;; certain stacking transactions. These fields match the fields used\n;; in the message hash for signature-based signer key authorizations.\n;; Values in this map are set in `set-signer-key-authorization`.\n(define-map signer-key-authorizations\n    {\n        ;; The signer key being authorized\n        signer-key: (buff 33),\n        ;; The reward cycle for which the authorization is valid.\n        ;; For `stack-stx` and `stack-extend`, this refers to the reward\n        ;; cycle where the transaction is confirmed. For `stack-aggregation-commit`,\n        ;; this refers to the reward cycle argument in that function.\n        reward-cycle: uint,\n        ;; For `stack-stx`, this refers to `lock-period`. For `stack-extend`,\n        ;; this refers to `extend-count`. For `stack-aggregation-commit`, this is `u1`.\n        period: uint,\n        ;; A string representing the function where this authorization is valid. Either\n        ;; `stack-stx`, `stack-extend`, `stack-increase` or `agg-commit`.\n        topic: (string-ascii 14),\n        ;; The PoX address that can be used with this signer key\n        pox-addr: { version: (buff 1), hashbytes: (buff 32) },\n        ;; The unique auth-id for this authorization\n        auth-id: uint,\n        ;; The maximum amount of uSTX that can be used (per tx) with this signer key\n        max-amount: uint,\n    }\n    bool ;; Whether the authorization can be used or not\n)\n\n;; State for tracking used signer key authorizations. This prevents re-use\n;; of the same signature or pre-set authorization for multiple transactions.\n;; Refer to the `signer-key-authorizations` map for the documentation on these fields\n(define-map used-signer-key-authorizations\n    {\n        signer-key: (buff 33),\n        reward-cycle: uint,\n        period: uint,\n        topic: (string-ascii 14),\n        pox-addr: { version: (buff 1), hashbytes: (buff 32) },\n        auth-id: uint,\n        max-amount: uint,\n    }\n    bool ;; Whether the field has been used or not\n)\n\n;; What's the reward cycle number of the burnchain block height?\n;; Will runtime-abort if height is less than the first burnchain block (this is intentional)\n(define-read-only (burn-height-to-reward-cycle (height uint))\n    (/ (- height (var-get first-burnchain-block-height)) (var-get pox-reward-cycle-length)))\n\n;; What's the block height at the start of a given reward cycle?\n(define-read-only (reward-cycle-to-burn-height (cycle uint))\n    (+ (var-get first-burnchain-block-height) (* cycle (var-get pox-reward-cycle-length))))\n\n;; What's the current PoX reward cycle?\n(define-read-only (current-pox-reward-cycle)\n    (burn-height-to-reward-cycle burn-block-height))\n\n;; Get the _current_ PoX stacking principal information.  If the information\n;; is expired, or if there's never been such a stacker, then returns none.\n(define-read-only (get-stacker-info (stacker principal))\n    (match (map-get? stacking-state { stacker: stacker })\n        stacking-info\n            (if (<= (+ (get first-reward-cycle stacking-info) (get lock-period stacking-info)) (current-pox-reward-cycle))\n                ;; present, but lock has expired\n                none\n                ;; present, and lock has not expired\n                (some stacking-info)\n            )\n        ;; no state at all\n        none\n    ))\n\n(define-read-only (check-caller-allowed)\n    (or (is-eq tx-sender contract-caller)\n        (let ((caller-allowed\n                 ;; if not in the caller map, return false\n                 (unwrap! (map-get? allowance-contract-callers\n                                    { sender: tx-sender, contract-caller: contract-caller })\n                          false))\n               (expires-at\n                 ;; if until-burn-ht not set, then return true (because no expiry)\n                 (unwrap! (get until-burn-ht caller-allowed) true)))\n          ;; is the caller allowance expired?\n          (if (>= burn-block-height expires-at)\n              false\n              true))))\n\n(define-read-only (get-check-delegation (stacker principal))\n    (let ((delegation-info (try! (map-get? delegation-state { stacker: stacker }))))\n      ;; did the existing delegation expire?\n      (if (match (get until-burn-ht delegation-info)\n                 until-burn-ht (> burn-block-height until-burn-ht)\n                 false)\n          ;; it expired, return none\n          none\n          ;; delegation is active\n          (some delegation-info))))\n\n;; Get the size of the reward set for a reward cycle.\n;; Note that this also _will_ return PoX addresses that are beneath\n;; the minimum threshold -- i.e. the threshold can increase after insertion.\n;; Used internally by the Stacks node, which filters out the entries\n;; in this map to select PoX addresses with enough STX.\n(define-read-only (get-reward-set-size (reward-cycle uint))\n    (default-to\n        u0\n        (get len (map-get? reward-cycle-pox-address-list-len { reward-cycle: reward-cycle }))))\n\n;; Add a single PoX address to a single reward cycle.\n;; Used to build up a set of per-reward-cycle PoX addresses.\n;; No checking will be done -- don't call if this PoX address is already registered in this reward cycle!\n;; Returns the index into the reward cycle that the PoX address is stored to\n(define-private (append-reward-cycle-pox-addr (pox-addr (tuple (version (buff 1)) (hashbytes (buff 32))))\n                                              (reward-cycle uint)\n                                              (amount-ustx uint)\n                                              (stacker (optional principal))\n                                              (signer (buff 33)))\n    (let ((sz (get-reward-set-size reward-cycle)))\n        (map-set reward-cycle-pox-address-list\n            { reward-cycle: reward-cycle, index: sz }\n            { pox-addr: pox-addr, total-ustx: amount-ustx, stacker: stacker, signer: signer })\n        (map-set reward-cycle-pox-address-list-len\n            { reward-cycle: reward-cycle }\n            { len: (+ u1 sz) })\n    sz))\n\n;; How many uSTX are stacked?\n(define-read-only (get-total-ustx-stacked (reward-cycle uint))\n    (default-to\n        u0\n        (get total-ustx (map-get? reward-cycle-total-stacked { reward-cycle: reward-cycle })))\n)\n\n;; Called internally by the node to iterate through the list of PoX addresses in this reward cycle.\n;; Returns (optional (tuple (pox-addr <pox-address>) (total-ustx <uint>)))\n(define-read-only (get-reward-set-pox-address (reward-cycle uint) (index uint))\n    (map-get? reward-cycle-pox-address-list { reward-cycle: reward-cycle, index: index }))\n\n;; Add a PoX address to the `cycle-index`-th reward cycle, if `cycle-index` is between 0 and the given num-cycles (exclusive).\n;; Arguments are given as a tuple, so this function can be (folded ..)'ed onto a list of its arguments.\n;; Used by add-pox-addr-to-reward-cycles.\n;; No checking is done.\n;; The returned tuple is the same as inputted `params`, but the `i` field is incremented if\n;;  the pox-addr was added to the given cycle.  Also, `reward-set-indexes` grows to include all\n;;  of the `reward-cycle-index` key parts of the `reward-cycle-pox-address-list` which get added by this function.\n;;  This way, the caller knows which items in a given reward cycle's PoX address list got updated.\n(define-private (add-pox-addr-to-ith-reward-cycle (cycle-index uint) (params (tuple\n                                                            (pox-addr (tuple (version (buff 1)) (hashbytes (buff 32))))\n                                                            (reward-set-indexes (list 12 uint))\n                                                            (first-reward-cycle uint)\n                                                            (num-cycles uint)\n                                                            (stacker (optional principal))\n                                                            (signer (buff 33))\n                                                            (amount-ustx uint)\n                                                            (i uint))))\n    (let ((reward-cycle (+ (get first-reward-cycle params) (get i params)))\n          (num-cycles (get num-cycles params))\n          (i (get i params))\n          (reward-set-index (if (< i num-cycles)\n            (let ((total-ustx (get-total-ustx-stacked reward-cycle))\n                  (reward-index\n                      ;; record how many uSTX this pox-addr will stack for in the given reward cycle\n                      (append-reward-cycle-pox-addr\n                        (get pox-addr params)\n                        reward-cycle\n                        (get amount-ustx params)\n                        (get stacker params)\n                        (get signer params)\n                        )))\n                  ;; update running total\n                  (map-set reward-cycle-total-stacked\n                     { reward-cycle: reward-cycle }\n                     { total-ustx: (+ (get amount-ustx params) total-ustx) })\n                  (some reward-index))\n            none))\n          (next-i (if (< i num-cycles) (+ i u1) i)))\n    {\n        pox-addr: (get pox-addr params),\n        first-reward-cycle: (get first-reward-cycle params),\n        num-cycles: num-cycles,\n        amount-ustx: (get amount-ustx params),\n        stacker: (get stacker params),\n        signer: (get signer params),\n        reward-set-indexes: (match\n            reward-set-index new (unwrap-panic (as-max-len? (append (get reward-set-indexes params) new) u12))\n            (get reward-set-indexes params)),\n        i: next-i\n    }))\n\n;; Add a PoX address to a given sequence of reward cycle lists.\n;; A PoX address can be added to at most 12 consecutive cycles.\n;; No checking is done.\n(define-private (add-pox-addr-to-reward-cycles (pox-addr (tuple (version (buff 1)) (hashbytes (buff 32))))\n                                               (first-reward-cycle uint)\n                                               (num-cycles uint)\n                                               (amount-ustx uint)\n                                               (stacker principal)\n                                               (signer (buff 33)))\n  (let ((cycle-indexes (list u0 u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11))\n        (results (fold add-pox-addr-to-ith-reward-cycle cycle-indexes\n                         { pox-addr: pox-addr, first-reward-cycle: first-reward-cycle, num-cycles: num-cycles,\n                           reward-set-indexes: (list), amount-ustx: amount-ustx, i: u0, stacker: (some stacker), signer: signer }))\n        (reward-set-indexes (get reward-set-indexes results)))\n    ;; For safety, add up the number of times (add-principal-to-ith-reward-cycle) returns 1.\n    ;; It _should_ be equal to num-cycles.\n    (asserts! (is-eq num-cycles (get i results)) (err ERR_STACKING_UNREACHABLE))\n    (asserts! (is-eq num-cycles (len reward-set-indexes)) (err ERR_STACKING_UNREACHABLE))\n    (ok reward-set-indexes)))\n\n(define-private (add-pox-partial-stacked-to-ith-cycle\n                 (cycle-index uint)\n                 (params { pox-addr: { version: (buff 1), hashbytes: (buff 32) },\n                           reward-cycle: uint,\n                           num-cycles: uint,\n                           amount-ustx: uint }))\n  (let ((pox-addr     (get pox-addr     params))\n        (num-cycles   (get num-cycles   params))\n        (reward-cycle (get reward-cycle params))\n        (amount-ustx  (get amount-ustx  params)))\n    (let ((current-amount\n           (default-to u0\n             (get stacked-amount\n                  (map-get? partial-stacked-by-cycle { sender: tx-sender, pox-addr: pox-addr, reward-cycle: reward-cycle })))))\n      (if (>= cycle-index num-cycles)\n          ;; do not add to cycles >= cycle-index\n          false\n          ;; otherwise, add to the partial-stacked-by-cycle\n          (map-set partial-stacked-by-cycle\n                   { sender: tx-sender, pox-addr: pox-addr, reward-cycle: reward-cycle }\n                   { stacked-amount: (+ amount-ustx current-amount) }))\n      ;; produce the next params tuple\n      { pox-addr: pox-addr,\n        reward-cycle: (+ u1 reward-cycle),\n        num-cycles: num-cycles,\n        amount-ustx: amount-ustx })))\n\n;; Add a PoX address to a given sequence of partial reward cycle lists.\n;; A PoX address can be added to at most 12 consecutive cycles.\n;; No checking is done.\n(define-private (add-pox-partial-stacked (pox-addr (tuple (version (buff 1)) (hashbytes (buff 32))))\n                                         (first-reward-cycle uint)\n                                         (num-cycles uint)\n                                         (amount-ustx uint))\n  (let ((cycle-indexes (list u0 u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11)))\n    (fold add-pox-partial-stacked-to-ith-cycle cycle-indexes\n          { pox-addr: pox-addr, reward-cycle: first-reward-cycle, num-cycles: num-cycles, amount-ustx: amount-ustx })\n    true))\n\n;; What is the minimum number of uSTX to be stacked in the given reward cycle?\n;; Used internally by the Stacks node, and visible publicly.\n(define-read-only (get-stacking-minimum)\n    (/ stx-liquid-supply STACKING_THRESHOLD_25))\n\n;; Is the address mode valid for a PoX address?\n(define-read-only (check-pox-addr-version (version (buff 1)))\n    (<= (buff-to-uint-be version) MAX_ADDRESS_VERSION))\n\n;; Is this buffer the right length for the given PoX address?\n(define-read-only (check-pox-addr-hashbytes (version (buff 1)) (hashbytes (buff 32)))\n    (if (<= (buff-to-uint-be version) MAX_ADDRESS_VERSION_BUFF_20)\n        (is-eq (len hashbytes) u20)\n        (if (<= (buff-to-uint-be version) MAX_ADDRESS_VERSION_BUFF_32)\n            (is-eq (len hashbytes) u32)\n            false)))\n\n;; Is the given lock period valid?\n(define-read-only (check-pox-lock-period (lock-period uint))\n    (and (>= lock-period MIN_POX_REWARD_CYCLES)\n         (<= lock-period MAX_POX_REWARD_CYCLES)))\n\n;; Evaluate if a participant can stack an amount of STX for a given period.\n;; This method is designed as a read-only method so that it can be used as\n;; a set of guard conditions and also as a read-only RPC call that can be\n;; performed beforehand.\n(define-read-only (can-stack-stx (pox-addr (tuple (version (buff 1)) (hashbytes (buff 32))))\n                                  (amount-ustx uint)\n                                  (first-reward-cycle uint)\n                                  (num-cycles uint))\n  (begin\n    ;; minimum uSTX must be met\n    (asserts! (<= (get-stacking-minimum) amount-ustx)\n              (err ERR_STACKING_THRESHOLD_NOT_MET))\n\n    (minimal-can-stack-stx pox-addr amount-ustx first-reward-cycle num-cycles)))\n\n;; Evaluate if a participant can stack an amount of STX for a given period.\n;; This method is designed as a read-only method so that it can be used as\n;; a set of guard conditions and also as a read-only RPC call that can be\n;; performed beforehand.\n(define-read-only (minimal-can-stack-stx\n                   (pox-addr (tuple (version (buff 1)) (hashbytes (buff 32))))\n                   (amount-ustx uint)\n                   (first-reward-cycle uint)\n                   (num-cycles uint))\n  (begin\n    ;; amount must be valid\n    (asserts! (> amount-ustx u0)\n              (err ERR_STACKING_INVALID_AMOUNT))\n\n    ;; lock period must be in acceptable range.\n    (asserts! (check-pox-lock-period num-cycles)\n              (err ERR_STACKING_INVALID_LOCK_PERIOD))\n\n    ;; address version must be valid\n    (asserts! (check-pox-addr-version (get version pox-addr))\n              (err ERR_STACKING_INVALID_POX_ADDRESS))\n\n    ;; address hashbytes must be valid for the version\n    (asserts! (check-pox-addr-hashbytes (get version pox-addr) (get hashbytes pox-addr))\n              (err ERR_STACKING_INVALID_POX_ADDRESS))\n\n    (ok true)))\n\n;; Revoke contract-caller authorization to call stacking methods\n(define-public (disallow-contract-caller (caller principal))\n  (begin\n    (asserts! (is-eq tx-sender contract-caller)\n              (err ERR_STACKING_PERMISSION_DENIED))\n    (ok (map-delete allowance-contract-callers { sender: tx-sender, contract-caller: caller }))))\n\n;; Give a contract-caller authorization to call stacking methods\n;;  normally, stacking methods may only be invoked by _direct_ transactions\n;;   (i.e., the tx-sender issues a direct contract-call to the stacking methods)\n;;  by issuing an allowance, the tx-sender may call through the allowed contract\n(define-public (allow-contract-caller (caller principal) (until-burn-ht (optional uint)))\n  (begin\n    (asserts! (is-eq tx-sender contract-caller)\n              (err ERR_STACKING_PERMISSION_DENIED))\n    (ok (map-set allowance-contract-callers\n               { sender: tx-sender, contract-caller: caller }\n               { until-burn-ht: until-burn-ht }))))\n\n;; Lock up some uSTX for stacking!  Note that the given amount here is in micro-STX (uSTX).\n;; The STX will be locked for the given number of reward cycles (lock-period).\n;; This is the self-service interface.  tx-sender will be the Stacker.\n;;\n;; * The given stacker cannot currently be stacking.\n;; * You will need the minimum uSTX threshold.  This will be determined by (get-stacking-minimum)\n;; at the time this method is called.\n;; * You may need to increase the amount of uSTX locked up later, since the minimum uSTX threshold\n;; may increase between reward cycles.\n;; * You need to provide a signer key to be used in the signer DKG process.\n;; * The Stacker will receive rewards in the reward cycle following `start-burn-ht`.\n;; Importantly, `start-burn-ht` may not be further into the future than the next reward cycle,\n;; and in most cases should be set to the current burn block height.\n;; \n;; To ensure that the Stacker is authorized to use the provided `signer-key`, the stacker\n;; must provide either a signature have an authorization already saved. Refer to\n;; `verify-signer-key-sig` for more information.\n;;\n;; The tokens will unlock and be returned to the Stacker (tx-sender) automatically.\n(define-public (stack-stx (amount-ustx uint)\n                          (pox-addr (tuple (version (buff 1)) (hashbytes (buff 32))))\n                          (start-burn-ht uint)\n                          (lock-period uint)\n                          (signer-sig (optional (buff 65)))\n                          (signer-key (buff 33))\n                          (max-amount uint)\n                          (auth-id uint))\n    ;; this stacker's first reward cycle is the _next_ reward cycle\n    (let ((first-reward-cycle (+ u1 (current-pox-reward-cycle)))\n          (specified-reward-cycle (+ u1 (burn-height-to-reward-cycle start-burn-ht))))\n      ;; the start-burn-ht must result in the next reward cycle, do not allow stackers\n      ;;  to \"post-date\" their `stack-stx` transaction\n      (asserts! (is-eq first-reward-cycle specified-reward-cycle)\n                (err ERR_INVALID_START_BURN_HEIGHT))\n\n      ;; must be called directly by the tx-sender or by an allowed contract-caller\n      (asserts! (check-caller-allowed)\n                (err ERR_STACKING_PERMISSION_DENIED))\n\n      ;; tx-sender principal must not be stacking\n      (asserts! (is-none (get-stacker-info tx-sender))\n        (err ERR_STACKING_ALREADY_STACKED))\n\n      ;; tx-sender must not be delegating\n      (asserts! (is-none (get-check-delegation tx-sender))\n        (err ERR_STACKING_ALREADY_DELEGATED))\n\n      ;; the Stacker must have sufficient unlocked funds\n      (asserts! (>= (stx-get-balance tx-sender) amount-ustx)\n        (err ERR_STACKING_INSUFFICIENT_FUNDS))\n\n      ;; Validate ownership of the given signer key\n      (try! (consume-signer-key-authorization pox-addr (- first-reward-cycle u1) \"stack-stx\" lock-period signer-sig signer-key amount-ustx max-amount auth-id))\n\n      ;; ensure that stacking can be performed\n      (try! (can-stack-stx pox-addr amount-ustx first-reward-cycle lock-period))\n\n      ;; register the PoX address with the amount stacked\n      (let ((reward-set-indexes (try! (add-pox-addr-to-reward-cycles pox-addr first-reward-cycle lock-period amount-ustx tx-sender signer-key))))\n          ;; add stacker record\n         (map-set stacking-state\n           { stacker: tx-sender }\n           { pox-addr: pox-addr,\n             reward-set-indexes: reward-set-indexes,\n             first-reward-cycle: first-reward-cycle,\n             lock-period: lock-period,\n             delegated-to: none })\n\n          ;; return the lock-up information, so the node can actually carry out the lock.\n          (ok { stacker: tx-sender, lock-amount: amount-ustx, signer-key: signer-key, unlock-burn-height: (reward-cycle-to-burn-height (+ first-reward-cycle lock-period)) }))))\n\n;; Revokes the delegation to the current stacking pool.\n;; New in pox-4: Fails if the delegation was already revoked.\n;; Returns the last delegation state.\n(define-public (revoke-delegate-stx)\n  (let ((last-delegation-state (get-check-delegation tx-sender)))\n    ;; must be called directly by the tx-sender or by an allowed contract-caller\n    (asserts! (check-caller-allowed)\n              (err ERR_STACKING_PERMISSION_DENIED))\n    (asserts! (is-some last-delegation-state) (err ERR_DELEGATION_ALREADY_REVOKED))\n    (asserts! (map-delete delegation-state { stacker: tx-sender }) (err ERR_DELEGATION_ALREADY_REVOKED))\n    (ok last-delegation-state)))\n\n;; Delegate to `delegate-to` the ability to stack from a given address.\n;;  This method _does not_ lock the funds, rather, it allows the delegate\n;;  to issue the stacking lock.\n;; The caller specifies:\n;;   * amount-ustx: the total amount of ustx the delegate may be allowed to lock\n;;   * until-burn-ht: an optional burn height at which this delegation expires\n;;   * pox-addr: an optional address to which any rewards *must* be sent\n(define-public (delegate-stx (amount-ustx uint)\n                             (delegate-to principal)\n                             (until-burn-ht (optional uint))\n                             (pox-addr (optional { version: (buff 1), hashbytes: (buff 32) })))\n\n    (begin\n      ;; must be called directly by the tx-sender or by an allowed contract-caller\n      (asserts! (check-caller-allowed)\n                (err ERR_STACKING_PERMISSION_DENIED))\n\n      ;; delegate-stx no longer requires the delegator to not currently\n      ;; be stacking.\n      ;; delegate-stack-* functions assert that\n      ;; 1. users can't swim in two pools at the same time.\n      ;; 2. users can't switch pools without cool down cycle.\n      ;;    Other pool admins can't increase or extend.\n      ;; 3. users can't join a pool while already directly stacking.\n\n      ;; pox-addr, if given, must be valid\n      (match pox-addr\n         address\n            (asserts! (check-pox-addr-version (get version address))\n                (err ERR_STACKING_INVALID_POX_ADDRESS))\n         true)\n\n      (match pox-addr\n         pox-tuple\n            (asserts! (check-pox-addr-hashbytes (get version pox-tuple) (get hashbytes pox-tuple))\n                (err ERR_STACKING_INVALID_POX_ADDRESS))\n         true)\n\n      ;; tx-sender must not be delegating\n      (asserts! (is-none (get-check-delegation tx-sender))\n        (err ERR_STACKING_ALREADY_DELEGATED))\n\n      ;; add delegation record\n      (map-set delegation-state\n        { stacker: tx-sender }\n        { amount-ustx: amount-ustx,\n          delegated-to: delegate-to,\n          until-burn-ht: until-burn-ht,\n          pox-addr: pox-addr })\n\n      (ok true)))\n\n;; Generate a message hash for validating a signer key.\n;; The message hash follows SIP018 for signing structured data. The structured data\n;; is the tuple `{ pox-addr: { version, hashbytes }, reward-cycle, auth-id, max-amount }`.\n;; The domain is `{ name: \"pox-4-signer\", version: \"1.0.0\", chain-id: chain-id }`.\n(define-read-only (get-signer-key-message-hash (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                                               (reward-cycle uint)\n                                               (topic (string-ascii 14))\n                                               (period uint)\n                                               (max-amount uint)\n                                               (auth-id uint))\n  (sha256 (concat\n    SIP018_MSG_PREFIX\n    (concat\n      (sha256 (unwrap-panic (to-consensus-buff? { name: \"pox-4-signer\", version: \"1.0.0\", chain-id: chain-id })))\n      (sha256 (unwrap-panic\n        (to-consensus-buff? {\n          pox-addr: pox-addr,\n          reward-cycle: reward-cycle,\n          topic: topic,\n          period: period,\n          auth-id: auth-id,\n          max-amount: max-amount,\n        })))))))\n\n;; Verify a signature from the signing key for this specific stacker.\n;; See `get-signer-key-message-hash` for details on the message hash.\n;;\n;; Note that `reward-cycle` corresponds to the _current_ reward cycle,\n;; when used with `stack-stx` and `stack-extend`. Both the reward cycle and\n;; the lock period are inflexible, which means that the stacker must confirm their transaction\n;; during the exact reward cycle and with the exact period that the signature or authorization was\n;; generated for.\n;; \n;; The `amount` field is checked to ensure it is not larger than `max-amount`, which is\n;; a field in the authorization. `auth-id` is a random uint to prevent authorization\n;; replays.\n;;\n;; This function does not verify the payload of the authorization. The caller of\n;; this function must ensure that the payload (reward cycle, period, topic, and pox-addr)\n;; are valid according to the caller function's requirements.\n;;\n;; When `signer-sig` is present, the public key is recovered from the signature\n;; and compared to `signer-key`. If `signer-sig` is `none`, the function verifies that an authorization was previously\n;; added for this key.\n;; \n;; This function checks to ensure that the authorization hasn't been used yet, but it\n;; does _not_ store the authorization as used. The function `consume-signer-key-authorization`\n;; handles that, and this read-only function is exposed for client-side verification.\n(define-read-only (verify-signer-key-sig (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                                         (reward-cycle uint)\n                                         (topic (string-ascii 14))\n                                         (period uint)\n                                         (signer-sig-opt (optional (buff 65)))\n                                         (signer-key (buff 33))\n                                         (amount uint)\n                                         (max-amount uint)\n                                         (auth-id uint))\n  (begin\n    ;; Validate that amount is less than or equal to `max-amount`\n    (asserts! (>= max-amount amount) (err ERR_SIGNER_AUTH_AMOUNT_TOO_HIGH))\n    (asserts! (is-none (map-get? used-signer-key-authorizations { signer-key: signer-key, reward-cycle: reward-cycle, topic: topic, period: period, pox-addr: pox-addr, auth-id: auth-id, max-amount: max-amount }))\n              (err ERR_SIGNER_AUTH_USED))\n    (match signer-sig-opt\n      ;; `signer-sig` is present, verify the signature\n      signer-sig (ok (asserts!\n        (is-eq\n          (unwrap! (secp256k1-recover?\n            (get-signer-key-message-hash pox-addr reward-cycle topic period max-amount auth-id)\n            signer-sig) (err ERR_INVALID_SIGNATURE_RECOVER))\n          signer-key)\n        (err ERR_INVALID_SIGNATURE_PUBKEY)))\n      ;; `signer-sig` is not present, verify that an authorization was previously added for this key\n      (ok (asserts! (default-to false (map-get? signer-key-authorizations\n            { signer-key: signer-key, reward-cycle: reward-cycle, period: period, topic: topic, pox-addr: pox-addr, auth-id: auth-id, max-amount: max-amount }))\n          (err ERR_NOT_ALLOWED)))\n    ))\n  )\n\n;; This function does two things:\n;;\n;; - Verify that a signer key is authorized to be used\n;; - Updates the `used-signer-key-authorizations` map to prevent reuse\n;;\n;; This \"wrapper\" method around `verify-signer-key-sig` allows that function to remain\n;; read-only, so that it can be used by clients as a sanity check before submitting a transaction.\n(define-private (consume-signer-key-authorization (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                                                  (reward-cycle uint)\n                                                  (topic (string-ascii 14))\n                                                  (period uint)\n                                                  (signer-sig-opt (optional (buff 65)))\n                                                  (signer-key (buff 33))\n                                                  (amount uint)\n                                                  (max-amount uint)\n                                                  (auth-id uint))\n  (begin\n    ;; verify the authorization\n    (try! (verify-signer-key-sig pox-addr reward-cycle topic period signer-sig-opt signer-key amount max-amount auth-id))\n    ;; update the `used-signer-key-authorizations` map\n    (asserts! (map-insert used-signer-key-authorizations\n      { signer-key: signer-key, reward-cycle: reward-cycle, topic: topic, period: period, pox-addr: pox-addr, auth-id: auth-id, max-amount: max-amount } true)\n      (err ERR_SIGNER_AUTH_USED))\n    (ok true)))\n\n;; Commit partially stacked STX and allocate a new PoX reward address slot.\n;;   This allows a stacker/delegate to lock fewer STX than the minimal threshold in multiple transactions,\n;;   so long as: 1. The pox-addr is the same.\n;;               2. This \"commit\" transaction is called _before_ the PoX anchor block.\n;;   This ensures that each entry in the reward set returned to the stacks-node is greater than the threshold,\n;;   but does not require it be all locked up within a single transaction\n;;\n;; Returns (ok uint) on success, where the given uint is the reward address's index in the list of reward\n;; addresses allocated in this reward cycle.  This index can then be passed to `stack-aggregation-increase`\n;; to later increment the STX this PoX address represents, in amounts less than the stacking minimum.\n;;\n;; *New in Stacks 2.1.*\n(define-private (inner-stack-aggregation-commit (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                                                (reward-cycle uint)\n                                                (signer-sig (optional (buff 65)))\n                                                (signer-key (buff 33))\n                                                (max-amount uint)\n                                                (auth-id uint))\n  (let ((partial-stacked\n         ;; fetch the partial commitments\n         (unwrap! (map-get? partial-stacked-by-cycle { pox-addr: pox-addr, sender: tx-sender, reward-cycle: reward-cycle })\n                  (err ERR_STACKING_NO_SUCH_PRINCIPAL))))\n    ;; must be called directly by the tx-sender or by an allowed contract-caller\n    (asserts! (check-caller-allowed)\n              (err ERR_STACKING_PERMISSION_DENIED))\n    (let ((amount-ustx (get stacked-amount partial-stacked)))\n      (try! (consume-signer-key-authorization pox-addr reward-cycle \"agg-commit\" u1 signer-sig signer-key amount-ustx max-amount auth-id))\n      (try! (can-stack-stx pox-addr amount-ustx reward-cycle u1))\n      ;; Add the pox addr to the reward cycle, and extract the index of the PoX address\n      ;; so the delegator can later use it to call stack-aggregation-increase.\n      (let ((add-pox-addr-info\n                (add-pox-addr-to-ith-reward-cycle\n                   u0\n                   { pox-addr: pox-addr,\n                     first-reward-cycle: reward-cycle,\n                     num-cycles: u1,\n                     reward-set-indexes: (list),\n                     stacker: none,\n                     signer: signer-key,\n                     amount-ustx: amount-ustx,\n                     i: u0 }))\n           (pox-addr-index (unwrap-panic\n                (element-at (get reward-set-indexes add-pox-addr-info) u0))))\n\n        ;; don't update the stacking-state map,\n        ;;  because it _already has_ this stacker's state\n        ;; don't lock the STX, because the STX is already locked\n        ;;\n        ;; clear the partial-stacked state, and log it\n        (map-delete partial-stacked-by-cycle { pox-addr: pox-addr, sender: tx-sender, reward-cycle: reward-cycle })\n        (map-set logged-partial-stacked-by-cycle { pox-addr: pox-addr, sender: tx-sender, reward-cycle: reward-cycle } partial-stacked)\n        (ok pox-addr-index)))))\n\n;; Legacy interface for stack-aggregation-commit.\n;; Wraps inner-stack-aggregation-commit.  See its docstring for details.\n;; Returns (ok true) on success\n;; Returns (err ...) on failure.\n(define-public (stack-aggregation-commit (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                                         (reward-cycle uint)\n                                         (signer-sig (optional (buff 65)))\n                                         (signer-key (buff 33))\n                                         (max-amount uint)\n                                         (auth-id uint))\n    (match (inner-stack-aggregation-commit pox-addr reward-cycle signer-sig signer-key max-amount auth-id)\n        pox-addr-index (ok true)\n        commit-err (err commit-err)))\n\n;; Public interface to `inner-stack-aggregation-commit`.  See its documentation for details.\n;; *New in Stacks 2.1.*\n(define-public (stack-aggregation-commit-indexed (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                                                 (reward-cycle uint)\n                                                 (signer-sig (optional (buff 65)))\n                                                 (signer-key (buff 33))\n                                                 (max-amount uint)\n                                                 (auth-id uint))\n    (inner-stack-aggregation-commit pox-addr reward-cycle signer-sig signer-key max-amount auth-id))\n\n;; Commit partially stacked STX to a PoX address which has already received some STX (more than the Stacking min).\n;; This allows a delegator to lock up marginally more STX from new delegates, even if they collectively do not\n;; exceed the Stacking minimum, so long as the target PoX address already represents at least as many STX as the\n;; Stacking minimum.\n;;\n;; The `reward-cycle-index` is emitted as a contract event from `stack-aggregation-commit` when the initial STX are\n;; locked up by this delegator.  It must be passed here to add more STX behind this PoX address.  If the delegator\n;; called `stack-aggregation-commit` multiple times for the same PoX address, then any such `reward-cycle-index` will\n;; work here.\n;;\n;; *New in Stacks 2.1*\n;;\n(define-public (stack-aggregation-increase (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                                           (reward-cycle uint)\n                                           (reward-cycle-index uint)\n                                           (signer-sig (optional (buff 65)))\n                                           (signer-key (buff 33))\n                                           (max-amount uint)\n                                           (auth-id uint))\n  (let ((partial-stacked\n         ;; fetch the partial commitments\n         (unwrap! (map-get? partial-stacked-by-cycle { pox-addr: pox-addr, sender: tx-sender, reward-cycle: reward-cycle })\n                  (err ERR_STACKING_NO_SUCH_PRINCIPAL))))\n\n    ;; must be called directly by the tx-sender or by an allowed contract-caller\n    (asserts! (check-caller-allowed)\n              (err ERR_STACKING_PERMISSION_DENIED))\n\n    ;; reward-cycle must be in the future\n    (asserts! (> reward-cycle (current-pox-reward-cycle))\n              (err ERR_STACKING_INVALID_LOCK_PERIOD))\n\n    (let ((partial-amount-ustx (get stacked-amount partial-stacked))\n          ;; reward-cycle and reward-cycle-index must point to an existing record in reward-cycle-pox-address-list\n          (existing-entry (unwrap! (map-get? reward-cycle-pox-address-list { reward-cycle: reward-cycle, index: reward-cycle-index })\n                          (err ERR_DELEGATION_NO_REWARD_SLOT)))\n          ;; reward-cycle must point to an existing record in reward-cycle-total-stacked\n          ;; infallible; getting existing-entry succeeded so this must succeed\n          (existing-cycle (unwrap-panic (map-get? reward-cycle-total-stacked { reward-cycle: reward-cycle })))\n          (increased-entry-total (+ (get total-ustx existing-entry) partial-amount-ustx))\n          (increased-cycle-total (+ (get total-ustx existing-cycle) partial-amount-ustx))\n          (existing-signer-key (get signer existing-entry)))\n\n          ;; must be stackable\n          (try! (minimal-can-stack-stx pox-addr increased-entry-total reward-cycle u1))\n\n          ;; new total must exceed the stacking minimum\n          (asserts! (<= (get-stacking-minimum) increased-entry-total)\n                    (err ERR_STACKING_THRESHOLD_NOT_MET))\n\n          ;; there must *not* be a stacker entry (since this is a delegator)\n          (asserts! (is-none (get stacker existing-entry))\n                    (err ERR_DELEGATION_WRONG_REWARD_SLOT))\n\n          ;; the given PoX address must match the one on record\n          (asserts! (is-eq pox-addr (get pox-addr existing-entry))\n                    (err ERR_DELEGATION_WRONG_REWARD_SLOT))\n\n          ;; Validate that amount is less than or equal to `max-amount`\n          (asserts! (>= max-amount increased-entry-total) (err ERR_SIGNER_AUTH_AMOUNT_TOO_HIGH))\n\n          ;; Validate that signer-key matches the existing signer-key\n          (asserts! (is-eq existing-signer-key signer-key) (err ERR_INVALID_SIGNER_KEY))\n\n          ;; Verify signature from delegate that allows this sender for this cycle\n          ;; 'lock-period' param set to one period, same as aggregation-commit-indexed\n          (try! (consume-signer-key-authorization pox-addr reward-cycle \"agg-increase\" u1 signer-sig signer-key increased-entry-total max-amount auth-id))\n\n          ;; update the pox-address list -- bump the total-ustx\n          (map-set reward-cycle-pox-address-list\n                   { reward-cycle: reward-cycle, index: reward-cycle-index }\n                   { pox-addr: pox-addr,\n                     total-ustx: increased-entry-total,\n                     stacker: none,\n                     signer: signer-key })\n\n          ;; update the total ustx in this cycle\n          (map-set reward-cycle-total-stacked\n                   { reward-cycle: reward-cycle }\n                   { total-ustx: increased-cycle-total })\n\n          ;; don't update the stacking-state map,\n          ;;  because it _already has_ this stacker's state\n          ;; don't lock the STX, because the STX is already locked\n          ;;\n          ;; clear the partial-stacked state, and log it\n          (map-delete partial-stacked-by-cycle { pox-addr: pox-addr, sender: tx-sender, reward-cycle: reward-cycle })\n          (map-set logged-partial-stacked-by-cycle { pox-addr: pox-addr, sender: tx-sender, reward-cycle: reward-cycle } partial-stacked)\n          (ok true))))\n\n;; As a delegate, stack the given principal's STX using partial-stacked-by-cycle\n;; Once the delegate has stacked > minimum, the delegate should call stack-aggregation-commit\n(define-public (delegate-stack-stx (stacker principal)\n                                   (amount-ustx uint)\n                                   (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                                   (start-burn-ht uint)\n                                   (lock-period uint))\n    ;; this stacker's first reward cycle is the _next_ reward cycle\n    (let ((first-reward-cycle (+ u1 (current-pox-reward-cycle)))\n          (specified-reward-cycle (+ u1 (burn-height-to-reward-cycle start-burn-ht)))\n          (unlock-burn-height (reward-cycle-to-burn-height (+ (current-pox-reward-cycle) u1 lock-period))))\n      ;; the start-burn-ht must result in the next reward cycle, do not allow stackers\n      ;;  to \"post-date\" their `stack-stx` transaction\n      (asserts! (is-eq first-reward-cycle specified-reward-cycle)\n                (err ERR_INVALID_START_BURN_HEIGHT))\n\n      ;; must be called directly by the tx-sender or by an allowed contract-caller\n      (asserts! (check-caller-allowed)\n        (err ERR_STACKING_PERMISSION_DENIED))\n\n      ;; stacker must have delegated to the caller\n      (let ((delegation-info (unwrap! (get-check-delegation stacker) (err ERR_STACKING_PERMISSION_DENIED))))\n        ;; must have delegated to tx-sender\n        (asserts! (is-eq (get delegated-to delegation-info) tx-sender)\n                  (err ERR_STACKING_PERMISSION_DENIED))\n        ;; must have delegated enough stx\n        (asserts! (>= (get amount-ustx delegation-info) amount-ustx)\n                  (err ERR_DELEGATION_TOO_MUCH_LOCKED))\n        ;; if pox-addr is set, must be equal to pox-addr\n        (asserts! (match (get pox-addr delegation-info)\n                         specified-pox-addr (is-eq pox-addr specified-pox-addr)\n                         true)\n                  (err ERR_DELEGATION_POX_ADDR_REQUIRED))\n        ;; delegation must not expire before lock period\n        (asserts! (match (get until-burn-ht delegation-info)\n                         until-burn-ht (>= until-burn-ht\n                                           unlock-burn-height)\n                      true)\n                  (err ERR_DELEGATION_EXPIRES_DURING_LOCK))\n        )\n\n      ;; stacker principal must not be stacking\n      (asserts! (is-none (get-stacker-info stacker))\n        (err ERR_STACKING_ALREADY_STACKED))\n\n      ;; the Stacker must have sufficient unlocked funds\n      (asserts! (>= (stx-get-balance stacker) amount-ustx)\n        (err ERR_STACKING_INSUFFICIENT_FUNDS))\n\n      ;; ensure that stacking can be performed\n      (try! (minimal-can-stack-stx pox-addr amount-ustx first-reward-cycle lock-period))\n\n      ;; register the PoX address with the amount stacked via partial stacking\n      ;;   before it can be included in the reward set, this must be committed!\n      (add-pox-partial-stacked pox-addr first-reward-cycle lock-period amount-ustx)\n\n      ;; add stacker record\n      (map-set stacking-state\n        { stacker: stacker }\n        { pox-addr: pox-addr,\n          first-reward-cycle: first-reward-cycle,\n          reward-set-indexes: (list),\n          lock-period: lock-period,\n          delegated-to: (some tx-sender) })\n\n      ;; return the lock-up information, so the node can actually carry out the lock.\n      (ok { stacker: stacker,\n            lock-amount: amount-ustx,\n            unlock-burn-height: unlock-burn-height })))\n\n\n;; Used for PoX parameters discovery\n(define-read-only (get-pox-info)\n    (ok {\n        min-amount-ustx: (get-stacking-minimum),\n        reward-cycle-id: (current-pox-reward-cycle),\n        prepare-cycle-length: (var-get pox-prepare-cycle-length),\n        first-burnchain-block-height: (var-get first-burnchain-block-height),\n        reward-cycle-length: (var-get pox-reward-cycle-length),\n        total-liquid-supply-ustx: stx-liquid-supply,\n    })\n)\n\n;; Update the number of stacked STX in a given reward cycle entry.\n;; `reward-cycle-index` is the index into the `reward-cycle-pox-address-list` map for a given reward cycle number.\n;; `updates`, if `(some ..)`, encodes which PoX reward cycle entry (if any) gets updated.  In particular, it must have\n;; `(some stacker)` as the listed stacker, and must be an upcoming reward cycle.\n(define-private (increase-reward-cycle-entry\n                  (reward-cycle-index uint)\n                  (updates (optional { first-cycle: uint, reward-cycle: uint, stacker: principal, add-amount: uint, signer-key: (buff 33) })))\n    (let ((data (try! updates))\n          (first-cycle (get first-cycle data))\n          (reward-cycle (get reward-cycle data))\n          (passed-signer-key (get signer-key data)))\n    (if (> first-cycle reward-cycle)\n        ;; not at first cycle to process yet\n        (some { first-cycle: first-cycle, reward-cycle: (+ u1 reward-cycle), stacker: (get stacker data), add-amount: (get add-amount data), signer-key: (get signer-key data) })\n        (let ((existing-entry (unwrap-panic (map-get? reward-cycle-pox-address-list { reward-cycle: reward-cycle, index: reward-cycle-index })))\n              (existing-total (unwrap-panic (map-get? reward-cycle-total-stacked { reward-cycle: reward-cycle })))\n              (existing-signer-key (get signer existing-entry))\n              (add-amount (get add-amount data))\n              (total-ustx (+ (get total-ustx existing-total) add-amount)))\n            ;; stacker must match\n            (asserts! (is-eq (get stacker existing-entry) (some (get stacker data))) none)\n            ;; signer-key must match\n            (asserts! (is-eq existing-signer-key passed-signer-key) none)\n            ;; update the pox-address list\n            (map-set reward-cycle-pox-address-list\n                     { reward-cycle: reward-cycle, index: reward-cycle-index }\n                     { pox-addr: (get pox-addr existing-entry),\n                       ;; This addresses the bug in pox-2 (see SIP-022)\n                       total-ustx: (+ (get total-ustx existing-entry) add-amount),\n                       stacker: (some (get stacker data)),\n                       signer: (get signer existing-entry) })\n            ;; update the total\n            (map-set reward-cycle-total-stacked\n                     { reward-cycle: reward-cycle }\n                     { total-ustx: total-ustx })\n            (some { first-cycle: first-cycle,\n                    reward-cycle: (+ u1 reward-cycle),\n                    stacker: (get stacker data),\n                    add-amount: (get add-amount data),\n                    signer-key: passed-signer-key })))))\n\n;; Increase the number of STX locked.\n;; *New in Stacks 2.1*\n;; This method locks up an additional amount of STX from `tx-sender`'s, indicated\n;; by `increase-by`.  The `tx-sender` must already be Stacking & must not be\n;; straddling more than one signer-key for the cycles effected. \n;; Refer to `verify-signer-key-sig` for more information on the authorization parameters\n;; included here.\n(define-public (stack-increase \n  (increase-by uint)\n  (signer-sig (optional (buff 65)))\n  (signer-key (buff 33))\n  (max-amount uint)\n  (auth-id uint))\n   (let ((stacker-info (stx-account tx-sender))\n         (amount-stacked (get locked stacker-info))\n         (amount-unlocked (get unlocked stacker-info))\n         (unlock-height (get unlock-height stacker-info))\n         (cur-cycle (current-pox-reward-cycle))\n         (first-increased-cycle (+ cur-cycle u1))\n         (stacker-state (unwrap! (map-get? stacking-state\n                                          { stacker: tx-sender })\n                                          (err ERR_STACK_INCREASE_NOT_LOCKED)))\n         (cur-pox-addr (get pox-addr stacker-state))\n         (cur-period (get lock-period stacker-state)))\n      ;; tx-sender must be currently locked\n      (asserts! (> amount-stacked u0)\n                (err ERR_STACK_INCREASE_NOT_LOCKED))\n      ;; must be called with positive `increase-by`\n      (asserts! (>= increase-by u1)\n                (err ERR_STACKING_INVALID_AMOUNT))\n      ;; stacker must have enough stx to lock\n      (asserts! (>= amount-unlocked increase-by)\n                (err ERR_STACKING_INSUFFICIENT_FUNDS))\n      ;; must be called directly by the tx-sender or by an allowed contract-caller\n      (asserts! (check-caller-allowed)\n                (err ERR_STACKING_PERMISSION_DENIED))\n      ;; stacker must be directly stacking\n      (asserts! (> (len (get reward-set-indexes stacker-state)) u0)\n                (err ERR_STACKING_IS_DELEGATED))\n      ;; stacker must not be delegating\n      (asserts! (is-none (get delegated-to stacker-state))\n                (err ERR_STACKING_IS_DELEGATED))\n\n      ;; Validate that amount is less than or equal to `max-amount`\n      (asserts! (>= max-amount (+ increase-by amount-stacked)) (err ERR_SIGNER_AUTH_AMOUNT_TOO_HIGH))\n\n      ;; Verify signature from delegate that allows this sender for this cycle\n      (try! (consume-signer-key-authorization cur-pox-addr cur-cycle \"stack-increase\" cur-period signer-sig signer-key increase-by max-amount auth-id))\n\n      ;; update reward cycle amounts\n      (asserts! (is-some (fold increase-reward-cycle-entry\n            (get reward-set-indexes stacker-state)\n            (some { first-cycle: first-increased-cycle,\n                    reward-cycle: (get first-reward-cycle stacker-state),\n                    stacker: tx-sender,\n                    add-amount: increase-by,\n                    signer-key: signer-key })))\n            (err ERR_INVALID_INCREASE))\n      ;; NOTE: stacking-state map is unchanged: it does not track amount-stacked in PoX-4\n      (ok { stacker: tx-sender, total-locked: (+ amount-stacked increase-by)})))\n\n;; Extend an active Stacking lock.\n;; *New in Stacks 2.1*\n;; This method extends the `tx-sender`'s current lockup for an additional `extend-count`\n;;    and associates `pox-addr` with the rewards, The `signer-key` will be the key\n;;    used for signing. The `tx-sender` can thus decide to change the key when extending.\n;; \n;; Because no additional STX are locked in this function, the `amount` field used\n;; to verify the signer key authorization is zero. Refer to `verify-signer-key-sig` for more information.\n(define-public (stack-extend (extend-count uint)\n                             (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                             (signer-sig (optional (buff 65)))\n                             (signer-key (buff 33))\n                             (max-amount uint)\n                             (auth-id uint))\n   (let ((stacker-info (stx-account tx-sender))\n         ;; to extend, there must already be an etry in the stacking-state\n         (stacker-state (unwrap! (get-stacker-info tx-sender) (err ERR_STACK_EXTEND_NOT_LOCKED)))\n         (amount-ustx (get locked stacker-info))\n         (unlock-height (get unlock-height stacker-info))\n         (cur-cycle (current-pox-reward-cycle))\n         ;; first-extend-cycle will be the cycle in which tx-sender *would have* unlocked\n         (first-extend-cycle (burn-height-to-reward-cycle unlock-height))\n         ;; new first cycle should be max(cur-cycle, stacker-state.first-reward-cycle)\n         (cur-first-reward-cycle (get first-reward-cycle stacker-state))\n         (first-reward-cycle (if (> cur-cycle cur-first-reward-cycle) cur-cycle cur-first-reward-cycle)))\n\n    ;; must be called with positive extend-count\n    (asserts! (>= extend-count u1)\n              (err ERR_STACKING_INVALID_LOCK_PERIOD))\n\n    ;; stacker must be directly stacking\n      (asserts! (> (len (get reward-set-indexes stacker-state)) u0)\n                (err ERR_STACKING_IS_DELEGATED))\n\n    ;; stacker must not be delegating\n    (asserts! (is-none (get delegated-to stacker-state))\n              (err ERR_STACKING_IS_DELEGATED))\n\n    ;; Verify signature from delegate that allows this sender for this cycle\n    (try! (consume-signer-key-authorization pox-addr cur-cycle \"stack-extend\" extend-count signer-sig signer-key u0 max-amount auth-id))\n\n    (let ((last-extend-cycle  (- (+ first-extend-cycle extend-count) u1))\n          (lock-period (+ u1 (- last-extend-cycle first-reward-cycle)))\n          (new-unlock-ht (reward-cycle-to-burn-height (+ u1 last-extend-cycle))))\n\n      ;; first cycle must be after the current cycle\n      (asserts! (> first-extend-cycle cur-cycle) (err ERR_STACKING_INVALID_LOCK_PERIOD))\n      ;; lock period must be positive\n      (asserts! (> lock-period u0) (err ERR_STACKING_INVALID_LOCK_PERIOD))\n\n      ;; must be called directly by the tx-sender or by an allowed contract-caller\n      (asserts! (check-caller-allowed)\n                (err ERR_STACKING_PERMISSION_DENIED))\n\n      ;; tx-sender must be locked\n      (asserts! (> amount-ustx u0)\n        (err ERR_STACK_EXTEND_NOT_LOCKED))\n\n      ;; tx-sender must not be delegating\n      (asserts! (is-none (get-check-delegation tx-sender))\n        (err ERR_STACKING_ALREADY_DELEGATED))\n\n      ;; standard can-stack-stx checks\n      (try! (can-stack-stx pox-addr amount-ustx first-extend-cycle lock-period))\n\n      ;; register the PoX address with the amount stacked\n      ;;   for the new cycles\n      (let ((extended-reward-set-indexes (try! (add-pox-addr-to-reward-cycles pox-addr first-extend-cycle extend-count amount-ustx tx-sender signer-key)))\n            (reward-set-indexes\n                ;; use the active stacker state and extend the existing reward-set-indexes\n                (let ((cur-cycle-index (- first-reward-cycle (get first-reward-cycle stacker-state)))\n                      (old-indexes (get reward-set-indexes stacker-state))\n                      ;; build index list by taking the old-indexes starting from cur cycle\n                      ;;  and adding the new indexes to it. this way, the index is valid starting from the current cycle\n                      (new-list (concat (default-to (list) (slice? old-indexes cur-cycle-index (len old-indexes)))\n                                        extended-reward-set-indexes)))\n                  (unwrap-panic (as-max-len? new-list u12)))))\n          ;; update stacker record\n          (map-set stacking-state\n            { stacker: tx-sender }\n            { pox-addr: pox-addr,\n              reward-set-indexes: reward-set-indexes,\n              first-reward-cycle: first-reward-cycle,\n              lock-period: lock-period,\n              delegated-to: none })\n\n        ;; return lock-up information\n        (ok { stacker: tx-sender, unlock-burn-height: new-unlock-ht })))))\n\n;; As a delegator, increase an active Stacking lock, issuing a \"partial commitment\" for the\n;;   increased cycles.\n;; *New in Stacks 2.1*\n;; This method increases `stacker`'s current lockup and partially commits the additional\n;;   STX to `pox-addr`\n(define-public (delegate-stack-increase\n                    (stacker principal)\n                    (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                    (increase-by uint))\n    (let ((stacker-info (stx-account stacker))\n          (existing-lock (get locked stacker-info))\n          (available-stx (get unlocked stacker-info))\n          (unlock-height (get unlock-height stacker-info)))\n\n     ;; must be called with positive `increase-by`\n     (asserts! (>= increase-by u1)\n               (err ERR_STACKING_INVALID_AMOUNT))\n\n     (let ((unlock-in-cycle (burn-height-to-reward-cycle unlock-height))\n           (cur-cycle (current-pox-reward-cycle))\n           (first-increase-cycle (+ cur-cycle u1))\n           (last-increase-cycle (- unlock-in-cycle u1))\n           (cycle-count (try! (if (<= first-increase-cycle last-increase-cycle)\n                                  (ok (+ u1 (- last-increase-cycle first-increase-cycle)))\n                                  (err ERR_STACKING_INVALID_LOCK_PERIOD))))\n           (new-total-locked (+ increase-by existing-lock))\n           (stacker-state\n                (unwrap! (map-get? stacking-state { stacker: stacker })\n                 (err ERR_STACK_INCREASE_NOT_LOCKED))))\n\n      ;; must be called directly by the tx-sender or by an allowed contract-caller\n      (asserts! (check-caller-allowed)\n        (err ERR_STACKING_PERMISSION_DENIED))\n\n      ;; stacker must not be directly stacking\n      (asserts! (is-eq (len (get reward-set-indexes stacker-state)) u0)\n                (err ERR_STACKING_NOT_DELEGATED))\n\n      ;; stacker must be delegated to tx-sender\n      (asserts! (is-eq (unwrap! (get delegated-to stacker-state)\n                                (err ERR_STACKING_NOT_DELEGATED))\n                       tx-sender)\n                (err ERR_STACKING_PERMISSION_DENIED))\n\n      ;; stacker must be currently locked\n      (asserts! (> existing-lock u0)\n        (err ERR_STACK_INCREASE_NOT_LOCKED))\n\n      ;; stacker must have enough stx to lock\n      (asserts! (>= available-stx increase-by)\n        (err ERR_STACKING_INSUFFICIENT_FUNDS))\n\n      ;; stacker must have delegated to the caller\n      (let ((delegation-info (unwrap! (get-check-delegation stacker) (err ERR_STACKING_PERMISSION_DENIED)))\n            (delegated-to (get delegated-to delegation-info))\n            (delegated-amount (get amount-ustx delegation-info))\n            (delegated-pox-addr (get pox-addr delegation-info))\n            (delegated-until (get until-burn-ht delegation-info)))\n        ;; must have delegated to tx-sender\n        (asserts! (is-eq delegated-to tx-sender)\n                  (err ERR_STACKING_PERMISSION_DENIED))\n        ;; must have delegated enough stx\n        (asserts! (>= delegated-amount new-total-locked)\n                  (err ERR_DELEGATION_TOO_MUCH_LOCKED))\n        ;; if pox-addr is set, must be equal to pox-addr\n        (asserts! (match delegated-pox-addr\n                         specified-pox-addr (is-eq pox-addr specified-pox-addr)\n                         true)\n                  (err ERR_DELEGATION_POX_ADDR_REQUIRED))\n        ;; delegation must not expire before lock period\n        (asserts! (match delegated-until\n                        until-burn-ht\n                            (>= until-burn-ht unlock-height)\n                        true)\n                  (err ERR_DELEGATION_EXPIRES_DURING_LOCK)))\n\n      ;; delegate stacking does minimal-can-stack-stx\n      (try! (minimal-can-stack-stx pox-addr new-total-locked first-increase-cycle (+ u1 (- last-increase-cycle first-increase-cycle))))\n\n      ;; register the PoX address with the amount stacked via partial stacking\n      ;;   before it can be included in the reward set, this must be committed!\n      (add-pox-partial-stacked pox-addr first-increase-cycle cycle-count increase-by)\n\n      ;; stacking-state is unchanged, so no need to update\n\n      ;; return the lock-up information, so the node can actually carry out the lock.\n      (ok { stacker: stacker, total-locked: new-total-locked}))))\n\n;; As a delegator, extend an active stacking lock, issuing a \"partial commitment\" for the\n;;   extended-to cycles.\n;; *New in Stacks 2.1*\n;; This method extends `stacker`'s current lockup for an additional `extend-count`\n;;    and partially commits those new cycles to `pox-addr`\n(define-public (delegate-stack-extend\n                    (stacker principal)\n                    (pox-addr { version: (buff 1), hashbytes: (buff 32) })\n                    (extend-count uint))\n    (let ((stacker-info (stx-account stacker))\n          ;; to extend, there must already be an entry in the stacking-state\n          (stacker-state (unwrap! (get-stacker-info stacker) (err ERR_STACK_EXTEND_NOT_LOCKED)))\n          (amount-ustx (get locked stacker-info))\n          (unlock-height (get unlock-height stacker-info))\n          ;; first-extend-cycle will be the cycle in which tx-sender *would have* unlocked\n          (first-extend-cycle (burn-height-to-reward-cycle unlock-height))\n          (cur-cycle (current-pox-reward-cycle))\n          ;; new first cycle should be max(cur-cycle, stacker-state.first-reward-cycle)\n          (cur-first-reward-cycle (get first-reward-cycle stacker-state))\n          (first-reward-cycle (if (> cur-cycle cur-first-reward-cycle) cur-cycle cur-first-reward-cycle)))\n\n     ;; must be called with positive extend-count\n     (asserts! (>= extend-count u1)\n               (err ERR_STACKING_INVALID_LOCK_PERIOD))\n\n     (let ((last-extend-cycle  (- (+ first-extend-cycle extend-count) u1))\n           (lock-period (+ u1 (- last-extend-cycle first-reward-cycle)))\n           (new-unlock-ht (reward-cycle-to-burn-height (+ u1 last-extend-cycle))))\n\n      ;; first cycle must be after the current cycle\n      (asserts! (> first-extend-cycle cur-cycle) (err ERR_STACKING_INVALID_LOCK_PERIOD))\n      ;; lock period must be positive\n      (asserts! (> lock-period u0) (err ERR_STACKING_INVALID_LOCK_PERIOD))\n\n      ;; must be called directly by the tx-sender or by an allowed contract-caller\n      (asserts! (check-caller-allowed)\n        (err ERR_STACKING_PERMISSION_DENIED))\n\n      ;; stacker must not be directly stacking\n      (asserts! (is-eq (len (get reward-set-indexes stacker-state)) u0)\n                (err ERR_STACKING_NOT_DELEGATED))\n\n      ;; stacker must be delegated to tx-sender\n      (asserts! (is-eq (unwrap! (get delegated-to stacker-state)\n                                (err ERR_STACKING_NOT_DELEGATED))\n                       tx-sender)\n                (err ERR_STACKING_PERMISSION_DENIED))\n\n      ;; check valid lock period\n      (asserts! (check-pox-lock-period lock-period)\n        (err ERR_STACKING_INVALID_LOCK_PERIOD))\n\n      ;; stacker must be currently locked\n      (asserts! (> amount-ustx u0)\n        (err ERR_STACK_EXTEND_NOT_LOCKED))\n\n      ;; stacker must have delegated to the caller\n      (let ((delegation-info (unwrap! (get-check-delegation stacker) (err ERR_STACKING_PERMISSION_DENIED))))\n        ;; must have delegated to tx-sender\n        (asserts! (is-eq (get delegated-to delegation-info) tx-sender)\n                  (err ERR_STACKING_PERMISSION_DENIED))\n        ;; must have delegated enough stx\n        (asserts! (>= (get amount-ustx delegation-info) amount-ustx)\n                  (err ERR_DELEGATION_TOO_MUCH_LOCKED))\n        ;; if pox-addr is set, must be equal to pox-addr\n        (asserts! (match (get pox-addr delegation-info)\n                         specified-pox-addr (is-eq pox-addr specified-pox-addr)\n                         true)\n                  (err ERR_DELEGATION_POX_ADDR_REQUIRED))\n        ;; delegation must not expire before lock period\n        (asserts! (match (get until-burn-ht delegation-info)\n                         until-burn-ht (>= until-burn-ht\n                                           new-unlock-ht)\n                      true)\n                  (err ERR_DELEGATION_EXPIRES_DURING_LOCK))\n        )\n\n      ;; delegate stacking does minimal-can-stack-stx\n      (try! (minimal-can-stack-stx pox-addr amount-ustx first-extend-cycle lock-period))\n\n      ;; register the PoX address with the amount stacked via partial stacking\n      ;;   before it can be included in the reward set, this must be committed!\n      (add-pox-partial-stacked pox-addr first-extend-cycle extend-count amount-ustx)\n\n      (map-set stacking-state\n        { stacker: stacker }\n        { pox-addr: pox-addr,\n          reward-set-indexes: (list),\n          first-reward-cycle: first-reward-cycle,\n          lock-period: lock-period,\n          delegated-to: (some tx-sender) })\n\n      ;; return the lock-up information, so the node can actually carry out the lock.\n      (ok { stacker: stacker,\n            unlock-burn-height: new-unlock-ht }))))\n\n;; Add an authorization for a signer key.\n;; When an authorization is added, the `signer-sig` argument is not required\n;; in the functions that use it as an argument.\n;; The `allowed` flag can be used to either enable or disable the authorization.\n;; Only the Stacks principal associated with `signer-key` can call this function.\n;;\n;; Refer to the documentation for `verify-signer-key-sig` for more information\n;; regarding the parameters used in an authorization. When the authorization is used\n;; in `stack-stx` and `stack-extend`, the `reward-cycle` refers to the reward cycle\n;; where the transaction is confirmed, **not** the reward cycle where stacking begins.\n;; The `period` parameter must match the exact lock period (or extend count) used\n;; in the stacking transaction. The `max-amount` parameter specifies the maximum amount\n;; of STX that can be locked in an individual stacking transaction. `auth-id` is a\n;; random uint to prevent replays.\n;;\n;; *New in Stacks 3.0*\n(define-public (set-signer-key-authorization (pox-addr { version: (buff 1), hashbytes: (buff 32)})\n                                             (period uint)\n                                             (reward-cycle uint)\n                                             (topic (string-ascii 14))\n                                             (signer-key (buff 33))\n                                             (allowed bool)\n                                             (max-amount uint)\n                                             (auth-id uint))\n  (begin\n    ;; must be called directly by the tx-sender or by an allowed contract-caller\n    (asserts! (check-caller-allowed)\n      (err ERR_NOT_ALLOWED))\n    ;; Validate that `tx-sender` has the same pubkey hash as `signer-key`\n    (asserts! (is-eq\n      (unwrap! (principal-construct? (if is-in-mainnet STACKS_ADDR_VERSION_MAINNET STACKS_ADDR_VERSION_TESTNET) (hash160 signer-key)) (err ERR_INVALID_SIGNER_KEY))\n      tx-sender) (err ERR_NOT_ALLOWED))\n    ;; Must be called with positive period\n    (asserts! (>= period u1) (err ERR_STACKING_INVALID_LOCK_PERIOD))\n    ;; Must be current or future reward cycle\n    (asserts! (>= reward-cycle (current-pox-reward-cycle)) (err ERR_INVALID_REWARD_CYCLE))\n    (map-set signer-key-authorizations { pox-addr: pox-addr, period: period, reward-cycle: reward-cycle, topic: topic, signer-key: signer-key, auth-id: auth-id, max-amount: max-amount } allowed)\n    (ok allowed)))\n\n;; Get the _current_ PoX stacking delegation information for a stacker.  If the information\n;; is expired, or if there's never been such a stacker, then returns none.\n;; *New in Stacks 2.1*\n(define-read-only (get-delegation-info (stacker principal))\n    (get-check-delegation stacker)\n)\n\n;; Get the burn height at which a particular contract is allowed to stack for a particular principal.\n;; *New in Stacks 2.1*\n;; Returns (some (some X)) if X is the burn height at which the allowance terminates\n;; Returns (some none) if the caller is allowed indefinitely\n;; Returns none if there is no allowance record\n(define-read-only (get-allowance-contract-callers (sender principal) (calling-contract principal))\n    (map-get? allowance-contract-callers { sender: sender, contract-caller: calling-contract })\n)\n\n;; How many PoX addresses in this reward cycle?\n;; *New in Stacks 2.1*\n(define-read-only (get-num-reward-set-pox-addresses (reward-cycle uint))\n    (match (map-get? reward-cycle-pox-address-list-len { reward-cycle: reward-cycle })\n        num-addrs\n            (get len num-addrs)\n        u0\n    )\n)\n\n;; How many uSTX have been locked up for this address so far, before the delegator commits them?\n;; *New in Stacks 2.1*\n(define-read-only (get-partial-stacked-by-cycle (pox-addr { version: (buff 1), hashbytes: (buff 32) }) (reward-cycle uint) (sender principal))\n    (map-get? partial-stacked-by-cycle { pox-addr: pox-addr, reward-cycle: reward-cycle, sender: sender })\n)\n",
    "analysis": {
      "summary": "The .pox-4 contract enables Stacking, delegation, and PoX address registration for Stacks 2.1, including extensions and increases to locked STX amounts.",
      "explanation": "The .pox-4 contract is an advanced contract for the Stacks blockchain that facilitates Stacking, which allows STX holders to lock their tokens for a certain period to support the network's security and consensus. In return, stackers earn Bitcoin rewards. This contract introduces functionalities for extending lock periods, increasing locked amounts, delegating Stacking rights, and managing PoX address registrations. It includes error codes for various failure states, constants for address versions and Stacking parameters, and maps for tracking Stacking states, delegation relationships, and more. Key functions include `stack-stx` for locking STX, `delegate-stx` for delegating Stacking rights, `stack-extend` for extending lock periods, and `stack-increase` for adding more STX to an existing lock. It also handles partial Stacking commitments and authorizations for signer keys, allowing for flexible Stacking strategies.",
      "tags": [
        "DeFi",
        "Stacking",
        "PoX",
        "protocol",
        "governance"
      ]
    }
  },
  {
    "rank": 10,
    "contract": "SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-oracle-v2-3",
    "calls": 5142,
    "source": ";; @contract Arkadiko multisig oracle\n;; @version 2.3\n\n(impl-trait .arkadiko-oracle-trait-v1.oracle-trait)\n\n;; ---------------------------------------------------------\n;; Constants\n;; ---------------------------------------------------------\n\n(define-constant ERR-NOT-AUTHORIZED u8401)\n(define-constant ERR-OLD-MESSAGE u8402)\n(define-constant ERR-SIGNATURES-NOT-UNIQUE u8403)\n\n;; ---------------------------------------------------------\n;; Variables\n;; ---------------------------------------------------------\n\n(define-data-var minimum-valid-signers uint u3)\n\n;; ---------------------------------------------------------\n;; Maps\n;; ---------------------------------------------------------\n\n(define-map prices\n  { token: (string-ascii 12) }\n  {\n    last-price: uint,\n    last-block: uint,\n    decimals: uint\n  }\n)\n\n(define-map trusted-oracles (buff 33) bool)\n(define-map signatures-used (buff 65) bool)\n\n(define-map token-id-to-names uint (list 4 (string-ascii 12)))\n(define-map token-name-to-id (string-ascii 12) uint)\n\n;; ---------------------------------------------------------\n;; Getters\n;; ---------------------------------------------------------\n\n;; @desc check if given public key is trusted\n(define-read-only (is-trusted-oracle (pubkey (buff 33)))\n  (default-to false (map-get? trusted-oracles pubkey))\n)\n\n;; @desc check if given signature is already used\n(define-read-only (is-signature-used (signature (buff 65)))\n  (default-to false (map-get? signatures-used signature))\n)\n\n;; @desc get token ID for given name\n(define-read-only (get-token-id-from-name (name (string-ascii 12)))\n  (default-to u0 (map-get? token-name-to-id name))\n)\n\n;; @desc get list of token names for given token ID\n(define-read-only (get-token-names-from-id (id uint))\n  (default-to (list ) (map-get? token-id-to-names id))\n)\n\n;; @desc get minimum valid signers needed\n(define-read-only (get-minimum-valid-signers)\n  (var-get minimum-valid-signers)\n)\n\n;; @desc get price info for given token name\n(define-read-only (get-price (token (string-ascii 12)))\n  (unwrap! (map-get? prices { token: token }) { last-price: u0, last-block: u0, decimals: u0 })\n)\n\n;; @desc get price info response for given token name\n(define-public (fetch-price (token (string-ascii 12)))\n  (ok (get-price token))\n)\n\n;; ---------------------------------------------------------\n;; Message signing\n;; ---------------------------------------------------------\n\n;; @desc update token price as DAO owner\n;; @param token; token to update price for\n;; @param price; price value\n;; @param decimals; amount of decimals\n;; @post bool; returns true\n(define-public (update-price-owner (token-id uint) (price uint) (decimals uint))\n  (begin\n    (asserts! (is-eq tx-sender (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n    (unwrap-panic (update-price-multi-helper token-id price decimals))\n    (ok price)\n  )\n)\n\n;; @desc update token price as multisig node\n;; @param block; the block on which the message was created\n;; @param token-id; token ID to update price for\n;; @param price; price value\n;; @param decimals; amount of decimals\n;; @param signatures; list of signatures from oracle nodes\n;; @post bool; returns true if successful\n(define-public (update-price-multi (block uint) (token-id uint) (price uint) (decimals uint) (signatures (list 10 (buff 65))))\n  (let (\n    (block-list (list block block block block block block block block block block))\n    (token-id-list (list token-id token-id token-id token-id token-id token-id token-id token-id token-id token-id))\n    (price-list (list price price price price price price price price price price))\n    (decimals-list (list decimals decimals decimals decimals decimals decimals decimals decimals decimals decimals))\n\n    (check-result (fold + (map check-price-signer block-list token-id-list price-list decimals-list signatures) u0))\n  )\n    (asserts! (< burn-block-height (+ block u10)) (err ERR-OLD-MESSAGE))\n    (asserts! (is-eq (fold and (map check-unique-signatures-iter signatures) true) true) (err ERR-SIGNATURES-NOT-UNIQUE))\n\n    (if (>= check-result (var-get minimum-valid-signers))\n      (update-price-multi-helper token-id price decimals)\n      (ok false)\n    )\n  )\n)\n\n;; Helper method to update price for given token ID\n;; Will iterate over all token names based on token ID\n(define-private (update-price-multi-helper (token-id uint) (price uint) (decimals uint) )\n  (let (\n    (names-list (get-token-names-from-id token-id))\n    (prices-list (list price price price price))\n    (decimals-list (list decimals decimals decimals decimals))\n  )\n    (map update-price-token-iter names-list prices-list decimals-list)\n    (ok true)\n  )\n)\n\n;; Helper method to iterate over all token names and update prices\n(define-private (update-price-token-iter (token (string-ascii 12)) (price uint) (decimals uint))\n  (begin\n    (map-set prices { token: token } { last-price: price, last-block: burn-block-height, decimals: decimals })\n    (ok true)\n  )\n)\n\n;; Helper method to iterate over all signatures in a list\n;; The signatures are added to a map, so that a signature can only be used once\n(define-private (check-unique-signatures-iter (signature (buff 65)))\n  (if (is-signature-used signature)\n    false\n    (begin\n      (map-set signatures-used signature true)\n      true\n    )\n  )\n)\n\n;; ---------------------------------------------------------\n;; Message signers\n;; ---------------------------------------------------------\n\n;; Recover the public key given the values and a signature\n(define-read-only (pubkey-price-signer (block uint) (token-id uint) (price uint) (decimals uint) (signature (buff 65)))\n  (secp256k1-recover? (get-signable-message-hash block token-id price decimals) signature)\n)\n\n;; Recover the public key given the values and a signature, check if trusted\n;; If not trusted it could be that the oracle itself is not trusted, or the values have been tampered with\n(define-read-only (check-price-signer (block uint) (token-id uint) (price uint) (decimals uint) (signature (buff 65)))\n  (let (\n    (pubKey (unwrap! (pubkey-price-signer block token-id price decimals signature) u0))\n  )\n    (if (is-trusted-oracle pubKey) u1 u0)\n  )\n)\n\n;; ---------------------------------------------------------\n;; Signable message\n;; ---------------------------------------------------------\n\n;; Create a message hash to sign, given price values\n(define-read-only (get-signable-message-hash (block uint) (token-id uint) (price uint) (decimals uint))\n  (keccak256 (concat (concat (concat (uint256-to-buff-be block) (uint256-to-buff-be token-id)) (uint256-to-buff-be price)) (uint256-to-buff-be decimals)))\n)\n\n(define-read-only (uint256-to-buff-be (n uint))\n  (unwrap-panic (as-max-len? (get a (fold uint-to-buff-iter 0x0000000000000000000000000000000000000000000000000000000000000000 {n: n, a: 0x})) u32))\n)\n\n(define-constant byte-list 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff)\n\n(define-private (uint-to-buff-iter (b (buff 1)) (p {n: uint, a: (buff 32)}))\n  {\n    a: (unwrap-panic (as-max-len? (concat (if (is-eq (get n p) u0) 0x00 (unwrap-panic (element-at byte-list (mod (get n p) u256)))) (get a p)) u32)),\n    n: (/ (get n p) u256)\n  }\n)\n\n;; ---------------------------------------------------------\n;; Admin\n;; ---------------------------------------------------------\n\n;; Link token ID to token name\n(define-public (set-token-id (token-id uint) (token-name (string-ascii 12)))\n  (let (\n    (current-list (get-token-names-from-id token-id))\n    (new-list (unwrap-panic (as-max-len? (append current-list token-name) u4)))\n  )\n    (asserts! (is-eq tx-sender (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n\n    (map-set token-id-to-names token-id new-list)\n    (map-set token-name-to-id token-name token-id)\n    (ok true)\n  )\n)\n\n;; Set minimum signers needed to update price\n(define-public (set-minimum-valid-signers (minimum uint))\n  (begin\n    (asserts! (is-eq tx-sender (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n    \n    (var-set minimum-valid-signers minimum)\n    (ok true)\n  )\n)\n\n;; Add trusted oracle public keys\n(define-public (set-trusted-oracle (pubkey (buff 33)) (trusted bool))\n  (begin\n    (asserts! (is-eq tx-sender (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n\n    (map-set trusted-oracles pubkey trusted)\n    (ok true)\n  )\n)\n\n;; ---------------------------------------------------------\n;; Init\n;; ---------------------------------------------------------\n\n(begin\n  (map-set token-id-to-names u1 (list \"STX\" \"xSTX\"))\n  (map-set token-name-to-id \"STX\" u1)\n  (map-set token-name-to-id \"xSTX\" u1)\n\n  (map-set token-id-to-names u2 (list \"BTC\" \"xBTC\"))\n  (map-set token-name-to-id \"BTC\" u2)\n  (map-set token-name-to-id \"xBTC\" u2)\n\n  (map-set token-id-to-names u3 (list \"USDA\"))\n  (map-set token-name-to-id \"USDA\" u3)\n\n  (map-set token-id-to-names u4 (list \"STX/USDA\"))\n  (map-set token-name-to-id \"STX/USDA\" u4)\n\n  (map-set token-id-to-names u5 (list \"DIKO\"))\n  (map-set token-name-to-id \"DIKO\" u5)\n\n  (map-set token-id-to-names u6 (list \"atALEX\" \"auto-alex\"))\n  (map-set token-name-to-id \"atALEX\" u6)\n  (map-set token-name-to-id \"auto-alex\" u6)\n\n  (map-set token-id-to-names u7 (list \"atALEXv2\" \"auto-alex-v2\"))\n  (map-set token-name-to-id \"atALEXv2\" u7)\n  (map-set token-name-to-id \"auto-alex-v2\" u7)\n\n  (map-set token-id-to-names u8 (list \"stSTX\" \"ststx-token\"))\n  (map-set token-name-to-id \"stSTX\" u8)\n  (map-set token-name-to-id \"ststx-token\" u8)\n)\n",
    "analysis": {
      "summary": "This contract manages the updating of token prices on the Arkadiko platform using a multisig approach for enhanced security.",
      "explanation": "The Arkadiko multisig oracle contract is designed to securely update the prices of various tokens used within the Arkadiko ecosystem. It implements a multisig mechanism, requiring multiple signatures from trusted oracles to update a token's price, ensuring a high level of security and consensus. The contract includes functionality for setting and updating token prices, managing trusted oracles, and ensuring that signatures are unique and valid only for a single use.\n\n- Constants like `ERR-NOT-AUTHORIZED` <L5> and others define error codes for various unauthorized actions.\n- A minimum number of valid signers is set via a variable <L11>, ensuring that price updates require multisig approval.\n- Maps <L15-24> store token prices, trusted oracles, and used signatures, facilitating the core functionality of verifying and updating prices.\n- Getters <L28-50> provide read-only access to contract state, such as checking if an oracle is trusted or fetching price information for tokens.\n- The `update-price-owner` <L54-59> and `update-price-multi` <L62-84> functions allow price updates, with the latter requiring multisig verification.\n- Helper functions <L86-119> support the multisig functionality by checking signatures, updating prices for tokens, and ensuring signatures are unique.\n- The `pubkey-price-signer` <L123-125> and related functions <L127-140> recover public keys from signatures and verify if they are from trusted oracles.\n- Admin functions <L144-176> enable the DAO owner to manage token names, set minimum valid signers, and add trusted oracles.\n- The contract initialization <L179-199> pre-defines some tokens and their IDs for use within the platform.",
      "tags": [
        "multisig",
        "oracle",
        "price-update",
        "security",
        "Arkadiko"
      ]
    }
  },
  {
    "rank": 11,
    "contract": "SP2VCQJGH7PHP2DJK7Z0V48AGBHQAW3R3ZW1QF4N.borrow-helper-v2-0-0",
    "calls": 4909,
    "source": "(use-trait ft .ft-trait.ft-trait)\n(use-trait ft-mint-trait .ft-mint-trait.ft-mint-trait)\n(use-trait a-token .a-token-trait.a-token-trait)\n(use-trait flash-loan .flash-loan-trait.flash-loan-trait)\n(use-trait oracle-trait .oracle-trait.oracle-trait)\n(use-trait redeemeable-token .redeemeable-trait-v1-2.redeemeable-trait)\n\n\n(define-constant ERR_UNAUTHORIZED (err u1000000000000))\n\n(define-public (supply\n  (lp <redeemeable-token>)\n  (pool-reserve principal)\n  (asset <ft>)\n  (amount uint)\n  (owner principal)\n  (referral (optional principal)))\n  (let ((asset-principal (contract-of asset)))\n\n    (asserts! (is-eq tx-sender contract-caller) ERR_UNAUTHORIZED)\n    (try! (contract-call? .pool-borrow-v2-0 supply lp pool-reserve asset amount owner))\n\n    (print { type: \"supply-call\", payload: { key: owner, data: {\n      reserve-state: (try! (contract-call? .pool-0-reserve-v2-0 get-reserve-state asset-principal)),\n      user-reserve-state: (contract-call? .pool-0-reserve-v2-0 get-user-reserve-data owner asset-principal),\n      user-index: (contract-call? .pool-0-reserve-v2-0 get-user-index owner asset-principal),\n      user-assets: (contract-call? .pool-0-reserve-v2-0 get-user-assets owner),\n      asset: asset,\n      amount: amount,\n      new-balance: (try! (contract-call? lp get-balance owner)),\n      referral: referral,\n    }}})\n    (ok true)\n  )\n)\n\n(define-public (borrow\n  (pool-reserve principal)\n  (oracle <oracle-trait>)\n  (asset-to-borrow <ft>)\n  (lp <ft>)\n  (assets (list 100 { asset: <ft>, lp-token: <ft>, oracle: <oracle-trait> }))\n  (amount-to-be-borrowed uint)\n  (fee-calculator principal)\n  (interest-rate-mode uint)\n  (owner principal))\n  (let ((asset-principal (contract-of asset-to-borrow)))\n\n    (asserts! (is-eq tx-sender contract-caller) ERR_UNAUTHORIZED)\n    (try! (contract-call? .pool-borrow-v2-0 borrow pool-reserve oracle asset-to-borrow lp assets amount-to-be-borrowed fee-calculator interest-rate-mode owner))\n\n    (print { type: \"borrow-call\", payload: { key: owner, data: {\n        reserve-state: (try! (contract-call? .pool-0-reserve-v2-0 get-reserve-state asset-principal)),\n        user-reserve-state: (contract-call? .pool-0-reserve-v2-0 get-user-reserve-data owner asset-principal),\n        user-index: (contract-call? .pool-0-reserve-v2-0 get-user-index owner asset-principal),\n        user-assets: (contract-call? .pool-0-reserve-v2-0 get-user-assets owner),\n        asset: asset-to-borrow,\n        amount: amount-to-be-borrowed,\n        new-borrow-balance: (get compounded-balance (try! (contract-call? .pool-0-reserve-v2-0 get-user-borrow-balance owner asset-to-borrow))),\n      }}})\n    (ok true)\n  )\n)\n\n(define-public (repay\n  (asset <ft>)\n  (amount-to-repay uint)\n  (on-behalf-of principal)\n  (payer principal)\n  )\n  (let (\n    (asset-principal (contract-of asset))\n    (check-ok (asserts! (is-eq tx-sender contract-caller) ERR_UNAUTHORIZED))\n    (payback-amount (try! (contract-call? .pool-borrow-v2-0 repay asset amount-to-repay on-behalf-of payer)))\n    )\n\n    (print { type: \"repay-call\", payload: { key: on-behalf-of, data: {\n        reserve-state: (try! (contract-call? .pool-0-reserve-v2-0 get-reserve-state asset-principal)),\n        user-reserve-state: (contract-call? .pool-0-reserve-v2-0 get-user-reserve-data on-behalf-of asset-principal),\n        user-index: (contract-call? .pool-0-reserve-v2-0 get-user-index on-behalf-of asset-principal),\n        user-assets: (contract-call? .pool-0-reserve-v2-0 get-user-assets on-behalf-of),\n        asset: asset,\n        amount: payback-amount,\n        on-behalf-of: on-behalf-of,\n        payer: payer,\n        new-borrow-balance: (get compounded-balance (try! (contract-call? .pool-0-reserve-v2-0 get-user-borrow-balance on-behalf-of asset))),\n      }}})\n    (ok true)\n  )\n)\n\n(define-public (set-user-use-reserve-as-collateral\n  (who principal)\n  (lp-token <ft>)\n  (asset <ft>)\n  (enable-as-collateral bool)\n  (oracle <oracle-trait>)\n  (assets-to-calculate (list 100 { asset: <ft>, lp-token: <ft>, oracle: <oracle-trait> })))\n  (let (\n    (asset-principal (contract-of asset))\n    (reserve-state (try! (contract-call? .pool-0-reserve-v2-0 get-reserve-state asset-principal)))\n    )\n\n    (asserts! (is-eq tx-sender contract-caller) ERR_UNAUTHORIZED)\n    (try! (contract-call? .pool-borrow-v2-0 set-user-use-reserve-as-collateral who lp-token asset enable-as-collateral oracle assets-to-calculate))\n\n    (print { type: \"set-user-use-reserve-as-collateral-call\", payload: { key: who, data: {\n        reserve-state: (try! (contract-call? .pool-0-reserve-v2-0 get-reserve-state asset-principal)),\n        user-reserve-state: (contract-call? .pool-0-reserve-v2-0 get-user-reserve-data who asset-principal),\n        user-index: (contract-call? .pool-0-reserve-v2-0 get-user-index who asset-principal),\n        user-assets: (contract-call? .pool-0-reserve-v2-0 get-user-assets who),\n        asset: asset,\n      }}})\n    (ok true)\n  )\n)\n\n(define-public (withdraw\n  (lp <redeemeable-token>)\n  (pool-reserve principal)\n  (asset <ft>)\n  (oracle <oracle-trait>)\n  (amount uint)\n  (owner principal)\n  (assets (list 100 { asset: <ft>, lp-token: <ft-mint-trait>, oracle: <oracle-trait> }))\n  )\n  (let (\n    (asset-principal (contract-of asset))\n    (check-ok (asserts! (is-eq tx-sender contract-caller) ERR_UNAUTHORIZED))\n    (withdraw-res (try! (contract-call? .pool-borrow-v2-0 withdraw pool-reserve asset lp oracle assets amount owner)))\n    )\n\n    (print { type: \"withdraw-call\", payload: { key: owner, data: {\n        reserve-state: (try! (contract-call? .pool-0-reserve-v2-0 get-reserve-state asset-principal)),\n        user-reserve-state: (contract-call? .pool-0-reserve-v2-0 get-user-reserve-data owner asset-principal),\n        user-index: (contract-call? .pool-0-reserve-v2-0 get-user-index owner asset-principal),\n        user-assets: (contract-call? .pool-0-reserve-v2-0 get-user-assets owner),\n        asset: asset,\n        withdrawn-amount: withdraw-res,\n        balance: (try! (contract-call? lp get-balance owner)),\n      }}})\n    (ok true)\n  )\n)\n\n(define-public (liquidation-call\n  (assets (list 100 { asset: <ft>, lp-token: <ft>, oracle: <oracle-trait> }))\n  (collateral-lp <a-token>)\n  (collateral-to-liquidate <ft>)\n  (debt-asset <ft>)\n  (collateral-oracle <oracle-trait>)\n  (debt-oracle <oracle-trait>)\n  (liquidated-user principal)\n  (debt-amount uint)\n  (to-receive-atoken bool))\n  (let (\n    (debt-asset-principal (contract-of debt-asset))\n    (collateral-asset-principal (contract-of collateral-to-liquidate))\n    (liquidator tx-sender)\n    )\n\n    (asserts! (is-eq liquidator contract-caller) ERR_UNAUTHORIZED)\n\n    (try! (contract-call? .pool-borrow-v2-0 liquidation-call\n      assets\n      collateral-lp\n      collateral-to-liquidate\n      debt-asset\n      collateral-oracle\n      debt-oracle\n      liquidated-user\n      debt-amount\n      to-receive-atoken)\n    )\n    (print { type: \"liquidation-call\", payload: { key: liquidated-user, data: {\n        debt-reserve-state: (try! (contract-call? .pool-0-reserve-v2-0 get-reserve-state debt-asset-principal)),\n        collateral-reserve-state: (try! (contract-call? .pool-0-reserve-v2-0 get-reserve-state debt-asset-principal)),\n        \n        liquidator-debt-reserve-state: (contract-call? .pool-0-reserve-v2-0 get-user-reserve-data liquidator debt-asset-principal),\n        liquidator-debt-index: (contract-call? .pool-0-reserve-v2-0 get-user-index liquidator debt-asset-principal),\n        liquidator-collateral-reserve-state: (contract-call? .pool-0-reserve-v2-0 get-user-reserve-data liquidator collateral-asset-principal),\n        liquidator-collateral-index: (contract-call? .pool-0-reserve-v2-0 get-user-index liquidator collateral-asset-principal),\n        liquidator-user-assets: (contract-call? .pool-0-reserve-v2-0 get-user-assets liquidator),\n\n        liquidated-user-debt-reserve-state: (contract-call? .pool-0-reserve-v2-0 get-user-reserve-data liquidated-user debt-asset-principal),\n        liquidated-user-debt-index: (contract-call? .pool-0-reserve-v2-0 get-user-index liquidated-user debt-asset-principal),\n        liquidated-user-collateral-reserve-state: (contract-call? .pool-0-reserve-v2-0 get-user-reserve-data liquidated-user collateral-asset-principal),\n        liquidated-user-collateral-index: (contract-call? .pool-0-reserve-v2-0 get-user-index liquidated-user collateral-asset-principal),\n        liquidated-user-assets: (contract-call? .pool-0-reserve-v2-0 get-user-assets liquidated-user),\n\n        collateral-to-liquidate: collateral-to-liquidate,\n        debt-asset: debt-asset-principal,\n        debt-amount: debt-amount,\n      }}})\n    (ok u0)\n  )\n)\n\n(define-public (set-e-mode\n  (user principal)\n  (assets (list 100 { asset: <ft>, lp-token: <ft>, oracle: <oracle-trait> }))\n  (new-e-mode-type (buff 1))\n  )\n  (begin\n    (asserts! (is-eq tx-sender contract-caller) ERR_UNAUTHORIZED)\n    (try! (contract-call? .pool-borrow-v2-0 set-e-mode user assets new-e-mode-type))\n\n    (print { type: \"set-e-mode-call\", payload: { key: user, data: {\n        user-e-mode: (contract-call? .pool-reserve-data-2 get-user-e-mode-read user),\n      }}})\n    (ok true)\n  )\n)\n\n(define-public (flashloan\n  (receiver principal)\n  (asset <ft>)\n  (amount uint)\n  (flashloan-script <flash-loan>))\n  (begin\n    (asserts! (is-eq tx-sender contract-caller) ERR_UNAUTHORIZED)\n\n    (try! \n      (contract-call? .pool-borrow-v2-0 flashloan\n        receiver\n        asset\n        amount\n        flashloan-script))\n\n    (print { type: \"flashloan-call\", payload: { key: receiver, data: {\n      reserve-state: (try! (contract-call? .pool-0-reserve-v2-0 get-reserve-state (contract-of asset))),\n    }}})\n    (ok u0)\n  )\n)\n",
    "analysis": {
      "summary": "This contract interfaces with a lending pool to enable supply, borrow, repay, collateral management, withdrawal, liquidation, e-mode setting, and flashloan operations.",
      "explanation": "The contract acts as an intermediary between users and a lending pool, facilitating various financial operations. Each public function enforces authorization checks to ensure only the contract caller can execute them, enhancing security. The contract integrates with multiple traits to interact with different asset types and services like oracles for price feeds and flash loans for temporary asset borrowing without collateral.\n\n- The `supply` function allows users to supply assets to the pool in exchange for lp tokens. It records the transaction details and updates the user's balance (<L10-29>).\n- `borrow` lets users borrow assets from the pool against their supplied collateral, specifying the amount and the interest rate mode (<L31-58>).\n- Through `repay`, users can repay their borrowed assets to adjust their loan balance (<L60-85>).\n- `set-user-use-reserve-as-collateral` enables users to toggle their supplied assets as collateral for borrowing (<L87-112>).\n- `withdraw` allows users to withdraw their supplied assets from the pool (<L114-139>).\n- `liquidation-call` is used to liquidate undercollateralized positions, converting collateral into debt repayment (<L141-181>).\n- `set-e-mode` lets a user set an emergency mode for higher risk management, affecting their loan conditions (<L183-199>).\n- Finally, `flashloan` offers the ability to borrow assets from the pool without collateral, which must be repaid within the same transaction, enabling arbitrage or self-liquidation strategies (<L201-217>).\n\nEach function prints transaction details for transparency and auditing. The contract utilizes Clarity's `try!` for error handling and `asserts!` for condition checks, ensuring robust contract behavior.",
      "tags": [
        "DeFi",
        "lending-pool",
        "borrowing",
        "supplying",
        "repayment",
        "collateral-management",
        "liquidation",
        "flashloan"
      ]
    }
  },
  {
    "rank": 12,
    "contract": "SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.farming-v3b-logic",
    "calls": 4867,
    "source": "(use-trait liquidity-token .liquidity-token-trait-v4c.liquidity-token-trait)\n(use-trait oracle-trait .stackwap-oracle-trait-v1b.oracle-trait)\n(define-constant ERR_ZERO_LP_INPUT u4301)\n(define-constant ERR_INSUFFICIENT_LP_BALANCE u4302)\n(define-constant ERR_NOT_CORRECT_ROUND u4303)\n(define-constant ERR_NO_PREVIOUS_DATA u4304)\n(define-constant ERR_PERMISSION_DENIED u4305)\n(define-constant ERR_INVALID_ROUTER u4306)\n(define-constant ERR_POOL_NOT_FARMABLE u4307)\n(define-constant ERR_FARM_STOPPED u4308)\n(define-constant ERR_FARM_ENDED u4314)\n(define-constant ERR_CLAIMABLE_ROUNDS_EXCEEDED u4316)\n\n(define-constant FIRST_FARMING_BLOCK u70843)\n(define-constant REWARD_ROUND_LENGTH u504)\n(define-constant MAX_REWARD_ROUNDS u64)\n(define-constant REWARD_ROUND_INDEXES (list u0 u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31 u32 u33 u34 u35 u36 u37 u38 u39 u40 u41 u42 u43 u44 u45 u46 u47 u48 u49 u50 u51 u52 u53 u54 u55 u56 u57 u58 u59 u60 u61 u62 u63))\n(define-constant MIN_STAKING_ROUND_REWARDS u10000000)\n(define-data-var farm_end_round uint u9999999999)\n(define-data-var farm_start_round uint u65)\n\n(define-data-var emergency_stop bool true)\n\n(define-data-var UPDATED_ROUND uint u139)\n\n(define-private (is-dao (user principal)) \n    (ok (asserts! (is-eq user (contract-call? .stackswap-dao-v5k get-dao-owner)) (err ERR_PERMISSION_DENIED))))\n\n(define-read-only (getFarmingRound (stacksHeight uint))\n (if (>= stacksHeight FIRST_FARMING_BLOCK) (/ (- stacksHeight FIRST_FARMING_BLOCK) REWARD_ROUND_LENGTH) u0))\n\n(define-read-only (getGroupRewardsPerRound (target_round uint) (reward_basis uint))\n  (let (\n    (rounds_per_year u52)\n    (year_number (+ (/ target_round rounds_per_year) u1))\n    (staking_rewards_divider (pow u2 (/ (- year_number u1) u4)))\n    (actual_round_rewards (/ reward_basis staking_rewards_divider))\n  )\n      (if (>= actual_round_rewards MIN_STAKING_ROUND_REWARDS)\n        actual_round_rewards\n        MIN_STAKING_ROUND_REWARDS\n    )\n  )\n)\n\n(define-private (claimRewardInner (user principal) (round uint) (amount_staked uint) (pool principal) (group uint))\n  (let\n    (\n        (GroupHistory_ (contract-call? .stackswap-farming-v3-data getGroupHistoryOrDefault group round))\n        (LPHistory_ (contract-call? .stackswap-farming-v3-data getLPHistoryOrDefault pool round))\n        (userTVL (* (* (get Weight LPHistory_) (get Price LPHistory_)) amount_staked))\n        (currentRound (getFarmingRound block-height))\n    )\n    (if (or (<= currentRound round) (is-eq u0 userTVL) (< (var-get farm_end_round) round) (is-eq u0 (get GroupWeightedTVL GroupHistory_)))\n        true\n    (let (\n        (rewardAmt (/ (* (getGroupRewardsPerRound round (get GroupRewardAmt GroupHistory_)) userTVL) (get GroupWeightedTVL GroupHistory_)))\n        )\n        (if (> rewardAmt u0)\n            (begin  \n                (try! (contract-call? .stackswap-farming-v3-data transferReward user rewardAmt))\n            )\n            false\n        )\n    )\n    )\n    (ok true)\n  )\n)\n\n(define-private (claimRewardClosure (reward_round_idx uint)\n  (commitmentResponse (response \n    {\n      user: principal,\n      StakingLockedAmt: uint,\n      StartRoundAmt: uint,\n      pool: principal,\n      first: uint,\n      last: uint,\n      group: uint,\n    }\n    uint\n  )))\n\n  (match commitmentResponse\n    commitment \n    (let\n      (\n        (round (+ (get first commitment) reward_round_idx))\n      )\n      (begin\n        (if (and (>= round (get first commitment)) (< round (get last commitment)))\n            (if (is-eq round (get first commitment))\n                (try! (claimRewardInner (get user commitment) round (get StartRoundAmt commitment) (get pool commitment) (get group commitment)))\n                (try! (claimRewardInner (get user commitment) round (get StakingLockedAmt commitment) (get pool commitment) (get group commitment)))\n            )\n            false\n        )\n        commitmentResponse\n      )\n    )\n    errValue commitmentResponse\n  )\n)\n\n(define-private (claimRewardPrivate (pool principal)) \n    (let (\n            (user tx-sender)\n            (current_round (getFarmingRound block-height))\n            (LPUser_ (contract-call? .stackswap-farming-v3-data getLPUserOrDefault pool user))\n            (LP_ (contract-call? .stackswap-farming-v3-data getLPOrDefault pool))\n            (CurLPHistory_ (contract-call? .stackswap-farming-v3-data getLPHistoryOrDefault pool current_round))   \n            (end_round1 (if \n                (or \n                    (< current_round (get WithdrawEndRound LPUser_)) \n                    (is-eq (get WithdrawEndRound LPUser_) u0)\n                )\n                current_round\n                (+ (get WithdrawEndRound LPUser_) u1)))         \n            (end_round (if \n                (< end_round1 (+ u64 (get StartRound LPUser_)))\n                end_round1\n                (+ u64 (get StartRound LPUser_))\n                ))         \n        )\n        (asserts! (contract-call? .stackswap-farming-v3-data isFarmAvailable  pool) (err ERR_POOL_NOT_FARMABLE))\n        (asserts! (contract-call? .stackswap-security-list-v1a is-secure-router-or-user contract-caller) (err ERR_INVALID_ROUTER))\n        (if (and (> (+ (get StakingLockedAmt LPUser_) (get StartRoundAmt LPUser_)) u0) (>= end_round (+ (get StartRound LPUser_) u1)))\n            (begin\n                (try! (contract-call? .stackswap-farming-v3-data setLPUser\n                    pool\n                    user\n                    (merge LPUser_ {\n                        StartRound: end_round,\n                        StartRoundAmt: (get StakingLockedAmt LPUser_),\n                    })\n                ))\n                (try! (match (fold claimRewardClosure REWARD_ROUND_INDEXES (ok {\n                        user: user,\n                        StakingLockedAmt: (get StakingLockedAmt LPUser_),\n                        StartRoundAmt: (get StartRoundAmt LPUser_),\n                        pool: pool,\n                        first: (get StartRound LPUser_),\n                        last: end_round,\n                        group: (get Group LP_),\n                    }))\n                    okValue (ok true)\n                    errValue (err errValue)\n                ))\n                (ok (contract-call? .stackswap-farming-v3-data getLPUserOrDefault pool user))\n            )\n            (ok LPUser_)\n        )\n\n        \n    )\n)\n\n(define-public (stake (pool <liquidity-token>) (amount uint) (oracle <oracle-trait>))\n    (let (\n            (user tx-sender)\n            (current_round (getFarmingRound block-height))\n            (res (try! (updateRoundStatus pool current_round oracle)))\n            (start_round (var-get farm_start_round)) \n            (round (if (> start_round current_round) start_round current_round))\n            (LPUser_ (try! (claimRewardPrivate (contract-of pool))))\n            (LP_ (contract-call? .stackswap-farming-v3-data getLPOrDefault (contract-of pool)))\n            (CurLPHistory_ (contract-call? .stackswap-farming-v3-data getLPHistoryOrDefault (contract-of pool) round))\n        )\n        (asserts! (contract-call? .stackswap-farming-v3-data isFarmAvailable  (contract-of pool)) (err ERR_POOL_NOT_FARMABLE))\n        (asserts! (contract-call? .stackswap-security-list-v1a is-secure-router-or-user contract-caller) (err ERR_INVALID_ROUTER))\n        (asserts! (<= round (var-get farm_end_round)) (err ERR_FARM_ENDED))\n        (asserts! (> amount u0) (err ERR_ZERO_LP_INPUT))\n        (asserts! (or (is-eq (get StartRound LPUser_) u0) (is-eq (get StartRound LPUser_) current_round)) (err ERR_CLAIMABLE_ROUNDS_EXCEEDED))\n        (asserts! (not (var-get emergency_stop)) (err ERR_FARM_STOPPED))\n\n        (unwrap! (contract-call? pool transfer amount user .stackswap-farming-v3-data none) (err ERR_INSUFFICIENT_LP_BALANCE))\n        (try! (contract-call? .stackswap-farming-v3-data setLPUser\n             (contract-of pool) user\n            (merge LPUser_ {\n                ViewAmt: (+ (get ViewAmt LPUser_) amount),\n                StakingLockedAmt: (+ (get StakingLockedAmt LPUser_) amount),\n                StartRound: round,\n            })\n        ))\n        (try! (contract-call? .stackswap-farming-v3-data setLPHistory \n             (contract-of pool) round\n            (merge CurLPHistory_ {\n                NextDepositAmt: (+ (get NextDepositAmt CurLPHistory_) amount),\n            })\n        ))\n        (try! (updateRoundStatus pool current_round oracle))\n        (ok true)\n    )\n)\n\n(define-public (withdrawDirect (pool <liquidity-token>) (amount uint) (oracle <oracle-trait>))\n    (let (\n            (user tx-sender)\n            (current_round (getFarmingRound block-height))\n            (res (try! (updateRoundStatus pool current_round oracle)))\n            (start_round (var-get farm_start_round)) \n            (round (if (> start_round current_round) start_round current_round))\n            (LPUser_ (try! (claimRewardPrivate (contract-of pool))))\n            (LP_ (contract-call? .stackswap-farming-v3-data getLPOrDefault (contract-of pool)))\n            (LPHistory_ (contract-call? .stackswap-farming-v3-data getLPHistoryOrDefault (contract-of pool) round))\n        )\n        (asserts! (contract-call? .stackswap-farming-v3-data isFarmAvailable  (contract-of pool)) (err ERR_POOL_NOT_FARMABLE))\n        (asserts! (contract-call? .stackswap-security-list-v1a is-secure-router-or-user contract-caller) (err ERR_INVALID_ROUTER))\n        (asserts! (or (> round (get WithdrawEndRound LPUser_)) (> round (var-get farm_end_round))) (err ERR_FARM_ENDED)) \n        (asserts! (<= amount (get StakingLockedAmt LPUser_)) (err u9990))\n        (asserts! (or (is-eq (get StartRound LPUser_) u0) (is-eq (get StartRound LPUser_) current_round)) (err ERR_CLAIMABLE_ROUNDS_EXCEEDED))\n        (asserts! (not (var-get emergency_stop)) (err ERR_FARM_STOPPED))\n\n        (if (<= amount (- (get StakingLockedAmt LPUser_) (get StartRoundAmt LPUser_)) )\n            (begin  \n                (try! (contract-call? .stackswap-farming-v3-data setLPUser\n                    (contract-of pool)\n                    user\n                    (merge LPUser_ {\n                        ViewAmt: (- (get ViewAmt LPUser_) amount),\n                        StakingLockedAmt: (- (get StakingLockedAmt LPUser_) amount),\n                    })\n                ))\n                (try! (contract-call? .stackswap-farming-v3-data setLPHistory \n                    (contract-of pool)\n                    round\n                    (merge LPHistory_ {\n                        NextDepositAmt: (- (get NextDepositAmt LPHistory_) amount),\n                    })\n                ))\n            )\n            (begin\n                (try! (contract-call? .stackswap-farming-v3-data setLPUser\n                    (contract-of pool)\n                    user\n                    (merge LPUser_ {\n                        ViewAmt: (- (get ViewAmt LPUser_) amount),\n                        StakingLockedAmt: (- (get StakingLockedAmt LPUser_) amount),\n                        StartRoundAmt: (- (get StartRoundAmt LPUser_) (- amount (- (get StakingLockedAmt LPUser_) (get StartRoundAmt LPUser_)))),\n                    })\n                ))\n                (try! (contract-call? .stackswap-farming-v3-data setLPHistory \n                    (contract-of pool)\n                    round\n                    (merge LPHistory_ {\n                        LockedAmt: (- (get LockedAmt LPHistory_) (- amount (- (get StakingLockedAmt LPUser_) (get StartRoundAmt LPUser_)))),\n                        NextDepositAmt: (- (get NextDepositAmt LPHistory_) (- (get StakingLockedAmt LPUser_) (get StartRoundAmt LPUser_))),\n                    })\n                ))\n            )\n        )\n\n        (if (is-eq amount (get StakingLockedAmt LPUser_))\n            (try! (contract-call? .stackswap-farming-v3-data deleteLPUser\n                (contract-of pool) user\n            ))\n            false\n        )\n        (try! (contract-call? .stackswap-farming-v3-data transferAsset pool user amount))\n        (try! (updateRoundStatus pool current_round oracle))\n        (ok true)\n    )\n)\n\n(define-private (updateRoundStatus (pool <liquidity-token>) (round uint) (oracle <oracle-trait>))\n  (let  (\n        (LP_ (contract-call? .stackswap-farming-v3-data getLPOrDefault (contract-of pool)))\n        (Group_ (contract-call? .stackswap-farming-v3-data getGroupOrDefault (get Group LP_)))\n        (GroupHistory_ (contract-call? .stackswap-farming-v3-data getGroupHistoryOrDefault (get Group LP_) round))\n        (LPHistory_ (contract-call? .stackswap-farming-v3-data getLPHistoryOrDefault (contract-of pool) round))\n        (lpBalance (- (try! (contract-call? pool get-balance .stackswap-farming-v3-data)) (get NextDepositAmt LPHistory_)))\n        (price (try! (getLPPrice pool oracle)))\n        (lockedAmt (if (> lpBalance (get LockedAmt LPHistory_)) lpBalance (get LockedAmt LPHistory_)))\n        (new_lp_TVL (* (* lockedAmt (get CurWeight LP_)) price))\n    )\n    (asserts! (contract-call? .stackswap-farming-v3-data isFarmAvailable  (contract-of pool)) (err ERR_POOL_NOT_FARMABLE))\n    (try! (contract-call? .stackswap-farming-v3-data setGroupHistory\n         (get Group LP_) round\n        {\n            GroupWeightedTVL : (- (+ (get GroupWeightedTVL GroupHistory_) new_lp_TVL) (get WeightedTVL LPHistory_)),\n            GroupRewardAmt : (get CurRewardAmt Group_)\n        }\n    ))\n    (try! (contract-call? .stackswap-farming-v3-data setLPHistory\n        (contract-of pool) round \n        (merge LPHistory_\n            {\n                LockedAmt: lockedAmt,\n                Price: price,\n                Weight: (get CurWeight LP_),\n                WeightedTVL: new_lp_TVL,\n            }\n        )))\n    (ok true)\n  )\n)\n\n\n(define-public (updateRoundStatusPassed (pool <liquidity-token>) (round uint) )\n  (let  (\n        (LP_ (contract-call? .stackswap-farming-v3-data getLPOrDefault (contract-of pool)))\n        (Group_ (contract-call? .stackswap-farming-v3-data getGroupOrDefault (get Group LP_)))\n        (GroupHistory_ (contract-call? .stackswap-farming-v3-data getGroupHistoryOrDefault (get Group LP_) round))\n        (LPHistory_ (contract-call? .stackswap-farming-v3-data getLPHistoryOrDefault (contract-of pool) round))\n        (LPHistoryEx_ (contract-call? .stackswap-farming-v3-data getLPHistoryOrDefault (contract-of pool) (- round u1)))\n        (LPHistoryNext_ (contract-call? .stackswap-farming-v3-data getLPHistoryOrDefault (contract-of pool) (+ round u1)))\n        (lockedAmtEx (- (+ (get LockedAmt LPHistoryEx_) (get NextDepositAmt LPHistoryEx_)) (get NextWithdrawAmt LPHistoryEx_)))\n        (new_lp_TVL (* (* lockedAmtEx (get CurWeight LP_)) (get Price LPHistory_)))\n    )\n    (asserts! (and (>= (getFarmingRound block-height) round) (> round u1)) (err ERR_NOT_CORRECT_ROUND))\n    (asserts! (contract-call? .stackswap-farming-v3-data isFarmAvailable  (contract-of pool)) (err ERR_POOL_NOT_FARMABLE))\n    (asserts! (> (get Weight LPHistoryEx_) u0)  (err ERR_NO_PREVIOUS_DATA))\n    (try! (is-dao contract-caller)) \n\n    (try! (contract-call? .stackswap-farming-v3-data setGroupHistory\n         (get Group LP_) round\n        {\n            GroupWeightedTVL : (- (+ (get GroupWeightedTVL GroupHistory_) new_lp_TVL) (get WeightedTVL LPHistory_)),\n            GroupRewardAmt : (get CurRewardAmt Group_)\n        }\n    ))\n    (try! (contract-call? .stackswap-farming-v3-data setLPHistory\n        (contract-of pool) round \n        (merge LPHistory_\n            {\n                LockedAmt: lockedAmtEx,\n                WeightedTVL: new_lp_TVL,\n                Weight: (if (is-eq u0 (get Weight LPHistory_)) \n                    u1\n                    (get Weight LPHistory_)\n                ),\n                NextWithdrawAmt: (if \n                    (and \n                        (not (is-eq lockedAmtEx (get LockedAmt LPHistory_))) ;; calculated from ex round should be differnt with this round\n                        (> (+ (get LockedAmt LPHistory_) (get NextDepositAmt LPHistory_)) (get LockedAmt LPHistoryNext_))\n                        (> (var-get UPDATED_ROUND) round)\n                    )\n                    (- (+ (get LockedAmt LPHistory_) (get NextDepositAmt LPHistory_)) (get LockedAmt LPHistoryNext_) )\n                    (if \n                        (and \n                            (or \n                                (not (is-eq lockedAmtEx (get LockedAmt LPHistory_))) ;; calculated from ex round should be differnt with this round\n                                (and \n                                    (is-eq u0 (get Weight LPHistory_))\n                                    (> (getFarmingRound block-height) round)\n                                )\n                            )\n                            (> (+ lockedAmtEx (get NextDepositAmt LPHistory_)) (get LockedAmt LPHistoryNext_))\n                            (<= (var-get UPDATED_ROUND) round)\n                        )\n                        (- (+ lockedAmtEx (get NextDepositAmt LPHistory_)) (get LockedAmt LPHistoryNext_) )\n                        (get NextWithdrawAmt LPHistory_)\n                    )\n                )\n            }\n        )))\n    (ok true)\n  )\n)\n\n(define-private (updateRoundStatusPassedClosure (round uint)\n  (commitmentResponse (response \n    {\n      pool: <liquidity-token>\n    }\n    uint\n  )))\n\n  (match commitmentResponse\n    commitment \n    (begin\n        (try! (updateRoundStatusPassed (get pool commitment) round))\n        commitmentResponse\n    )\n    errValue commitmentResponse\n  )\n)\n\n\n(define-public (updateRoundStatusPassedList (pool <liquidity-token>) (rounds (list 64 uint)))\n    (begin \n        (match (fold updateRoundStatusPassedClosure rounds (ok {\n                        pool: pool\n                    }))\n            okValue (ok true)\n            errValue (err errValue)\n        )\n    )\n)\n\n(define-public (claimReward (pool <liquidity-token>) (oracle <oracle-trait>))\n    (begin\n        (asserts! (not (var-get emergency_stop)) (err ERR_FARM_STOPPED))\n        (try! (updateRoundStatus pool (getFarmingRound block-height) oracle))\n        (try! (claimRewardPrivate (contract-of pool)))\n        (ok true)\n    )\n)\n\n(define-public (updateCurrentRoundStatus (pool <liquidity-token>) (oracle <oracle-trait>))\n    (begin\n        (try! (updateRoundStatus pool (getFarmingRound block-height) oracle))\n        (ok true)\n    )\n)\n\n(define-read-only (getFirstBlockOfRound (round uint)) (+ FIRST_FARMING_BLOCK (* REWARD_ROUND_LENGTH round)))\n\n(define-private (getLPPrice (pool <liquidity-token>) (oracle <oracle-trait>))\n  (let  (\n      (lp_data (try! (contract-call? pool get-lp-data)))\n      (LP_ (contract-call? .stackswap-farming-v3-data getLPOrDefault (contract-of pool)))\n      (price (unwrap-panic (contract-call? oracle fetch-price (get QuoteToken LP_))))\n    )\n    (asserts! (is-eq (contract-of oracle) (unwrap-panic (contract-call? .stackswap-dao-v5k get-qualified-name-by-name \"oracle-l\"))) (err ERR_PERMISSION_DENIED))\n    (ok\n      (if (get QuoteSide LP_)\n        (/ (/ (* (* u1000000 (get balance-x lp_data)) (get last-price price)) (get shares-total lp_data)) (get decimals price))\n        (/ (/ (* (* u1000000 (get balance-y lp_data)) (get last-price price)) (get shares-total lp_data)) (get decimals price))\n      )\n    )\n  )\n)    \n\n\n(define-private (getUserStakingRewardAtRound_ (group uint) (pool principal) (round uint) (userStartRound uint) (userStartRoundAmt uint) (userStakingLockedAmt uint))\n  (let\n    (\n        (GroupHistory_ (contract-call? .stackswap-farming-v3-data getGroupHistoryOrDefault group round))\n        (LPHistory_ (contract-call? .stackswap-farming-v3-data getLPHistoryOrDefault pool round))\n        (userTVL (* (* (get Weight LPHistory_) (get Price LPHistory_)) (if (is-eq round userStartRound)\n            userStartRoundAmt userStakingLockedAmt\n        )))\n        (current_round (getFarmingRound block-height))\n    )\n    (if (or (<= current_round round) (is-eq u0 userTVL) (< (var-get farm_end_round) round) (< round userStartRound) (is-eq u0 (get GroupWeightedTVL GroupHistory_)))\n        u0\n        (/ (* (getGroupRewardsPerRound round (get GroupRewardAmt GroupHistory_)) userTVL) (get GroupWeightedTVL GroupHistory_))\n    )\n\n  )\n)\n\n(define-read-only (getUserStakingRewardAtRound (pool principal) (user principal) (round uint))\n    (let\n        (\n            (LP_ (contract-call? .stackswap-farming-v3-data getLPOrDefault pool))\n            (LPUser_ (contract-call? .stackswap-farming-v3-data getLPUserOrDefault pool user))\n        )\n        (ok (getUserStakingRewardAtRound_ (get Group LP_) pool round (get StartRound LPUser_) (get StartRoundAmt LPUser_) (get StakingLockedAmt LPUser_)))\n    )\n)\n\n(define-private (getEntitledStakingRewardClosure (round uint)\n    (commitment \n        {   \n            group: uint,\n            pool: principal,\n            rewardSum: uint,\n            userStartRound: uint,\n            userStartRoundAmt: uint, \n            userStakingLockedAmt: uint,\n        }\n    ))\n    (merge \n        commitment\n        {\n            rewardSum: (+ (get rewardSum commitment) (getUserStakingRewardAtRound_ (get group commitment) (get pool commitment) round (get userStartRound commitment) (get userStartRoundAmt commitment) (get userStakingLockedAmt commitment)))\n        }\n    )\n)\n\n(define-read-only (getFarmingRewardFromList (user principal) (pool principal) (unclaimedList (list 64 uint)))\n    (let\n        (\n            (LP_ (contract-call? .stackswap-farming-v3-data getLPOrDefault pool))\n            (LPUser_ (contract-call? .stackswap-farming-v3-data getLPUserOrDefault pool user))\n        )\n    (ok (fold getEntitledStakingRewardClosure unclaimedList {\n            group: (get Group LP_),\n            pool: pool,\n            rewardSum: u0,  \n            userStartRound: (get StartRound LPUser_),\n            userStartRoundAmt: (get StartRoundAmt LPUser_), \n            userStakingLockedAmt: (get StakingLockedAmt LPUser_),\n        }))\n    )\n)\n\n\n\n(define-public (addPool (new-pool <liquidity-token>) (quoteSide bool) (quoteToken (string-ascii 12)) (group uint) (weight uint)) \n    (let \n        (\n            (new_pool_principal (contract-of new-pool))\n        ) \n        (try! (is-dao contract-caller)) \n        (try! (contract-call? .stackswap-farming-v3-data setLP new_pool_principal     {\n                Group: group,\n                CurWeight: weight,\n                QuoteSide: quoteSide,\n                QuoteToken: quoteToken,\n            }))\n        (ok true)))\n\n\n\n(define-public (removePool (remove-pool <liquidity-token>) (oracle <oracle-trait>)) \n  (begin\n    (try! (is-dao contract-caller))  \n    (try! (changeLPWeight remove-pool u0 oracle))\n    (ok (try! (contract-call? .stackswap-farming-v3-data deleteLP (contract-of remove-pool))))\n  )\n)\n\n(define-public (changeRewardAmount (group uint) (to_change uint))\n    (let  (\n            (current_round (getFarmingRound block-height))\n            (GroupHistory_ (contract-call? .stackswap-farming-v3-data getGroupHistoryOrDefault group current_round))\n        )\n        (try! (is-dao contract-caller))  \n        (try! (contract-call? .stackswap-farming-v3-data setGroup group\n            {\n                CurRewardAmt: to_change,\n            }\n        ))\n       (try! (contract-call? .stackswap-farming-v3-data setGroupHistory group current_round\n            (merge GroupHistory_\n                {\n                    GroupRewardAmt: to_change\n                }\n             )  \n        ))\n        (ok true)\n    )\n)\n\n\n(define-public (changeLPWeight (pool <liquidity-token>) (to_change uint) (oracle <oracle-trait>))\n    (let  (\n            (current_round (getFarmingRound block-height))\n            (LP_ (contract-call? .stackswap-farming-v3-data getLPOrDefault (contract-of pool)))\n        )\n        (try! (is-dao contract-caller))  \n\n        (try! (contract-call? .stackswap-farming-v3-data setLP \n            (contract-of pool)\n            (merge LP_\n                {\n                    CurWeight: to_change\n                })\n        ))\n        (try! (updateRoundStatus pool current_round oracle))\n        (ok true)\n    )\n)\n\n(define-public (setFarmEndRound (end_round uint)) \n  (begin\n    (try! (is-dao contract-caller))  \n    (ok (var-set farm_end_round end_round))\n  )\n)\n\n(define-read-only (getFarmEndRound)\n  (var-get farm_end_round) \n)\n\n(define-public (setFarmStartRound (start_round uint)) \n  (begin\n    (try! (is-dao contract-caller))  \n    (ok (var-set farm_start_round start_round))\n  )\n)\n\n(define-read-only (getFarmStartRound)\n  (var-get farm_start_round) \n)\n\n\n(define-public (setFarmStop (is_stop bool)) \n  (begin\n    (try! (is-dao contract-caller))  \n    (ok (var-set emergency_stop is_stop))\n  )\n)\n\n(define-read-only (getFarmStop)\n  (var-get emergency_stop) \n)\n\n\n\n(define-public (setUpdatedRound (round_ uint)) \n  (begin\n    (try! (is-dao contract-caller))  \n    (ok (var-set UPDATED_ROUND round_))\n  )\n)",
    "analysis": {
      "summary": "This contract implements a farming system for liquidity providers, allowing users to stake liquidity tokens, claim rewards, and manage pools.",
      "explanation": "This Clarity smart contract is designed for a decentralized finance (DeFi) application on the Stacks blockchain, specifically for liquidity farming. It allows users to stake liquidity provider (LP) tokens to earn rewards over time, based on the amount staked and the duration of staking. The contract includes functionality for adding/removing liquidity pools, updating reward amounts and LP weights, and handling emergency stops. Key components include error codes for handling exceptions, constants for configuration, data variables for state management, and a mix of public and private functions for interacting with the contract.\n\n- Error codes (<L3-12>) define specific error conditions such as insufficient balance or permission issues.\n- Constants (<L14-20>) configure the farming system, including the start block, reward round length, and maximum reward rounds.\n- Data variables (<L22-30>) store state information like the end round for farming, start round, and an emergency stop flag.\n- The `is-dao` function (<L32>) checks if the caller is the DAO owner, enforcing permissioned actions.\n- `getFarmingRound` (<L34>) calculates the current farming round based on the block height.\n- `getGroupRewardsPerRound` (<L36>) determines the rewards per round, adjusting for the year and ensuring a minimum reward.\n- `claimRewardInner` and `claimRewardClosure` (<L38-76>) handle the logic for claiming farming rewards, calculating the user's share based on their staked amount and the total staked in the pool.\n- The `stake` and `withdrawDirect` functions (<L78-174>) allow users to stake and withdraw their LP tokens, updating the user and pool states accordingly.\n- `updateRoundStatus` (<L176-205>) updates the round status for a pool, recalculating the total value locked (TVL) and adjusting the group's weighted TVL.\n- Administrative functions (<L207-372>) enable the DAO to manage pools, adjust reward amounts and weights, set the farming end and start rounds, and toggle the emergency stop.\n\nEach function includes checks for permissions, input validation, and state consistency, ensuring secure and expected contract behavior.",
      "tags": [
        "DeFi",
        "liquidity-farming",
        "staking",
        "protocol"
      ]
    }
  },
  {
    "rank": 13,
    "contract": "SP2VCQJGH7PHP2DJK7Z0V48AGBHQAW3R3ZW1QF4N.borrow-helper-v1-3",
    "calls": 4341,
    "source": "(use-trait ft .ft-trait.ft-trait)\n(use-trait ft-mint-trait .ft-mint-trait.ft-mint-trait)\n(use-trait a-token .a-token-trait.a-token-trait)\n(use-trait flash-loan .flash-loan-trait.flash-loan-trait)\n(use-trait oracle-trait .oracle-trait.oracle-trait)\n(use-trait redeemeable-token .redeemeable-trait-v1-2.redeemeable-trait)\n\n(define-public (supply\n  (lp <redeemeable-token>)\n  (pool-reserve principal)\n  (asset <ft>)\n  (amount uint)\n  (owner principal)\n  (referral (optional principal)))\n  (let ((asset-principal (contract-of asset)))\n    (try! (contract-call? .pool-borrow-v1-2 supply lp pool-reserve asset amount owner))\n    (print { type: \"supply-call\", payload: { key: owner, data: {\n      reserve-state: (try! (contract-call? .pool-0-reserve-v1-2 get-reserve-state asset-principal)),\n      user-reserve-state: (contract-call? .pool-0-reserve-v1-2 get-user-reserve-data owner asset-principal),\n      user-index: (contract-call? .pool-0-reserve-v1-2 get-user-index owner asset-principal),\n      user-assets: (contract-call? .pool-0-reserve-v1-2 get-user-assets owner),\n      asset: asset,\n      amount: amount,\n      new-balance: (try! (contract-call? lp get-balance owner)),\n      referral: referral,\n    }}})\n    (ok true)\n  )\n)\n\n(define-public (borrow\n  (pool-reserve principal)\n  (oracle <oracle-trait>)\n  (asset-to-borrow <ft>)\n  (lp <ft>)\n  (assets (list 100 { asset: <ft>, lp-token: <ft>, oracle: <oracle-trait> }))\n  (amount-to-be-borrowed uint)\n  (fee-calculator principal)\n  (interest-rate-mode uint)\n  (owner principal))\n  (let (\n    (asset-principal (contract-of asset-to-borrow))\n  )\n    (try! (contract-call? .pool-borrow-v1-2 borrow pool-reserve oracle asset-to-borrow lp assets amount-to-be-borrowed fee-calculator interest-rate-mode owner))\n    (print { type: \"borrow-call\", payload: { key: owner, data: {\n        reserve-state: (try! (contract-call? .pool-0-reserve-v1-2 get-reserve-state asset-principal)),\n        user-reserve-state: (contract-call? .pool-0-reserve-v1-2 get-user-reserve-data owner asset-principal),\n        user-index: (contract-call? .pool-0-reserve-v1-2 get-user-index owner asset-principal),\n        user-assets: (contract-call? .pool-0-reserve-v1-2 get-user-assets owner),\n        asset: asset-to-borrow,\n        amount: amount-to-be-borrowed,\n        new-borrow-balance: (get compounded-balance (try! (contract-call? .pool-0-reserve-v1-2 get-user-borrow-balance owner asset-to-borrow))),\n      }}})\n    (ok true)\n  )\n)\n\n(define-public (repay\n  (asset <ft>)\n  (amount-to-repay uint)\n  (on-behalf-of principal)\n  (payer principal)\n  )\n  (let (\n    (asset-principal (contract-of asset))\n    (payback-amount (try! (contract-call? .pool-borrow-v1-2 repay asset amount-to-repay on-behalf-of payer))))\n    (print { type: \"repay-call\", payload: { key: on-behalf-of, data: {\n        reserve-state: (try! (contract-call? .pool-0-reserve-v1-2 get-reserve-state asset-principal)),\n        user-reserve-state: (contract-call? .pool-0-reserve-v1-2 get-user-reserve-data on-behalf-of asset-principal),\n        user-index: (contract-call? .pool-0-reserve-v1-2 get-user-index on-behalf-of asset-principal),\n        user-assets: (contract-call? .pool-0-reserve-v1-2 get-user-assets on-behalf-of),\n        asset: asset,\n        amount: payback-amount,\n        on-behalf-of: on-behalf-of,\n        payer: payer,\n        new-borrow-balance: (get compounded-balance (try! (contract-call? .pool-0-reserve-v1-2 get-user-borrow-balance on-behalf-of asset))),\n      }}})\n    (ok true)\n  )\n)\n\n(define-public (set-user-use-reserve-as-collateral\n  (who principal)\n  (lp-token <ft>)\n  (asset <ft>)\n  (enable-as-collateral bool)\n  (oracle <oracle-trait>)\n  (assets-to-calculate (list 100 { asset: <ft>, lp-token: <ft>, oracle: <oracle-trait> })))\n  (let (\n    (asset-principal (contract-of asset))\n    (reserve-state (try! (contract-call? .pool-0-reserve-v1-2 get-reserve-state asset-principal)))\n    )\n    (try! (contract-call? .pool-borrow-v1-2 set-user-use-reserve-as-collateral who lp-token asset enable-as-collateral oracle assets-to-calculate))\n    (print { type: \"set-user-use-reserve-as-collateral-call\", payload: { key: who, data: {\n        reserve-state: (try! (contract-call? .pool-0-reserve-v1-2 get-reserve-state asset-principal)),\n        user-reserve-state: (contract-call? .pool-0-reserve-v1-2 get-user-reserve-data who asset-principal),\n        user-index: (contract-call? .pool-0-reserve-v1-2 get-user-index who asset-principal),\n        user-assets: (contract-call? .pool-0-reserve-v1-2 get-user-assets who),\n        asset: asset,\n      }}})\n    (ok true)\n  )\n)\n\n(define-public (withdraw\n  (lp <redeemeable-token>)\n  (pool-reserve principal)\n  (asset <ft>)\n  (oracle <oracle-trait>)\n  (amount uint)\n  (owner principal)\n  (assets (list 100 { asset: <ft>, lp-token: <ft-mint-trait>, oracle: <oracle-trait> }))\n  )\n  (let (\n    (asset-principal (contract-of asset))\n    (withdraw-res (try! (contract-call? .pool-borrow-v1-2 withdraw pool-reserve asset lp oracle assets amount owner)))\n    )\n    (print { type: \"withdraw-call\", payload: { key: owner, data: {\n        reserve-state: (try! (contract-call? .pool-0-reserve-v1-2 get-reserve-state asset-principal)),\n        user-reserve-state: (contract-call? .pool-0-reserve-v1-2 get-user-reserve-data owner asset-principal),\n        user-index: (contract-call? .pool-0-reserve-v1-2 get-user-index owner asset-principal),\n        user-assets: (contract-call? .pool-0-reserve-v1-2 get-user-assets owner),\n        asset: asset,\n        withdrawn-amount: withdraw-res,\n        balance: (try! (contract-call? lp get-balance owner)),\n      }}})\n    (ok true)\n  )\n)\n\n(define-public (liquidation-call\n  (assets (list 100 { asset: <ft>, lp-token: <ft>, oracle: <oracle-trait> }))\n  (collateral-lp <a-token>)\n  (collateral-to-liquidate <ft>)\n  (debt-asset <ft>)\n  (collateral-oracle <oracle-trait>)\n  (debt-oracle <oracle-trait>)\n  (liquidated-user principal)\n  (debt-amount uint)\n  (to-receive-atoken bool))\n  (let (\n    (debt-asset-principal (contract-of debt-asset))\n    (collateral-asset-principal (contract-of collateral-to-liquidate))\n    (liquidator tx-sender)\n    )\n    (try! (contract-call? .pool-borrow-v1-2 liquidation-call\n      assets\n      collateral-lp\n      collateral-to-liquidate\n      debt-asset\n      collateral-oracle\n      debt-oracle\n      liquidated-user\n      debt-amount\n      to-receive-atoken)\n    )\n    (print { type: \"liquidation-call\", payload: { key: liquidated-user, data: {\n        debt-reserve-state: (try! (contract-call? .pool-0-reserve-v1-2 get-reserve-state debt-asset-principal)),\n        collateral-reserve-state: (try! (contract-call? .pool-0-reserve-v1-2 get-reserve-state debt-asset-principal)),\n        \n        liquidator-debt-reserve-state: (contract-call? .pool-0-reserve-v1-2 get-user-reserve-data liquidator debt-asset-principal),\n        liquidator-debt-index: (contract-call? .pool-0-reserve-v1-2 get-user-index liquidator debt-asset-principal),\n        liquidator-collateral-reserve-state: (contract-call? .pool-0-reserve-v1-2 get-user-reserve-data liquidator collateral-asset-principal),\n        liquidator-collateral-index: (contract-call? .pool-0-reserve-v1-2 get-user-index liquidator collateral-asset-principal),\n        liquidator-user-assets: (contract-call? .pool-0-reserve-v1-2 get-user-assets liquidator),\n\n        liquidated-user-debt-reserve-state: (contract-call? .pool-0-reserve-v1-2 get-user-reserve-data liquidated-user debt-asset-principal),\n        liquidated-user-debt-index: (contract-call? .pool-0-reserve-v1-2 get-user-index liquidated-user debt-asset-principal),\n        liquidated-user-collateral-reserve-state: (contract-call? .pool-0-reserve-v1-2 get-user-reserve-data liquidated-user collateral-asset-principal),\n        liquidated-user-collateral-index: (contract-call? .pool-0-reserve-v1-2 get-user-index liquidated-user collateral-asset-principal),\n        liquidated-user-assets: (contract-call? .pool-0-reserve-v1-2 get-user-assets liquidated-user),\n\n        collateral-to-liquidate: collateral-to-liquidate,\n        debt-asset: debt-asset-principal,\n        debt-amount: debt-amount,\n      }}})\n    (ok u0)\n  )\n)\n",
    "analysis": {
      "summary": "This contract facilitates various financial operations such as supplying liquidity, borrowing, repaying loans, collateral management, withdrawals, and liquidation within a decentralized finance (DeFi) ecosystem.",
      "explanation": "The contract interacts with an underlying DeFi protocol to provide users with functionalities related to asset management, including supplying assets to earn interest, borrowing against collateral, repaying debts, and liquidating undercollateralized positions. Each public function interfaces with a separate, presumably external, contract to manage the state of user reserves, calculate interests, and handle assets. \n\n- The `supply` function <L1-23> allows users to supply assets to the pool in exchange for interest-bearing tokens. It records the transaction details and updates the user's balance. \n\n- The `borrow` function <L25-52> enables users to take out loans against their supplied collateral, specifying the amount and the asset they wish to borrow. It calculates the applicable fees and interest rates based on the provided parameters. \n\n- The `repay` function <L54-75> lets users repay their borrowed amounts to reduce their debt or close the loan. It updates the user's debt balance accordingly. \n\n- The `set-user-use-reserve-as-collateral` function <L77-100> allows users to toggle their supplied assets as collateral for borrowing. \n\n- The `withdraw` function <L102-124> enables users to withdraw their supplied assets from the pool, adjusting their interest-bearing token balance. \n\n- The `liquidation-call` function <L126-163> is used to liquidate positions that are undercollateralized, protecting the protocol from losses due to market volatility. It involves transferring collateral from the liquidated user to the liquidator to cover the debt. \n\nEach function makes extensive use of the `contract-call?` Clarity primitive to interact with other contracts, demonstrating a complex inter-contract communication pattern typical in DeFi platforms. The use of `try!` ensures that the contract calls must succeed, or the entire transaction is aborted, maintaining atomicity. The contract also demonstrates advanced Clarity concepts such as trait importing with `use-trait`, handling of complex data structures like lists of structs, and dynamic contract calls with `contract-of`.",
      "tags": [
        "DeFi",
        "lending",
        "borrowing",
        "liquidity",
        "collateral-management",
        "liquidation"
      ]
    }
  },
  {
    "rank": 14,
    "contract": "SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.stacking-dao-core-v3",
    "calls": 4314,
    "source": ";; @contract Core\n;; @version 3\n;;\n;; Core contract for the user to interact with (deposit, withdraw)\n\n(use-trait reserve-trait .reserve-trait-v1.reserve-trait)\n(use-trait direct-helpers-trait .direct-helpers-trait-v1.direct-helpers-trait)\n(use-trait staking-trait .staking-trait-v1.staking-trait)\n(use-trait commission-trait .commission-trait-v1.commission-trait)\n\n;;-------------------------------------\n;; Constants \n;;-------------------------------------\n\n(define-constant ERR_WITHDRAW_LOCKED u204001)\n(define-constant ERR_SHUTDOWN u204002)\n(define-constant ERR_WITHDRAW_NOT_NFT_OWNER u204003)\n(define-constant ERR_WITHDRAW_NFT_DOES_NOT_EXIST u204004)\n(define-constant ERR_GET_OWNER u204005)\n(define-constant ERR_WITHDRAW_CANCEL u204006)\n(define-constant ERR_WRONG_BPS u204007)\n\n(define-constant DENOMINATOR_6 u1000000)\n(define-constant DENOMINATOR_BPS u10000)\n\n;;-------------------------------------\n;; Variables\n;;-------------------------------------\n\n(define-data-var shutdown-deposits bool false)\n(define-data-var stack-fee uint u0) ;; in bps\n(define-data-var unstack-fee uint u0) ;; in bps\n\n;;-------------------------------------\n;; Getters \n;;-------------------------------------\n\n(define-read-only (get-shutdown-deposits)\n  (var-get shutdown-deposits)\n)\n\n(define-read-only (get-stack-fee)\n  (var-get stack-fee)\n)\n\n(define-read-only (get-unstack-fee)\n  (var-get unstack-fee)\n)\n\n(define-read-only (get-withdraw-unlock-burn-height)\n  (let (\n    (current-cycle (current-pox-reward-cycle))\n    (start-block-next-cycle (reward-cycle-to-burn-height (+ current-cycle u1)))\n    (withdraw-offset (contract-call? .data-core-v1 get-cycle-withdraw-offset))\n  )\n    (if (< burn-block-height (- start-block-next-cycle withdraw-offset))\n      ;; Can withdraw next cycle\n      (ok start-block-next-cycle)\n\n      ;; Withdraw cycle after next\n      (ok (+ start-block-next-cycle (get-reward-cycle-length)))\n    )\n  )\n)\n\n;;-------------------------------------\n;; User  \n;;-------------------------------------\n\n;; Deposit STX for stSTX\n(define-public (deposit \n  (reserve <reserve-trait>) \n  (commission-contract <commission-trait>) \n  (staking-contract <staking-trait>) \n  (direct-helpers <direct-helpers-trait>)\n  (stx-amount uint)\n  (referrer (optional principal)) \n  (pool (optional principal))\n)\n  (let (\n    (stx-fee-amount (/ (* (get-stack-fee) stx-amount) DENOMINATOR_BPS))\n    (stx-user-amount (- stx-amount stx-fee-amount))\n\n    (stx-ststx (try! (contract-call? .data-core-v1 get-stx-per-ststx reserve)))\n    (ststx-amount (/ (* stx-user-amount DENOMINATOR_6) stx-ststx))\n  )\n    (try! (contract-call? .dao check-is-enabled))\n    (try! (contract-call? .dao check-is-protocol (contract-of reserve)))\n    (try! (contract-call? .dao check-is-protocol (contract-of commission-contract)))\n    (try! (contract-call? .dao check-is-protocol (contract-of staking-contract)))\n    (try! (contract-call? .dao check-is-protocol (contract-of direct-helpers)))\n    (asserts! (not (get-shutdown-deposits)) (err ERR_SHUTDOWN))\n\n    (try! (contract-call? direct-helpers add-direct-stacking tx-sender pool stx-user-amount))\n\n    ;; User\n    (try! (stx-transfer? stx-user-amount tx-sender (contract-of reserve)))\n    (try! (contract-call? .ststx-token mint-for-protocol ststx-amount tx-sender))\n\n    ;; Fee\n    (if (> stx-fee-amount u0)\n      (begin\n        (try! (stx-transfer? stx-fee-amount tx-sender (as-contract tx-sender)))\n        (try! (as-contract (contract-call? commission-contract add-commission staking-contract stx-fee-amount)))\n      )\n      u0\n    )\n\n    (print { action: \"deposit\", data: { stacker: tx-sender, stx-amount: stx-amount, stxstx-amount: ststx-amount, referrer: referrer, pool: pool, block-height: block-height } })\n    (ok ststx-amount)\n  )\n)\n\n;; Initiate withdrawal, given stSTX amount. Can update amount as long as cycle not started.\n;; The stSTX tokens are transferred to this contract, and are burned on the actual withdrawal.\n;; An NFT is minted for the user as a token representation of the withdrawal.\n(define-public (init-withdraw \n  (reserve <reserve-trait>) \n  (direct-helpers <direct-helpers-trait>)\n  (ststx-amount uint)\n)\n  (let (\n    (sender tx-sender)\n    (unlock-burn-height (unwrap-panic (get-withdraw-unlock-burn-height)))\n\n    (stx-ststx (try! (contract-call? .data-core-v1 get-stx-per-ststx reserve)))\n    (stx-amount (/ (* ststx-amount stx-ststx) DENOMINATOR_6))\n\n    (nft-id (unwrap-panic (contract-call? .ststx-withdraw-nft-v2 get-last-token-id)))\n  )\n    (try! (contract-call? .dao check-is-enabled))\n    (try! (contract-call? .dao check-is-protocol (contract-of reserve)))\n    (try! (contract-call? .dao check-is-protocol (contract-of direct-helpers)))\n\n    (try! (contract-call? .data-core-v1 set-withdrawals-by-nft nft-id stx-amount ststx-amount unlock-burn-height))\n    \n    (try! (contract-call? direct-helpers subtract-direct-stacking tx-sender stx-amount))\n\n    ;; Transfer stSTX token to contract, only burn on actual withdraw\n    (try! (as-contract (contract-call? reserve lock-stx-for-withdrawal stx-amount)))\n    (try! (contract-call? .ststx-token transfer ststx-amount tx-sender (as-contract tx-sender) none))\n    (try! (as-contract (contract-call? .ststx-withdraw-nft-v2 mint-for-protocol sender)))\n\n    (print { action: \"init-withdraw\", data: { stacker: tx-sender, nft-id: nft-id, ststx-amount: ststx-amount, stx-amount: stx-amount, block-height: block-height } })\n    (ok nft-id)\n  )\n)\n\n;; Actual withdrawal for given NFT. \n;; The NFT and stSTX tokens will be burned and the user will receive STX tokens.\n(define-public (withdraw \n  (reserve <reserve-trait>)\n  (commission-contract <commission-trait>) \n  (staking-contract <staking-trait>) \n  (nft-id uint)\n)\n  (let (\n    (receiver tx-sender)\n\n    (withdrawal-entry (contract-call? .data-core-v1 get-withdrawals-by-nft nft-id))\n    (unlock-burn-height (get unlock-burn-height withdrawal-entry))\n    (stx-amount (get stx-amount withdrawal-entry))\n    (ststx-amount (get ststx-amount withdrawal-entry))\n\n    (nft-owner (unwrap! (contract-call? .ststx-withdraw-nft-v2 get-owner nft-id) (err ERR_GET_OWNER)))\n\n    (stx-fee-amount (/ (* (get-unstack-fee) stx-amount) DENOMINATOR_BPS))\n    (stx-user-amount (- stx-amount stx-fee-amount))\n  )\n    (try! (contract-call? .dao check-is-enabled))\n    (try! (contract-call? .dao check-is-protocol (contract-of reserve)))\n    (try! (contract-call? .dao check-is-protocol (contract-of commission-contract)))\n    (try! (contract-call? .dao check-is-protocol (contract-of staking-contract)))\n    (asserts! (is-some nft-owner) (err ERR_WITHDRAW_NFT_DOES_NOT_EXIST))\n    (asserts! (is-eq (unwrap! nft-owner (err ERR_GET_OWNER)) tx-sender) (err ERR_WITHDRAW_NOT_NFT_OWNER))\n    (asserts! (>= burn-block-height unlock-burn-height) (err ERR_WITHDRAW_LOCKED))\n\n    (try! (contract-call? .data-core-v1 delete-withdrawals-by-nft nft-id))\n\n    ;; STX to user, burn stSTX\n    (try! (as-contract (contract-call? reserve request-stx-for-withdrawal stx-user-amount receiver)))\n    (try! (contract-call? .ststx-token burn-for-protocol (get ststx-amount withdrawal-entry) (as-contract tx-sender)))\n    (try! (as-contract (contract-call? .ststx-withdraw-nft-v2 burn-for-protocol nft-id)))\n\n    ;; Fee\n    (if (> stx-fee-amount u0)\n      (begin\n        (try! (as-contract (contract-call? reserve request-stx-for-withdrawal stx-fee-amount tx-sender)))\n        (try! (as-contract (contract-call? commission-contract add-commission staking-contract stx-fee-amount)))\n      )\n      u0\n    )\n\n    (print { action: \"withdraw\", data: { stacker: tx-sender, ststx-amount: ststx-amount, stx-amount: stx-amount, block-height: block-height } })\n    (ok { stx-user-amount: stx-user-amount, stx-fee-amount: stx-fee-amount})\n  )\n)\n\n;;-------------------------------------\n;; Admin\n;;-------------------------------------\n\n(define-public (set-shutdown-deposits (shutdown bool))\n  (begin\n    (try! (contract-call? .dao check-is-protocol contract-caller))\n    \n    (var-set shutdown-deposits shutdown)\n    (ok true)\n  )\n)\n\n(define-public (set-stack-fee (fee uint))\n  (begin\n    (try! (contract-call? .dao check-is-protocol contract-caller))\n    (asserts! (<= fee DENOMINATOR_BPS) (err ERR_WRONG_BPS))\n\n    (var-set stack-fee fee)\n    (ok true)\n  )\n)\n\n(define-public (set-unstack-fee (fee uint))\n  (begin\n    (try! (contract-call? .dao check-is-protocol contract-caller))\n    (asserts! (<= fee DENOMINATOR_BPS) (err ERR_WRONG_BPS))\n\n    (var-set unstack-fee fee)\n    (ok true)\n  )\n)\n\n;;-------------------------------------\n;; PoX Helpers\n;;-------------------------------------\n\n(define-read-only (current-pox-reward-cycle) \n  (contract-call? 'SP000000000000000000002Q6VF78.pox-4 current-pox-reward-cycle)\n)\n\n(define-read-only (reward-cycle-to-burn-height (cycle-id uint)) \n  (contract-call? 'SP000000000000000000002Q6VF78.pox-4 reward-cycle-to-burn-height cycle-id)\n)\n\n(define-read-only (get-reward-cycle-length)\n  (get reward-cycle-length (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-pox-info)))\n)\n\n\n;;-------------------------------------\n;; Migrate stSTX from V1\n;;-------------------------------------\n\n(define-public (migrate-ststx)\n  (let (\n    (balance-v1 (unwrap-panic (contract-call? .ststx-token get-balance .stacking-dao-core-v1)))\n  )\n    (try! (contract-call? .dao check-is-protocol contract-caller))\n    \n    (try! (contract-call? .ststx-token burn-for-protocol balance-v1 .stacking-dao-core-v1))\n    (try! (contract-call? .ststx-token mint-for-protocol balance-v1 (as-contract tx-sender)))\n\n    (ok true)\n  )\n)\n",
    "analysis": {
      "summary": "This contract facilitates deposit and withdrawal operations for users, handling STX and stSTX tokens with fee management and NFT-based withdrawal tracking.",
      "explanation": "This Clarity smart contract provides a comprehensive system for users to deposit STX tokens to receive stSTX tokens, initiate withdrawals of STX tokens by burning stSTX tokens, and manage fees associated with these operations. It integrates with multiple external contracts for various functionalities, including staking, commission handling, and direct helpers for stacking operations. Key features include the ability to shut down deposits, set fees for deposit and withdrawal operations, and a migration function for stSTX tokens from a previous version of the contract.\n\n- Constants <L9-16> define error codes and denominators for fee calculations.\n- Variables <L19-23> include flags for shutting down deposits and fee rates.\n- Getters <L26-45> allow reading contract state, such as shutdown status and fees.\n- The `deposit` function <L48-83> enables users to deposit STX in exchange for stSTX tokens, applying a fee and interacting with other contracts for direct stacking and commission management.\n- The `init-withdraw` function <L86-118> allows users to initiate a withdrawal by locking stSTX tokens and minting an NFT as a token representation of the withdrawal, setting up for a future actual withdrawal.\n- The `withdraw` function <L121-163> handles the actual withdrawal process, where the NFT and stSTX tokens are burned in exchange for STX tokens, minus a withdrawal fee.\n- Admin functions <L166-197> enable protocol administrators to set the shutdown status and adjust fee rates.\n- PoX Helpers <L200-220> are utility functions for interacting with the PoX contract, used for reward cycle calculations.\n- The `migrate-ststx` function <L223-234> provides a mechanism for migrating stSTX tokens from a previous contract version to the current one.",
      "tags": [
        "DeFi",
        "staking",
        "NFT",
        "token",
        "fee-management",
        "protocol"
      ]
    }
  },
  {
    "rank": 15,
    "contract": "SP001SFSMC2ZY76PD4M68P3WGX154XCH7NE3TYMX.pox4-pools",
    "calls": 4263,
    "source": ";; @contract pox-4 wrapper contract for stacking pools\n;; @version 3\n;; Changelog: fix decrease error, add stacking stats for this pool, add metadata for users\n\n;; User calls delegate-stx at first and provides a btc address to receive rewards.\n;; Pool operators lock the user's delegated STX tokens according to their rules.\n;; Some pools require a minimum amount. Most pool operators lock the delegated STX\n;; for the next cycle only.\n;; Users can delegate more stx by calling delegate-stx with a higher amount for the next cycle.\n\n;;\n;; Data storage\n;;\n(define-constant err-not-found (err u404))\n(define-constant err-non-positive-amount (err u500))\n(define-constant err-no-stacker-info (err u501))\n(define-constant err-no-user-info (err u502))\n(define-constant err-decrease-forbidden (err u503))\n;; Error code 3 is used by pox-4 contract for already stacking errors\n(define-constant err-already-stacking (err u603))\n;; Error code 9 is used by pox-4 contract for stacking-permission-denied\n(define-constant err-stacking-permission-denied (err u609))\n\n(define-constant pox-info (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-pox-info)))\n\n;; Allowed contract-callers handling a user's stacking activity.\n(define-map allowance-contract-callers\n  { sender: principal, contract-caller: principal}\n  { until-burn-ht: (optional uint)})\n\n;; Keep track of the last delegation\n;; pox-addr: raw bytes of user's account to receive rewards, can be encoded as btc or stx address\n;; cycle: cycle id of time of delegation\n(define-map user-data principal {pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint})\n\n;; more metadata for each stacker\n(define-map metadata {stacker: principal, key: (string-ascii 8)} (string-ascii 80))\n\n;; Keep track of stackers grouped by pool and reward-cycle id\n;; \"grouped-stackers-len\" returns the number of lists for the given group\n;; \"grouped-stackers\" returns the actual list\n(define-map grouped-stackers {pool: principal, reward-cycle: uint, index: uint}\n  (list 30 {lock-amount: uint, stacker: principal, unlock-burn-height: uint, pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint}))\n(define-map grouped-stackers-len {pool: principal, reward-cycle: uint} uint)\n\n;; Keep track of total stxs stacked grouped by pool and reward-cycle id\n(define-map grouped-totals {pool: principal, reward-cycle: uint} uint)\n\n;;\n;; Helper functions for \"grouped-stackers\" map\n;;\n\n(define-private (merge-details (stacker {lock-amount: uint, stacker: principal, unlock-burn-height: uint}) (user {pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint}))\n  {lock-amount: (get lock-amount stacker),\n   stacker: (get stacker stacker),\n   unlock-burn-height: (get unlock-burn-height stacker),\n   pox-addr: (get pox-addr user),\n   cycle: (get cycle user)})\n\n(define-private (insert-in-new-list (pool principal) (reward-cycle uint) (last-index uint) (details {lock-amount: uint, stacker: principal, unlock-burn-height: uint, pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint}))\n  (let ((index (+ last-index u1)))\n    (map-insert grouped-stackers (print {pool: pool, reward-cycle: reward-cycle, index: index}) (list details))\n    (map-set grouped-stackers-len {pool: pool, reward-cycle: reward-cycle} index)))\n\n(define-private (map-set-details (pool principal) (details {lock-amount: uint, stacker: principal, unlock-burn-height: uint, pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint}))\n  (let ((reward-cycle (+ (current-pox-reward-cycle) u1))\n        (last-index (get-status-lists-last-index pool reward-cycle))\n        (stacker-key {pool: pool, reward-cycle: reward-cycle, index: last-index}))\n    (match (map-get? grouped-stackers stacker-key)\n      stackers (match (as-max-len? (append stackers details) u30)\n                 updated-list (map-set grouped-stackers stacker-key updated-list)\n                 (insert-in-new-list pool reward-cycle last-index details))\n      (map-insert grouped-stackers stacker-key (list details)))\n    (map-set grouped-totals {pool: pool, reward-cycle: reward-cycle} \n      (+ (get-total pool reward-cycle) (get lock-amount details)))))\n\n;;\n;; Helper functions for pox-4 calls\n;;\n\n;; Get stacker info\n(define-private (pox-get-stacker-info (user principal))\n  (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-stacker-info user))\n\n;; Revokes and delegates stx\n(define-private (delegate-stx-inner (amount-ustx uint) (delegate-to principal) (until-burn-ht (optional uint)))\n  (let ((result-revoke\n            ;; Calls revoke and ignores result\n          (contract-call? 'SP000000000000000000002Q6VF78.pox-4 revoke-delegate-stx)))\n    ;; Calls delegate-stx, converts any error to uint\n    (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stx amount-ustx delegate-to until-burn-ht none)\n      success (ok success)\n      error (err (* u1000 (to-uint error))))))\n\n\n;; Calls pox-4 delegate-stack-extend and delegate-stack-increase.\n;; parameter amount-ustx must be lower or equal the stx balance and the delegated amount\n;; returns the new unlock height and the new total locked stx amount\n(define-private (delegate-stack-extend-increase (user principal)\n                  (amount-ustx uint)\n                  (pox-address {hashbytes: (buff 32), version: (buff 1)}))\n  (let ((status (stx-account user))\n        (locked-amount (get locked status)))\n    (asserts! (>= amount-ustx locked-amount) err-decrease-forbidden)\n    (match (maybe-extend-for-next-cycle user pox-address status)\n      success-extend (let ((unlock-burn-height (get unlock-burn-height success-extend)))\n            (if (is-eq amount-ustx locked-amount)\n                ;; do not increase\n                (begin\n                  (asserts! (> unlock-burn-height (get unlock-height status)) err-already-stacking)\n                  (ok {lock-amount: (get locked status),\n                      stacker: user,\n                      unlock-burn-height: unlock-burn-height}))\n                ;; else increase\n                (let ((increase-by (- amount-ustx locked-amount)))\n                  (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-increase\n                          user pox-address increase-by)\n                    success-increase (ok {lock-amount: increase-by,\n                                          stacker: user,\n                                          unlock-burn-height: unlock-burn-height})\n                    error-increase (err (* u1000000000 (to-uint error-increase)))))))\n      error (err (* u1000000 (to-uint error))))))\n\n;; Tries to extend the user's locking to the next cycle\n;; if not yet locked until the end of the next cycle.\n(define-private (maybe-extend-for-next-cycle\n                  (user principal)\n                  (pox-address {hashbytes: (buff 32), version: (buff 1)})\n                  (status {locked: uint, unlocked: uint, unlock-height: uint})\n                )\n  (let ((current-cycle (current-pox-reward-cycle))\n        (unlock-height (get unlock-height status)))\n    (if (not-locked-for-cycle unlock-height (+ u1 current-cycle))\n      (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-extend\n             user pox-address u1)\n      (ok {stacker: user, unlock-burn-height: unlock-height}))))\n\n;; Stacks given amount of delegated stx tokens.\n;; Stores the result in \"grouped-stackers\".\n(define-private (delegate-stack-stx-fold (details {user: principal, amount-ustx: uint})\n                  (context {pox-address: {hashbytes: (buff 32), version: (buff 1)},\n                            start-burn-ht: uint,\n                            result: (list 30 (response {lock-amount: uint, stacker: principal, unlock-burn-height: uint} uint))}))\n  (let ((user (get user details))\n        (user-account (stx-account user))\n        (amount-ustx (min (get amount-ustx details) (+ (get locked user-account) (get unlocked user-account)))))\n    (pox-delegate-stack-stx-amount user amount-ustx context)))\n\n;; Stacks maximal amount of delegated stx tokens.\n;; Stores the result in \"grouped-stackers\".\n(define-private (delegate-stack-stx-simple-fold (user principal)\n                  (context {pox-address: {hashbytes: (buff 32), version: (buff 1)},\n                            start-burn-ht: uint,\n                            result: (list 30 (response {lock-amount: uint, stacker: principal, unlock-burn-height: uint} uint))}))\n  (let ((buffer-amount u1000000)\n        (user-account (stx-account user))\n        (allowed-amount (min (get-delegated-amount user) (+ (get locked user-account) (get unlocked user-account))))\n        ;; Amount to lock must be leq allowed-amount and geq locked amount.\n        ;; Increase the locked amount if possible, but leave a buffer for revoke tx fees if possible.\n        ;; Decreasing the locked amount requires a cool down cycle.\n        (amount-ustx (if (> allowed-amount buffer-amount)\n                            (max (get locked user-account) (- allowed-amount buffer-amount))\n                            allowed-amount)))\n    (pox-delegate-stack-stx-amount user amount-ustx context)))\n\n;; Stacks the given amount of delegated stx tokens\n(define-private (pox-delegate-stack-stx-amount (user principal) (amount-ustx uint)\n                  (context {pox-address: {hashbytes: (buff 32), version: (buff 1)},\n                            start-burn-ht: uint,\n                            result: (list 30 (response {lock-amount: uint, stacker: principal, unlock-burn-height: uint} uint))}))\n  (let ((pox-address (get pox-address context))\n        (start-burn-ht (get start-burn-ht context))\n        (stack-result\n          (if (> amount-ustx u0)\n            (match (map-get? user-data user)\n              user-details\n                ;; Call delegate-stack-stx\n                ;; On failure, call delegate-stack-extend and increase\n                (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-stx\n                        user amount-ustx\n                        pox-address start-burn-ht u1)\n                  stacker-details  (begin\n                                    ;; Store result on success\n                                    (map-set-details tx-sender (merge-details stacker-details user-details))\n                                    (ok stacker-details))\n                  error (if (is-eq error 3) ;; Check whether user is already stacked\n                          (match (delegate-stack-extend-increase user amount-ustx pox-address)\n                            stacker-details-2 (begin\n                                    ;; Store result on success\n                                    (map-set-details tx-sender (merge-details stacker-details-2 user-details))\n                                    (ok stacker-details-2))\n                            error-extend-increase (err error-extend-increase))\n                          (err (* u1000 (to-uint error)))))\n              err-not-found)\n            err-non-positive-amount)))\n        ;; Return a tuple even if delegate-stack-stx call failed\n    {pox-address: pox-address,\n     start-burn-ht: start-burn-ht,\n     result: (unwrap-panic (as-max-len? (append (get result context) stack-result) u30))}))\n;;\n;; Public functions\n;;\n\n;; @desc User calls this function to delegate the stacking rights to a pool.\n;; Users can revoke delegation and stx tokens will unlock at the end of the locking period.\n;;\n;; @param amount-ustx; amount to delegate. Can be higher than current stx balance.\n;; @param delegate-to; the pool's Stacks address.\n;; @param until-burn-ht; optional maximal duration of the pool membership. Can be none for undetermined membership.\n;; @param pool-pox-addr; the optional pool's bitcoin reward address. Can be none, so that the pool operator can choose different addresses.\n;; @param user-pox-addr; raw bytes of user's address that should be used for payout of rewards by pool admins.\n(define-public (delegate-stx (amount-ustx uint) (delegate-to principal) (until-burn-ht (optional uint))\n                 (pool-pox-addr (optional {hashbytes: (buff 32), version: (buff 1)}))\n                 (user-pox-addr {hashbytes: (buff 32), version: (buff 1)})\n                 (user-metadata (optional {keys: (list 30 (string-ascii 8)), values: (list 30 (string-ascii 80))})))\n  (begin\n    ;; Must be called directly by the tx-sender or by an allowed contract-caller\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (match user-metadata\n      md (map set-metadata-internal (get keys md) (get values md))\n      (list true))\n    (map-set user-data tx-sender\n      {pox-addr: user-pox-addr, cycle: (current-pox-reward-cycle)})\n    (delegate-stx-inner amount-ustx delegate-to until-burn-ht)))\n\n;; @desc Pool admins call this function to lock stacks of their pool members in batches for 1 cycle.\n;; @param users; list of users with amounts to lock.\n;; @param pox-address; the pool's bitcoin reward address.\n;; @param start-burn-ht; a future bitcoin height of the current cycle.\n(define-public (delegate-stack-stx (users (list 30 {user: principal, amount-ustx: uint}))\n                 (pox-address { version: (buff 1), hashbytes: (buff 32)})\n                 (start-burn-ht uint))\n  (begin\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (ok (get result\n          (fold delegate-stack-stx-fold users {start-burn-ht: start-burn-ht, pox-address: pox-address, result: (list)})))))\n\n;; @desc Pool admins call this function to lock stacks of their pool members in batches for a lock period of 1 cycle.\n;; The locking amount is determined from the delegated amount and the users balances.\n;; @param users; list of current pool members.\n;; @param pox-address; the pool's bitcoin reward address.\n;; @param start-burn-ht; a future bitcoin height of the current cycle.\n(define-public (delegate-stack-stx-simple (users (list 30 principal))\n                 (pox-address { version: (buff 1), hashbytes: (buff 32)})\n                 (start-burn-ht uint))\n  (begin\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (ok (get result\n          (fold delegate-stack-stx-simple-fold users {start-burn-ht: start-burn-ht, pox-address: pox-address, result: (list)})))))\n;;\n;; Read-only functions\n;;\n\n\n;; What's the reward cycle number of the burnchain block height?\n;; Will runtime-abort if height is less than the first burnchain block (this is intentional)\n(define-read-only (burn-height-to-reward-cycle (height uint))\n    (/ (- height (get first-burnchain-block-height pox-info)) (get reward-cycle-length pox-info)))\n\n;; What's the block height at the start of a given reward cycle?\n(define-read-only (reward-cycle-to-burn-height (cycle uint))\n    (+ (get first-burnchain-block-height pox-info) (* cycle (get reward-cycle-length pox-info))))\n\n;; What's the current PoX reward cycle?\n(define-read-only (current-pox-reward-cycle)\n    (burn-height-to-reward-cycle burn-block-height))\n\n\n;; Returns the user's stacking details from pox contract,\n;; the user's delegation details from \"user-data\" and the\n;; total locked stacks for the given pool and cycle-id.\n(define-read-only (get-status (pool principal) (user principal) (cycle-id uint))\n  (let ((stacker-info (unwrap! (pox-get-stacker-info user) err-no-stacker-info)))\n    (ok {stacker-info: stacker-info,\n         user-info: (unwrap! (map-get? user-data user) err-no-user-info),\n         total: (get-total pool cycle-id)})))\n\n;; Returns the number of lists of stackers that have locked their stx for the given pool and cycle.\n(define-read-only (get-status-lists-last-index (pool principal) (reward-cycle uint))\n  (default-to u0 (map-get? grouped-stackers-len {pool: pool, reward-cycle: reward-cycle})))\n\n;; Returns a list of stackers that have locked their stx for the given pool and cycle.\n;; index: must be smaller than get-status-lists-last-index\n(define-read-only (get-status-list (pool principal) (reward-cycle uint) (index uint))\n  {total: (get-total pool reward-cycle),\n   status-list: (map-get? grouped-stackers {pool: pool, reward-cycle: reward-cycle, index: index})})\n\n;; Returns currently delegated amount for a given user\n(define-read-only (get-delegated-amount (user principal))\n  (default-to u0 (get amount-ustx (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-delegation-info user))))\n\n;; Returns information about last delegation call for a given user\n;; This information can be obsolete due to a normal revoke call\n(define-read-only (get-user-data (user principal))\n  (map-get? user-data user))\n\n;; Returns locked and unlocked amount for given user\n(define-read-only (get-stx-account (user principal))\n  (stx-account user))\n\n;; Returns total stacks locked by given pool, reward-cycle.\n;; The total for a given reward cycle needs to be calculated off-chain\n;; depending on the pool's policy.\n(define-read-only (get-total (pool principal) (reward-cycle uint))\n  (default-to u0 (map-get? grouped-totals {pool: pool, reward-cycle: reward-cycle})))\n\n;; Returns true if the given burn chain height is smaller\n;; than the start of the given reward cycle id.\n(define-read-only (not-locked-for-cycle (unlock-burn-height uint) (cycle uint))\n  (<= unlock-burn-height (reward-cycle-to-burn-height cycle)))\n\n;;\n;; Functions to handle metadata\n;;\n\n(define-read-only (get-metadata (key {stacker: principal, key: (string-ascii 8)}))\n  (map-get? metadata key))\n\n(define-read-only (get-metadata-many (keys (list 30 {stacker: principal, key: (string-ascii 8)})))\n  (map get-metadata keys))\n\n(define-public (set-metadata (key (string-ascii 8)) (value (string-ascii 80)))\n  (begin\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (ok (set-metadata-internal key value))))\n\n(define-public (set-metadata-many (keys (list 30 (string-ascii 8))) (values (list 30 (string-ascii 80))))\n  (begin\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (ok (map set-metadata-internal keys values))))\n\n(define-private (set-metadata-internal (key (string-ascii 8)) (value (string-ascii 80)))\n  (map-set metadata {stacker: tx-sender, key: key} value))\n\n;; Returns minimum\n(define-private (min (amount-1 uint) (amount-2 uint))\n  (if (< amount-1 amount-2)\n    amount-1\n    amount-2))\n\n;; Returns maximum\n(define-private (max (amount-1 uint) (amount-2 uint))\n  (if (> amount-1 amount-2)\n    amount-1\n    amount-2))\n\n;;\n;; Functions about allowance of delegation/stacking contract calls\n;;\n\n;; Give a contract-caller authorization to call stacking methods\n;;  normally, stacking methods may only be invoked by _direct_ transactions\n;;   (i.e., the tx-sender issues a direct contract-call to the stacking methods)\n;;  by issuing an allowance, the tx-sender may call through the allowed contract\n(define-public (allow-contract-caller (caller principal) (until-burn-ht (optional uint)))\n  (begin\n    (asserts! (is-eq tx-sender contract-caller) err-stacking-permission-denied)\n    (ok (map-set allowance-contract-callers\n          { sender: tx-sender, contract-caller: caller}\n          { until-burn-ht: until-burn-ht}))))\n\n;; Revokes contract-caller authorization to call stacking methods\n(define-public (disallow-contract-caller (caller principal))\n  (begin\n    (asserts! (is-eq tx-sender contract-caller) err-stacking-permission-denied)\n    (ok (map-delete allowance-contract-callers { sender: tx-sender, contract-caller: caller}))))\n\n;; Verifies that the contract caller has allowance to handle the tx-sender's stacking\n(define-read-only (check-caller-allowed)\n  (or (is-eq tx-sender contract-caller)\n    (let ((caller-allowed\n                 ;; if not in the caller map, return false\n            (unwrap! (map-get? allowance-contract-callers\n                       { sender: tx-sender, contract-caller: contract-caller})\n              false))\n          (expires-at\n               ;; if until-burn-ht not set, then return true (because no expiry)\n            (unwrap! (get until-burn-ht caller-allowed) true)))\n          ;; is the caller allowance still valid\n      (< burn-block-height expires-at))))\n\n;; Returns the burn height at which a particular contract is allowed to stack for a particular principal.\n;; The result is (some (some X)) if X is the burn height at which the allowance terminates.\n;; The result is (some none) if the caller is allowed indefinitely.\n;; The result is none if there is no allowance record.\n(define-read-only (get-allowance-contract-callers (sender principal) (calling-contract principal))\n  (map-get? allowance-contract-callers { sender: sender, contract-caller: calling-contract}))\n",
    "analysis": {
      "summary": "This contract acts as a wrapper for Stacks (STX) token stacking, enabling users to delegate their stacking rights to a pool, which can then stack on behalf of users and distribute rewards.",
      "explanation": "The contract provides mechanisms for users to delegate STX tokens for stacking within a pool, allowing pool operators to lock these tokens according to the PoX (Proof of Transfer) consensus rules of the Stacks blockchain. It includes error handling, data storage for user and pool information, and functions for delegating, extending, or increasing the amount of STX locked for stacking. Key functions allow for the delegation of STX, setting metadata for users, and managing the stacking process by pool administrators. It interacts with the official PoX contract to lock tokens and participate in stacking, aiming to earn Bitcoin rewards for users. The contract ensures that only authorized users or contracts can perform certain actions, like delegating STX or modifying metadata, enhancing security and flexibility for stacking operations.",
      "tags": [
        "DeFi",
        "Stacking",
        "PoX",
        "STX",
        "Rewards"
      ]
    }
  },
  {
    "rank": 16,
    "contract": "SP1NAZ59R1ED0V6NH9N0EQBEB3MKT48CQCMKC5Q41.swap-router-v23",
    "calls": 3512,
    "source": "(use-trait et 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (impl-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (define-constant E8 u100000000) (define-read-only (s2e (n uint)) (* n u100))(define-public (i1 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1)) (ok u0)))(define-public (o1 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l in u1)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0)))(define-public (i2 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda u5000000 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0)))(define-public (o2 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda u5000000 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (ok u0)))(define-public (i3 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0)))(define-public (o3 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u0)) (ok u0)))(define-public (i4 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnyc E8 (s2e in) none)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kielx1jn7 (unwrap-panic (contract-call? 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 get-balance tx-sender)) u1)) (ok u0)))(define-public (o4 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kielx1jn7 in u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnyc E8 (s2e (unwrap-panic (contract-call? 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 get-balance tx-sender))) none)) (ok u0)))(define-public (i5 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wdiko E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0)))(define-public (o5 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wdiko E8 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0)))(define-public (i6 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0)))(define-public (o6 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda E8 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0)))(define-public (i7 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u1)) (ok u0)))(define-public (o7 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c in u1)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0)))(define-public (i8 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw in u1)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0)))(define-public (o8 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1)) (ok u0)))(define-public (i9 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0)))(define-public (o9 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1 )) (ok u0)))(define-public (i10 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (ok u0)))(define-public (o10 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0)))(define-public (i11 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0)))(define-public (o11 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0)))(define-public (i12 (in uint)) (begin (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc in u1)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u22 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u21 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token get-balance tx-sender)) u1 )) (ok u0)))(define-public (o12 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u21 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u22 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1)) (ok u0)))(define-public (i13 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4 swap-y-for-x 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-4 (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2 (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0)))(define-public (o13 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-y-for-x 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2 (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-4 (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0)))(define-public (i14 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wpepe E8 (* u100000 (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0)))(define-public (o14 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wpepe E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz get-balance tx-sender)) u1 )) (ok u0)))(define-public (i15 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc u5000000 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (ok u0)))(define-public (o15 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc u5000000 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (ok u0)))(define-public (i16 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (ok u0)))(define-public (o16 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (ok u0)))(define-public (i17 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wleo E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u28 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token get-balance tx-sender)) u1 )) (ok u0)))(define-public (o17 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u28 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wleo E8 (s2e (unwrap-panic (contract-call? 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0)))(define-public (i18 (in uint)) (begin (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc in u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-waeusdc E8 (s2e (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender))) none)) (ok u0)))(define-public (o18 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-waeusdc E8 (s2e in) none)) (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1)) (ok u0)))(define-public (i19 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1)) (ok u0)))(define-public (o19 (in uint)) (begin (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc in u1)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0)))(define-public (i20 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.token-wsbtc u5000000 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.token-wsbtc E8 (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance tx-sender)) none)) (ok u0)))(define-public (o20 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.token-wsbtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.token-wsbtc u5000000 (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (ok u0)))(define-public (i21 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wgoat E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u36 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx get-balance tx-sender)) u1 )) (ok u0)))(define-public (o21 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u36 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wgoat E8 (s2e (unwrap-panic (contract-call? 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0)))(define-public (i22 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnot E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u16 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope get-balance tx-sender)) u1 )) (ok u0)))(define-public (o22 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u16 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnot E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnot get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0)))(define-public (i23 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-v1_0_0-0003 swap 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-v1_0_0-0003 in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2SF8P7AKN8NYHD57T96C51RRV9M0GKRN02BNHD2.token-wflat E8 (s2e (unwrap-panic (contract-call? 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity get-balance tx-sender))) none)) (ok u0)))(define-public (o23 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2SF8P7AKN8NYHD57T96C51RRV9M0GKRN02BNHD2.token-wflat E8 (s2e in) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-v1_0_0-0003 swap 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-v1_0_0-0003 (unwrap-panic (contract-call? 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity get-balance tx-sender)) u1 )) (ok u0)))(define-public (i24 (in uint)) (begin (try! (contract-call? 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.univ2-pool-v1_0_0-0070 swap 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.univ2-fees-v1_0_0-0070 in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.token-wsbtc E8 (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance tx-sender)) none)) (ok u0)))(define-public (o24 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.token-wsbtc E8 (s2e in) none)) (try! (contract-call? 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.univ2-pool-v1_0_0-0070 swap 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.univ2-fees-v1_0_0-0070 (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance tx-sender)) u1 )) (ok u0)))(define-public (i25 (in uint)) (begin (try! (contract-call? 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.univ2-pool-v1_0_0-0070 swap 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.univ2-fees-v1_0_0-0070 in u1 )) (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 swap-x-for-y 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-sbtc-stx-v-1-1 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-2 (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance tx-sender)) u1)) (ok u0)))(define-public (o25 (in uint)) (begin (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 swap-y-for-x 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-sbtc-stx-v-1-1 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-2 in u1)) (try! (contract-call? 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.univ2-pool-v1_0_0-0070 swap 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.univ2-fees-v1_0_0-0070 (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance tx-sender)) u1 )) (ok u0)))(define-public (callback (p principal) (bp (buff 2048))) (let ((enc (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? bp u0 u16)) u16)))) (bh (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? bp u16 u20)) u4)))) (addr (get hashbytes (unwrap-panic (element-at? (get addrs (unwrap-panic (get-burn-block-info? pox-addrs bh))) u0)))) (di (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? addr u0 u4)) u4)))) (do (mod enc (+ di u4280000000 b0))) (c (mod do u100)) (in (* do u100)) (ts (if (< c u30) (if (<= c u12) (list (if (is-eq c u1) (i1 in) (err u0)) (if (is-eq c u2) (i2 in) (err u0)) (if (is-eq c u3) (i3 in) (err u0)) (if (is-eq c u4) (i4 in) (err u0)) (if (is-eq c u5) (i5 in) (err u0)) (if (is-eq c u6) (i6 in) (err u0)) (if (is-eq c u7) (i7 in) (err u0)) (if (is-eq c u8) (i8 in) (err u0)) (if (is-eq c u9) (i9 in) (err u0)) (if (is-eq c u10) (i10 in) (err u0)) (if (is-eq c u11) (i11 in) (err u0)) (if (is-eq c u12) (i12 in) (err u0))) (list (if (is-eq c u13) (i13 in) (err u0)) (if (is-eq c u14) (i14 in) (err u0)) (if (is-eq c u15) (i15 in) (err u0)) (if (is-eq c u16) (i16 in) (err u0)) (if (is-eq c u17) (i17 in) (err u0)) (if (is-eq c u18) (i18 in) (err u0)) (if (is-eq c u19) (i19 in) (err u0)) (if (is-eq c u20) (i20 in) (err u0)) (if (is-eq c u21) (i21 in) (err u0)) (if (is-eq c u22) (i22 in) (err u0)) (if (is-eq c u23) (i23 in) (err u0)) (if (is-eq c u24) (i24 in) (err u0)) (if (is-eq c u25) (i25 in) (err u0)))) (if (<= c u42) (list (if (is-eq c u31) (o1 in) (err u0)) (if (is-eq c u32) (o2 in) (err u0)) (if (is-eq c u33) (o3 in) (err u0)) (if (is-eq c u34) (o4 in) (err u0)) (if (is-eq c u35) (o5 in) (err u0)) (if (is-eq c u36) (o6 in) (err u0)) (if (is-eq c u37) (o7 in) (err u0)) (if (is-eq c u38) (o8 in) (err u0)) (if (is-eq c u39) (o9 in) (err u0)) (if (is-eq c u40) (o10 in) (err u0)) (if (is-eq c u41) (o11 in) (err u0)) (if (is-eq c u42) (o12 in) (err u0))) (list (if (is-eq c u43) (o13 in) (err u0)) (if (is-eq c u44) (o14 in) (err u0)) (if (is-eq c u45) (o15 in) (err u0)) (if (is-eq c u46) (o16 in) (err u0)) (if (is-eq c u47) (o17 in) (err u0)) (if (is-eq c u48) (o18 in) (err u0)) (if (is-eq c u49) (o19 in) (err u0)) (if (is-eq c u50) (o20 in) (err u0)) (if (is-eq c u51) (o21 in) (err u0)) (if (is-eq c u52) (o22 in) (err u0)) (if (is-eq c u53) (o23 in) (err u0)) (if (is-eq c u54) (o24 in) (err u0)) (if (is-eq c u55) (o25 in) (err u0))))))) (ok true))) (define-private (ee (bp (buff 2048)) (t <et>)) (as-contract (begin (asserts! (is-eq tx-sender (contract-of t)) (err u0)) (try! (contract-call? 'SPB75ZW15C90ZNDPQF4GSVNGBEJJA6WACZKNFVFK.vault-v1 flash-loan-stx t (stx-get-balance 'SPB75ZW15C90ZNDPQF4GSVNGBEJJA6WACZKNFVFK.vault-v1) tx-sender bp)) (let ((ba (stx-get-balance tx-sender))) (and (> ba u0) (try! (stx-transfer? ba tx-sender 'SP1VSDGJ3RCR2K8V1SY5DGNR733YACKPXPHEMXTFD)))) (ok true)))) (define-constant b0 block-height)(define-public (r0 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (r1 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (r2 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (r3 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (r4 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (r5 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (r6 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (r7 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (r8 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (r9 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (ra (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rb (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rc (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rd (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (re (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rf (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rg (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rh (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (ri (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rj (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rk (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rl (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rm (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rn (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (ro (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rp (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rq (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rr (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rs (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rt (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (ru (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rv (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rw (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rx (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (ry (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (rz (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w0 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w1 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w2 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w3 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w4 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w5 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w6 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w7 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w8 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (w9 (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wa (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wb (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wc (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wd (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (we (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wf (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wg (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wh (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wi (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wj (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wk (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wl (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wm (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wn (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wo (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wp (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wq (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wr (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (ws (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wt (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wu (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wv (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (ww (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wx (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wy (bp (buff 2048)) (t <et>)) (ee bp t))(define-public (wz (bp (buff 2048)) (t <et>)) (ee bp t))",
    "analysis": {
      "summary": "This contract facilitates complex token swaps and flash loans within the Stacks blockchain ecosystem, utilizing multiple DeFi protocols.",
      "explanation": "This Clarity smart contract is designed to interact with various decentralized finance (DeFi) protocols on the Stacks blockchain for executing token swaps and flash loans. It uses the trait system for interoperability, allowing it to call functions from other contracts without needing to know their implementation details ahead of time. The contract defines constants and public functions to perform token swaps across different protocols (e.g., Arkadiko, Stackswap, AMM pools) and to initiate flash loans. The contract's core functionality is encapsulated in the 'callback' function, which dynamically selects operations based on encoded instructions, and the 'ee' function, which executes flash loans and ensures the caller's balance is correctly managed post-operation. The contract leverages Stacks' native capabilities for secure contract calls and asset transfers, showcasing the potential for complex DeFi strategies on the network.",
      "tags": [
        "DeFi",
        "token-swap",
        "flash-loan",
        "protocol-interoperability"
      ]
    }
  },
  {
    "rank": 17,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router",
    "calls": 3210,
    "source": ";;; UniswapV2Router02.sol\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait ft-plus-trait .ft-plus-trait.ft-plus-trait)\n(use-trait share-fee-to-trait .univ2-share-fee-to-trait.share-fee-to-trait)\n\n(define-constant err-router-preconditions  (err u200))\n(define-constant err-router-postconditions (err u201))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; add-liquidity\n(define-read-only\n  (add-liquidity-calc\n    (id           uint)\n    (amt0-desired uint)\n    (amt1-desired uint)\n    (amt0-min     uint)\n    (amt1-min     uint))\n  (let ((pool (contract-call? .univ2-core do-get-pool id))\n        (r0   (get reserve0 pool))\n        (r1   (get reserve1 pool)))\n    (if (and (is-eq r0 u0) (is-eq r1 u0))\n        (ok {amt0: amt0-desired, amt1: amt1-desired})\n        (let ((amt1-optimal (try! (contract-call? .univ2-library quote amt0-desired r0 r1)))\n              (amt0-optimal (try! (contract-call? .univ2-library quote amt1-desired r1 r0))) )\n            ;; Note we do not use optimal if > desired.\n            (if (<= amt1-optimal amt1-desired)\n                (begin\n                  (asserts! (>= amt1-optimal amt1-min) err-router-preconditions)\n                  (ok {amt0: amt0-desired, amt1: amt1-optimal}))\n                (begin\n                  (asserts!\n                    (and\n                      (<= amt0-optimal amt0-desired)\n                      (>= amt0-optimal amt0-min))\n                    err-router-preconditions)\n                  (ok {amt0: amt0-optimal, amt1: amt1-desired})) )) )))\n\n(define-public\n  (add-liquidity\n    (id uint)\n    (token0       <ft-trait>)\n    (token1       <ft-trait>)\n    (lp-token     <ft-plus-trait>)\n    (amt0-desired uint)\n    (amt1-desired uint)\n    (amt0-min     uint)\n    (amt1-min     uint))\n\n  (let ((amts (try! (add-liquidity-calc\n                id amt0-desired amt1-desired amt0-min amt1-min))))\n\n    (asserts!\n     (and (<= amt0-min amt0-desired)\n          (<= amt1-min amt1-desired)\n          (>= amt0-min u0)\n          (>= amt1-min u0)\n          (>= amt0-desired u0)\n          (>= amt1-desired u0))\n     err-router-preconditions)\n\n    (contract-call? .univ2-core mint\n      id\n      token0\n      token1\n      lp-token\n      (get amt0 amts)\n      (get amt1 amts)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; remove-liquidity\n(define-public\n  (remove-liquidity\n    (id        uint)\n    (token0    <ft-trait>)\n    (token1    <ft-trait>)\n    (lp-token  <ft-plus-trait>)\n    (liquidity uint)\n    (amt0-min  uint)\n    (amt1-min  uint))\n\n  (let ((event (try! (contract-call? .univ2-core burn\n                  id token0 token1 lp-token liquidity))))\n\n    (asserts!\n      (and (>= (get amt0 event) amt0-min)\n           (>= (get amt1 event) amt1-min))\n      err-router-postconditions)\n\n    (ok event) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; swap\n(define-public\n  (swap-exact-tokens-for-tokens\n    (id             uint)\n    (token0         <ft-trait>)\n    (token1         <ft-trait>)\n    (token-in       <ft-trait>)\n    (token-out      <ft-trait>)\n    (share-fee-to   <share-fee-to-trait>)\n    (amt-in      uint)\n    (amt-out-min uint))\n\n  (let ((pool      (contract-call? .univ2-core do-get-pool id))\n        (is-token0 (is-eq (contract-of token0) (contract-of token-in)))\n        (amt-out   (try! (contract-call? .univ2-library get-amount-out\n          amt-in\n          (if is-token0 (get reserve0 pool) (get reserve1 pool))\n          (if is-token0 (get reserve1 pool) (get reserve0 pool))\n          (get swap-fee pool) )))\n       (event      (try! (contract-call? .univ2-core swap\n          id\n          token-in\n          token-out\n          share-fee-to\n          amt-in\n          amt-out))) )\n\n    (asserts!\n     (and (is-eq (get token0 pool) (contract-of token0))\n          (is-eq (get token1 pool) (contract-of token1))\n          (> amt-in      u0)\n          (> amt-out-min u0) )\n     err-router-preconditions)\n\n    (asserts!\n      (and (>= (get amt-out event) amt-out-min))\n      err-router-postconditions)\n\n    (ok event) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public\n  (swap-tokens-for-exact-tokens\n    (id           uint)\n    (token0       <ft-trait>)\n    (token1       <ft-trait>)\n    (token-in     <ft-trait>)\n    (token-out    <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n    (amt-in-max   uint)\n    (amt-out      uint))\n\n  (let ((pool      (contract-call? .univ2-core do-get-pool id))\n        (is-token0 (is-eq (contract-of token0) (contract-of token-in)))\n        (amt-in    (try! (contract-call? .univ2-library get-amount-in\n          amt-out\n          (if is-token0 (get reserve0 pool) (get reserve1 pool))\n          (if is-token0 (get reserve1 pool) (get reserve0 pool))\n          (get swap-fee pool) )))\n        (event     (try! (contract-call? .univ2-core swap\n          id\n          token-in\n          token-out\n          share-fee-to\n          amt-in\n          amt-out))) )\n\n  (asserts!\n   (and (is-eq (get token0 pool) (contract-of token0))\n        (is-eq (get token1 pool) (contract-of token1))\n        (> amt-in-max u0)\n        (> amt-out    u0) )\n   err-router-preconditions)\n\n  (asserts!\n    (and (<= (get amt-in event) amt-in-max))\n    err-router-postconditions)\n\n  (ok event) ))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract is a simplified version of a Uniswap-like decentralized exchange (DEX) router for the Stacks blockchain, facilitating token swaps, liquidity addition, and removal.",
      "explanation": "This Clarity smart contract implements core functionalities of a decentralized exchange router, similar to Uniswap V2 on Ethereum but adapted for the Stacks blockchain. It allows users to add or remove liquidity to/from a liquidity pool and to swap tokens. The contract interacts with external contracts for liquidity pools and tokens, adhering to SIP-010 (a fungible token standard for Stacks) and custom traits for extended functionalities.\n\n- The `add-liquidity-calc` function <L10-32> calculates the optimal amount of tokens to add to a liquidity pool based on desired amounts and minimum thresholds. It ensures that the amounts meet the pool's requirements and calculates optimal amounts using the `quote` function from a library contract.\n\n- The `add-liquidity` function <L34-50> allows users to add liquidity to a pool. It checks the calculated amounts against user-specified minimums and desired amounts, then calls the core contract to mint liquidity pool (LP) tokens.\n\n- The `remove-liquidity` function <L52-66> enables users to remove their liquidity from a pool, receiving back the underlying assets. It ensures that the amounts received are not less than the minimum specified by the user.\n\n- The `swap-exact-tokens-for-tokens` and `swap-tokens-for-exact-tokens` functions <L68-113> facilitate token swaps with exact input or exact output amounts, respectively. They calculate the required input or output amounts, ensure the swap meets specified conditions (like minimum output or maximum input), and call the core contract to execute the swap.\n\n- Error constants <L6-7> define specific error codes for precondition and postcondition failures, improving the contract's readability and debuggability.\n\n- The contract uses multiple `use-trait` declarations <L1-3> to interact with external contracts, ensuring that these contracts implement specific functionalities as defined by the traits. This approach enforces a level of interface standardization and security.\n\nOverall, this contract demonstrates how to build complex DEX functionalities on the Stacks blockchain, leveraging Clarity's capabilities for secure and composable smart contract development.",
      "tags": [
        "DEX",
        "Clarity",
        "Stacks",
        "DeFi",
        "Liquidity-Pool",
        "Token-Swap"
      ]
    }
  },
  {
    "rank": 18,
    "contract": "SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-farming",
    "calls": 3164,
    "source": "(impl-trait .extension-trait.extension-trait)\n(impl-trait .proposal-trait.proposal-trait)\n(use-trait sft-trait .trait-semi-fungible.semi-fungible-trait)\n(define-constant ERR-NOT-AUTHORIZED (err u1000))\n(define-constant ERR-TRANSFER-FAILED (err u3000))\n(define-constant ERR-USER-ALREADY-REGISTERED (err u10001))\n(define-constant ERR-USER-ID-NOT-FOUND (err u10003))\n(define-constant ERR-CONTRACT-NOT-ACTIVATED (err u10005))\n(define-constant ERR-STAKING-NOT-AVAILABLE (err u10015))\n(define-constant ERR-CANNOT-STAKE (err u10016))\n(define-constant ERR-REWARD-CYCLE-NOT-COMPLETED (err u10017))\n(define-constant ERR-AMOUNT-EXCEED-RESERVE (err u2024))\n(define-constant ERR-INVALID-TOKEN (err u2026))\n(define-constant ONE_8 u100000000) ;; 8 decimal places\n(define-constant MAX_UINT u340282366920938463463374607431768211455)\n(define-constant MAX-REWARD-CYCLES u32)\n(define-constant REWARD-CYCLE-INDEXES (list u0 u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31))\n(define-map approved-tokens {token: principal, token-id: uint } bool)\n(define-data-var reward-cycle-length uint u525) ;; number of block-heights per cycle\n(define-data-var token-halving-cycle uint u100) ;; number of cycles it takes for token emission to transition to the next\n(define-map activation-block { token: principal, token-id: uint } uint)\n(define-map coinbase-amounts { token: principal, token-id: uint } { coinbase-amount-1: uint, coinbase-amount-2: uint, coinbase-amount-3: uint, coinbase-amount-4: uint, coinbase-amount-5: uint })\n(define-map staking-stats-at-cycle { token: principal, token-id: uint, reward-cycle: uint } uint)\n(define-map staker-at-cycle { token: principal, token-id: uint, reward-cycle: uint, user-id: uint } { amount-staked: uint, to-return: uint })\n(define-map apower-multiplier-in-fixed { token: principal, token-id: uint } uint)\n(define-map users-nonce { token: principal, token-id: uint } uint)\n(define-map users { token: principal, token-id: uint, user-id: uint } principal\n)\n(define-map user-ids { token: principal, token-id: uint, user: principal } uint)\n(define-data-var coinbase-threshold-1 uint (var-get token-halving-cycle))\n(define-data-var coinbase-threshold-2 uint (* u2 (var-get token-halving-cycle)))\n(define-data-var coinbase-threshold-3 uint (* u3 (var-get token-halving-cycle)))\n(define-data-var coinbase-threshold-4 uint (* u4 (var-get token-halving-cycle)))\n(define-data-var coinbase-threshold-5 uint (* u5 (var-get token-halving-cycle)))\n(define-read-only (is-dao-or-extension)\n    (ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) ERR-NOT-AUTHORIZED)))\n(define-read-only (check-is-approved-token (token principal) (token-id uint))\n  (ok (asserts! (default-to false (map-get? approved-tokens { token: token, token-id: token-id })) ERR-INVALID-TOKEN)))\n(define-read-only (get-reward-cycle-length)\n  (var-get reward-cycle-length))\n(define-read-only (get-apower-multiplier-in-fixed-or-default (token principal) (token-id uint))\n  (default-to u0 (map-get? apower-multiplier-in-fixed { token: token, token-id: token-id })))\n(define-read-only (get-activation-block-or-default (token principal) (token-id uint))\n  (default-to MAX_UINT (map-get? activation-block { token: token, token-id: token-id })))\n(define-read-only (get-staking-stats-at-cycle (token principal) (token-id uint) (reward-cycle uint))\n  (map-get? staking-stats-at-cycle {token: token, token-id: token-id, reward-cycle: reward-cycle}))\n(define-read-only (get-staking-stats-at-cycle-or-default (token principal) (token-id uint) (reward-cycle uint))\n  (default-to u0 (get-staking-stats-at-cycle token token-id reward-cycle)))\n(define-read-only (get-staking-stats-at-cycle-or-default-many (token principal) (token-id uint) (reward-cycle (list 200 uint)))\n  (map get-staking-stats-at-cycle-or-default\n      (list\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n      )\n      (list\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n      )\n      reward-cycle))\n(define-read-only (get-user-id (token principal) (token-id uint) (user principal))\n  (map-get? user-ids {token: token, token-id: token-id, user: user}))\n(define-read-only (get-user (token principal) (token-id uint) (user-id uint))\n  (map-get? users {token: token, token-id: token-id, user-id: user-id}))\n(define-read-only (get-registered-users-nonce (token principal) (token-id uint))\n  (map-get? users-nonce {token: token, token-id: token-id}))\n(define-read-only (get-registered-users-nonce-or-default (token principal) (token-id uint))\n  (default-to u0 (get-registered-users-nonce token token-id)))\n(define-read-only (get-staker-at-cycle (token principal) (token-id uint) (reward-cycle uint) (user-id uint))\n  (map-get? staker-at-cycle { token: token, token-id: token-id, reward-cycle: reward-cycle, user-id: user-id }))\n(define-read-only (get-staker-at-cycle-or-default (token principal) (token-id uint) (reward-cycle uint) (user-id uint))\n  (default-to { amount-staked: u0, to-return: u0 } (map-get? staker-at-cycle { token: token, token-id: token-id, reward-cycle: reward-cycle, user-id: user-id })))\n(define-read-only (get-reward-cycle (token principal) (token-id uint) (stacks-height uint))\n  (let (\n      (first-staking-block (get-activation-block-or-default token token-id))\n      (rcLen (var-get reward-cycle-length)))\n    (if (>= stacks-height first-staking-block) (some (/ (- stacks-height first-staking-block) rcLen)) none)))\n(define-read-only (staking-active-at-cycle (token principal) (token-id uint) (reward-cycle uint))\n  (is-some (map-get? staking-stats-at-cycle {token: token, token-id: token-id, reward-cycle: reward-cycle})))\n(define-read-only (get-first-stacks-block-in-reward-cycle (token principal) (token-id uint) (reward-cycle uint))\n  (+ (get-activation-block-or-default token token-id) (* (var-get reward-cycle-length) reward-cycle)))\n(define-read-only (get-staking-reward (token principal) (token-id uint) (user-id uint) (target-cycle uint))\n  (get-entitled-staking-reward token token-id user-id target-cycle block-height))\n(define-read-only (get-token-halving-cycle)\n  (var-get token-halving-cycle))\n(define-read-only (get-coinbase-thresholds)\n  (ok {\n      coinbase-threshold-1: (var-get coinbase-threshold-1),\n      coinbase-threshold-2: (var-get coinbase-threshold-2),\n      coinbase-threshold-3: (var-get coinbase-threshold-3),\n      coinbase-threshold-4: (var-get coinbase-threshold-4),\n      coinbase-threshold-5: (var-get coinbase-threshold-5) }))\n(define-read-only (get-coinbase-amount-or-default (token principal) (token-id uint) (reward-cycle uint))\n  (let (\n      (coinbase  (default-to { coinbase-amount-1: u0, coinbase-amount-2: u0, coinbase-amount-3: u0, coinbase-amount-4: u0, coinbase-amount-5: u0 }\n          (map-get? coinbase-amounts { token: token, token-id: token-id }))))\n    ;; computations based on each halving threshold\n    (asserts! (> reward-cycle (var-get coinbase-threshold-1)) (get coinbase-amount-1 coinbase))\n    (asserts! (> reward-cycle (var-get coinbase-threshold-2)) (get coinbase-amount-2 coinbase))\n    (asserts! (> reward-cycle (var-get coinbase-threshold-3)) (get coinbase-amount-3 coinbase))\n    (asserts! (> reward-cycle (var-get coinbase-threshold-4)) (get coinbase-amount-4 coinbase))\n    (asserts! (> reward-cycle (var-get coinbase-threshold-5)) (get coinbase-amount-5 coinbase))\n    ;; default value after 5th halving\n    u0))\n(define-read-only (get-coinbase-amounts-or-default (token principal) (token-id uint))\n    (default-to { coinbase-amount-1: u0, coinbase-amount-2: u0, coinbase-amount-3: u0, coinbase-amount-4: u0, coinbase-amount-5: u0 } (map-get? coinbase-amounts { token: token, token-id: token-id })))\n(define-public (stake-tokens (token-trait <sft-trait>) (token-id uint) (amount-token uint) (lock-period uint))\n  (begin\n    (try! (check-is-approved-token (contract-of token-trait) token-id))\n    (stake-tokens-at-cycle token-trait token-id tx-sender (get-or-create-user-id (contract-of token-trait) token-id tx-sender) amount-token block-height lock-period)))\n(define-public (claim-staking-reward (token-trait <sft-trait>) (token-id uint) (target-cycle uint))\n  (begin\n    (try! (check-is-approved-token (contract-of token-trait) token-id))\n    (claim-staking-reward-at-cycle token-trait token-id tx-sender block-height target-cycle)))\n(define-public (claim-staking-reward-many (token <sft-trait>) (token-id uint) (target-cycles (list 200 uint)))\n  (ok (map\n      claim-staking-reward\n      (list\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n      )\n      (list\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n      )\n      target-cycles)))\n(define-public (set-reward-cycle-length (new-reward-cycle-length uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set reward-cycle-length new-reward-cycle-length))))\n(define-public (add-token (token principal) (token-id uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (map-set approved-tokens { token: token, token-id: token-id } true)\n    (ok (map-set users-nonce { token: token, token-id: token-id } u0))))\n(define-public (set-apower-multiplier-in-fixed (token principal) (token-id uint) (new-apower-multiplier-in-fixed uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (map-set apower-multiplier-in-fixed { token: token, token-id: token-id } new-apower-multiplier-in-fixed))))\n(define-public (set-activation-block (token principal) (token-id uint) (new-activation-block uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (map-set activation-block { token: token, token-id: token-id } new-activation-block))))\n(define-public (set-token-halving-cycle (new-token-halving-cycle uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (var-set token-halving-cycle new-token-halving-cycle)\n    (ok (set-coinbase-thresholds))))\n(define-public (set-coinbase-amount (token principal) (token-id uint) (coinbase-1 uint) (coinbase-2 uint) (coinbase-3 uint) (coinbase-4 uint) (coinbase-5 uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (map-set coinbase-amounts\n\t\t\t{ token: token, token-id: token-id }\n      { coinbase-amount-1: coinbase-1, coinbase-amount-2: coinbase-2, coinbase-amount-3: coinbase-3, coinbase-amount-4: coinbase-4, coinbase-amount-5: coinbase-5 }))))\n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true))\n(define-public (execute (sender principal))\n\t(begin\n\t\t(try! (contract-call? .executor-dao set-extensions (list { extension: .alex-farming, enabled: true } )))\t\t\n\t\t(ok true)))\n(define-private (get-or-create-user-id (token principal) (token-id uint) (user principal))\n  (match (map-get? user-ids {token: token, token-id: token-id, user: user})\n    value value\n    (let (\n        (new-id (+ u1 (get-registered-users-nonce-or-default token token-id))))\n      (map-insert users {token: token, token-id: token-id, user-id: new-id} user)\n      (map-insert user-ids {token: token, token-id: token-id, user: user} new-id)\n      (map-set users-nonce {token: token, token-id: token-id} new-id)\n      new-id)))\n(define-private (get-entitled-staking-reward (token principal) (token-id uint) (user-id uint) (target-cycle uint) (stacks-height uint))\n  (let (\n      (total-staked-this-cycle (get-staking-stats-at-cycle-or-default token token-id target-cycle))\n      (user-staked-this-cycle (get amount-staked (get-staker-at-cycle-or-default token token-id target-cycle user-id))))\n    (match (get-reward-cycle token token-id stacks-height)\n      current-cycle (div-down (mul-down (get-coinbase-amount-or-default token token-id target-cycle) user-staked-this-cycle) total-staked-this-cycle)\n      u0)))\n(define-private (stake-tokens-at-cycle (token-trait <sft-trait>) (token-id uint) (user principal) (user-id uint) (amount-token uint) (start-height uint) (lock-period uint))\n  (let (\n      (token (contract-of token-trait))\n      (current-cycle (unwrap! (get-reward-cycle token token-id start-height) ERR-STAKING-NOT-AVAILABLE))\n      (target-cycle (+ u1 current-cycle))\n      (commitment { token: token, token-id: token-id, staker-id: user-id, amount: amount-token, first: target-cycle, last: (+ target-cycle lock-period)}))\n    (try! (check-is-approved-token (contract-of token-trait) token-id))\n    (asserts! (>= block-height (get-activation-block-or-default token token-id)) ERR-CONTRACT-NOT-ACTIVATED)\n    (asserts! (and (> lock-period u0) (<= lock-period MAX-REWARD-CYCLES)) ERR-CANNOT-STAKE)\n    (asserts! (> amount-token u0) ERR-CANNOT-STAKE)\n    (unwrap! (contract-call? token-trait transfer-fixed token-id amount-token tx-sender .amm-vault-v2-01) ERR-TRANSFER-FAILED)\n    (try! (fold stake-tokens-closure REWARD-CYCLE-INDEXES (ok commitment)))\n    (ok true)))\n(define-private (stake-tokens-closure (reward-cycle-idx uint) (commitment-response (response { token: principal, token-id: uint, staker-id: uint, amount: uint, first: uint, last: uint } uint)))\n  (match commitment-response\n    commitment\n    (let (\n        (token (get token commitment))\n        (token-id (get token-id commitment))\n        (staker-id (get staker-id commitment))\n        (amount-token (get amount commitment))\n        (first-cycle (get first commitment))\n        (last-cycle (get last commitment))\n        (target-cycle (+ first-cycle reward-cycle-idx))\n        (this-staker-at-cycle (get-staker-at-cycle-or-default token token-id target-cycle staker-id))\n        (amount-staked (get amount-staked this-staker-at-cycle))\n        (to-return (get to-return this-staker-at-cycle)))\n      (if (and (>= target-cycle first-cycle) (< target-cycle last-cycle))\n        (begin\n          (if (is-eq target-cycle (- last-cycle u1))\n\t\t\t\t\t\t(set-tokens-staked token token-id staker-id target-cycle amount-token amount-token)\n            (set-tokens-staked token token-id staker-id target-cycle amount-token u0))\n          true)\n        false)\n      commitment-response)\n    err-value commitment-response))\n(define-private (set-tokens-staked (token principal) (token-id uint) (user-id uint) (target-cycle uint) (amount-staked uint) (to-return uint))\n  (let (\n      (this-staker-at-cycle (get-staker-at-cycle-or-default token token-id target-cycle user-id)))\n    (map-set staking-stats-at-cycle {token: token, token-id: token-id, reward-cycle: target-cycle} (+ amount-staked (get-staking-stats-at-cycle-or-default token token-id target-cycle)))\n    (map-set staker-at-cycle\n\t\t\t{ token: token, token-id: token-id, reward-cycle: target-cycle, user-id: user-id }\n      { amount-staked: (+ amount-staked (get amount-staked this-staker-at-cycle)), to-return: (+ to-return (get to-return this-staker-at-cycle)) })))\n(define-private (claim-staking-reward-at-cycle (token-trait <sft-trait>) (token-id uint) (user principal) (stacks-height uint) (target-cycle uint))\n  (let (\n      (token (contract-of token-trait))\n      (current-cycle (unwrap! (get-reward-cycle token token-id stacks-height) ERR-STAKING-NOT-AVAILABLE))\n      (user-id (unwrap! (get-user-id token token-id user) ERR-USER-ID-NOT-FOUND))\n      (entitled-token (get-entitled-staking-reward token token-id user-id target-cycle stacks-height))\n      (to-return (get to-return (get-staker-at-cycle-or-default token token-id target-cycle user-id))))\n    (asserts! (default-to false (map-get? approved-tokens {token: token, token-id: token-id})) ERR-INVALID-TOKEN)\n    (asserts! (> current-cycle target-cycle) ERR-REWARD-CYCLE-NOT-COMPLETED)\n    ;; disable ability to claim again\n    (map-set staker-at-cycle\n      { token: token, token-id: token-id, reward-cycle: target-cycle, user-id: user-id }\n      { amount-staked: u0, to-return: u0 })\n    ;; send back tokens if user was eligible\n    (and (> to-return u0) (as-contract (try! (contract-call? .amm-vault-v2-01 transfer-sft token-trait token-id to-return user))))\n    ;; send back rewards if user was eligible\n    (and (> entitled-token u0) (as-contract (try! (contract-call? .token-alex mint-fixed entitled-token user))))\n    (and\n      (> entitled-token u0)\n      (> (get-apower-multiplier-in-fixed-or-default token token-id) u0)\n      (as-contract (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-apower mint-fixed (mul-down entitled-token (get-apower-multiplier-in-fixed-or-default token token-id)) user))))\n    (ok { to-return: to-return, entitled-token: entitled-token })))\n(define-private (set-coinbase-thresholds)\n  (begin\n    (var-set coinbase-threshold-1 (var-get token-halving-cycle))\n    (var-set coinbase-threshold-2 (* u2 (var-get token-halving-cycle)))\n    (var-set coinbase-threshold-3 (* u3 (var-get token-halving-cycle)))\n    (var-set coinbase-threshold-4 (* u4 (var-get token-halving-cycle)))\n    (var-set coinbase-threshold-5 (* u5 (var-get token-halving-cycle)))))\n(define-private (mul-down (a uint) (b uint))\n    (/ (* a b) ONE_8))\n(define-private (div-down (a uint) (b uint))\n  (if (is-eq a u0) u0 (/ (* a ONE_8) b)))",
    "analysis": {
      "summary": "This contract implements a staking system with token rewards, supporting semi-fungible tokens (SFTs) and featuring reward cycles, token halving, and APower multiplier mechanics.",
      "explanation": "The contract is designed for staking semi-fungible tokens (SFTs) and distributing rewards based on staked amounts and durations. It includes mechanisms for reward cycles, token halving, and APower multipliers to incentivize long-term staking and participation. Key components include:\n\n- **Constants and Variables**: Defines error codes, constants like `ONE_8` for decimal precision, and variables such as `reward-cycle-length` for the duration of each reward cycle (<L4-24>).\n\n- **Maps and Data Vars**: Stores information about approved tokens, staking statistics, user details, and reward parameters (<L25-40>).\n\n- **Read-Only Functions**: Various utility functions to check contract states, like whether a token is approved or to fetch user IDs (<L41-82>).\n\n- **Public Functions**: Include staking tokens (`stake-tokens`), claiming rewards (`claim-staking-reward` and `claim-staking-reward-many`), and administrative functions to adjust contract parameters (<L83-136>).\n\n- **Private Functions**: Handle internal logic for staking, reward calculation, and updating contract states. For example, `stake-tokens-at-cycle` calculates the reward cycle for staking and updates staking statistics (<L137-233>).\n\n- **Token Halving and APower**: Implements a token halving mechanism to reduce reward amounts over time, controlled by `set-token-halving-cycle` and related functions. APower multiplier allows additional rewards based on a multiplier factor (<L234-242>, <L243-251>).\n\nOverall, the contract is structured to facilitate staking of SFTs with dynamic reward calculations, incentivizing users to stake for longer periods for better rewards while providing administrative controls to manage the staking ecosystem.",
      "tags": [
        "staking",
        "SFT",
        "rewards",
        "token-halving",
        "APower"
      ]
    }
  },
  {
    "rank": 19,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.wrapper-velar-multihop-v-1-1",
    "calls": 3037,
    "source": ";; wrapper-velar-multihop-v-1-1\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n\n(define-public (swap-3\n    (amt-in uint) (amt-out-min uint)\n    (token-a <ft-trait>) (token-b <ft-trait>)\n    (token-c <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-3\n                  amt-in amt-out-min\n                  token-a token-b\n                  token-c\n                  share-fee-to)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-public (swap-4\n    (amt-in uint) (amt-out-min uint)\n    (token-a <ft-trait>) (token-b <ft-trait>)\n    (token-c <ft-trait>) (token-d <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-4\n                  amt-in amt-out-min\n                  token-a token-b\n                  token-c token-d\n                  share-fee-to)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-public (swap-5\n    (amt-in uint) (amt-out-min uint)\n    (token-a <ft-trait>) (token-b <ft-trait>)\n    (token-c <ft-trait>) (token-d <ft-trait>)\n    (token-e <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-5\n                  amt-in amt-out-min\n                  token-a token-b\n                  token-c token-d\n                  token-e\n                  share-fee-to)))\n  )\n    (ok swap-a)\n  )\n)",
    "analysis": {
      "summary": "This contract facilitates multi-hop swaps between tokens on the Stacks blockchain, supporting up to five different tokens in a single transaction.",
      "explanation": "The contract defines three public functions (`swap-3`, `swap-4`, and `swap-5`) that allow users to swap between three, four, or five different tokens, respectively. Each function takes in the amount of input tokens, the minimum amount of output tokens expected, the tokens involved in the swap, and a share-fee-to address for fee distribution. The functions work by calling another contract (`univ2-path2` from `SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1`) that presumably handles the logic for swapping the tokens and distributing any fees. The use of `try!` indicates that if the called contract operation fails, the entire transaction will abort and revert any changes.\n\n- <L5-6> The contract uses two traits: `ft-trait` for fungible tokens, ensuring they adhere to the SIP-010 standard, and `share-fee-to-trait` for specifying a share-fee-to address.\n- <L8-20> `swap-3` function allows swapping between three tokens. It calls the `univ2-path2` contract's `swap-3` method with the provided parameters.\n- <L22-34> `swap-4` extends this functionality to four tokens, again leveraging the `univ2-path2` contract but calling its `swap-4` method.\n- <L36-50> Similarly, `swap-5` facilitates swaps involving five tokens, calling the `univ2-path2` contract's `swap-5` method.\n\nEach function encapsulates the swap logic within a `let` block, capturing the result of the contract call in a variable (`swap-a`) and then returning this result with an `ok` response, indicating a successful operation.",
      "tags": [
        "DeFi",
        "multi-hop-swap",
        "fungible-token",
        "protocol"
      ]
    }
  },
  {
    "rank": 20,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.earn-stx-ststx-v-1-2",
    "calls": 2972,
    "source": ";; Bitflow Staking & Rewards - v1.2\n;; This contract handles the core logic for staking & rewards, it's where fees are collected and distributed\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;; Cons, Vars, & Maps ;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(use-trait sip-010-trait .sip-010-trait-ft-standard.sip-010-trait)\n(use-trait lp-trait .lp-trait.lp-trait)\n\n;;;;;;;;;;;;;;;\n;; Constants ;;\n;;;;;;;;;;;;;;;\n\n;; Reward cycle index for looping when claiming rewards\n(define-constant reward-cycle-index (list u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31 u32 u33 u34 u35 u36 u37 u38 u39 u40 u41 u42 u43 u44 u45 u46 u47 u48 u49 u50 u51 u52 u53 u54 u55 u56 u57 u58 u59 u60 u61 u62 u63 u64 u65 u66 u67 u68 u69 u70 u71 u72 u73 u74 u75 u76 u77 u78 u79 u80 u81 u82 u83 u84 u85 u86 u87 u88 u89 u90 u91 u92 u93 u94 u95 u96 u97 u98 u99 u100 u101 u102 u103 u104 u105 u106 u107 u108 u109 u110 u111 u112 u113 u114 u115 u116 u117 u118 u119 u120))\n\n;;;;;;;;;;;;;;;\n;; Variables ;;\n;;;;;;;;;;;;;;;\n\n\n;; Helper uint for filtering out null values & mapping from index to next cycle\n(define-data-var helper-uint uint u0)\n\n;; Helper uint list for filtering out existing cycles in cycles-staked list\n(define-data-var helper-uint-list (list 12000 uint) (list ))\n\n\n;;;;;;;;;;\n;; Maps ;;\n;;;;;;;;;;\n\n;; Map that tracks all staking data for a given principal\n(define-map StakerDataMap {y-token: principal, lp-token: principal, user: principal} {\n    cycles-staked: (list 12000 uint),\n    cycles-to-unstake: (list 12000 uint),\n    total-currently-staked: uint\n})\n\n;; Map that tracks staking data per cycle for a given principal\n(define-map StakerDataPerCycleMap {y-token: principal, lp-token: principal, user: principal, cycle: uint} {\n    lp-token-staked: uint,\n    reward-claimed: bool,\n    lp-token-to-unstake: uint\n})\n\n;; Map that tracks staking data per cycle for all stakers\n(define-map DataPerCycleMap {y-token: principal, lp-token: principal, cycle: uint} uint)\n\n;; Map that tracks the total LP tokens currently staked by everyone for a given pair\n(define-map TotalStakedPerPairMap {y-token: principal, lp-token: principal} {total-staked: uint})\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Read-Only Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Get user data\n(define-read-only (get-user-data (y-token <sip-010-trait>) (lp-token <lp-trait>) (user principal)) \n    (map-get? StakerDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: user})\n)\n\n;; Get user data at cycle\n(define-read-only (get-user-data-at-cycle (y-token <sip-010-trait>) (lp-token <lp-trait>) (user principal) (cycle uint)) \n    (map-get? StakerDataPerCycleMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: user, cycle: cycle})\n)\n\n;; Get user data at cycle\n(define-read-only (get-data-at-cycle (y-token <sip-010-trait>) (lp-token <lp-trait>) (cycle uint)) \n    (map-get? DataPerCycleMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle: cycle})\n)\n\n;; Get total LP tokens staked for a given pair\n(define-read-only (get-total-staked (y-token <sip-010-trait>) (lp-token <lp-trait>)) \n    (map-get? TotalStakedPerPairMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)})\n)\n\n;; Claim staking rewards per cycle\n(define-read-only (get-staking-rewards-at-cycle (y-token principal) (lp-token principal) (cycle uint))\n    (let \n        (\n            (param-cycle-user-data (unwrap! (map-get? StakerDataPerCycleMap {y-token: y-token, lp-token: lp-token, user: tx-sender, cycle: cycle}) (err u4)))\n            (param-cycle-reward-claimed (get reward-claimed param-cycle-user-data))\n            (param-cycle-user-lp-staked (get lp-token-staked param-cycle-user-data))\n            (param-cycle-total-lp-staked (unwrap! (map-get? DataPerCycleMap {y-token: y-token, lp-token: lp-token, cycle: cycle}) (err u5)))\n            (param-cycle-fees (unwrap! (contract-call? .stableswap-stx-ststx-v-1-2 get-cycle-data y-token lp-token cycle) (err u0)))\n            (param-cycle-balance-x-fee (get cycle-fee-balance-x param-cycle-fees))\n            (param-cycle-x-rewards (/ (* param-cycle-balance-x-fee param-cycle-user-lp-staked) param-cycle-total-lp-staked))\n            (claimer tx-sender)\n        )\n\n        ;; Assert that param-cycle-x rewards are greater than 0\n        (asserts! (> param-cycle-x-rewards u0) (err u1))\n\n        ;; Assert that param-cycle-reward-claimed is false\n        (asserts! (not param-cycle-reward-claimed) (err u2))\n\n        (ok {x-token-reward: param-cycle-x-rewards})\n    )\n)\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;\n;;; Stake Function ;;;\n;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;\n\n;; Stake LP Tokens\n;; @desc: This function allows users to stake LP tokens for X cycles to earn rewards\n;; @param: y-token - The Y token contract, lp-token - The LP token contract, cycles - The number of cycles to stake for, lp-token-amount - The amount of LP tokens to stake\n(define-public (stake-lp-tokens (y-token <sip-010-trait>) (lp-token <sip-010-trait>) (cycles uint) (amount uint))\n    (let \n        (\n            (current-staker-data (map-get? StakerDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender}))\n            (current-cycles-staked (default-to (list ) (get cycles-staked current-staker-data)))\n            (current-cycles-to-unstake (default-to (list ) (get cycles-to-unstake current-staker-data)))\n            (updated-helper-uint-to-filter (var-set helper-uint cycles))\n            (filtered-null-list (filter filter-null-value reward-cycle-index))\n            (current-cycle (contract-call? .stableswap-stx-ststx-v-1-2 get-current-cycle))\n            (updated-helper-uint-to-map (var-set helper-uint current-cycle))\n            (next-cycles (map map-filtered-null-list filtered-null-list))\n            (updated-helper-uint-list-current-cycles (var-set helper-uint-list current-cycles-staked))\n            (next-cycles-not-in-current-cycles (filter filter-list next-cycles))\n            (unstake-cycle (+ u1 (+ current-cycle cycles)))\n            (is-unstakeable-block-in-unstakeable-cycles (is-some (index-of current-cycles-to-unstake unstake-cycle)))\n            (current-all-staker-data (map-get? DataPerCycleMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle: current-cycle}))\n            (pair-data (unwrap! (contract-call? .stableswap-stx-ststx-v-1-2 get-pair-data y-token lp-token) (err \"err-no-pair-data\")))\n            (total-currently-staked-data (default-to {total-staked: u0} (map-get? TotalStakedPerPairMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)})))\n            (total-currently-staked-in-contract (get total-staked total-currently-staked-data))\n            (approved-pair (get approval pair-data))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! approved-pair (err \"err-pair-not-approved\"))\n\n        ;; Assert that cycles is less than 121\n        (asserts! (< cycles u121) (err \"err-cycles-too-high\"))\n\n        ;; Assert that cycles is greater than 0\n        (asserts! (> cycles u0) (err \"err-cycles-too-low\"))\n\n        ;; Assert that amount is greater than 0\n        (asserts! (> amount u0) (err \"err-amount-too-low\"))\n\n        ;; Transfer LP tokens from user to contract\n        (unwrap! (contract-call? lp-token transfer amount tx-sender (as-contract tx-sender) none) (err \"err-lp-token-transfer-failed\"))\n\n        ;; Update lp-tokens-staked in the appropriate cycles\n        (fold update-staker-data-per-cycle-fold next-cycles {y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycles-staked: current-cycles-staked, amount: amount})\n\n        ;; Updating the total balance of LP tokens staked in this contract\n        (map-set TotalStakedPerPairMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)} {total-staked: (+ total-currently-staked-in-contract amount)})\n\n        ;; Update StakerDataMap\n        (if (is-some current-staker-data)\n            ;; Staker already exists, update cycles-staked list\n            (map-set StakerDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender} {\n                cycles-staked: (unwrap! (as-max-len? (concat current-cycles-staked next-cycles-not-in-current-cycles) u12000) (err \"err-cycles-staked-overflow\")),\n                cycles-to-unstake: (if is-unstakeable-block-in-unstakeable-cycles \n                    ;; Unstakeable cycle already exists, don't update cycles-to-unstake list\n                    current-cycles-to-unstake\n                    ;; Unstakeable cycle doesn't exist, update cycles-to-unstake list\n                    (unwrap! (as-max-len? (concat current-cycles-to-unstake (list unstake-cycle)) u12000) (err \"err-cycles-to-unstake-overflow\"))\n                ),\n                total-currently-staked: (+ amount (default-to u0 (get total-currently-staked current-staker-data)))\n            })\n            ;; Staker doesn't exist, create new staker\n            (map-set StakerDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender} {\n                cycles-staked: next-cycles,\n                cycles-to-unstake: (list unstake-cycle),\n                total-currently-staked: amount\n            })\n        )\n\n        ;; Update unstakeable lp-token StakerDataMap\n        (ok (if (is-some (map-get? StakerDataPerCycleMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender, cycle: unstake-cycle}))\n            ;; Staker already exists, only update lp-token-to-unstake\n            (map-set StakerDataPerCycleMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender, cycle: unstake-cycle} (merge \n                (default-to { lp-token-staked: u0, reward-claimed: false, lp-token-to-unstake: u0} (map-get? StakerDataPerCycleMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender, cycle: unstake-cycle}))\n                {lp-token-to-unstake: (+ amount (default-to u0 (get lp-token-to-unstake (map-get? StakerDataPerCycleMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender, cycle: unstake-cycle}))))}\n            ))\n            ;; Staker doesn't exist, create new entry\n            (map-set StakerDataPerCycleMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender, cycle: unstake-cycle} { \n                lp-token-staked: u0, \n                reward-claimed: false, \n                lp-token-to-unstake: amount\n            })\n        ))\n\n    )\n)\n\n;; Helper filter function to filter out null values lower than helper-uint var\n(define-private (filter-null-value (value uint)) \n    (if (<= value (var-get helper-uint)) \n        true\n        false\n    )\n)\n\n;; Helper map function to map from a filtered index list to a map of next cycles\n(define-private (map-filtered-null-list (index uint)) \n    (+ (var-get helper-uint) index)\n)\n\n;; Helper filter function to filter out cycles already in cycles-staked list\n(define-private (filter-list (value uint)) \n    (if (is-some (index-of (var-get helper-uint-list) value))\n        false\n        true\n    )\n)\n\n;; Helper filter function to filter out cycles where lp-tokens have already been unstaked\n(define-private (filter-unstaked-cycle (value uint)) \n    (if (is-eq value (var-get helper-uint)) \n        false\n        true\n    )\n)\n\n;; Helper function to update StakerDataPerCycleMap\n(define-private (update-staker-data-per-cycle-fold (next-cycle uint) (static-user-and-cycle-data {y-token: principal, lp-token: principal, cycles-staked: (list 12000 uint), amount: uint}))\n    (let \n        (\n            (y-token-static (get y-token static-user-and-cycle-data))\n            (lp-token-static (get lp-token static-user-and-cycle-data))\n            (cycles-staked-static (get cycles-staked static-user-and-cycle-data))\n            (amount-static (get amount static-user-and-cycle-data))\n            (current-cycle-user-data (default-to {lp-token-staked: u0, reward-claimed: false, lp-token-to-unstake: u0} (map-get? StakerDataPerCycleMap {y-token: y-token-static, lp-token: lp-token-static, user: tx-sender, cycle: next-cycle})))\n            (current-cycle-lp-token-staked (get lp-token-staked current-cycle-user-data))\n            (current-cycle-lp-token-to-unstake (get lp-token-to-unstake current-cycle-user-data))\n            (current-cycle-reward-claimed (get reward-claimed current-cycle-user-data))\n            (current-all-staker-data (map-get? DataPerCycleMap {y-token: y-token-static, lp-token: lp-token-static, cycle: next-cycle}))\n        )\n        ;; Check if staker is already staked in this cycle\n        (if (is-some (index-of cycles-staked-static next-cycle))\n            ;; Staker is already staked in this cycle, update StakerDataPerCycleMap\n            (map-set StakerDataPerCycleMap {y-token: y-token-static, lp-token: lp-token-static, user: tx-sender, cycle: next-cycle} (merge \n                    current-cycle-user-data\n                    {lp-token-staked: (+ amount-static current-cycle-lp-token-staked)}\n            ))\n            ;; Staker is not already staked in this cycle, create new StakerDataPerCycleMap\n            (map-set StakerDataPerCycleMap {y-token: y-token-static, lp-token: lp-token-static, user: tx-sender, cycle: next-cycle} (merge \n                    current-cycle-user-data\n            {\n                lp-token-staked: amount-static,\n                reward-claimed: false,\n            }))\n        )\n        ;; Update DataPerCycleMap\n        (if (is-some current-all-staker-data)\n            ;; Cycle data already exists, update total-lp-token-staked\n            (map-set DataPerCycleMap {y-token: y-token-static, lp-token: lp-token-static, cycle: next-cycle} (+ amount-static (default-to u0 current-all-staker-data)))\n            ;; Staker doesn't exist, create new entry\n            (map-set DataPerCycleMap {y-token: y-token-static, lp-token: lp-token-static, cycle: next-cycle} amount-static)\n        )\n\n        static-user-and-cycle-data\n    )\n)\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;\n;;; Claim Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Claim staking rewards per cycle\n;; @desc: This function allows users to claim staking rewards for a given cycle\n;; @param: y-token - The Y token contract, lp-token - The LP token contract, cycle - The cycle to claim rewards for\n(define-public (claim-cycle-staking-rewards (y-token principal) (lp-token principal) (y-token-trait <sip-010-trait>) (lp-token-trait <sip-010-trait>) (cycle uint))\n    (let \n        (\n            (current-cycle (contract-call? .stableswap-stx-ststx-v-1-2 get-current-cycle))\n            (param-cycle-user-data (unwrap! (map-get? StakerDataPerCycleMap {y-token: y-token, lp-token: lp-token, user: tx-sender, cycle: cycle}) (err \"err-no-cycle-data\")))\n            (param-cycle-reward-claimed (get reward-claimed param-cycle-user-data))\n            (param-cycle-user-lp-staked (get lp-token-staked param-cycle-user-data))\n            (param-cycle-total-lp-staked (unwrap! (map-get? DataPerCycleMap {y-token: y-token, lp-token: lp-token, cycle: cycle}) (err \"err-no-cycle-data\")))\n            (param-cycle-fees (unwrap! (contract-call? .stableswap-stx-ststx-v-1-2 get-cycle-data y-token lp-token cycle) (err \"err-no-cycle-data\")))\n            (param-cycle-balance-x-fee (get cycle-fee-balance-x param-cycle-fees))\n            (param-cycle-x-rewards (/ (* param-cycle-balance-x-fee param-cycle-user-lp-staked) param-cycle-total-lp-staked))\n            (claimer tx-sender)\n        )\n\n        ;; Assert that param-cycle-x rewards are greater than 0\n        (asserts! (> param-cycle-x-rewards u0) (err \"err-no-x-rewards-to-claim\"))\n\n        ;; Assert that param-cycle-reward-claimed is false\n        (asserts! (not param-cycle-reward-claimed) (err \"err-rewards-already-claimed\"))\n\n        ;; Assert that claiming from a previous cycle\n        (asserts! (< cycle current-cycle) (err \"err-cycle-too-high\"))\n\n        ;; Transfer the rewards from the contract to the claimer\n        (unwrap! (as-contract (stx-transfer? param-cycle-x-rewards tx-sender claimer)) (err \"err-x-token-transfer-failed\"))\n\n        ;; Update StakerDataPerCycleMap with reward-claimed = true\n        (map-set StakerDataPerCycleMap {y-token: y-token, lp-token: lp-token, user: claimer, cycle: cycle} (merge \n            param-cycle-user-data\n            {reward-claimed: true}\n        ))\n\n        ;; Return the number X tokens received after claiming staking rewards from a particular cycle\n        (ok {x-token-reward: param-cycle-x-rewards})\n    )\n)\n\n;; Claim all staking rewards\n;; @desc: This function allows users to claim all staking rewards\n;; @param: y-token - The Y token contract, lp-token - The LP token contract\n(define-public (claim-all-staking-rewards (y-token <sip-010-trait>) (lp-token <sip-010-trait>))\n    (let \n        (\n            (current-cycle (contract-call? .stableswap-stx-ststx-v-1-2 get-current-cycle))\n            (current-cycle-helper (var-set helper-uint current-cycle))\n            (current-staker-data (unwrap! (map-get? StakerDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender}) (err \"err-no-staker-data\")))\n            (current-cycles-staked (get cycles-staked current-staker-data))\n            (rewards-to-claim (fold fold-from-all-cycles-to-cycles-unclaimed current-cycles-staked {y-token: (contract-of y-token), lp-token: (contract-of lp-token), total-rewards-x: u0, current-cycle: current-cycle}))\n            (rewards-to-claim-x (get total-rewards-x rewards-to-claim))\n            (claimer tx-sender)\n        )\n\n        ;; Transfer rewards from the contract to the claimer\n        (if (> rewards-to-claim-x u0)\n            (unwrap! (as-contract (stx-transfer? rewards-to-claim-x tx-sender claimer)) (err \"err-x-token-transfer-failed\"))\n            false\n        )\n\n        ;; Return the number X tokens received after claiming all staking rewards\n        (ok {x-token-reward: rewards-to-claim-x})\n\n    )\n)\n\n;; Helper function to map from all cycles staked to all cycles unclaimed\n;; The below needs to be a fold, not a map, so that we don't have to transfer every iteration for rather at the end\n(define-private (fold-from-all-cycles-to-cycles-unclaimed (cycle uint) (fold-data {y-token: principal, lp-token: principal, total-rewards-x: uint, current-cycle: uint})) \n    (let \n        (\n            (static-current-cycle (get current-cycle fold-data))\n            (static-y-token (get y-token fold-data))\n            (static-lp-token (get lp-token fold-data))\n            (current-total-rewards-x (get total-rewards-x fold-data))\n            (param-cycle-staking-rewards (get-staking-rewards-at-cycle static-y-token static-lp-token cycle))\n            (param-cycle-rewards-x (match param-cycle-staking-rewards \n                ok-branch\n                    (get x-token-reward ok-branch)\n                err-branch\n                    u0\n            ))\n            ;; If the param-cycle is not in the past, then the rewards have to be zero.\n            (param-cycle-x-rewards (if (>= cycle static-current-cycle) u0 param-cycle-rewards-x))\n\n            (param-cycle-user-data (default-to {lp-token-staked: u0,reward-claimed: false, lp-token-to-unstake: u0} (map-get? StakerDataPerCycleMap {y-token: static-y-token, lp-token: static-lp-token, user: tx-sender, cycle: cycle})))\n        )\n\n        (if (> param-cycle-x-rewards u0)\n            ;; There are rewards to claim\n            (begin \n                ;; Update StakerDataPerCycleMap with reward-claimed = true\n                (map-set StakerDataPerCycleMap {y-token: static-y-token, lp-token: static-lp-token, user: tx-sender, cycle: cycle} (merge \n                    param-cycle-user-data\n                    {reward-claimed: true}\n                ))\n                {y-token: static-y-token, lp-token: static-lp-token, total-rewards-x: (+ current-total-rewards-x param-cycle-x-rewards), current-cycle: static-current-cycle}\n            )\n            ;; There are no rewards to claim\n            fold-data\n        )\n\n    )\n)\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Unstake Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(define-public (unstake-all-lp-tokens (y-token <sip-010-trait>) (lp-token <sip-010-trait>))\n    (let \n        (\n            (liquidity-provider tx-sender)\n            (current-cycle (contract-call? .stableswap-stx-ststx-v-1-2 get-current-cycle))\n            (current-cycle-helper (var-set helper-uint current-cycle))\n            (current-staker-data (unwrap! (map-get? StakerDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender}) (err \"err-no-staker-data\")))\n            (current-cycles-to-unstake (get cycles-to-unstake current-staker-data))\n            (current-staked-by-unstaker (get total-currently-staked current-staker-data))\n            (total-currently-staked-data (unwrap! (map-get? TotalStakedPerPairMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-total-staked-per-pair\")))\n            (total-currently-staked-in-contract (get total-staked total-currently-staked-data))\n            (unstake-data (fold fold-from-all-cycles-to-unstakeable-cycles current-cycles-to-unstake {y-token: (contract-of y-token), lp-token: (contract-of lp-token), total-lps-to-unstake: u0, current-cycles-to-unstake: current-cycles-to-unstake}))\n            (lp-tokens-to-unstake (get total-lps-to-unstake unstake-data))\n            (updated-total-currently-staked (- total-currently-staked-in-contract lp-tokens-to-unstake))\n            (updated-total-currently-staked-by-unstaker (- current-staked-by-unstaker lp-tokens-to-unstake))\n            (updated-current-cycles-to-unstake (get current-cycles-to-unstake unstake-data))\n        )\n\n        (asserts! (> lp-tokens-to-unstake u0) (err \"err-no-lp-tokens-to-unstake\"))\n        \n        ;; Transfer LP tokens to unstake from the contract to the user\n        (unwrap! (as-contract (contract-call? lp-token transfer lp-tokens-to-unstake tx-sender liquidity-provider none)) (err \"err-failed-to-transfer-lp-tokens\"))\n        \n        (map-set StakerDataMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token), user: tx-sender} (merge \n            current-staker-data\n            {total-currently-staked: updated-total-currently-staked-by-unstaker, cycles-to-unstake: updated-current-cycles-to-unstake}\n        ))\n        ;; Updating the total balance of LP tokens staked in this contract\n        (map-set TotalStakedPerPairMap {y-token: (contract-of y-token), lp-token: (contract-of lp-token)} {total-staked: updated-total-currently-staked})\n\n        ;; Return the number of LP tokens user receives that were no longer staked in any current or upcoming cycles\n        (ok lp-tokens-to-unstake)\n\n    )\n)\n\n(define-private (fold-from-all-cycles-to-unstakeable-cycles (cycle uint) (fold-data {y-token: principal, lp-token: principal, total-lps-to-unstake: uint, current-cycles-to-unstake: (list 12000 uint)})) \n    (let \n        (\n            (current-cycle (contract-call? .stableswap-stx-ststx-v-1-2 get-current-cycle))\n            (current-total-lp-tokens-to-unstake (get total-lps-to-unstake fold-data))\n            (static-y-token (get y-token fold-data))\n            (static-lp-token (get lp-token fold-data))\n            (current-cycles-to-unstake (get current-cycles-to-unstake fold-data))\n            (param-cycle-user-data (match (map-get? StakerDataPerCycleMap {y-token: static-y-token, lp-token: static-lp-token, user: tx-sender, cycle: cycle}) \n                ;; StakerDataPerCycleMap entry exists, save it to param-cycle-user-data\n                unwrapped-value\n                    unwrapped-value\n                ;; StakerDataPerCycleMap entry doesn't exist (this should never happen)\n                {lp-token-staked: u0,\n                reward-claimed: false,\n                lp-token-to-unstake: u0}\n            ))\n            \n            (param-cycle-user-lp-tokens-to-unstake (get lp-token-to-unstake param-cycle-user-data))\n            (updated-helper-uint-to-filter (var-set helper-uint cycle))\n            (updated-cycles-to-unstake (filter filter-unstaked-cycle current-cycles-to-unstake))\n\n        )\n\n        (if (and (> param-cycle-user-lp-tokens-to-unstake u0) (<= cycle current-cycle))\n            ;; There are lp-tokens to unstake\n            (begin \n                ;; Update StakerDataPerCycleMap with lp-token-to-unstake = u0\n                (map-set StakerDataPerCycleMap {y-token: static-y-token, lp-token: static-lp-token, user: tx-sender, cycle: cycle} (merge \n                    param-cycle-user-data\n                    {lp-token-to-unstake: u0}\n                ))\n                {y-token: static-y-token, lp-token: static-lp-token, total-lps-to-unstake: (+ param-cycle-user-lp-tokens-to-unstake current-total-lp-tokens-to-unstake), current-cycles-to-unstake: updated-cycles-to-unstake}\n            )\n            ;; There are no rewards to claim\n            fold-data\n        )\n\n    )\n)\n",
    "analysis": {
      "summary": "This contract implements a staking mechanism with rewards based on LP token contributions to liquidity pools.",
      "explanation": "The Bitflow Staking & Rewards contract allows users to stake LP tokens for a specified number of cycles and earn rewards based on their contribution. It includes mechanisms for staking, claiming rewards, and unstaking LP tokens. The contract uses several maps to track staking data per user and cycle, as well as total staked amounts. It leverages traits for interoperability with SIP-010 fungible tokens and a custom LP token trait. The contract's functions are divided into sections for staking, claiming rewards, and unstaking, with helper functions to manage data manipulation and validation. Key implementation details include: \n- Staking LP tokens for a specified number of cycles (<L120-166>). \n- Claiming rewards for a specific cycle or all staked cycles (<L168-234>, <L236-282>). \n- Unstaking LP tokens either for a specific cycle or all cycles (<L284-340>). \n- Use of maps to track staking data and rewards per user and cycle, ensuring accurate reward distribution and token management. \n- Helper functions to filter and map data for staking and unstaking processes, facilitating the management of staked cycles and rewards calculation (<L342-400>). \nOverall, the contract provides a comprehensive framework for staking LP tokens, claiming rewards, and managing staked tokens within the Bitflow ecosystem.",
      "tags": [
        "staking",
        "rewards",
        "LP-token",
        "DeFi"
      ]
    }
  },
  {
    "rank": 21,
    "contract": "SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2",
    "calls": 2414,
    "source": "\n;; xyk-core-v-1-2\n\n;; Use XYK pool trait and SIP 010 trait\n(use-trait xyk-pool-trait .xyk-pool-trait-v-1-2.xyk-pool-trait)\n(use-trait sip-010-trait .sip-010-trait-ft-standard-v-1-1.sip-010-trait)\n\n;; Error constants\n(define-constant ERR_NOT_AUTHORIZED (err u1001))\n(define-constant ERR_INVALID_AMOUNT (err u1002))\n(define-constant ERR_INVALID_PRINCIPAL (err u1003))\n(define-constant ERR_ALREADY_ADMIN (err u1004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u1005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u1006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u1007))\n(define-constant ERR_NO_POOL_DATA (err u1008))\n(define-constant ERR_POOL_NOT_CREATED (err u1009))\n(define-constant ERR_POOL_DISABLED (err u1010))\n(define-constant ERR_POOL_ALREADY_CREATED (err u1011))\n(define-constant ERR_INVALID_POOL (err u1012))\n(define-constant ERR_INVALID_POOL_URI (err u1013))\n(define-constant ERR_INVALID_POOL_SYMBOL (err u1014))\n(define-constant ERR_INVALID_POOL_NAME (err u1015))\n(define-constant ERR_MATCHING_TOKEN_CONTRACTS (err u1016))\n(define-constant ERR_INVALID_X_TOKEN (err u1017))\n(define-constant ERR_INVALID_Y_TOKEN (err u1018))\n(define-constant ERR_MINIMUM_X_AMOUNT (err u1019))\n(define-constant ERR_MINIMUM_Y_AMOUNT (err u1020))\n(define-constant ERR_MINIMUM_LP_AMOUNT (err u1021))\n(define-constant ERR_INVALID_FEE (err u1022))\n(define-constant ERR_MINIMUM_BURN_AMOUNT (err u1023))\n(define-constant ERR_INVALID_MIN_BURNT_SHARES (err u1024))\n\n;; Contract deployer address\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n;; Maximum BPS\n(define-constant BPS u10000)\n\n;; Admins list and helper var used to remove admins\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n;; ID of last created pool\n(define-data-var last-pool-id uint u0)\n\n;; Minimum shares required to mint when creating a pool\n(define-data-var minimum-total-shares uint u10000)\n\n;; Minimum shares required to burn when creating a pool\n(define-data-var minimum-burnt-shares uint u1000)\n\n;; Data var used to enable or disable pool creation by anyone\n(define-data-var public-pool-creation bool false)\n\n;; Define pools map\n(define-map pools uint {\n    id: uint,\n    name: (string-ascii 32),\n    symbol: (string-ascii 32),\n    pool-contract: principal\n})\n\n;; Get admins list\n(define-read-only (get-admins)\n    (ok (var-get admins))\n)\n\n;; Get admin helper var\n(define-read-only (get-admin-helper)\n    (ok (var-get admin-helper))\n)\n\n;; Get ID of last created pool\n(define-read-only (get-last-pool-id)\n    (ok (var-get last-pool-id))\n)\n\n;; Get a pool by pool ID\n(define-read-only (get-pool-by-id (id uint))\n    (ok (map-get? pools id))\n)\n\n;; Get minimum shares required to mint when creating a pool\n(define-read-only (get-minimum-total-shares)\n    (ok (var-get minimum-total-shares))\n)\n\n;; Get minimum shares required to burn when creating a pool\n(define-read-only (get-minimum-burnt-shares)\n    (ok (var-get minimum-burnt-shares))\n)\n\n;; Get public pool creation status\n(define-read-only (get-public-pool-creation)\n    (ok (var-get public-pool-creation))\n)\n\n;; Get DY\n(define-public (get-dy\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get x-protocol-fee pool-data))\n    (provider-fee (get x-provider-fee pool-data))\n    \n    ;; Calculate fees and perform AMM calculations\n    (x-amount-fees-protocol (/ (* x-amount protocol-fee) BPS))\n    (x-amount-fees-provider (/ (* x-amount provider-fee) BPS))\n    (x-amount-fees-total (+ x-amount-fees-protocol x-amount-fees-provider))\n    (dx (- x-amount x-amount-fees-total))\n    (updated-x-balance (+ x-balance dx))\n    (dy (/ (* y-balance dx) updated-x-balance))\n    )\n    (begin\n        ;; Assert that pool-status is true and correct token traits are used\n        (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n        \n        ;; Assert that x-amount is greater than 0\n        (asserts! (> x-amount u0) ERR_INVALID_AMOUNT)\n\n        ;; Return number of y tokens the caller would receive\n        (ok dy)\n    )\n    )\n)\n\n;; Get DX\n(define-public (get-dx\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (y-amount uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get x-protocol-fee pool-data))\n    (provider-fee (get x-provider-fee pool-data))\n\n    ;; Calculate fees and perform AMM calculations\n    (y-amount-fees-protocol (/ (* y-amount protocol-fee) BPS))\n    (y-amount-fees-provider (/ (* y-amount provider-fee) BPS))\n    (y-amount-fees-total (+ y-amount-fees-protocol y-amount-fees-provider))\n    (dy (- y-amount y-amount-fees-total))\n    (updated-y-balance (+ y-balance dy))\n    (dx (/ (* x-balance dy) updated-y-balance))\n    )\n    (begin\n        ;; Assert that pool-status is true and correct token traits are used\n        (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n        ;; Assert that y-amount is greater than 0\n        (asserts! (> y-amount u0) ERR_INVALID_AMOUNT)\n\n        ;; Return number of x tokens the caller would receive\n        (ok dx)\n    )\n    )\n)\n\n;; Get DLP\n(define-public (get-dlp\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (pool-contract (contract-of pool-trait))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (total-shares (get total-shares pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n\n    ;; Calculate y-amount, pool balances, and dlp\n    (y-amount (/ (* x-amount y-balance) x-balance))\n    (updated-x-balance (+ x-balance x-amount))\n    (updated-y-balance (+ y-balance y-amount))\n    (dlp (/ (* x-amount total-shares) x-balance))\n    )\n    (begin\n        ;; Assert that pool-status is true and correct token traits are used\n        (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n        ;; Assert that x-amount and y-amount are greater than 0\n        (asserts! (> x-amount u0) ERR_INVALID_AMOUNT)\n        (asserts! (> y-amount u0) ERR_MINIMUM_Y_AMOUNT)\n\n        ;; Return number of LP tokens caller would receive and y-amount they would transfer\n        (ok {dlp: dlp, y-amount: y-amount})\n    )\n    )\n)\n\n;; Set minimum shares required to mint and burn when creating a pool\n(define-public (set-minimum-shares (min-total uint) (min-burnt uint))\n    (let (\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and amounts are greater than 0\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (and (> min-total u0) (> min-burnt u0)) ERR_INVALID_AMOUNT)\n        \n        ;; Assert that min-total is greater than min-burnt\n        (asserts! (> min-total min-burnt) ERR_INVALID_MIN_BURNT_SHARES)\n\n        ;; Update minimum-total-shares and minimum-burnt-shares\n        (var-set minimum-total-shares min-total)\n        (var-set minimum-burnt-shares min-burnt)\n\n        ;; Print function data and return true\n        (print {\n        action: \"set-minimum-shares\",\n        caller: caller,\n        data: {\n            min-total: min-total,\n            min-burnt: min-burnt\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Enable or disable public pool creation\n(define-public (set-public-pool-creation (status bool))\n    (let (\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n\n        ;; Set public-pool-creation to status\n        (var-set public-pool-creation status)\n        \n        ;; Print function data and return true\n        (print {action: \"set-public-pool-creation\", caller: caller, data: {status: status}})\n        (ok true)\n    )\n    )\n)\n\n;; Set pool uri for a pool\n(define-public (set-pool-uri (pool-trait <xyk-pool-trait>) (uri (string-utf8 256)))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Assert that uri length is greater than 0\n        (asserts! (> (len uri) u0) ERR_INVALID_POOL_URI)\n        \n        ;; Set pool uri for pool\n        (try! (contract-call? pool-trait set-pool-uri uri))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-pool-uri\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            uri: uri\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set pool status for a pool\n(define-public (set-pool-status (pool-trait <xyk-pool-trait>) (status bool))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Set pool status for pool\n        (try! (contract-call? pool-trait set-pool-status status))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-pool-status\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            status: status\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set fee address for a pool\n(define-public (set-fee-address (pool-trait <xyk-pool-trait>) (address principal))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Assert that address is standard principal\n        (asserts! (is-standard address) ERR_INVALID_PRINCIPAL)\n        \n        ;; Set fee address for pool\n        (try! (contract-call? pool-trait set-fee-address address))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-fee-address\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            address: address\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set x fees for a pool\n(define-public (set-x-fees (pool-trait <xyk-pool-trait>) (protocol-fee uint) (provider-fee uint))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Assert protocol-fee and provider-fee is less than maximum BPS\n        (asserts! (< (+ protocol-fee provider-fee) BPS) ERR_INVALID_FEE)\n        \n        ;; Set x fees for pool\n        (try! (contract-call? pool-trait set-x-fees protocol-fee provider-fee))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-x-fees\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            protocol-fee: protocol-fee,\n            provider-fee: provider-fee\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set y fees for a pool\n(define-public (set-y-fees (pool-trait <xyk-pool-trait>) (protocol-fee uint) (provider-fee uint))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Assert protocol-fee and provider-fee is less than maximum BPS\n        (asserts! (< (+ protocol-fee provider-fee) BPS) ERR_INVALID_FEE)\n        \n        ;; Set y fees for pool\n        (try! (contract-call? pool-trait set-y-fees protocol-fee provider-fee))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-y-fees\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            protocol-fee: protocol-fee,\n            provider-fee: provider-fee\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Create a new pool\n(define-public (create-pool \n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (y-amount uint)\n    (burn-amount uint)\n    (x-protocol-fee uint) (x-provider-fee uint)\n    (y-protocol-fee uint) (y-provider-fee uint)\n    (fee-address principal) (uri (string-utf8 256)) (status bool)\n    )\n    (let (\n    ;; Gather all pool data and pool contract\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-contract (contract-of pool-trait))\n    \n    ;; Get pool ID and create pool symbol and name \n    (new-pool-id (+ (var-get last-pool-id) u1))\n    (symbol (unwrap! (create-symbol x-token-trait y-token-trait) ERR_INVALID_POOL_SYMBOL))\n    (name (concat symbol \"-LP\"))\n    (x-token-contract (contract-of x-token-trait))\n    (y-token-contract (contract-of y-token-trait))\n\n    ;; Calculate total shares\n    (total-shares (sqrti (* x-amount y-amount)))\n    (min-burnt-shares (var-get minimum-burnt-shares))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that caller is an admin or public-pool-creation is true\n        (asserts! (or (is-some (index-of (var-get admins) caller)) (var-get public-pool-creation)) ERR_NOT_AUTHORIZED)\n        \n        ;; Assert that pool is not created\n        (asserts! (is-eq (get pool-created pool-data) false) ERR_POOL_ALREADY_CREATED)\n\n        ;; Assert that x-token-contract and y-token-contract are not matching\n        (asserts! (not (is-eq x-token-contract y-token-contract)) ERR_MATCHING_TOKEN_CONTRACTS)\n\n        ;; Assert that addresses are standard principals\n        (asserts! (is-standard x-token-contract) ERR_INVALID_PRINCIPAL)\n        (asserts! (is-standard y-token-contract) ERR_INVALID_PRINCIPAL)\n        (asserts! (is-standard fee-address) ERR_INVALID_PRINCIPAL)\n\n        ;; Assert that x and y amount is greater than 0\n        (asserts! (and (> x-amount u0) (> y-amount u0)) ERR_INVALID_AMOUNT)\n\n        ;; Assert that total shares minted meets minimum total shares required\n        (asserts! (>= total-shares (var-get minimum-total-shares)) ERR_MINIMUM_LP_AMOUNT)\n\n        ;; Assert that burn amount meets minimum shares required to burn\n        (asserts! (>= burn-amount min-burnt-shares) ERR_MINIMUM_BURN_AMOUNT)\n\n        ;; Assert that total shares is greater than or equal to 0 after subtracting burn amount\n        (asserts! (>= (- total-shares burn-amount) u0) ERR_MINIMUM_LP_AMOUNT)\n\n        ;; Assert that length of pool uri, symbol, and name is greater than 0\n        (asserts! (> (len uri) u0) ERR_INVALID_POOL_URI)\n        (asserts! (> (len symbol) u0) ERR_INVALID_POOL_SYMBOL)\n        (asserts! (> (len name) u0) ERR_INVALID_POOL_NAME)\n\n        ;; Assert that fees are less than maximum BPS\n        (asserts! (< (+ x-protocol-fee x-provider-fee) BPS) ERR_INVALID_FEE)\n        (asserts! (< (+ y-protocol-fee y-provider-fee) BPS) ERR_INVALID_FEE)\n\n        ;; Create pool and set fees\n        (try! (contract-call? pool-trait create-pool x-token-contract y-token-contract fee-address caller new-pool-id name symbol uri status))\n        (try! (contract-call? pool-trait set-x-fees x-protocol-fee x-provider-fee))\n        (try! (contract-call? pool-trait set-y-fees y-protocol-fee y-provider-fee))\n\n        ;; Update ID of last created pool and add pool to pools map\n        (var-set last-pool-id new-pool-id)\n        (map-set pools new-pool-id {id: new-pool-id, name: name, symbol: symbol, pool-contract: pool-contract})\n        \n        ;; Transfer x-amount x tokens and y-amount y tokens from caller to pool-contract\n        (try! (contract-call? x-token-trait transfer x-amount caller pool-contract none))\n        (try! (contract-call? y-token-trait transfer y-amount caller pool-contract none))\n\n        ;; Update pool balances\n        (try! (contract-call? pool-trait update-pool-balances x-amount y-amount))\n\n        ;; Mint LP tokens to caller \n        (try! (contract-call? pool-trait pool-mint (- total-shares burn-amount) caller))\n\n        ;; Mint burn amount LP tokens to pool-contract\n        (try! (contract-call? pool-trait pool-mint burn-amount pool-contract))\n\n        ;; Print create pool data and return true\n        (print {\n        action: \"create-pool\",\n        caller: caller,\n        data: {\n            pool-id: new-pool-id,\n            pool-name: name,\n            pool-contract: pool-contract,\n            x-token: x-token-contract,\n            y-token: y-token-contract,\n            x-protocol-fee: x-protocol-fee,\n            x-provider-fee: x-provider-fee,\n            y-protocol-fee: y-protocol-fee,\n            y-provider-fee: y-provider-fee,\n            x-amount: x-amount,\n            y-amount: y-amount,\n            burn-amount: burn-amount,\n            total-shares: total-shares,\n            pool-symbol: symbol,\n            pool-uri: uri,\n            pool-status: status,\n            creation-height: burn-block-height,\n            fee-address: fee-address\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Swap x token for y token via a pool\n(define-public (swap-x-for-y\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (min-dy uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (pool-contract (contract-of pool-trait))\n    (fee-address (get fee-address pool-data))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get x-protocol-fee pool-data))\n    (provider-fee (get x-provider-fee pool-data))\n    \n    ;; Calculate fees and perform AMM calculations\n    (x-amount-fees-protocol (/ (* x-amount protocol-fee) BPS))\n    (x-amount-fees-provider (/ (* x-amount provider-fee) BPS))\n    (x-amount-fees-total (+ x-amount-fees-protocol x-amount-fees-provider))\n    (dx (- x-amount x-amount-fees-total))\n    (updated-x-balance (+ x-balance dx))\n    (dy (/ (* y-balance dx) updated-x-balance))\n    (updated-y-balance (- y-balance dy))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that pool-status is true and correct token traits are used\n        (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n        \n        ;; Assert that x-amount is greater than 0\n        (asserts! (> x-amount u0) ERR_INVALID_AMOUNT)\n\n        ;; Assert that min-dy is greater than 0 and dy is greater than or equal to min-dy\n        (asserts! (> min-dy u0) ERR_INVALID_AMOUNT)\n        (asserts! (>= dy min-dy) ERR_MINIMUM_Y_AMOUNT)\n        \n        ;; Transfer dx + x-amount-fees-provider x tokens from caller to pool-contract\n        (try! (contract-call? x-token-trait transfer (+ dx x-amount-fees-provider) caller pool-contract none))\n        \n        ;; Transfer dy y tokens from pool-contract to caller\n        (try! (contract-call? pool-trait pool-transfer y-token-trait dy caller))\n        \n        ;; Transfer x-amount-fees-protocol x tokens from caller to fee-address\n        (if (> x-amount-fees-protocol u0)\n        (try! (contract-call? x-token-trait transfer x-amount-fees-protocol caller fee-address none))\n        false\n        )\n\n        ;; Update pool balances\n        (try! (contract-call? pool-trait update-pool-balances (+ updated-x-balance x-amount-fees-provider) updated-y-balance))\n        \n        ;; Print swap data and return number of y tokens the caller received\n        (print {\n        action: \"swap-x-for-y\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: pool-contract,\n            x-token: x-token,\n            y-token: y-token,\n            x-amount: x-amount,\n            x-amount-fees-protocol: x-amount-fees-protocol,\n            x-amount-fees-provider: x-amount-fees-provider,\n            dy: dy,\n            min-dy: min-dy\n        }\n        })\n        (ok dy)\n    )\n    )\n)\n\n;; Swap y token for x token via a pool\n(define-public (swap-y-for-x\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (y-amount uint) (min-dx uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (pool-contract (contract-of pool-trait))\n    (fee-address (get fee-address pool-data))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get y-protocol-fee pool-data))\n    (provider-fee (get y-provider-fee pool-data))\n\n    ;; Calculate fees and perform AMM calculations\n    (y-amount-fees-protocol (/ (* y-amount protocol-fee) BPS))\n    (y-amount-fees-provider (/ (* y-amount provider-fee) BPS))\n    (y-amount-fees-total (+ y-amount-fees-protocol y-amount-fees-provider))\n    (dy (- y-amount y-amount-fees-total))\n    (updated-y-balance (+ y-balance dy))\n    (dx (/ (* x-balance dy) updated-y-balance))\n    (updated-x-balance (- x-balance dx))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that pool-status is true and correct token traits are used\n        (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n        ;; Assert that y-amount is greater than 0\n        (asserts! (> y-amount u0) ERR_INVALID_AMOUNT)\n\n        ;; Assert that min-dx is greater than 0 and dx is greater than or equal to min-dx\n        (asserts! (> min-dx u0) ERR_INVALID_AMOUNT)\n        (asserts! (>= dx min-dx) ERR_MINIMUM_X_AMOUNT)\n\n        ;; Transfer dy + y-amount-fees-provider y tokens from caller to pool-contract\n        (try! (contract-call? y-token-trait transfer (+ dy y-amount-fees-provider) caller pool-contract none))\n        \n        ;; Transfer dx x tokens from pool-contract to caller \n        (try! (contract-call? pool-trait pool-transfer x-token-trait dx caller))\n        \n        ;; Transfer y-amount-fees-protocol y tokens from caller to fee-address\n        (if (> y-amount-fees-protocol u0)\n        (try! (contract-call? y-token-trait transfer y-amount-fees-protocol caller fee-address none))\n        false\n        )\n\n        ;; Update pool balances\n        (try! (contract-call? pool-trait update-pool-balances updated-x-balance (+ updated-y-balance y-amount-fees-provider)))\n        \n        ;; Print swap data and return number of x tokens the caller received\n        (print {\n        action: \"swap-y-for-x\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: pool-contract,\n            x-token: x-token,\n            y-token: y-token,\n            y-amount: y-amount,\n            y-amount-fees-protocol: y-amount-fees-protocol,\n            y-amount-fees-provider: y-amount-fees-provider,\n            dx: dx,\n            min-dx: min-dx\n        }\n        })\n        (ok dx)\n    )\n    )\n)\n\n;; Add liquidity to a pool\n(define-public (add-liquidity\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (min-dlp uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (pool-contract (contract-of pool-trait))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (total-shares (get total-shares pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n\n    ;; Calculate y-amount, pool balances, and dlp\n    (y-amount (/ (* x-amount y-balance) x-balance))\n    (updated-x-balance (+ x-balance x-amount))\n    (updated-y-balance (+ y-balance y-amount))\n    (dlp (/ (* x-amount total-shares) x-balance))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that pool-status is true and correct token traits are used\n        (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n        ;; Assert that x-amount and y-amount are greater than 0\n        (asserts! (> x-amount u0) ERR_INVALID_AMOUNT)\n        (asserts! (> y-amount u0) ERR_MINIMUM_Y_AMOUNT)\n\n        ;; Assert that min-dlp is greater than 0 and dlp is greater than or equal to min-dlp\n        (asserts! (> min-dlp u0) ERR_INVALID_AMOUNT)\n        (asserts! (>= dlp min-dlp) ERR_MINIMUM_LP_AMOUNT)\n\n        ;; Transfer x-amount x tokens from caller to pool-contract\n        (try! (contract-call? x-token-trait transfer x-amount caller pool-contract none))\n        \n        ;; Transfer y-amount y tokens from caller to pool-contract\n        (try! (contract-call? y-token-trait transfer y-amount caller pool-contract none))\n        \n        ;; Update pool balances\n        (try! (contract-call? pool-trait update-pool-balances updated-x-balance updated-y-balance))\n        \n        ;; Mint LP tokens to caller\n        (try! (contract-call? pool-trait pool-mint dlp caller))\n\n        ;; Print add liquidity data and return number of LP tokens caller received\n        (print {\n        action: \"add-liquidity\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: pool-contract,\n            x-token: x-token,\n            y-token: y-token,\n            x-amount: x-amount,\n            y-amount: y-amount,\n            dlp: dlp,\n            min-dlp: min-dlp\n        }\n        })\n        (ok dlp)\n    )\n    )\n)\n\n;; Withdraw liquidity from a pool\n(define-public (withdraw-liquidity\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (amount uint) (min-x-amount uint) (min-y-amount uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (total-shares (get total-shares pool-data))\n\n    ;; Calculate x-amount and y-amount to transfer and updated balances\n    (x-amount (/ (* amount x-balance) total-shares))\n    (y-amount (/ (* amount y-balance) total-shares))\n    (updated-x-balance (- x-balance x-amount))\n    (updated-y-balance (- y-balance y-amount))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that correct token traits are used\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n        ;; Assert that amount is greater than 0\n        (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n\n        ;; Assert that x-amount + y-amount is greater than 0\n        (asserts! (> (+ x-amount y-amount) u0) ERR_INVALID_AMOUNT)\n\n        ;; Assert that x-amount is greater than or equal to min-x-amount\n        (asserts! (>= x-amount min-x-amount) ERR_MINIMUM_X_AMOUNT)\n\n        ;; Assert that y-amount is greater than or equal to min-y-amount\n        (asserts! (>= y-amount min-y-amount) ERR_MINIMUM_Y_AMOUNT)\n\n        ;; Transfer x-amount x tokens from pool-contract to caller\n        (if (> x-amount u0)\n        (try! (contract-call? pool-trait pool-transfer x-token-trait x-amount caller))\n        false\n        )\n\n        ;; Transfer y-amount y tokens from pool-contract to caller\n        (if (> y-amount u0)\n        (try! (contract-call? pool-trait pool-transfer y-token-trait y-amount caller))\n        false\n        )\n\n        ;; Update pool balances\n        (try! (contract-call? pool-trait update-pool-balances updated-x-balance updated-y-balance))\n\n        ;; Burn LP tokens from caller\n        (try! (contract-call? pool-trait pool-burn amount caller))\n\n        ;; Print withdraw liquidity data and return number of x and y tokens caller received\n        (print {\n        action: \"withdraw-liquidity\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            x-token: x-token,\n            y-token: y-token,\n            amount: amount,\n            x-amount: x-amount,\n            y-amount: y-amount,\n            min-x-amount: min-x-amount,\n            min-y-amount: min-y-amount\n        }\n        })\n        (ok {x-amount: x-amount, y-amount: y-amount})\n    )\n    )\n)\n\n;; Add an admin to the admins list\n(define-public (add-admin (admin principal))\n    (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n    )\n    ;; Assert caller is an existing admin and new admin is not in admins-list\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    \n    ;; Add admin to list with max length of 5\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    \n    ;; Print add admin data and return true\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n    )\n)\n\n;; Remove an admin from the admins list\n(define-public (remove-admin (admin principal))\n    (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n    )\n    ;; Assert caller is an existing admin and admin to remove is in admins-list\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n\n    ;; Assert contract deployer cannot be removed\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n\n    ;; Set admin-helper to admin to remove and filter admins-list to remove admin\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removable admins-list))\n\n    ;; Print remove admin data and return true\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n    )\n)\n\n;; Set pool uri for multiple pools\n(define-public (set-pool-uri-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (uris (list 120 (string-utf8 256)))\n    )\n    (ok (map set-pool-uri pool-traits uris))\n)\n\n;; Set pool status for multiple pools\n(define-public (set-pool-status-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (statuses (list 120 bool))\n    )\n    (ok (map set-pool-status pool-traits statuses))\n)\n\n;; Set fee address for multiple pools\n(define-public (set-fee-address-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (addresses (list 120 principal))\n    )\n    (ok (map set-fee-address pool-traits addresses))\n)\n\n;; Set x fees for multiple pools\n(define-public (set-x-fees-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (protocol-fees (list 120 uint)) (provider-fees (list 120 uint))\n    )\n    (ok (map set-x-fees pool-traits protocol-fees provider-fees))\n)\n\n;; Set y fees for multiple pools\n(define-public (set-y-fees-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (protocol-fees (list 120 uint)) (provider-fees (list 120 uint))\n    )\n    (ok (map set-y-fees pool-traits protocol-fees provider-fees))\n)\n\n;; Helper function for removing an admin\n(define-private (admin-not-removable (admin principal))\n    (not (is-eq admin (var-get admin-helper)))\n)\n\n;; Create pool symbol using x token and y token symbols\n(define-private (create-symbol (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>))\n    (let (\n    ;; Get x token and y token symbols\n    (x-symbol (unwrap-panic (contract-call? x-token-trait get-symbol)))\n    (y-symbol (unwrap-panic (contract-call? y-token-trait get-symbol)))\n    \n    ;; Truncate symbols if length exceeds 14\n    (x-truncated \n        (if (> (len x-symbol) u14)\n        (unwrap-panic (slice? x-symbol u0 u14))\n        x-symbol\n        )\n    )\n    (y-truncated\n        (if (> (len y-symbol) u14)\n        (unwrap-panic (slice? y-symbol u0 u14))\n        y-symbol\n        )\n    )\n    )\n    ;; Return pool symbol with max length of 29\n    (as-max-len? (concat x-truncated (concat \"-\" y-truncated)) u29)\n    )\n)\n\n;; Check if a pool is valid\n(define-private (is-valid-pool (id uint) (contract principal))\n    (let (\n    (pool-data (unwrap! (map-get? pools id) false))\n    )\n    (is-eq contract (get pool-contract pool-data))\n    )\n)",
    "analysis": {
      "summary": "This contract facilitates the creation and management of XYK liquidity pools, enabling token swaps, liquidity provision, and liquidity withdrawal.",
      "explanation": "This Clarity smart contract implements an XYK (constant product) model for decentralized trading, allowing users to swap tokens, add liquidity to pools, and withdraw liquidity. It uses the SIP-010 standard for fungible tokens and a custom XYK pool trait for pool interactions. Key functionalities include pool creation, token swapping, liquidity management, and administrative controls. The contract includes error handling, admin management, and multi-pool operations with extensive use of traits for interoperability.\n\n- Error constants <L6-26> define various error conditions for contract operations.\n- The contract deployer is automatically set as an admin <L28>.\n- Admins can manage pools, set fees, and adjust contract parameters <L32-34>.\n- Pool data is stored in a map, allowing lookup by ID <L36>.\n- Various read-only functions <L38-68> provide information about the contract state, such as admin list, pool details, and configuration parameters.\n- The `get-dy`, `get-dx`, and `get-dlp` functions <L70-191> calculate swap outcomes and liquidity provision details based on the XYK model and input parameters.\n- Administrative functions <L193-506> allow authorized users to adjust critical parameters, manage pools, and perform batch updates.\n- The `create-pool` function <L508-652> enables the creation of new liquidity pools, requiring initial liquidity provision and setting various pool parameters.\n- Swap functions <L654-810> facilitate token exchanges, applying fees and ensuring pool balance updates.\n- Liquidity management functions <L812-934> allow users to add or withdraw liquidity, receiving LP tokens in proportion to their share of the pool.\n- Admin management <L936-1013> is handled through functions to add or remove admins, with checks to ensure only authorized users can make changes.\n- Helper functions <L1015-1066> and multi-operation versions of setting pool parameters <L1068-1103> provide utility and efficiency for batch operations.",
      "tags": [
        "XYK",
        "liquidity-pool",
        "token-swap",
        "DeFi",
        "SIP-010",
        "admin-management",
        "liquidity-management"
      ]
    }
  },
  {
    "rank": 22,
    "contract": "SP3SF2T474DXYEJ540GB27CZP3FG7FJ83X9RY4WF6.amm-pool-v2-02",
    "calls": 2128,
    "source": "(use-trait nma 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n(use-trait nmb 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait nmc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait)\n(use-trait share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n(use-trait share-fee-to-trait-c 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.share-fee-to-trait)\n(define-public (swap-helper-a (i <nma>) (iii <nma>) (ii uint) (l uint) (ll uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (lil uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper i iii ll ii (some l)) ) nn) lil) )\n(define-public (swap-helper-b (i <nma>)  (iii <nma>)  (l uint)  (ll uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (li uint) (lil uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper i iii ll (* (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to li lil))) nn) (some l)) )\n(define-public (swap-helper-c (i <nma>) (iii <nma>) (ii uint) (l uint) (ll uint) (mm <nmc>) (mmm <nmc>) (m <nmc>) (lil uint) (share-fee-to <share-fee-to-trait-c>) (nn uint)) (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-path2 swap-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper i iii ll ii (some l)) ) nn) lil mm mmm m share-fee-to ))\n(define-public (swap-helper-d (i <nma>)  (iii <nma>)  (l uint)  (ll uint) (mm <nmc>) (mmm <nmc>) (m <nmc>) (li uint) (lil uint) (share-fee-to <share-fee-to-trait-c>) (nn uint)) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper i iii ll (* (get amt-out (get c (try! (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-path2 swap-3 li lil mm mmm m share-fee-to) ))) nn) (some l)) )\n(define-public (swap-helper-e (mm <nmc>) (mmm <nmc>) (m <nmc>) (il uint) (nnn uint) (share-fee-to-c <share-fee-to-trait-c>) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (lil uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to (* (get amt-out (get c (try! (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-path2 swap-3 il nnn mm mmm m share-fee-to-c ))) ) nn) lil ))\n(define-public (swap-helper-f (mm <nmc>) (mmm <nmc>) (m <nmc>) (nnn uint) (share-fee-to-c <share-fee-to-trait-c>) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (li uint) (lil uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-path2 swap-3 (* (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to li lil))) nn) nnn mm mmm m share-fee-to-c ))\n(define-public (swap-helper-g (t <nma>) (tt <nma>) (ttt <nma>) (ii uint) (l uint) (ll uint) (n uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (lil uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a t tt ttt ll n ii (some l)) ) nn) lil) )\n(define-public (swap-helper-h (t <nma>) (tt <nma>) (ttt <nma>) (l uint) (ll uint) (n uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (li uint) (lil uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a t tt ttt ll n (* (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to li lil))) nn) (some l)) )\n(define-public (joker (mm <nma>) (mmm <nma>) (ll uint) (ii uint) (min-dy uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (li uint) (lil uint) (share-fee-to <share-fee-to-trait>) ) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper mm mmm ll ii (some min-dy))) (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to li lil) ))",
    "analysis": {
      "summary": "This contract facilitates complex token swaps using multiple helper functions to interact with AMM pools and routing through different token standards.",
      "explanation": "The contract is designed to interact with Automated Market Maker (AMM) pools and routers to facilitate token swaps, including direct swaps and multi-step swaps involving different token standards. It uses Clarity traits to ensure interoperability with different token standards and AMM implementations.\n\n- <L1-L4> declare the use of external contracts/trait definitions, ensuring that the contract can interact with specific SIP-010 fungible token standards and a share-fee-to trait for fee distribution.\n\n- <L5-L12> define multiple `swap-helper` functions, each tailored for different swapping scenarios. These functions call into either a univ2-router or an amm-pool contract, passing through a complex set of parameters that dictate the swap details. The functions differ by the number and type of tokens involved in the swap, the amount being swapped, and whether the swap involves a fee-sharing mechanism.\n\n- The `swap-helper-a` to `swap-helper-h` functions <L5-L12> are variations on a theme, each facilitating a different aspect of the swap process. For example, `swap-helper-a` <L5> is designed for a scenario where tokens are swapped through a univ2-router, calculating the amount after fees. The function takes a significant number of parameters, including token identifiers, amounts, and a share-fee-to address for fee distribution.\n\n- The `joker` function <L13> appears to be a high-level function that combines the functionality of the `swap-helper` functions with a final swap call to a univ2-router, indicating a complex swap operation that may involve multiple steps or token standards.\n\nEach function makes extensive use of the `contract-call?` function to interact with external contracts, demonstrating a complex interplay between different components of the Stacks ecosystem. The contract is a sophisticated example of how to build complex DeFi protocols on Stacks, leveraging the Clarity language's capabilities for secure, cross-contract calls.",
      "tags": [
        "DeFi",
        "AMM",
        "token-swap",
        "protocol",
        "interoperability"
      ]
    }
  },
  {
    "rank": 23,
    "contract": "SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token",
    "calls": 2003,
    "source": "(define-constant ERR-UNAUTHORIZED u1)\n(define-constant ERR-YOU-POOR u2)\n(define-fungible-token welshcorgicoin)\n(define-data-var token-uri (optional (string-utf8 256)) none)\n(define-constant contract-creator tx-sender)\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; SIP-010 Standard\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender)\n            (err ERR-UNAUTHORIZED))\n\n        (ft-transfer? welshcorgicoin amount from to)\n    )\n)\n\n(define-read-only (get-name)\n    (ok \"Welshcorgicoin\")\n)\n\n(define-read-only (get-symbol)\n    (ok \"WELSH\")\n)\n\n(define-read-only (get-decimals)\n    (ok u6)\n)\n\n(define-read-only (get-balance (user principal))\n    (ok (ft-get-balance welshcorgicoin user)\n    )\n)\n\n(define-read-only (get-total-supply)\n    (ok (ft-get-supply welshcorgicoin)\n    )\n)\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (if \n        (is-eq tx-sender contract-creator) \n            (ok (var-set token-uri (some value))) \n        (err ERR-UNAUTHORIZED)\n    )\n)\n\n(define-read-only (get-token-uri)\n    (ok (var-get token-uri)\n    )\n)\n\n;; send-many\n\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err\n    (map send-token recipients)\n    (ok true)\n  )\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result\n               err-value (err err-value)\n  )\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let\n    ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n;; The Great $WELSH TGE / Total 10B\n\n(begin\n  (try! (ft-mint? welshcorgicoin u10000000000000000 contract-creator)) \n)                   ",
    "analysis": {
      "summary": "This contract introduces 'Welshcorgicoin', a fungible token on the Stacks blockchain, adhering to the SIP-010 standard for fungible tokens, with additional features like setting a token URI and a bulk transfer functionality.",
      "explanation": "The contract defines a new fungible token named Welshcorgicoin with several key functionalities outlined by the SIP-010 standard and additional unique features. Here's a breakdown of its components:\n\n- <L1-L2> Error codes are defined for unauthorized access and insufficient funds.\n- <L3> Declares 'welshcorgicoin' as a fungible token using the `define-fungible-token` construct.\n- <L4> A data variable `token-uri` is defined to store an optional URI for the token, initially set to none.\n- <L5> The contract creator is stored as a constant, capturing the `tx-sender` at the time of contract deployment.\n- <L6> Implements the SIP-010 trait for fungible tokens, ensuring compatibility with the standard.\n\nThe `transfer` function <L9-15> allows tokens to be moved from one account to another, provided the `from` address matches the transaction sender, ensuring only the token owner can initiate a transfer.\n\nRead-only functions <L17-33> provide standard token information and balances, adhering to the SIP-010 standard.\n\nThe `set-token-uri` function <L35-39> allows the contract creator to update the token's URI, adding a layer of customization and information accessibility.\n\nThe `send-many` function <L41-49> introduces bulk transfer capability, allowing multiple tokens to be sent to different recipients in a single transaction, enhancing efficiency for batch processing.\n\nThe `send-token` and `send-token-with-memo` private functions <L51-63> support the `send-many` functionality, handling individual transfers within the bulk operation.\n\nFinally, the contract concludes with a token generation event (TGE) <L65-67>, minting a total of 10 billion Welshcorgicoin tokens to the contract creator's address, establishing the initial token supply.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "bulk-transfer",
        "token-URI"
      ]
    }
  },
  {
    "rank": 24,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.wrapper-velar-v-1-1",
    "calls": 1970,
    "source": "(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n\n(define-public (swap-helper-a (id uint) (token0 <ft-trait>) (token1 <ft-trait>) (token-in <ft-trait>) (token-out <ft-trait>) (share-fee-to <share-fee-to-trait>) (amt-in uint) (amt-out-min uint))\n  (let (\n    (call (try! (contract-call?\n          'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n          id\n          token0 token1\n          token-in token-out\n          share-fee-to\n          amt-in amt-out-min)))\n  )\n    (ok call)\n  )\n)\n\n(define-public (swap-helper-b (id uint) (token0 <ft-trait>) (token1 <ft-trait>) (token-in <ft-trait>) (token-out <ft-trait>) (share-fee-to <share-fee-to-trait>) (amt-in-max uint) (amt-out uint))\n  (let (\n    (call (try! (contract-call?\n          'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-tokens-for-exact-tokens\n          id\n          token0 token1\n          token-in token-out\n          share-fee-to\n          amt-in-max amt-out)))\n  )\n    (ok call)\n  )\n)",
    "analysis": {
      "summary": "This contract provides helper functions for swapping tokens on a decentralized exchange (DEX), specifically targeting two types of swaps: exact input for output and output for exact input.",
      "explanation": "The contract integrates with a DEX router, allowing users to swap tokens by specifying either the exact amount they want to send or the exact amount they want to receive. It uses the SIP-010 trait for fungible tokens and a custom trait for sharing fees.\n\n- The `use-trait` declarations at the beginning (<L1-2>) allow this contract to interact with external contracts that implement these traits, ensuring that the tokens and share-fee mechanism adhere to standard interfaces.\n\n- `swap-helper-a` (<L4-14>) is a public function enabling users to swap an exact amount of `token-in` for at least `amt-out-min` of `token-out`. It constructs a call to the `univ2-router`'s `swap-exact-tokens-for-tokens` function, passing through all necessary parameters. The `try!` macro is used to attempt the external call and revert the transaction if it fails.\n\n- `swap-helper-b` (<L16-26>) mirrors `swap-helper-a` but for the opposite scenario: swapping tokens to receive an exact amount of `token-out`, using `swap-tokens-for-exact-tokens` on the `univ2-router`. It requires specifying `amt-in-max` to limit the maximum amount of `token-in` that can be spent.\n\nBoth functions encapsulate the complexity of interacting with the DEX router, providing a simpler interface for specific swap operations. They return the result of the router call, which is expected to be an `ok` response if successful.",
      "tags": [
        "DeFi",
        "DEX",
        "token-swap",
        "fungible-token",
        "protocol-interaction"
      ]
    }
  },
  {
    "rank": 25,
    "contract": "SP1NAZ59R1ED0V6NH9N0EQBEB3MKT48CQCMKC5Q41.swap-router-v16",
    "calls": 1729,
    "source": "(use-trait et 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (impl-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (define-constant E8 u100000000) (define-read-only (s2e (n uint)) (* n u100)) (define-public (i1 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1)) (ok u0))) (define-public (o1 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l in u1)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i2 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda u5000000 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o2 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda u5000000 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (ok u0))) (define-public (i3 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0))) (define-public (o3 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i4 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnyc E8 (s2e in) none)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kielx1jn7 (unwrap-panic (contract-call? 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 get-balance tx-sender)) u1)) (ok u0))) (define-public (o4 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kielx1jn7 in u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnyc E8 (s2e (unwrap-panic (contract-call? 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 get-balance tx-sender))) none)) (ok u0))) (define-public (i5 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wdiko E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o5 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wdiko E8 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i6 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o6 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda E8 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i7 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u1)) (ok u0))) (define-public (o7 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c in u1)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i8 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw in u1)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0))) (define-public (o8 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1)) (ok u0))) (define-public (i9 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0))) (define-public (o9 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1 )) (ok u0))) (define-public (i10 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (ok u0))) (define-public (o10 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i11 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o11 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i12 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u22 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u21 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token get-balance tx-sender)) u1 )) (ok u0))) (define-public (o12 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u21 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u22 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i13 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4 swap-y-for-x 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-4 (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o13 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2 (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i14 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wpepe E8 (* u100000 (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (o14 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wpepe E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz get-balance tx-sender)) u1 )) (ok u0))) (define-public (i15 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc u5000000 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (ok u0))) (define-public (o15 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc u5000000 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (ok u0))) (define-public (i16 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (ok u0))) (define-public (o16 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (ok u0))) (define-public (i17 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wleo E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u28 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token get-balance tx-sender)) u1 )) (ok u0))) (define-public (o17 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u28 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wleo E8 (s2e (unwrap-panic (contract-call? 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i18 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-waeusdc E8 (s2e (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender))) none)) (ok u0))) (define-public (o18 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-waeusdc E8 (s2e in) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i19 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1)) (ok u0))) (define-public (o19 (in uint)) (begin (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc in u1)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i20 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.migrate-wrapped migrate)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (ok u0))) (define-public (o20 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.migrate-wrapped migrate)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (ok u0))) (define-public (i21 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wgoat E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u36 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx get-balance tx-sender)) u1 )) (ok u0))) (define-public (o21 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u36 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wgoat E8 (s2e (unwrap-panic (contract-call? 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (callback (p principal) (bp (buff 2048))) (let ((enc (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? bp u0 u16)) u16)))) (bh (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? bp u16 u20)) u4)))) (addr (get hashbytes (unwrap-panic (element-at? (get addrs (unwrap-panic (get-burn-block-info? pox-addrs bh))) (mod enc u2))))) (di (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? addr u0 u4)) u4)))) (do (mod enc (+ di u4294967295))) (c (mod do u100)) (in (* do u100)) (ts (if (< c u30) (if (<= c u11) (list (if (is-eq c u1) (i1 in) (err u0)) (if (is-eq c u2) (i2 in) (err u0)) (if (is-eq c u3) (i3 in) (err u0)) (if (is-eq c u4) (i4 in) (err u0)) (if (is-eq c u5) (i5 in) (err u0)) (if (is-eq c u6) (i6 in) (err u0)) (if (is-eq c u7) (i7 in) (err u0)) (if (is-eq c u8) (i8 in) (err u0)) (if (is-eq c u9) (i9 in) (err u0)) (if (is-eq c u10) (i10 in) (err u0)) (if (is-eq c u11) (i11 in) (err u0))) (list (if (is-eq c u12) (i12 in) (err u0)) (if (is-eq c u13) (i13 in) (err u0)) (if (is-eq c u14) (i14 in) (err u0)) (if (is-eq c u15) (i15 in) (err u0)) (if (is-eq c u16) (i16 in) (err u0)) (if (is-eq c u17) (i17 in) (err u0)) (if (is-eq c u18) (i18 in) (err u0)) (if (is-eq c u19) (i19 in) (err u0)) (if (is-eq c u20) (i20 in) (err u0)) (if (is-eq c u21) (i21 in) (err u0)))) (if (<= c u41) (list (if (is-eq c u31) (o1 in) (err u0)) (if (is-eq c u32) (o2 in) (err u0)) (if (is-eq c u33) (o3 in) (err u0)) (if (is-eq c u34) (o4 in) (err u0)) (if (is-eq c u35) (o5 in) (err u0)) (if (is-eq c u36) (o6 in) (err u0)) (if (is-eq c u37) (o7 in) (err u0)) (if (is-eq c u38) (o8 in) (err u0)) (if (is-eq c u39) (o9 in) (err u0)) (if (is-eq c u40) (o10 in) (err u0)) (if (is-eq c u41) (o11 in) (err u0))) (list (if (is-eq c u42) (o12 in) (err u0)) (if (is-eq c u43) (o13 in) (err u0)) (if (is-eq c u44) (o14 in) (err u0)) (if (is-eq c u45) (o15 in) (err u0)) (if (is-eq c u46) (o16 in) (err u0)) (if (is-eq c u47) (o17 in) (err u0)) (if (is-eq c u48) (o18 in) (err u0)) (if (is-eq c u49) (o19 in) (err u0)) (if (is-eq c u50) (o20 in) (err u0)) (if (is-eq c u51) (o21 in) (err u0))))))) (ok true))) (define-private (ee (bp (buff 2048)) (t <et>)) (as-contract (begin (asserts! (is-eq tx-sender (contract-of t)) (err u0)) (try! (contract-call? 'SPB75ZW15C90ZNDPQF4GSVNGBEJJA6WACZKNFVFK.vault-v1 flash-loan-stx t (stx-get-balance 'SPB75ZW15C90ZNDPQF4GSVNGBEJJA6WACZKNFVFK.vault-v1) tx-sender bp)) (let ((ba (stx-get-balance tx-sender))) (and (> ba u0) (try! (stx-transfer? ba tx-sender 'SP1VSDGJ3RCR2K8V1SY5DGNR733YACKPXPHEMXTFD)))) (ok true)))) (define-public (r0 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r1 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r2 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r3 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r4 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r5 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r6 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r7 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r8 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r9 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ra (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rb (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rc (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rd (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (re (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rf (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rg (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rh (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ri (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rj (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rk (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rl (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rm (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rn (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ro (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rp (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rq (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rr (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rs (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rt (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ru (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rv (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rw (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rx (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ry (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rz (bp (buff 2048)) (t <et>)) (ee bp t))",
    "analysis": {
      "summary": "This contract facilitates complex token swaps and interactions with multiple DeFi protocols on the Stacks blockchain, utilizing a callback mechanism for flash loans and a variety of token swap operations.",
      "explanation": "This contract is a sophisticated example of DeFi interactions on the Stacks blockchain, showcasing the use of flash loans, token swaps, and integration with various DeFi protocols. It defines constants, read-only functions, and public functions to perform a wide range of operations. Key points include:\n\n- Use of the `use-trait` and `impl-trait` declarations to integrate with external contracts, ensuring interoperability within the Stacks ecosystem.\n- The `define-constant` and `define-read-only` functions establish basic utilities and constants used throughout the contract, such as conversion rates and simple arithmetic operations.\n- The `define-public` functions are the core of this contract, enabling users to initiate various types of token swaps and DeFi interactions. These functions are designed to work with specific external contracts, identified by their principal IDs, to perform actions like swapping tokens, interacting with AMM pools, and executing flash loans.\n- A unique feature of this contract is its callback mechanism, which allows for complex, multi-step transactions that can be customized based on the outcome of initial operations. This is particularly evident in the `callback` function, which dynamically selects operations based on encoded instructions.\n- The contract also includes a set of `ee` and `rX` functions designed to facilitate flash loans from a specified vault contract. These functions ensure that the contract can borrow STX, perform predefined operations, and return the loan within a single transaction.\n\nOverall, this contract demonstrates advanced Clarity concepts, including contract calls, trait implementation, arithmetic operations, error handling, and dynamic execution based on contract state and external inputs.",
      "tags": [
        "DeFi",
        "token-swap",
        "flash-loan",
        "protocol-interaction",
        "AMM"
      ]
    }
  },
  {
    "rank": 26,
    "contract": "SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1",
    "calls": 1660,
    "source": "\n;; xyk-core-v-1-1\n\n(use-trait xyk-pool-trait .xyk-pool-trait-v-1-1.xyk-pool-trait)\n(use-trait sip-010-trait .sip-010-trait-ft-standard-v-1-1.sip-010-trait)\n\n(define-constant ERR_NOT_AUTHORIZED (err u1001))\n(define-constant ERR_INVALID_AMOUNT (err u1002))\n(define-constant ERR_INVALID_PRINCIPAL (err u1003))\n(define-constant ERR_ALREADY_ADMIN (err u2001))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u2002))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u2003))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u2004))\n(define-constant ERR_NO_POOL_DATA (err u3001))\n(define-constant ERR_POOL_NOT_CREATED (err u3002))\n(define-constant ERR_POOL_DISABLED (err u3003))\n(define-constant ERR_POOL_ALREADY_CREATED (err u3004))\n(define-constant ERR_INVALID_POOL (err u3005))\n(define-constant ERR_INVALID_POOL_URI (err u3006))\n(define-constant ERR_INVALID_POOL_SYMBOL (err u3007))\n(define-constant ERR_INVALID_TOKEN_SYMBOL (err u3009))\n(define-constant ERR_MATCHING_TOKEN_CONTRACTS (err u3010))\n(define-constant ERR_INVALID_X_TOKEN (err u3011))\n(define-constant ERR_INVALID_Y_TOKEN (err u3012))\n(define-constant ERR_MINIMUM_X_AMOUNT (err u3013))\n(define-constant ERR_MINIMUM_Y_AMOUNT (err u3014))\n(define-constant ERR_MINIMUM_LP_AMOUNT (err u3015))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-constant BPS u10000)\n(define-constant MINIMUM_SHARES u1000000)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var last-pool-id uint u0)\n\n(define-data-var public-pool-creation bool false)\n\n(define-map pools uint {\n  id: uint,\n  name: (string-ascii 256),\n  symbol: (string-ascii 256),\n  pool-contract: principal\n})\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-last-pool-id)\n  (ok (var-get last-pool-id))\n)\n\n(define-read-only (get-public-pool-creation)\n  (ok (var-get public-pool-creation))\n)\n\n(define-read-only (get-pool-by-id (id uint))\n  (ok (map-get? pools id))\n)\n\n(define-public (set-public-pool-creation (status bool))\n  (let (\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (var-set public-pool-creation status)\n      (print {action: \"set-public-pool-creation\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (set-pool-uri (pool-trait <xyk-pool-trait>) (uri (string-utf8 256)))\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n      (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n      (asserts! (> (len uri) u0) ERR_INVALID_POOL_URI)\n      (try! (as-contract (contract-call? pool-trait set-pool-uri uri)))\n      (print {\n        action: \"set-pool-uri\",\n        caller: caller,\n        data: {\n          pool-id: (get pool-id pool-data),\n          pool-name: (get pool-name pool-data),\n          pool-contract: (contract-of pool-trait),\n          uri: uri\n        }\n      })\n      (ok true)\n    )\n  )\n)\n\n(define-public (set-pool-status (pool-trait <xyk-pool-trait>) (status bool))\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n      (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n      (try! (as-contract (contract-call? pool-trait set-pool-status status)))\n      (print {\n        action: \"set-pool-status\",\n        caller: caller,\n        data: {\n          pool-id: (get pool-id pool-data),\n          pool-name: (get pool-name pool-data),\n          pool-contract: (contract-of pool-trait),\n          status: status\n        }\n      })\n      (ok true)\n    )\n  )\n)\n\n(define-public (set-fee-address (pool-trait <xyk-pool-trait>) (address principal))\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n      (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n      (asserts! (is-standard address) ERR_INVALID_PRINCIPAL)\n      (try! (as-contract (contract-call? pool-trait set-fee-address address)))\n      (print {\n        action: \"set-fee-address\",\n        caller: caller,\n        data: {\n          pool-id: (get pool-id pool-data),\n          pool-name: (get pool-name pool-data),\n          pool-contract: (contract-of pool-trait),\n          address: address\n        }\n      })\n      (ok true)\n    )\n  )\n)\n\n(define-public (set-x-fees (pool-trait <xyk-pool-trait>) (protocol-fee uint) (provider-fee uint))\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n      (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n      (try! (as-contract (contract-call? pool-trait set-x-fees protocol-fee provider-fee)))\n      (print {\n        action: \"set-x-fees\",\n        caller: caller,\n        data: {\n          pool-id: (get pool-id pool-data),\n          pool-name: (get pool-name pool-data),\n          pool-contract: (contract-of pool-trait),\n          protocol-fee: protocol-fee,\n          provider-fee: provider-fee\n        }\n      })\n      (ok true)\n    )\n  )\n)\n\n(define-public (set-y-fees (pool-trait <xyk-pool-trait>) (protocol-fee uint) (provider-fee uint))\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n      (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n      (try! (as-contract (contract-call? pool-trait set-y-fees protocol-fee provider-fee)))\n      (print {\n        action: \"set-y-fees\",\n        caller: caller,\n        data: {\n          pool-id: (get pool-id pool-data),\n          pool-name: (get pool-name pool-data),\n          pool-contract: (contract-of pool-trait),\n          protocol-fee: protocol-fee,\n          provider-fee: provider-fee\n        }\n      })\n      (ok true)\n    )\n  )\n)\n\n(define-public (create-pool \n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (y-amount uint)\n    (x-protocol-fee uint) (x-provider-fee uint)\n    (y-protocol-fee uint) (y-provider-fee uint)\n    (fee-address principal) (uri (string-utf8 256)) (status bool)\n  )\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-contract (contract-of pool-trait))\n    (new-pool-id (+ (var-get last-pool-id) u1))\n    (symbol (unwrap! (create-symbol x-token-trait y-token-trait) ERR_INVALID_POOL_SYMBOL))\n    (name (concat symbol \"-LP\"))\n    (x-token-contract (contract-of x-token-trait))\n    (y-token-contract (contract-of y-token-trait))\n    (total-shares (sqrti (* x-amount y-amount)))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (or (is-some (index-of (var-get admins) caller)) (var-get public-pool-creation)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-eq (get pool-created pool-data) false) ERR_POOL_ALREADY_CREATED)\n      (asserts! (not (is-eq x-token-contract y-token-contract)) ERR_MATCHING_TOKEN_CONTRACTS)\n      (asserts! (is-standard x-token-contract) ERR_INVALID_PRINCIPAL)\n      (asserts! (is-standard y-token-contract) ERR_INVALID_PRINCIPAL)\n      (asserts! (is-standard fee-address) ERR_INVALID_PRINCIPAL)\n      (asserts! (> x-amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (> y-amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (> total-shares MINIMUM_SHARES) ERR_MINIMUM_LP_AMOUNT)\n      (asserts! (> (len uri) u0) ERR_INVALID_POOL_URI)\n      (try! (as-contract (contract-call? pool-trait create-pool x-token-contract y-token-contract fee-address new-pool-id name symbol uri status)))\n      (try! (as-contract (contract-call? pool-trait set-x-fees x-protocol-fee x-provider-fee)))\n      (try! (as-contract (contract-call? pool-trait set-y-fees y-protocol-fee y-provider-fee)))\n      (var-set last-pool-id new-pool-id)\n      (map-set pools new-pool-id {id: new-pool-id, name: name, symbol: symbol, pool-contract: pool-contract})\n      (try! (contract-call? x-token-trait transfer x-amount caller pool-contract none))\n      (try! (contract-call? y-token-trait transfer y-amount caller pool-contract none))\n      (try! (as-contract (contract-call? pool-trait update-pool-balances x-amount y-amount)))\n      (try! (as-contract (contract-call? pool-trait pool-mint (- total-shares MINIMUM_SHARES) caller)))\n      (try! (as-contract (contract-call? pool-trait pool-mint MINIMUM_SHARES pool-contract)))\n      (print {\n        action: \"create-pool\",\n        caller: caller,\n        data: {\n          pool-id: new-pool-id,\n          pool-name: name,\n          pool-contract: pool-contract,\n          x-token: x-token-contract,\n          y-token: y-token-contract,\n          x-protocol-fee: x-protocol-fee,\n          x-provider-fee: x-provider-fee,\n          y-protocol-fee: y-protocol-fee,\n          y-provider-fee: y-provider-fee,\n          x-amount: x-amount,\n          y-amount: y-amount,\n          total-shares: total-shares,\n          pool-symbol: symbol,\n          pool-uri: uri,\n          pool-status: status,\n          creation-height: burn-block-height,\n          fee-address: fee-address\n        }\n      })\n      (ok true)\n    )\n  )\n)\n\n(define-public (swap-x-for-y\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (min-dy uint)\n  )\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-contract (contract-of pool-trait))\n    (fee-address (get fee-address pool-data))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get x-protocol-fee pool-data))\n    (provider-fee (get x-provider-fee pool-data))\n    (x-amount-fees-protocol (/ (* x-amount protocol-fee) BPS))\n    (x-amount-fees-provider (/ (* x-amount provider-fee) BPS))\n    (x-amount-fees-total (+ x-amount-fees-protocol x-amount-fees-provider))\n    (dx (- x-amount x-amount-fees-total))\n    (updated-x-balance (+ x-balance dx))\n    (dy (/ ( * y-balance dx) (+ updated-x-balance)))\n    (updated-y-balance ( - y-balance dy))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n      (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n      (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n      (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n      (asserts! (> x-amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (> min-dy u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= dy min-dy) ERR_MINIMUM_Y_AMOUNT)\n      (try! (contract-call? x-token-trait transfer (+ dx x-amount-fees-provider) caller pool-contract none))\n      (try! (as-contract (contract-call? pool-trait pool-transfer y-token-trait dy caller)))\n      (if (> x-amount-fees-protocol u0)\n        (try! (contract-call? x-token-trait transfer x-amount-fees-protocol caller fee-address none))\n        false\n      )\n      (try! (as-contract (contract-call? pool-trait update-pool-balances (+ updated-x-balance x-amount-fees-provider) updated-y-balance)))\n      (print {\n        action: \"swap-x-for-y\",\n        caller: caller,\n        data: {\n          pool-id: (get pool-id pool-data),\n          pool-name: (get pool-name pool-data),\n          pool-contract: pool-contract,\n          x-token: x-token,\n          y-token: y-token,\n          x-amount: x-amount,\n          x-amount-fees-protocol: x-amount-fees-protocol,\n          x-amount-fees-provider: x-amount-fees-provider,\n          dy: dy,\n          min-dy: min-dy\n        }\n      })\n      (ok dy)\n    )\n  )\n)\n\n(define-public (swap-y-for-x\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (y-amount uint) (min-dx uint)\n  )\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-contract (contract-of pool-trait))\n    (fee-address (get fee-address pool-data))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get y-protocol-fee pool-data))\n    (provider-fee (get y-provider-fee pool-data))\n    (y-amount-fees-protocol (/ (* y-amount protocol-fee) BPS))\n    (y-amount-fees-provider (/ (* y-amount provider-fee) BPS))\n    (y-amount-fees-total (+ y-amount-fees-protocol y-amount-fees-provider))\n    (dy (- y-amount y-amount-fees-total))\n    (updated-y-balance (+ y-balance dy))\n    (dx (/ ( * x-balance dy) (+ updated-y-balance)))\n    (updated-x-balance ( - x-balance dx))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n      (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n      (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n      (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n      (asserts! (> y-amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (> min-dx u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= dx min-dx) ERR_MINIMUM_X_AMOUNT)\n      (try! (contract-call? y-token-trait transfer (+ dy y-amount-fees-provider) caller pool-contract none))\n      (try! (as-contract (contract-call? pool-trait pool-transfer x-token-trait dx caller)))\n      (if (> y-amount-fees-protocol u0)\n        (try! (contract-call? y-token-trait transfer y-amount-fees-protocol caller fee-address none))\n        false\n      )\n      (try! (as-contract (contract-call? pool-trait update-pool-balances updated-x-balance (+ updated-y-balance y-amount-fees-provider))))\n      (print {\n        action: \"swap-y-for-x\",\n        caller: caller,\n        data: {\n          pool-id: (get pool-id pool-data),\n          pool-name: (get pool-name pool-data),\n          pool-contract: pool-contract,\n          x-token: x-token,\n          y-token: y-token,\n          y-amount: y-amount,\n          y-amount-fees-protocol: y-amount-fees-protocol,\n          y-amount-fees-provider: y-amount-fees-provider,\n          dx: dx,\n          min-dx: min-dx\n        }\n      })\n      (ok dx)\n    )\n  )\n)\n\n(define-public (add-liquidity\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (min-dlp uint)\n  )\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-contract (contract-of pool-trait))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (total-shares (get total-shares pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (y-amount (/ (* x-amount y-balance) x-balance))\n    (updated-x-balance (+ x-balance x-amount))\n    (updated-y-balance (+ y-balance y-amount))\n    (dlp (/ (* x-amount total-shares) x-balance))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n      (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n      (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n      (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n      (asserts! (> x-amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (> min-dlp u0) ERR_INVALID_AMOUNT)\n      (asserts! (> y-amount u0) ERR_MINIMUM_Y_AMOUNT)\n      (asserts! (>= dlp min-dlp) ERR_MINIMUM_LP_AMOUNT)\n      (try! (contract-call? x-token-trait transfer x-amount caller pool-contract none))\n      (try! (contract-call? y-token-trait transfer y-amount caller pool-contract none))\n      (try! (as-contract (contract-call? pool-trait update-pool-balances updated-x-balance updated-y-balance)))\n      (try! (as-contract (contract-call? pool-trait pool-mint dlp caller)))\n      (print {\n        action: \"add-liquidity\",\n        caller: caller,\n        data: {\n          pool-id: (get pool-id pool-data),\n          pool-name: (get pool-name pool-data),\n          pool-contract: pool-contract,\n          x-token: x-token,\n          y-token: y-token,\n          x-amount: x-amount,\n          y-amount: y-amount,\n          dlp: dlp,\n          min-dlp: min-dlp\n        }\n      })\n      (ok dlp)\n    )\n  )\n)\n\n(define-public (withdraw-liquidity\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (amount uint) (min-x-amount uint) (min-y-amount uint)\n  )\n  (let (\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (total-shares (get total-shares pool-data))\n    (x-amount (/ (* amount x-balance) total-shares))\n    (y-amount (/ (* amount y-balance) total-shares))\n    (updated-x-balance (- x-balance x-amount))\n    (updated-y-balance (- y-balance y-amount))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n      (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n      (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (> (+ x-amount y-amount) u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= x-amount min-x-amount) ERR_MINIMUM_X_AMOUNT)\n      (asserts! (>= y-amount min-y-amount) ERR_MINIMUM_Y_AMOUNT)\n      (if (> x-amount u0)\n        (try! (as-contract (contract-call? pool-trait pool-transfer x-token-trait x-amount caller)))\n        false\n      )\n      (if (> y-amount u0)\n        (try! (as-contract (contract-call? pool-trait pool-transfer y-token-trait y-amount caller)))\n        false\n      )\n      (try! (as-contract (contract-call? pool-trait update-pool-balances updated-x-balance updated-y-balance)))\n      (try! (as-contract (contract-call? pool-trait pool-burn amount caller)))\n      (print {\n        action: \"withdraw-liquidity\",\n        caller: caller,\n        data: {\n          pool-id: (get pool-id pool-data),\n          pool-name: (get pool-name pool-data),\n          pool-contract: (contract-of pool-trait),\n          x-token: x-token,\n          y-token: y-token,\n          amount: amount,\n          x-amount: x-amount,\n          y-amount: y-amount,\n          min-x-amount: min-x-amount,\n          min-y-amount: min-y-amount\n        }\n      })\n      (ok {x-amount: x-amount, y-amount: y-amount})\n    )\n  )\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller-in-list (index-of admins-list tx-sender))\n    (admin-to-remove-in-list (index-of admins-list admin))\n    (caller tx-sender)\n  )\n    (asserts! (is-some caller-in-list) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some admin-to-remove-in-list) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removeable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (set-pool-uri-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (uris (list 120 (string-utf8 256)))\n  )\n  (ok (map set-pool-uri pool-traits uris))\n)\n\n(define-public (set-pool-status-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (statuses (list 120 bool))\n  )\n  (ok (map set-pool-status pool-traits statuses))\n)\n\n(define-public (set-fee-address-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (addresses (list 120 principal))\n  )\n  (ok (map set-fee-address pool-traits addresses))\n)\n\n(define-public (set-x-fees-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (protocol-fees (list 120 uint)) (provider-fees (list 120 uint))\n  )\n  (ok (map set-x-fees pool-traits protocol-fees provider-fees))\n)\n\n(define-public (set-y-fees-multi\n    (pool-traits (list 120 <xyk-pool-trait>))\n    (protocol-fees (list 120 uint)) (provider-fees (list 120 uint))\n  )\n  (ok (map set-y-fees pool-traits protocol-fees provider-fees))\n)\n\n(define-private (admin-not-removeable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)\n\n(define-private (create-symbol (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>))\n  (let (\n    (x-symbol (unwrap! (contract-call? x-token-trait get-symbol) ERR_INVALID_TOKEN_SYMBOL))\n    (y-symbol (unwrap! (contract-call? y-token-trait get-symbol) ERR_INVALID_TOKEN_SYMBOL))\n  )\n    (ok (concat x-symbol (concat \"-\" y-symbol)))\n  )\n)\n\n(define-private (is-valid-pool (id uint) (contract principal))\n  (let (\n    (pool-data (unwrap! (map-get? pools id) false))\n  )\n    (is-eq contract (get pool-contract pool-data))\n  )\n)\n",
    "analysis": {
      "summary": "This contract manages liquidity pools for a decentralized exchange (DEX) using the XYK model, allowing for pool creation, liquidity provision, swaps, and administrative functions.",
      "explanation": "The contract implements an XYK model DEX, enabling token swaps, liquidity pool management, and administrative controls. Key functionalities include creating liquidity pools, adding/removing liquidity, performing token swaps, and managing pool settings. Admins have special privileges like setting pool URIs, statuses, and fees. The contract uses the SIP-010 trait for fungible tokens, ensuring compatibility with Stacks' token standard.\n\n- <L1-25> define constants for error codes.\n- <L27> sets the contract deployer as a constant.\n- <L29-31> define constants used in fee calculations and minimum shares.\n- <L33-36> initialize state variables including admin list, helper, pool ID, and public pool creation flag.\n- <L38-66> define maps and read-only functions for accessing contract state.\n- <L68-182> include public functions for setting pool parameters, managed by admins. These functions check for admin privileges and validate inputs before updating pool traits.\n- <L184-245> `create-pool` function allows creating new liquidity pools with initial parameters and tokens, enforcing minimum liquidity and ensuring pool uniqueness.\n- <L247-312> `swap-x-for-y` and `swap-y-for-x` enable token swaps within pools, calculating swap amounts and fees, and updating pool balances.\n- <L314-359> `add-liquidity` and `withdraw-liquidity` allow users to contribute to or withdraw from pool liquidity, adjusting their share of the pool.\n- <L361-388> admin management functions enable adding or removing admins, with checks to prevent unauthorized changes or removing the contract deployer.\n- <L390-428> multi-functions facilitate batch updates to pools, improving efficiency for administrative tasks.\n- <L430-446> private helper functions assist in admin management and symbol creation for new pools.",
      "tags": [
        "DEX",
        "liquidity-pool",
        "XYK-model",
        "DeFi",
        "protocol",
        "admin-management"
      ]
    }
  },
  {
    "rank": 27,
    "contract": "SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1",
    "calls": 1575,
    "source": ";; @contract Swap - Decentralised exchange\n;; @version 2\n\n(use-trait ft-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait swap-token .arkadiko-swap-trait-v1.swap-trait)\n\n(define-constant ERR-NOT-AUTHORIZED u20401)\n(define-constant INVALID-PAIR-ERR (err u201))\n(define-constant ERR-INVALID-LIQUIDITY u202)\n(define-constant ERR-NO-FEE-TO-ADDRESS u203)\n(define-constant ERR-WRONG-SWAP-TOKEN u204)\n(define-constant ERR-EMERGENCY-SHUTDOWN-ACTIVATED u205)\n(define-constant ERR-PAIR-DISABLED u206)\n\n(define-constant no-liquidity-err (err u61))\n(define-constant not-owner-err (err u63))\n(define-constant no-such-position-err (err u66))\n(define-constant balance-too-low-err (err u67))\n(define-constant too-many-pairs-err (err u68))\n(define-constant pair-already-exists-err (err u69))\n(define-constant wrong-token-err (err u70))\n(define-constant too-much-slippage-err (err u71))\n(define-constant transfer-x-failed-err (err u72))\n(define-constant transfer-y-failed-err (err u73))\n(define-constant value-out-of-range-err (err u74))\n(define-constant no-fee-x-err (err u75))\n(define-constant no-fee-y-err (err u76))\n\n(define-data-var swap-shutdown-activated bool false)\n\n(define-public (toggle-swap-shutdown)\n  (begin\n    (asserts! (is-eq contract-caller (contract-call? .arkadiko-dao get-guardian-address)) (err ERR-NOT-AUTHORIZED))\n\n    (ok (var-set swap-shutdown-activated (not (var-get swap-shutdown-activated))))\n  )\n)\n\n(define-map pairs-map\n  { pair-id: uint }\n  {\n    token-x: principal,\n    token-y: principal,\n  }\n)\n\n(define-map pairs-data-map\n  {\n    token-x: principal,\n    token-y: principal,\n  }\n  {\n    enabled: bool,\n    shares-total: uint,\n    balance-x: uint,\n    balance-y: uint,\n    fee-balance-x: uint,\n    fee-balance-y: uint,\n    fee-to-address: (optional principal),\n    swap-token: principal,\n    name: (string-ascii 32),\n  }\n)\n\n(define-map registered-swap-tokens\n  { swap-token: principal }\n  { registered: bool }\n)\n\n(define-data-var pair-count uint u0)\n\n(define-read-only (shutdown-not-activated)\n  (and\n     (not (unwrap-panic (contract-call? .arkadiko-dao get-emergency-shutdown-activated)))\n     (not (var-get swap-shutdown-activated))\n  )\n)\n\n(define-read-only (get-name (token-x-trait <ft-trait>) (token-y-trait <ft-trait>))\n  (let\n    (\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (pair (unwrap! (map-get? pairs-data-map { token-x: token-x, token-y: token-y }) (err INVALID-PAIR-ERR)))\n    )\n    (ok (get name pair))\n  )\n)\n\n(define-read-only (get-total-supply (token-x-trait <ft-trait>) (token-y-trait <ft-trait>))\n  (let\n    (\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (pair (unwrap! (map-get? pairs-data-map { token-x: token-x, token-y: token-y }) (err INVALID-PAIR-ERR)))\n    )\n    (ok (get shares-total pair))\n  )\n)\n\n;; @desc get the total number of shares in the pool\n;; @param token-x; address of token X in the pool\n;; @param token-y; address of token Y in the pool\n;; @post uint; returns total number of shares\n(define-read-only (get-shares (token-x principal) (token-y principal))\n  (ok (get shares-total (unwrap! (map-get? pairs-data-map { token-x: token-x, token-y: token-y }) (err INVALID-PAIR-ERR))))\n)\n\n;; @desc get token balances for the pair\n;; @param token-x-trait; first token of pair\n;; @param token-y-trait; second token of pair\n;; @post list; returns balance for first and second token in a list\n(define-public (get-balances (token-x-trait <ft-trait>) (token-y-trait <ft-trait>))\n  (let\n    (\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (pair (unwrap! (map-get? pairs-data-map { token-x: token-x, token-y: token-y }) (err INVALID-PAIR-ERR)))\n    )\n    (ok (list (get balance-x pair) (get balance-y pair)))\n  )\n)\n\n;; @desc get all data for the LP token\n;; @param token-x-trait; first token of pair\n;; @param token-y-trait; second token of pair\n;; @param swap-token-trait; LP token\n;; @param owner; data returned will contain balance for this user\n;; @post tuple; all LP token information\n(define-public (get-data (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (swap-token-trait <swap-token>) (owner principal))\n  (let\n    (\n      (token-data (unwrap-panic (contract-call? swap-token-trait get-data owner)))\n      (balances (unwrap-panic (get-balances token-x-trait token-y-trait)))\n    )\n    (ok (merge token-data { balances: balances }))\n  )\n)\n\n(define-read-only (is-registered-swap-token (swap-token principal))\n  (is-some (map-get? registered-swap-tokens { swap-token: swap-token }))\n)\n\n(define-private (register-swap-token (swap-token principal))\n  (begin\n    (asserts! (not (is-registered-swap-token swap-token)) (err ERR-WRONG-SWAP-TOKEN))\n    (ok (map-set registered-swap-tokens { swap-token: swap-token } { registered: true }))\n  )\n)\n\n;; @desc add liquidity to a pair\n;; @param token-x-trait; first token of pair\n;; @param token-y-trait; second token of pair\n;; @param swap-token-trait; LP token\n;; @param x; amount to add to first token of pair\n;; @param y; amount to add to second token of pair, only used when pair is created\n;; @post boolean; returns true if liquidity added\n(define-public (add-to-position (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (swap-token-trait <swap-token>) (x uint) (y uint))\n  (let\n    (\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (pair (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n      (contract-address (as-contract tx-sender))\n      (recipient-address tx-sender)\n      (balance-x (get balance-x pair))\n      (balance-y (get balance-y pair))\n      (swap-token (get swap-token pair))\n      (new-shares\n        (if (is-eq (get shares-total pair) u0)\n          (sqrti (* x y))\n          (/ (* x (get shares-total pair)) balance-x)\n        )\n      )\n      (new-y\n        (if (is-eq (get shares-total pair) u0)\n          y\n          (/ (* x balance-y) balance-x)\n        )\n      )\n      (pair-updated (merge pair {\n        shares-total: (+ new-shares (get shares-total pair)),\n        balance-x: (+ balance-x x),\n        balance-y: (+ balance-y new-y)\n      }))\n    )\n    (asserts! (and (> x u0) (> new-y u0)) (err ERR-INVALID-LIQUIDITY))\n    (asserts! (is-eq swap-token (contract-of swap-token-trait)) (err ERR-WRONG-SWAP-TOKEN))\n    (asserts! (shutdown-not-activated) (err ERR-EMERGENCY-SHUTDOWN-ACTIVATED))\n\n    (if (is-eq token-x .wrapped-stx-token)\n      (begin\n        (try! (contract-call? .arkadiko-dao mint-token .wrapped-stx-token x tx-sender))\n        (try! (stx-transfer? x tx-sender contract-address))\n      )\n      false\n    )\n    (if (is-eq token-y .wrapped-stx-token)\n      (begin\n        (try! (contract-call? .arkadiko-dao mint-token .wrapped-stx-token y tx-sender))\n        (try! (stx-transfer? y tx-sender contract-address))\n      )\n      false\n    )\n\n    (asserts! (is-ok (contract-call? token-x-trait transfer x tx-sender contract-address none)) transfer-x-failed-err)\n    (asserts! (is-ok (contract-call? token-y-trait transfer new-y tx-sender contract-address none)) transfer-y-failed-err)\n\n    (map-set pairs-data-map { token-x: token-x, token-y: token-y } pair-updated)\n    (try! (contract-call? swap-token-trait mint recipient-address new-shares))\n    (print { object: \"pair\", action: \"liquidity-added\", data: pair-updated })\n    (ok true)\n  )\n)\n\n(define-read-only (get-pair-details (token-x principal) (token-y principal))\n  (let (\n    (pair (map-get? pairs-data-map { token-x: token-x, token-y: token-y }))\n  )\n    (if (is-some pair)\n      (ok pair)\n      (err INVALID-PAIR-ERR)\n    )\n  )\n)\n\n(define-read-only (get-pair-contracts (pair-id uint))\n  (unwrap-panic (map-get? pairs-map { pair-id: pair-id }))\n)\n\n(define-read-only (get-pair-count)\n  (ok (var-get pair-count))\n)\n\n(define-public (migrate-create-pair (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (swap-token-trait <swap-token>) (pair-name (string-ascii 32)) (shares-total uint))\n\n  (let (\n    (pair-id (+ (var-get pair-count) u1))\n    (token-x (contract-of token-x-trait))\n    (token-y (contract-of token-y-trait))\n    (token-swap (contract-of swap-token-trait))\n\n    (pair-data {\n      enabled: false,\n      shares-total: shares-total,\n      balance-x: u0,\n      balance-y: u0,\n      fee-balance-x: u0,\n      fee-balance-y: u0,\n      fee-to-address: (some (contract-call? .arkadiko-dao get-payout-address)),\n      swap-token: token-swap,\n      name: pair-name,\n    })\n  )\n    (asserts! (is-eq contract-caller (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n    (asserts!\n      (and\n        (is-none (map-get? pairs-data-map { token-x: token-x, token-y: token-y }))\n        (is-none (map-get? pairs-data-map { token-x: token-y, token-y: token-x }))\n      )\n      pair-already-exists-err\n    )\n\n    ;; Register swap token\n    (try! (register-swap-token token-swap))\n\n    ;; Update maps\n    (map-set pairs-data-map { token-x: token-x, token-y: token-y } pair-data)\n    (map-set pairs-map { pair-id: pair-id } { token-x: token-x, token-y: token-y })\n\n    ;; Increase pair count\n    (var-set pair-count pair-id)\n\n    (ok true)\n  )\n\n)\n\n(define-public (migrate-add-liquidity (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (x uint) (y uint))\n\n  (let (\n    (contract-address (as-contract tx-sender))\n    (token-x (contract-of token-x-trait))\n    (token-y (contract-of token-y-trait))\n    (pair-data (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n    (new-balance-x (+ (get balance-x pair-data) x))\n    (new-balance-y (+ (get balance-y pair-data) y))\n  )\n    (asserts! (is-eq contract-caller (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n\n    ;; Transfer tokens from tx-sender to this contract\n    (if (is-eq token-x .wrapped-stx-token)\n      (begin\n        (try! (contract-call? .arkadiko-dao mint-token .wrapped-stx-token x tx-sender))\n        (try! (stx-transfer? x tx-sender contract-address))\n      )\n      false\n    )\n    (if (is-eq token-y .wrapped-stx-token)\n      (begin\n        (try! (contract-call? .arkadiko-dao mint-token .wrapped-stx-token y tx-sender))\n        (try! (stx-transfer? y tx-sender contract-address))\n      )\n      false\n    )\n    (asserts! (is-ok (contract-call? token-x-trait transfer x tx-sender contract-address none)) transfer-x-failed-err)\n    (asserts! (is-ok (contract-call? token-y-trait transfer y tx-sender contract-address none)) transfer-y-failed-err)\n\n    (map-set pairs-data-map\n      { token-x: token-x, token-y: token-y }\n      (merge pair-data { balance-x: new-balance-x, balance-y: new-balance-y })\n    )\n\n    (ok true)\n  )\n\n)\n\n;; @desc create a new pair\n;; @param token-x-trait; first token of pair\n;; @param token-y-trait; second token of pair\n;; @param swap-token-trait; LP token\n;; @param pair-name; name for the new pair\n;; @param x; amount to add to first token of pair\n;; @param y; amount to add to second token of pair\n;; @post boolean; returns true if pair created\n(define-public (create-pair\n  (token-x-trait <ft-trait>)\n  (token-y-trait <ft-trait>)\n  (swap-token-trait <swap-token>)\n  (pair-name (string-ascii 32))\n  (x uint)\n  (y uint)\n)\n  (let\n    (\n      (name-x (unwrap-panic (contract-call? token-x-trait get-name)))\n      (name-y (unwrap-panic (contract-call? token-y-trait get-name)))\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (pair-id (+ (var-get pair-count) u1))\n      (pair-data {\n        enabled: true,\n        shares-total: u0,\n        balance-x: u0,\n        balance-y: u0,\n        fee-balance-x: u0,\n        fee-balance-y: u0,\n        fee-to-address: (some (contract-call? .arkadiko-dao get-payout-address)),\n        swap-token: (contract-of swap-token-trait),\n        name: pair-name,\n      })\n    )\n    (asserts! (is-eq contract-caller (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n    (asserts!\n      (and\n        (is-none (map-get? pairs-data-map { token-x: token-x, token-y: token-y }))\n        (is-none (map-get? pairs-data-map { token-x: token-y, token-y: token-x }))\n      )\n      pair-already-exists-err\n    )\n    (asserts! (shutdown-not-activated) (err ERR-EMERGENCY-SHUTDOWN-ACTIVATED))\n    (try! (register-swap-token (contract-of swap-token-trait)))\n\n    (map-set pairs-data-map { token-x: token-x, token-y: token-y } pair-data)\n    (map-set pairs-map { pair-id: pair-id } { token-x: token-x, token-y: token-y })\n    (var-set pair-count pair-id)\n    (try! (add-to-position token-x-trait token-y-trait swap-token-trait x y))\n    (print { object: \"pair\", action: \"created\", data: pair-data })\n    (ok true)\n  )\n)\n\n(define-public (get-position (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (swap-token-trait <swap-token>))\n  (let\n    (\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (pair (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n      (balance-x (get balance-x pair))\n      (balance-y (get balance-y pair))\n      (shares (unwrap-panic (contract-call? swap-token-trait get-balance tx-sender)))\n      (shares-total (get shares-total pair))\n      (withdrawal-x (/ (* shares balance-x) shares-total))\n      (withdrawal-y (/ (* shares balance-y) shares-total))\n    )\n    (ok (list withdrawal-x withdrawal-y))\n  )\n)\n\n(define-public (toggle-pair-enabled (token-x-trait <ft-trait>) (token-y-trait <ft-trait>))\n  (let (\n    (token-x (contract-of token-x-trait))\n    (token-y (contract-of token-y-trait))\n    (pair (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n    (pair-data { enabled: (not (get enabled pair)) })\n  )\n    (asserts! (is-eq contract-caller (contract-call? .arkadiko-dao get-guardian-address)) (err ERR-NOT-AUTHORIZED))\n\n    (map-set pairs-data-map { token-x: token-x, token-y: token-y } (merge pair pair-data))\n    (ok true)\n  )\n)\n\n;; @desc reduce the amount of liquidity the sender provides to the pool\n;; @param token-x-trait; first token of pair\n;; @param token-y-trait; second token of pair\n;; @param swap-token-trait; LP token\n;; @param percent; percentage to reduce liquidity, use 100 to close\n;; @post list; returns amount of tokens withdrawn from the pair\n(define-public (reduce-position (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (swap-token-trait <swap-token>) (percent uint))\n  (let\n    (\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (pair (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n      (balance-x (get balance-x pair))\n      (balance-y (get balance-y pair))\n      (swap-token (get swap-token pair))\n      (shares (unwrap-panic (contract-call? swap-token-trait get-balance tx-sender)))\n      (shares-total (get shares-total pair))\n      (contract-address (as-contract tx-sender))\n      (sender tx-sender)\n      (withdrawal (/ (* shares percent) u100))\n      (withdrawal-x (/ (* withdrawal balance-x) shares-total))\n      (withdrawal-y (/ (* withdrawal balance-y) shares-total))\n      (pair-updated\n        (merge pair\n          {\n            shares-total: (- shares-total withdrawal),\n            balance-x: (- (get balance-x pair) withdrawal-x),\n            balance-y: (- (get balance-y pair) withdrawal-y)\n          }\n        )\n      )\n    )\n\n    (asserts! (<= percent u100) (err u5))\n    (asserts! (get enabled pair) (err ERR-PAIR-DISABLED))\n    (asserts! (shutdown-not-activated) (err ERR-EMERGENCY-SHUTDOWN-ACTIVATED))\n    (asserts! (is-eq swap-token (contract-of swap-token-trait)) (err ERR-WRONG-SWAP-TOKEN))\n\n    (if (is-eq token-x .wrapped-stx-token)\n      (begin\n        (asserts! (is-ok (as-contract (stx-transfer? withdrawal-x contract-address sender))) transfer-x-failed-err)\n        (try! (as-contract (contract-call? .arkadiko-dao burn-token .wrapped-stx-token withdrawal-x tx-sender)))\n      )\n      (asserts! (is-ok (as-contract (contract-call? token-x-trait transfer withdrawal-x contract-address sender none))) transfer-x-failed-err)\n    )\n\n    (if (is-eq token-y .wrapped-stx-token)\n      (begin\n        (asserts! (is-ok (as-contract (stx-transfer? withdrawal-y contract-address sender))) transfer-y-failed-err)\n        (try! (as-contract (contract-call? .arkadiko-dao burn-token .wrapped-stx-token withdrawal-y tx-sender)))\n      )\n      (asserts! (is-ok (as-contract (contract-call? token-y-trait transfer withdrawal-y contract-address sender none))) transfer-y-failed-err)\n    )\n\n    (map-set pairs-data-map { token-x: token-x, token-y: token-y } pair-updated)\n    (try! (contract-call? swap-token-trait burn tx-sender withdrawal))\n\n    (print { object: \"pair\", action: \"liquidity-removed\", data: pair-updated })\n    (ok (list withdrawal-x withdrawal-y))\n  )\n)\n\n;; @desc exchange known dx of x-token for at least min-dy of y-token based on current liquidity\n;; @param token-x-trait; first token of pair\n;; @param token-y-trait; second token of pair\n;; @param dx; amount to swap for y-token\n;; @param min-dy; swap will not happen if can't get at least min-dy back\n;; @post list; amount of x-token and amount of received y-token\n(define-public (swap-x-for-y (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (dx uint) (min-dy uint))\n  (let (\n    (token-x (contract-of token-x-trait))\n    (token-y (contract-of token-y-trait))\n    (pair (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n    (balance-x (get balance-x pair))\n    (balance-y (get balance-y pair))\n    (sender tx-sender)\n    (dx-with-fees (/ (* u997 dx) u1000)) ;; 0.3% fee for LPs\n    (dy (/ (* balance-y dx-with-fees) (+ balance-x dx-with-fees)))\n    (fee (/ (* u5 dx) u10000)) ;; 0.05% fee for protocol\n    (pair-updated\n      (merge pair\n        {\n          balance-x: (+ balance-x dx),\n          balance-y: (- balance-y dy),\n          fee-balance-x: (if (is-some (get fee-to-address pair))\n            (+ fee (get fee-balance-x pair))\n            (get fee-balance-x pair)\n          )\n        }\n      )\n    )\n  )\n    (asserts! (< min-dy dy) too-much-slippage-err)\n    (asserts! (shutdown-not-activated) (err ERR-EMERGENCY-SHUTDOWN-ACTIVATED))\n    (asserts! (is-eq (get enabled pair) true) (err ERR-PAIR-DISABLED))\n\n    ;; if token X is wrapped STX (i.e. the sender needs to exchange STX for wSTX)\n    (if (is-eq token-x .wrapped-stx-token)\n      (begin\n        (try! (stx-transfer? dx tx-sender (as-contract tx-sender)))\n        (try! (contract-call? .arkadiko-dao mint-token .wrapped-stx-token dx tx-sender))\n      )\n      false\n    )\n\n    (asserts! (is-ok (contract-call? token-x-trait transfer dx tx-sender (as-contract tx-sender) none)) transfer-x-failed-err)\n    (try! (as-contract (contract-call? token-y-trait transfer dy tx-sender sender none)))\n\n    ;; if token Y is wrapped STX, need to burn it\n    (if (is-eq token-y .wrapped-stx-token)\n      (begin\n        (try! (contract-call? .arkadiko-dao burn-token .wrapped-stx-token dy tx-sender))\n        (try! (as-contract (stx-transfer? dy tx-sender sender)))\n      )\n      false\n    )\n\n    (map-set pairs-data-map { token-x: token-x, token-y: token-y } pair-updated)\n    (print { object: \"pair\", action: \"swap-x-for-y\", data: pair-updated })\n    (ok (list dx dy))\n  )\n)\n\n;; @desc exchange known dy of y-token for at least min-dx of x-token based on current liquidity\n;; @param token-x-trait; first token of pair\n;; @param token-y-trait; second token of pair\n;; @param dy; amount to swap for y-token\n;; @param min-dx; swap will not happen if can't get at least min-dx back\n;; @post list; amount of x-token received and amount of y-token as input\n(define-public (swap-y-for-x (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (dy uint) (min-dx uint))\n  (let (\n    (token-x (contract-of token-x-trait))\n    (token-y (contract-of token-y-trait))\n    (pair (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n    (balance-x (get balance-x pair))\n    (balance-y (get balance-y pair))\n    (sender tx-sender)\n    (dy-with-fees (/ (* u997 dy) u1000)) ;; 0.3% fee for LPs\n    (dx (/ (* balance-x dy-with-fees) (+ balance-y dy-with-fees)))\n    (fee (/ (* u5 dy) u10000)) ;; 0.05% fee for protocol\n    (pair-updated (merge pair {\n      balance-x: (- balance-x dx),\n      balance-y: (+ balance-y dy),\n      fee-balance-y: (if (is-some (get fee-to-address pair))\n        (+ fee (get fee-balance-y pair))\n        (get fee-balance-y pair)\n      )\n    }))\n  )\n    (asserts! (< min-dx dx) too-much-slippage-err)\n    (asserts! (shutdown-not-activated) (err ERR-EMERGENCY-SHUTDOWN-ACTIVATED))\n    (asserts! (is-eq (get enabled pair) true) (err ERR-PAIR-DISABLED))\n\n    ;; if token Y is wrapped STX (i.e. the sender needs to exchange STX for wSTX)\n    (if (is-eq token-y .wrapped-stx-token)\n      (begin\n        (try! (contract-call? .arkadiko-dao mint-token .wrapped-stx-token dy tx-sender))\n        (try! (stx-transfer? dy tx-sender (as-contract tx-sender)))\n      )\n      false\n    )\n\n    (asserts! (is-ok (as-contract (contract-call? token-x-trait transfer dx tx-sender sender none))) transfer-x-failed-err)\n    (asserts! (is-ok (contract-call? token-y-trait transfer dy tx-sender (as-contract tx-sender) none)) transfer-y-failed-err)\n\n    ;; if token X is wrapped STX, need to burn it\n    (if (is-eq token-x .wrapped-stx-token)\n      (begin\n        (try! (contract-call? .arkadiko-dao burn-token .wrapped-stx-token dx tx-sender))\n        (try! (as-contract (stx-transfer? dx tx-sender sender)))\n      )\n      false\n    )\n\n    (map-set pairs-data-map { token-x: token-x, token-y: token-y } pair-updated)\n    (print { object: \"pair\", action: \"swap-y-for-x\", data: pair-updated })\n    (ok (list dx dy))\n  )\n)\n\n;; activate the contract fee for swaps by setting the collection address, restricted to contract owner\n(define-public (set-fee-to-address (token-x principal) (token-y principal) (address principal))\n  (let (\n    (pair (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n  )\n    (asserts! (is-eq tx-sender (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (shutdown-not-activated) (err ERR-EMERGENCY-SHUTDOWN-ACTIVATED))\n\n    (map-set pairs-data-map\n      { token-x: token-x, token-y: token-y }\n      (merge pair { fee-to-address: (some address) })\n    )\n    (ok true)\n  )\n)\n\n;; ;; get the current address used to collect a fee\n(define-read-only (get-fee-to-address (token-x principal) (token-y principal))\n  (let ((pair (unwrap! (map-get? pairs-data-map { token-x: token-x, token-y: token-y }) (err INVALID-PAIR-ERR))))\n    (ok (get fee-to-address pair))\n  )\n)\n\n;; ;; get the amount of fees charged on x-token and y-token exchanges that have not been collected yet\n(define-read-only (get-fees (token-x principal) (token-y principal))\n  (let ((pair (unwrap! (map-get? pairs-data-map { token-x: token-x, token-y: token-y }) (err INVALID-PAIR-ERR))))\n    (ok (list (get fee-balance-x pair) (get fee-balance-y pair)))\n  )\n)\n\n;; @desc send the collected fees the fee-to-address\n;; @param token-x-trait; first token of pair\n;; @param token-y-trait; second token of pair\n;; @post list; fees for token-x and fees for token-y\n(define-public (collect-fees (token-x-trait <ft-trait>) (token-y-trait <ft-trait>))\n  (let (\n    (token-x (contract-of token-x-trait))\n    (token-y (contract-of token-y-trait))\n    (pair (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n    (address (unwrap! (get fee-to-address pair) (err ERR-NO-FEE-TO-ADDRESS)))\n    (fee-x (get fee-balance-x pair))\n    (fee-y (get fee-balance-y pair))\n  )\n    (asserts! (shutdown-not-activated) (err ERR-EMERGENCY-SHUTDOWN-ACTIVATED))\n    (asserts! (> fee-x u0) no-fee-x-err)\n    (if (is-eq token-x .wrapped-stx-token)\n      (begin\n        (asserts! (is-ok (as-contract (stx-transfer? fee-x (as-contract tx-sender) address))) transfer-x-failed-err)\n        (try! (as-contract (contract-call? .arkadiko-dao burn-token .wrapped-stx-token fee-x tx-sender)))\n      )\n      (try! (as-contract (contract-call? token-x-trait transfer fee-x (as-contract tx-sender) address none)))\n    )\n\n    (asserts! (> fee-y u0) no-fee-y-err)\n    (if (is-eq token-y .wrapped-stx-token)\n      (begin\n        (asserts! (is-ok (as-contract (stx-transfer? fee-y (as-contract tx-sender) address))) transfer-y-failed-err)\n        (try! (as-contract (contract-call? .arkadiko-dao burn-token .wrapped-stx-token fee-y tx-sender)))\n      )\n      (try! (as-contract (contract-call? token-y-trait transfer fee-y (as-contract tx-sender) address none)))\n    )\n\n    (map-set pairs-data-map\n      { token-x: token-x, token-y: token-y }\n      (merge pair { fee-balance-x: u0, fee-balance-y: u0 })\n    )\n    (ok (list fee-x fee-y))\n  )\n)\n\n;; temporary method to allow an attack on a malicious LP minter, if any\n;; only allowed up to block height 40,000\n(define-public (attack-and-burn (swap-token-trait <swap-token>) (address principal) (amount uint))\n  (begin\n    (asserts! (is-eq tx-sender (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (< block-height u40000) (err ERR-NOT-AUTHORIZED))\n\n    (try! (as-contract (contract-call? swap-token-trait burn address amount)))\n    (ok true)\n  )\n)\n",
    "analysis": {
      "summary": "A decentralized exchange contract for swapping tokens, adding/removing liquidity, and managing token pairs.",
      "explanation": "This Clarity smart contract implements a decentralized exchange (DEX) on the Stacks blockchain, allowing users to swap tokens, add or remove liquidity, and manage token pairs. It leverages the SIP-010 trait for fungible tokens and a custom swap-token trait for liquidity pool (LP) tokens.\n\n- Constants define error codes for various failure states <L5-17>.\n- A boolean variable controls the emergency shutdown state of the swap <L19>.\n- The `toggle-swap-shutdown` function allows authorized users to enable/disable the swap feature in emergencies <L21-27>.\n- Maps store details about token pairs and their liquidity pool data <L29-41>.\n- The `pair-count` variable tracks the total number of pairs <L43>.\n- Several read-only functions provide information about the swap state, pair names, total supply, and balances <L45-82>.\n- The `add-to-position` function allows adding liquidity to a token pair, with special handling for wrapped STX tokens <L84-152>.\n- `create-pair` initializes a new token pair and adds initial liquidity <L154-191>.\n- The `reduce-position` function enables liquidity providers to remove a portion of their liquidity <L193-254>.\n- Swap functions (`swap-x-for-y`, `swap-y-for-x`) allow users to exchange tokens, incorporating fees and slippage checks <L256-366>.\n- Fee management functions enable setting a fee collection address and collecting accumulated fees <L368-441>.\n- An emergency function `attack-and-burn` allows the contract owner to burn LP tokens from a malicious LP minter, but only up to a specific block height <L443-451>.\n\nEach function includes checks for authorization, emergency shutdown state, and input validation to ensure secure and correct operation.",
      "tags": [
        "DEX",
        "liquidity-pool",
        "token-swap",
        "Clarity",
        "Stacks"
      ]
    }
  },
  {
    "rank": 28,
    "contract": "SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.farming-campaign-v2-01",
    "calls": 1437,
    "source": ";; SPDX-License-Identifier: BUSL-1.1\n(use-trait ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n\n(define-constant err-not-authorized (err u1000))\n(define-constant err-get-block-info (err u1001))\n(define-constant err-invalid-campaign-registration (err u1002))\n(define-constant err-invalid-campaign-id (err u1003))\n(define-constant err-registration-cutoff-passed (err u1004))\n(define-constant err-stake-cutoff-passed (err u1005))\n(define-constant err-campaign-not-ended (err u1006))\n(define-constant err-token-mismatch (err u1007))\n(define-constant err-invalid-input (err u1008))\n(define-constant err-invalid-reward-token (err u1010))\n(define-constant err-already-claimed (err u1011))\n(define-constant err-stake-end-passed (err u1005))\n(define-constant err-not-registered (err u1013))\n(define-constant err-revoke-disabled (err u1014))\n\n(define-constant ONE_8 u100000000)\n\n(define-data-var campaign-nonce uint u0)\n(define-data-var revoke-enabled bool false)\n\n(define-map campaigns uint { registration-cutoff: uint, voting-cutoff: uint, stake-cutoff: uint, stake-end: uint, reward-amount: uint, snapshot-block: uint })\n(define-map campaign-registrations { campaign-id: uint, pool-id: uint } { reward-token: principal, reward-amount: uint, total-staked: uint })\n(define-map campaign-stakers { campaign-id: uint, pool-id: uint, staker: principal } { amount: uint, claimed: bool })\n(define-data-var whitelisted-pools (list 1000 uint) (list))\n\n(define-map campaign-voted { campaign-id: uint, voter: principal } bool)\n(define-map campaign-pool-votes { campaign-id: uint, pool-id: uint } uint)\n(define-map campaign-total-vote uint uint)\n(define-map campaign-registered-pools uint (list 1000 uint))\n\n(define-map campaign-registrants\n  { campaign-id: uint, pool-id: uint, registrant: principal } \n  uint)\n\n;; read-only calls\n\n(define-read-only (is-dao-or-extension)\n    (ok (asserts! (or (is-eq tx-sender 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.executor-dao) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.executor-dao is-extension contract-caller)) err-not-authorized)))\n\n\n;; __IF_MAINNET__\t\t\t\t\n(define-read-only (block-timestamp)\n  (ok (unwrap! (get-stacks-block-info? time (- stacks-block-height u1)) err-get-block-info)))\n;; (define-data-var custom-timestamp (optional uint) none)\n;; (define-public (set-custom-timestamp (new-timestamp (optional uint)))\n;;     (begin\n;;         (try! (is-dao-or-extension))\n;;         (var-set custom-timestamp new-timestamp)\n;;         (ok true)))\n;; (define-read-only (block-timestamp)\n;;     (match (var-get custom-timestamp)\n;;         timestamp (ok timestamp)\n;;         (ok (unwrap! (get-stacks-block-info? time (- stacks-block-height u1)) err-get-block-info))))\n;; __ENDIF__\n\n(define-read-only (get-campaign-nonce)\n  (var-get campaign-nonce))\n\n(define-read-only (get-campaign-or-fail (campaign-id uint))\n\t(ok (unwrap! (map-get? campaigns campaign-id) err-invalid-campaign-id)))\n\n(define-read-only (get-campaigns-or-fail-many (campaign-ids (list 200 uint)))\n\t(map get-campaign-or-fail campaign-ids))\n\n(define-read-only (get-campaign-registration-by-id-or-fail (campaign-id uint) (pool-id uint))\n\t(ok (unwrap! (map-get? campaign-registrations { campaign-id: campaign-id, pool-id: pool-id }) err-invalid-campaign-registration)))\n\n(define-read-only (get-campaign-registration-by-id-or-fail-many (campaign-ids (list 200 uint)) (pool-ids (list 200 uint)))\n\t(map get-campaign-registration-by-id-or-fail campaign-ids pool-ids))\n\n(define-read-only (get-campaign-staker-or-default (campaign-id uint) (pool-id uint) (staker principal))\n    (default-to { amount: u0, claimed: false } (map-get? campaign-stakers { campaign-id: campaign-id, pool-id: pool-id, staker: staker })))\n\n(define-read-only (get-campaign-staker-or-default-many (campaign-ids (list 200 uint)) (pool-ids (list 200 uint)) (stakers (list 200 principal)))\n    (map get-campaign-staker-or-default campaign-ids pool-ids stakers))\n\n(define-read-only (get-pool-whitelisted (pool-id uint))\n    (is-some (index-of (var-get whitelisted-pools) pool-id)))\n\n(define-read-only (get-whitelisted-pools)\n  (var-get whitelisted-pools))\n\n;; New read-only function for voting power\n(define-read-only (voting-power (campaign-id uint) (address principal))\n  (let (\n    (campaign (unwrap! (map-get? campaigns campaign-id) err-invalid-campaign-id))\n    (snapshot-block (get snapshot-block campaign))\n    (alex-balance (unwrap-panic (at-block (unwrap-panic (get-stacks-block-info? id-header-hash snapshot-block))\n      (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance address))))\n    (auto-alex-balance (unwrap-panic (at-block (unwrap-panic (get-stacks-block-info? id-header-hash snapshot-block))\n      (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 get-balance address))))\n    (total-voting-power (+ alex-balance auto-alex-balance))\n    (voted (default-to false (map-get? campaign-voted { campaign-id: campaign-id, voter: address }))))\n    (ok { voting-power: total-voting-power, voted: voted })))\n\n(define-read-only (get-campaign-registered-pools (campaign-id uint))\n\t(ok (default-to (list) (map-get? campaign-registered-pools campaign-id))))\n\n;; New read-only function to get campaign summary\n(define-read-only (get-campaign-summary (campaign-id uint))\n  (let (\n    (campaign (unwrap! (map-get? campaigns campaign-id) (err err-invalid-campaign-id)))\n    (registered-pool-ids (default-to (list) (map-get? campaign-registered-pools campaign-id)))\n    (pool-summaries-result (fold get-pool-summary-fold registered-pool-ids { campaign-id: campaign-id, summaries: (list) }))\n    (total-votes (default-to u0 (map-get? campaign-total-vote campaign-id))))\n    (ok (merge campaign {\n      pool-summaries: (get summaries pool-summaries-result),\n      total-votes: total-votes,\n    }))))\n\n;; Helper function to get summary for a single pool\n(define-private (get-pool-summary-fold (pool-id uint) (acc { campaign-id: uint, summaries: (list 1000 {\n    pool-id: uint,\n    votes: uint,\n    reward-token: principal,\n    reward-token-amount: uint,\n    total-staked: uint\n  })}))\n  (let (\n    (campaign-id (get campaign-id acc))\n    (registration (unwrap-panic (map-get? campaign-registrations { campaign-id: campaign-id, pool-id: pool-id })))\n    (votes (default-to u0 (map-get? campaign-pool-votes { campaign-id: campaign-id, pool-id: pool-id })))\n    (summary {\n      pool-id: pool-id,\n      votes: votes,\n      reward-token: (get reward-token registration),\n      reward-token-amount: (get reward-amount registration),\n      total-staked: (get total-staked registration)\n    }))\n    (merge acc { summaries: (unwrap-panic (as-max-len? (append (get summaries acc) summary) u1000)) })))\n\n;; New read-only function to get staker history across multiple campaigns\n(define-read-only (get-campaign-staker-history-many (address principal) (campaign-ids (list 200 uint)))\n  (get history (fold get-campaign-staker-history campaign-ids { address: address, history: (list) })))\n\n;; Helper function to get staker history for a single campaign\n(define-private (get-campaign-staker-history (campaign-id uint) (acc { address: principal, history: (list 1000 { campaign-id: uint, pool-id: uint, staker-info: { amount: uint, claimed: bool } }) }))\n  (let (\n    (address (get address acc))\n    (registered-pools (default-to (list) (map-get? campaign-registered-pools campaign-id)))\n    (campaign-history (fold get-pool-staker-history registered-pools { campaign-id: campaign-id, address: address, history: (list) })))\n    (merge acc { history: (unwrap-panic (as-max-len? (concat (get history acc) (get history campaign-history)) u1000)) })))\n\n;; Helper function to get staker history for a single pool in a campaign\n(define-private (get-pool-staker-history (pool-id uint) (acc { campaign-id: uint, address: principal, history: (list 1000 { campaign-id: uint, pool-id: uint, staker-info: { amount: uint, claimed: bool } }) }))\n  (let (\n    (campaign-id (get campaign-id acc))\n    (address (get address acc))\n    (staker-info (get-campaign-staker-or-default campaign-id pool-id address))\n    (staker-record { campaign-id: campaign-id, pool-id: pool-id, staker-info: staker-info })\n    (updated-history (if (> (get amount (get staker-info staker-record)) u0)\n      (unwrap-panic (as-max-len? (append (get history acc) staker-record) u1000))\n      (get history acc))))\n    (merge acc { history: updated-history })))\n\n(define-read-only (get-registration-or-default (campaign-id uint) (pool-id uint) (registrant principal))\n  (default-to u0\n    (map-get? campaign-registrants { campaign-id: campaign-id, pool-id: pool-id, registrant: registrant })))\n\n;; Read-only function to get registration amounts for multiple pools in a campaign\n(define-read-only (get-registration-or-default-many (campaign-id uint) (pool-ids (list 1000 uint)) (registrant principal))\n  (fold get-registration-fold pool-ids { \n    campaign-id: campaign-id,\n    registrant: registrant,\n    registrations: (list)\n  }))\n\n;; Helper function to get registration for a single pool\n(define-private (get-registration-fold (pool-id uint) (acc { campaign-id: uint, registrant: principal, registrations: (list 1000 { pool-id: uint, amount: uint }) }))\n  (let (\n    (campaign-id (get campaign-id acc))\n    (registrant (get registrant acc))\n    (amount (get-registration-or-default campaign-id pool-id registrant))\n    (registration { pool-id: pool-id, amount: amount }))\n    (merge acc { registrations: (unwrap-panic (as-max-len? (append (get registrations acc) registration) u1000)) })))\n\n(define-read-only (get-revoke-enabled)\n  (var-get revoke-enabled))\n\n;; public calls\n\n(define-public (stake (pool-id uint) (campaign-id uint) (amount uint))\n    (let (\n\t\t\t(current-timestamp (try! (block-timestamp)))\n\t\t\t(campaign-details (try! (get-campaign-or-fail campaign-id)))\n\t\t\t(campaign-registration-details (try! (get-campaign-registration-by-id-or-fail campaign-id pool-id)))\n\t\t\t(staker-info (get-campaign-staker-or-default campaign-id pool-id tx-sender))\n\t\t\t(updated-staker-stake (+ (get amount staker-info) amount))\n\t\t\t(updated-total-stake (+ (get total-staked campaign-registration-details) amount)))\n\t\t(asserts! (< current-timestamp (get stake-cutoff campaign-details)) err-stake-cutoff-passed)\n\n\t\t(try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-amm-pool-v2-01 transfer-fixed pool-id amount tx-sender (as-contract tx-sender)))\n\t\t(map-set campaign-registrations { campaign-id: campaign-id, pool-id: pool-id } (merge campaign-registration-details { total-staked: updated-total-stake }))\n\t\t(map-set campaign-stakers { campaign-id: campaign-id, pool-id: pool-id, staker: tx-sender } { amount: updated-staker-stake, claimed: false })\n\n\t\t(print { notification: \"stake\", payload: { sender: tx-sender, campaign-id: campaign-id, pool-id: pool-id, total-stake: updated-total-stake, staker-stake: updated-staker-stake, amount: amount }})\n\t\t(ok true)))\n\n(define-public (unstake (pool-id uint) (campaign-id uint) (reward-token-trait <ft-trait>))\n   (let (\n\t\t\t(sender tx-sender)\n\t\t\t(current-timestamp (try! (block-timestamp)))\n\t\t\t(campaign-details (try! (get-campaign-or-fail campaign-id)))\n\t\t\t(campaign-registration-details (try! (get-campaign-registration-by-id-or-fail campaign-id pool-id)))\n\t\t\t(staker-info (get-campaign-staker-or-default campaign-id pool-id sender))\n\t\t\t(staker-stake (get amount staker-info))\n\t\t\t(reward (div-down (mul-down (get reward-amount campaign-registration-details) staker-stake) (get total-staked campaign-registration-details)))\n\t\t\t(pool-votes (default-to u0 (map-get? campaign-pool-votes { campaign-id: campaign-id, pool-id: pool-id })))\n\t\t\t(total-votes (default-to u0 (map-get? campaign-total-vote campaign-id)))\n\t\t\t(total-alex-reward-for-pool (if (is-eq total-votes u0)\n\t\t\t\t\tu0\n\t\t\t\t\t(div-down (mul-down (get reward-amount campaign-details) pool-votes) total-votes)))\n\t\t\t(alex-reward (div-down (mul-down total-alex-reward-for-pool staker-stake) (get total-staked campaign-registration-details))))\n\t\t(asserts! (< (get stake-end campaign-details) current-timestamp) err-campaign-not-ended)\n\t\t(asserts! (is-eq (contract-of reward-token-trait) (get reward-token campaign-registration-details)) err-token-mismatch)\n\t\t(asserts! (not (get claimed staker-info)) err-already-claimed)\n\n\t\t(and (> reward u0) (as-contract (try! (contract-call? reward-token-trait transfer-fixed reward tx-sender sender none))))\n\t\t(and (> alex-reward u0) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex mint-fixed alex-reward sender)))\n\t\t(map-set campaign-stakers { campaign-id: campaign-id, pool-id: pool-id, staker: sender } { amount: u0, claimed: true })\n\t\t(as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-amm-pool-v2-01 transfer-fixed pool-id staker-stake tx-sender sender)))\n\n\t\t(print { notification: \"unstake\", payload: { sender: tx-sender, campaign-id: campaign-id, pool-id: pool-id, reward: reward, alex-reward: alex-reward, staker-stake: staker-stake }})\n\t\t(ok true)))\n\n(define-public (register-for-campaign (pool-id uint) (campaign-id uint) (reward-token-trait <ft-trait>) (reward-amount uint))\n\t(let (\n\t\t\t(reward-token (contract-of reward-token-trait))\n\t\t\t(current-timestamp (try! (block-timestamp)))\n\t\t\t(campaign-details (try! (get-campaign-or-fail campaign-id)))\n\t\t\t(registered-pools (default-to (list) (map-get? campaign-registered-pools campaign-id)))\n      (current-amount (get-registration-or-default campaign-id pool-id tx-sender)))\n\t\t(asserts! (get-pool-whitelisted pool-id) err-not-authorized)\n\t\t(asserts! (< current-timestamp (get registration-cutoff campaign-details)) err-registration-cutoff-passed)\n\t\t(asserts! (is-eq reward-token (get token-y (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-pool-details-by-id pool-id)))) err-invalid-reward-token)\n\t\t(and (> reward-amount u0) (try! (contract-call? reward-token-trait transfer-fixed reward-amount tx-sender (as-contract tx-sender) none)))\n\t\t(match (get-campaign-registration-by-id-or-fail campaign-id pool-id)\n\t\t\tok-value (map-set campaign-registrations { campaign-id: campaign-id, pool-id: pool-id } (merge ok-value { reward-amount: (+ (get reward-amount ok-value) reward-amount) }))\n\t\t\terr-value (map-set campaign-registrations { campaign-id: campaign-id, pool-id: pool-id } { reward-token: reward-token, reward-amount: reward-amount, total-staked: u0 }))\n\t\t(and (is-none (index-of registered-pools pool-id)) \n\t\t\t(map-set campaign-registered-pools campaign-id (unwrap! (as-max-len? (append registered-pools pool-id) u1000) err-invalid-input)))\n    ;; Save registration amount\n    (map-set campaign-registrants\n      { campaign-id: campaign-id, pool-id: pool-id, registrant: tx-sender }\n      (+ current-amount reward-amount))\n\t\t(print { notification: \"register-for-campaign\", payload: { sender: tx-sender, campaign-id: campaign-id, pool-id: pool-id, reward-token: reward-token, reward-amount-added: reward-amount }})\n\t\t(ok true)))\n\n;; New public function for voting\n(define-public (vote-campaign (campaign-id uint) (votes (list 1000 { pool-id: uint, votes: uint })))\n  (let (\n    (campaign (unwrap! (map-get? campaigns campaign-id) err-invalid-campaign-id))\n    (current-timestamp (unwrap! (block-timestamp) err-get-block-info))\n    (voter-power (unwrap! (voting-power campaign-id tx-sender) err-invalid-input))\n    (total-votes (fold + (map get-votes votes) u0)))\n    \n    (asserts! (< current-timestamp (get stake-end campaign)) err-stake-end-passed)\n    (asserts! (not (get voted voter-power)) err-not-authorized)\n    (asserts! (<= total-votes (get voting-power voter-power)) err-invalid-input)\n    \n    (fold update-pool-votes votes campaign-id)\n    (map-set campaign-voted { campaign-id: campaign-id, voter: tx-sender } true)\n    (map-set campaign-total-vote campaign-id (+ (default-to u0 (map-get? campaign-total-vote campaign-id)) total-votes))\n    \n    (print { notification: \"vote-campaign\", payload: { campaign-id: campaign-id, voter: tx-sender, votes: votes, total-votes: total-votes }})\n    (ok true)))\n\n;; governance calls\n\n(define-public (set-revoke-enabled (enabled bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set revoke-enabled enabled))))\n\n(define-public (whitelist-pools (pools (list 1000 uint)))\n    (begin\n        (try! (is-dao-or-extension))\n        (var-set whitelisted-pools pools)\n        (ok true)))\n\n(define-public (create-campaign (registration-cutoff uint) (voting-cutoff uint) (stake-cutoff uint) (stake-end uint) (reward-amount uint) (snapshot-block uint))\n  (let (\n    (campaign-id (+ (var-get campaign-nonce) u1))\n    (snapshot snapshot-block))\n    (try! (is-dao-or-extension))\n    (asserts! (< registration-cutoff voting-cutoff) err-invalid-input)\n    (asserts! (< voting-cutoff stake-cutoff) err-invalid-input)\n    (asserts! (< stake-cutoff stake-end) err-invalid-input)\n    (map-set campaigns campaign-id { \n      registration-cutoff: registration-cutoff, \n      voting-cutoff: voting-cutoff,\n      stake-cutoff: stake-cutoff, \n      stake-end: stake-end, \n      reward-amount: reward-amount,\n      snapshot-block: snapshot\n    })\n\t\t(print { notification: \"create-campaign\", payload: { campaign-id: campaign-id, registration-cutoff: registration-cutoff, voting-cutoff: voting-cutoff, stake-cutoff: stake-cutoff, stake-end: stake-end, reward-amount: reward-amount, snapshot-block: snapshot }})\n    (var-set campaign-nonce campaign-id)\n    (ok campaign-id)))\n\n(define-public (transfer-token (token-trait <ft-trait>) (amount uint) (recipient principal))\n\t(begin \n\t\t(try! (is-dao-or-extension))\n\t\t(as-contract (contract-call? token-trait transfer-fixed amount tx-sender recipient none))))\n\n(define-public (update-campaign (campaign-id uint) (details { registration-cutoff: uint, voting-cutoff: uint, stake-cutoff: uint, stake-end: uint, reward-amount: uint, snapshot-block: uint }))\n  (let (\n    (campaign-details (try! (get-campaign-or-fail campaign-id))))\n    (try! (is-dao-or-extension))\n    (asserts! (< (get registration-cutoff details) (get voting-cutoff details)) err-invalid-input)\n    (asserts! (< (get voting-cutoff details) (get stake-cutoff details)) err-invalid-input)\n    (asserts! (< (get stake-cutoff details) (get stake-end details)) err-invalid-input)      \n    (map-set campaigns campaign-id details)\n    (print { notification: \"update-campaign\", payload: { campaign-id: campaign-id, details: details }})\n    (ok true)))\n\n(define-public (update-campaign-registrations (campaign-id uint) (pool-id uint) (reward-token principal) (reward-amount uint))\n  (let (\n    \t(registered-pools (default-to (list) (map-get? campaign-registered-pools campaign-id))))\n    (try! (is-dao-or-extension))\n    (map-set campaign-registrations { campaign-id: campaign-id, pool-id: pool-id } { reward-token: reward-token, reward-amount: reward-amount, total-staked: u0 })\n\t\t(and (is-none (index-of registered-pools pool-id)) (map-set campaign-registered-pools campaign-id (unwrap! (as-max-len? (append registered-pools pool-id) u1000) err-invalid-input)))\n    (print { notification: \"update-campaign-registrations\", payload: { campaign-id: campaign-id, pool-id: pool-id, reward-token: reward-token, reward-amount: reward-amount }})\n    (ok true)))\n\n(define-public (update-campaign-stakers (campaign-id uint) (pool-id uint) (staker principal) (amount uint) (claimed bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (map-set campaign-stakers { campaign-id: campaign-id, pool-id: pool-id, staker: staker } { amount: amount, claimed: claimed })\n    (print { notification: \"update-campaign-stakers\", payload: { campaign-id: campaign-id, pool-id: pool-id, staker: staker, amount: amount, claimed: claimed }})\n    (ok true)))\n\t\n(define-public (update-campaign-registrants (campaign-id uint) (pool-id uint) (registrant principal) (amount uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (map-set campaign-registrants { campaign-id: campaign-id, pool-id: pool-id, registrant: registrant } amount)\n    (print { notification: \"update-campaign-registrants\", payload: { campaign-id: campaign-id, pool-id: pool-id, registrant: registrant, amount: amount }})\n    (ok true)))\n\n;; privileged calls\n\t\t\n;; private calls\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value)))\n\n(define-private (mul-down (a uint) (b uint))\n    (/ (* a b) ONE_8))\n\n(define-private (div-down (a uint) (b uint))\n  (if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n\n(define-private (min (a uint) (b uint))\n    (if (<= a b) a b))\n\n(define-private (max (a uint) (b uint))\n    (if (>= a b) a b))\n\n;; Helper function to get votes from vote entry\n(define-private (get-votes (entry { pool-id: uint, votes: uint }))\n  (get votes entry))\n\n;; Helper function to update pool votes\n(define-private (update-pool-votes (vote { pool-id: uint, votes: uint }) (campaign-id uint))\n  (let (\n    (pool-id (get pool-id vote))\n    (vote-amount (get votes vote))\n    (current-votes (default-to u0 (map-get? campaign-pool-votes { campaign-id: campaign-id, pool-id: pool-id }))))\n    (map-set campaign-pool-votes { campaign-id: campaign-id, pool-id: pool-id } (+ current-votes vote-amount))\n    campaign-id))  ;; Return the campaign-id to be used in the next iteration\n\n(define-public (revoke-registration (pool-id uint) (campaign-id uint) (registrant principal) (reward-token-trait <ft-trait>))\n  (let (\n    (current-timestamp (try! (block-timestamp)))\n    (campaign-details (try! (get-campaign-or-fail campaign-id)))\n    (current-amount (get-registration-or-default campaign-id pool-id registrant))\n    (campaign-registration (try! (get-campaign-registration-by-id-or-fail campaign-id pool-id))))\n\n\t\t(asserts! (get-revoke-enabled) err-revoke-disabled)\n\n    ;; Check authorization - only DAO/extension or the registrant themselves can revoke\n    (asserts! (or (is-eq tx-sender registrant) (is-ok (is-dao-or-extension))) err-not-authorized)\n    \n    ;; Check if registration exists\n    (asserts! (> current-amount u0) err-not-registered)\n    \n    ;; Check if we're still in registration period\n    (asserts! (< current-timestamp (get registration-cutoff campaign-details)) err-registration-cutoff-passed)\n\n    ;; Verify the reward token matches what's registered\n    (asserts! (is-eq (contract-of reward-token-trait) (get reward-token campaign-registration)) err-token-mismatch)\n\n    ;; Update campaign registration total\n    (map-set campaign-registrations \n      { campaign-id: campaign-id, pool-id: pool-id }\n      (merge campaign-registration { reward-amount: (- (get reward-amount campaign-registration) current-amount) }))\n\n    ;; Set registration amount to 0\n    (map-set campaign-registrants\n      { campaign-id: campaign-id, pool-id: pool-id, registrant: registrant }\n      u0)\n\n    ;; Refund the reward tokens\n    (as-contract (try! (contract-call? \n      reward-token-trait\n      transfer-fixed \n      current-amount\n      tx-sender\n      registrant\n      none)))\n\n    (print { notification: \"revoke-registration\", payload: { \n      campaign-id: campaign-id, \n      pool-id: pool-id, \n      registrant: registrant,\n      amount-refunded: current-amount \n    }})\n    (ok true)))\n",
    "analysis": {
      "summary": "This contract manages campaigns for staking, voting, and rewards distribution, specifically designed for a decentralized governance context.",
      "explanation": "This Clarity smart contract is designed to facilitate a decentralized campaign system where users can stake tokens, vote, and claim rewards based on their participation. It integrates with a fungible token contract following the SIP-010 standard for token operations. The contract includes mechanisms for creating campaigns, registering as a participant, staking tokens, voting, and claiming rewards. It also supports governance actions like whitelisting pools and revoking registrations under certain conditions.\n\n- The contract uses several data variables and maps to keep track of campaigns, registrations, stakings, votes, and whitelisted pools. For example, `campaign-nonce` <L13> tracks the ID for the next campaign, and `campaigns` <L17> stores details about each campaign.\n- It defines constants for error codes <L6-19> to standardize responses to various failure states.\n- The contract includes read-only functions <L29-135> to check campaign details, staker information, voting power, and more, without altering the state.\n- Public functions <L137-448> allow users to interact with the contract by staking tokens, voting, claiming rewards, and registering for campaigns. These functions include checks to ensure actions are valid within the context of campaign rules.\n- Governance functions <L450-515> enable privileged users (e.g., a DAO or designated extensions) to modify contract parameters, such as enabling revocation of registrations or updating campaign details.\n- Private helper functions <L517-569> are used internally to perform calculations and checks, such as validating voting power or calculating rewards.\n\nOverall, the contract is structured to support a decentralized governance model where token holders can participate in decision-making processes through staking and voting, incentivized by rewards.",
      "tags": [
        "DeFi",
        "governance",
        "staking",
        "voting",
        "rewards"
      ]
    }
  },
  {
    "rank": 29,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.wrapper-arkadiko-v-1-1",
    "calls": 1412,
    "source": "(use-trait ft-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n(define-public (swap-x-for-y (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (dx uint) (min-dy uint))\n  (let (\n    (call (try! (contract-call?\n          'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y\n          token-x-trait\n          token-y-trait\n          dx min-dy)))\n  )\n    (ok call)\n  )\n)\n\n(define-public (swap-y-for-x (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (dy uint) (min-dx uint))\n  (let (\n    (call (try! (contract-call?\n          'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n          token-x-trait\n          token-y-trait\n          dy min-dx)))\n  )\n    (ok call)\n  )\n)",
    "analysis": {
      "summary": "This contract provides an interface for swapping tokens by interacting with the Arkadiko swap protocol on the Stacks blockchain.",
      "explanation": "The contract defines two public functions, `swap-x-for-y` and `swap-y-for-x`, allowing users to swap between two different tokens by leveraging the Arkadiko swap protocol. Both functions require the caller to specify the traits of the tokens they wish to swap and the minimum amount they are willing to receive, ensuring the swap does not proceed under unfavorable conditions.\n\n- The `use-trait` declaration <L1> imports the SIP-010 fungible token standard trait, which is a specification for fungible tokens on the Stacks blockchain. This allows the contract to interact with any token that implements this standard.\n\n- The `swap-x-for-y` function <L3-10> allows users to swap token X for token Y. It takes four parameters: the traits of token X and Y, the amount of token X to swap (`dx`), and the minimum amount of token Y the user is willing to accept (`min-dy`). It then calls the `swap-x-for-y` function of the `arkadiko-swap-v2-1` contract, passing these parameters. If the call succeeds, it returns an `ok` response with the result of the swap.\n\n- Similarly, the `swap-y-for-x` function <L12-19> enables users to swap token Y for token X, taking the traits of token Y and X, the amount of token Y to swap (`dy`), and the minimum amount of token X the user expects (`min-dx`). It calls the `swap-y-for-x` function of the `arkadiko-swap-v2-1` contract with these parameters. Upon success, it returns an `ok` response with the swap result.\n\nBoth functions use the `try!` macro to attempt the `contract-call?`, which invokes a function in another contract. If the `contract-call?` fails, the entire transaction is aborted. This ensures that the swap only goes through if the conditions are met and the external contract call succeeds.",
      "tags": [
        "DeFi",
        "token-swap",
        "fungible-token",
        "protocol-interaction"
      ]
    }
  },
  {
    "rank": 30,
    "contract": "SP3X4GA49AQY5S2RV46MP1GPCYTPBN4DZ1X35XTBE.swap-router-v16",
    "calls": 1369,
    "source": "(use-trait et 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (impl-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (define-constant E8 u100000000) (define-read-only (s2e (n uint)) (* n u100)) (define-public (i1 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1)) (ok u0) ) ) (define-public (o1 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l in u1)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i2 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda u5000000 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o2 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda u5000000 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (ok u0))) (define-public (i3 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0))) (define-public (o3 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i4 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnyc E8 (s2e in) none)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kielx1jn7 (unwrap-panic (contract-call? 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 get-balance tx-sender)) u1)) (ok u0))) (define-public (o4 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kielx1jn7 in u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnyc E8 (s2e (unwrap-panic (contract-call? 'SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11.newyorkcitycoin-token-v2 get-balance tx-sender))) none)) (ok u0))) (define-public (i5 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wdiko E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o5 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wdiko E8 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i6 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o6 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wusda E8 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i7 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u1)) (ok u0))) (define-public (o7 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c in u1)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i8 (in uint)) (begin (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw in u1)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0))) (define-public (o8 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1)) (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1)) (ok u0))) (define-public (i9 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none)) (ok u0))) (define-public (o9 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1 )) (ok u0))) (define-public (i10 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (ok u0))) (define-public (o10 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i11 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o11 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0)) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (i12 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u22 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u21 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token get-balance tx-sender)) u1 )) (ok u0))) (define-public (o12 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u21 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u22 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i13 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4 swap-y-for-x 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-4 (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0)) (ok u0))) (define-public (o13 (in uint)) (begin (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0)) (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2 (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1 )) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i14 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wpepe E8 (* u100000 (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (o14 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wpepe E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz get-balance tx-sender)) u1 )) (ok u0))) (define-public (i15 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc u5000000 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (ok u0))) (define-public (o15 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc u5000000 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (ok u0))) (define-public (i16 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (ok u0))) (define-public (o16 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (unwrap-panic (contract-call? 'SP2TZK01NKDC89J6TA56SA47SDF7RTHYEQ79AAB9A.Wrapped-USD get-balance tx-sender)) none)) (ok u0))) (define-public (i17 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wleo E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u28 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token get-balance tx-sender)) u1 )) (ok u0))) (define-public (o17 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u28 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wleo E8 (s2e (unwrap-panic (contract-call? 'SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (i18 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-waeusdc E8 (s2e (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender))) none)) (ok u0))) (define-public (o18 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-waeusdc E8 (s2e in) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i19 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1)) (ok u0))) (define-public (o19 (in uint)) (begin (try! (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-stx-aeusdc-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-1 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc in u1)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 )) (ok u0))) (define-public (i20 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxusd E8 (s2e in) none)) (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.migrate-wrapped migrate)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-susdt get-balance tx-sender)) none)) (ok u0))) (define-public (o20 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc E8 (s2e in) none)) (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.migrate-wrapped migrate)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc E8 (unwrap-panic (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc get-balance tx-sender)) none)) (ok u0))) (define-public (i21 (in uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (s2e in) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wgoat E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u36 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx get-balance tx-sender)) u1 )) (ok u0))) (define-public (o21 (in uint)) (begin (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u36 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 )) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wgoat E8 (s2e (unwrap-panic (contract-call? 'SP2F4QC563WN0A0949WPH5W1YXVC4M1R46QKE0G14.memegoatstx get-balance tx-sender))) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance tx-sender)) none)) (ok u0))) (define-public (callback (p principal) (bp (buff 2048))) (let ((enc (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? bp u0 u16)) u16)))) (bh (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? bp u16 u20)) u4)))) (addr (get hashbytes (unwrap-panic (element-at? (get addrs (unwrap-panic (get-burn-block-info? pox-addrs bh))) (mod enc u2))))) (di (buff-to-uint-be (unwrap-panic (as-max-len? (unwrap-panic (slice? addr u0 u4)) u4)))) (do (mod enc (+ di u4294967295))) (c (mod do u100)) (ina (* do u100)) (in (if (>= ina u500000000) u500000000 ina)) (ts (if (< c u30) (if (<= c u11) (list (if (is-eq c u1) (i1 in) (err u0)) (if (is-eq c u2) (i2 in) (err u0)) (if (is-eq c u3) (i3 in) (err u0)) (if (is-eq c u4) (i4 in) (err u0)) (if (is-eq c u5) (i5 in) (err u0)) (if (is-eq c u6) (i6 in) (err u0)) (if (is-eq c u7) (i7 in) (err u0)) (if (is-eq c u8) (i8 in) (err u0)) (if (is-eq c u9) (i9 in) (err u0)) (if (is-eq c u10) (i10 in) (err u0)) (if (is-eq c u11) (i11 in) (err u0))) (list (if (is-eq c u12) (i12 in) (err u0)) (if (is-eq c u13) (i13 in) (err u0)) (if (is-eq c u14) (i14 in) (err u0)) (if (is-eq c u15) (i15 in) (err u0)) (if (is-eq c u16) (i16 in) (err u0)) (if (is-eq c u17) (i17 in) (err u0)) (if (is-eq c u18) (i18 in) (err u0)) (if (is-eq c u19) (i19 in) (err u0)) (if (is-eq c u20) (i20 in) (err u0)) (if (is-eq c u21) (i21 in) (err u0)))) (if (<= c u41) (list (if (is-eq c u31) (o1 in) (err u0)) (if (is-eq c u32) (o2 in) (err u0)) (if (is-eq c u33) (o3 in) (err u0)) (if (is-eq c u34) (o4 in) (err u0)) (if (is-eq c u35) (o5 in) (err u0)) (if (is-eq c u36) (o6 in) (err u0)) (if (is-eq c u37) (o7 in) (err u0)) (if (is-eq c u38) (o8 in) (err u0)) (if (is-eq c u39) (o9 in) (err u0)) (if (is-eq c u40) (o10 in) (err u0)) (if (is-eq c u41) (o11 in) (err u0))) (list (if (is-eq c u42) (o12 in) (err u0)) (if (is-eq c u43) (o13 in) (err u0)) (if (is-eq c u44) (o14 in) (err u0)) (if (is-eq c u45) (o15 in) (err u0)) (if (is-eq c u46) (o16 in) (err u0)) (if (is-eq c u47) (o17 in) (err u0)) (if (is-eq c u48) (o18 in) (err u0)) (if (is-eq c u49) (o19 in) (err u0)) (if (is-eq c u50) (o20 in) (err u0)) (if (is-eq c u51) (o21 in) (err u0))))))) (ok true) ) ) (define-private (ee (bp (buff 2048)) (t <et>)) (as-contract (begin (asserts! (is-eq tx-sender (contract-of t)) (err u0)) (try! (contract-call? 'SPQMC3TZV31QANKXRRJNX4QE6AYMQ743J05BGRJA.vault-v1 flash-loan-stx t (stx-get-balance 'SPQMC3TZV31QANKXRRJNX4QE6AYMQ743J05BGRJA.vault-v1) tx-sender bp)) (let ((ba (stx-get-balance tx-sender))) (and (> ba u0) (try! (stx-transfer? ba tx-sender 'SP20RPAFPQEAB9AGKMWQH1MJ2GGQ82GPZZBSGXEBY)))) (ok true) )) ) (define-public (r0 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r1 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r2 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r3 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r4 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r5 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r6 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r7 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r8 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (r9 (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ra (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rb (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rc (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rd (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (re (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rf (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rg (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rh (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ri (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rj (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rk (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rl (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rm (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rn (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ro (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rp (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rq (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rr (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rs (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rt (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ru (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rv (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rw (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rx (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (ry (bp (buff 2048)) (t <et>)) (ee bp t)) (define-public (rz (bp (buff 2048)) (t <et>)) (ee bp t))",
    "analysis": {
      "summary": "This contract facilitates complex token swaps and flash loans on the Stacks blockchain, leveraging multiple DeFi protocols.",
      "explanation": "This Clarity smart contract integrates with several DeFi protocols on the Stacks blockchain to perform a variety of token swaps and flash loan operations. It uses the trait system for interoperability, constants for precision handling, and public functions for executing swaps and loans. Key components include:\n\n- **Trait Implementation and Constants**: The contract begins by using and implementing a trait from another contract, followed by defining a constant `E8` for handling token decimals.\n\n- **Token Swap Functions (`i1` to `i21` and `o1` to `o21`)**: These functions perform token swaps across different protocols. Each function is designed to handle specific token pairs, with some functions dedicated to swapping tokens in one direction (`iX`) and others in the opposite direction (`oX`). The implementation details involve calling external contracts to execute swaps, handling errors with `try!` and `unwrap-panic`, and using conditional logic to manage swap logic.\n\n- **Flash Loan Execution (`ee` and `r0` to `rz`)**: The `ee` function is a private function that executes a flash loan by calling an external contract's `flash-loan-stx` function, transferring STX tokens, and ensuring the balance is greater than 0. The `rX` functions are public interfaces to the `ee` function, allowing for different entry points with the same flash loan execution logic.\n\n- **Callback Mechanism**: A public `callback` function is defined to handle post-flash loan operations, which includes complex logic for determining the operation to perform based on the callback data. It uses bitwise operations, conditional checks, and a large conditional structure to map encoded data to specific swap functions.\n\nOverall, the contract demonstrates advanced features of Clarity, including trait usage for interoperability, complex control flow, and interaction with external contracts for DeFi operations.",
      "tags": [
        "DeFi",
        "token-swap",
        "flash-loan",
        "interoperability",
        "protocol"
      ]
    }
  },
  {
    "rank": 31,
    "contract": "SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01",
    "calls": 1189,
    "source": "(impl-trait .extension-trait.extension-trait)\n(use-trait sip010-trait .trait-sip-010.sip-010-trait)\n(define-constant err-unauthorised (err u1000))\n(define-constant err-paused (err u1001))\n(define-constant err-invalid-amount (err u1003))\n(define-constant err-invalid-tx (err u1004))\n(define-constant err-already-sent (err u1005))\n(define-constant err-address-mismatch (err u1006))\n(define-constant err-request-already-revoked (err u1007))\n(define-constant err-request-already-finalized (err u1008))\n(define-constant err-revoke-grace-period (err u1009))\n(define-constant err-request-already-claimed (err u1010))\n(define-constant err-bitcoin-tx-not-mined (err u1011))\n(define-constant err-tx-mined-before-request (err u1013))\n(define-constant err-slippage (err u1016))\n(define-constant MAX_UINT u340282366920938463463374607431768211455)\n(define-constant ONE_8 u100000000)\n(define-data-var fee-to-address principal tx-sender)\n(define-data-var peg-out-paused bool true)\n(define-data-var peg-out-fee uint u0)\n(define-data-var peg-out-min-fee uint u0)\n(define-public (set-fee-to-address (new-fee-to-address principal))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set fee-to-address new-fee-to-address))))\n(define-public (pause-peg-out (paused bool))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set peg-out-paused paused))))\n(define-public (set-peg-out-fee (fee uint))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set peg-out-fee fee))))\n(define-public (set-peg-out-min-fee (fee uint))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set peg-out-min-fee fee))))\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) err-unauthorised)))\n(define-read-only (is-peg-out-paused)\n\t(var-get peg-out-paused))\n(define-read-only (get-peg-out-fee)\n\t(var-get peg-out-fee))\n(define-read-only (get-peg-out-min-fee)\n\t(var-get peg-out-min-fee))\n(define-read-only (get-request-revoke-grace-period)\n\t(contract-call? .btc-bridge-registry-v2-01 get-request-revoke-grace-period))\n(define-read-only (get-request-claim-grace-period)\n\t(contract-call? .btc-bridge-registry-v2-01 get-request-claim-grace-period))\n(define-read-only (get-request-or-fail (request-id uint))\n\t(contract-call? .btc-bridge-registry-v2-01 get-request-or-fail request-id))\n(define-read-only (is-peg-in-address-approved (address (buff 128)))\n\t(contract-call? .btc-bridge-registry-v2-01 is-peg-in-address-approved address))\n(define-read-only (get-peg-in-sent-or-default (tx (buff 32768)) (output uint))\n\t(contract-call? .btc-bridge-registry-v2-01 get-peg-in-sent-or-default tx output))\n(define-read-only (get-fee-to-address)\n\t(var-get fee-to-address))\n(define-read-only (extract-tx-ins-outs (tx (buff 32768)))\n\t(if (try! (contract-call? .clarity-bitcoin-v1-07 is-segwit-tx tx))\n\t\t(let (\n\t\t\t\t(parsed-tx (unwrap! (contract-call? .clarity-bitcoin-v1-07 parse-wtx tx) err-invalid-tx)))\n\t\t\t(ok { ins: (get ins parsed-tx), outs: (get outs parsed-tx) }))\n\t\t(let (\n\t\t\t\t(parsed-tx (unwrap! (contract-call? .clarity-bitcoin-v1-07 parse-tx tx) err-invalid-tx)))\n\t\t\t(ok { ins: (get ins parsed-tx), outs: (get outs parsed-tx) }))))\n(define-read-only (get-txid (tx (buff 32768)))\n\t(if (try! (contract-call? .clarity-bitcoin-v1-07 is-segwit-tx tx))\n\t\t(ok (contract-call? .clarity-bitcoin-v1-07 get-segwit-txid tx))\n\t\t(ok (contract-call? .clarity-bitcoin-v1-07 get-txid tx))))\n(define-read-only (verify-mined (tx (buff 32768)) (block { header: (buff 80), height: uint }) (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint }))\n\t(if (is-eq chain-id u1)\n\t\t(let (\n\t\t\t\t(response (if (try! (contract-call? .clarity-bitcoin-v1-07 is-segwit-tx tx))\n\t\t\t\t\t(contract-call? .clarity-bitcoin-v1-07 was-segwit-tx-mined? block tx proof)\n\t\t\t\t\t(contract-call? .clarity-bitcoin-v1-07 was-tx-mined? block tx proof))\n\t\t\t\t))\n\t\t\t(if (or (is-err response) (not (unwrap-panic response)))\n\t\t\t\terr-bitcoin-tx-not-mined\n\t\t\t\t(ok true)\n\t\t\t))\n\t\t(ok true))) ;; if not mainnet, assume verified\n(define-read-only (validate-peg-out-0 (amount uint))\n\t(let (\n\t\t\t(gas-fee (var-get peg-out-min-fee))\n\t\t\t(fee (- (max (mul-down amount (var-get peg-out-fee)) gas-fee) gas-fee)))\n\t\t(asserts! (> amount (+ fee gas-fee)) err-invalid-amount)\n\t\t(ok { amount: (- amount fee gas-fee), fee: fee, gas-fee: gas-fee })))\n(define-public (request-peg-out-0 (peg-out-address (buff 128)) (amount uint))\n\t(let (\n\t\t\t(validation-data (try! (validate-peg-out-0 amount)))\n\t\t\t(gas-fee (get gas-fee validation-data))\n\t\t\t(fee (get fee validation-data))\n\t\t\t(amount-net (get amount validation-data))\n\t\t\t(request-details { requested-by: tx-sender, peg-out-address: peg-out-address, amount-net: amount-net, fee: fee, gas-fee: gas-fee, claimed: u0, claimed-by: tx-sender, fulfilled-by: 0x, revoked: false, finalized: false, requested-at: block-height, requested-at-burn-height: burn-block-height })\n\t\t\t(request-id (as-contract (try! (contract-call? .btc-bridge-registry-v2-01 set-request u0 request-details)))))\n\t\t(asserts! (not (var-get peg-out-paused)) err-paused)\n\t\t(try! (contract-call? .token-abtc transfer-fixed amount tx-sender (as-contract tx-sender) none))\n\t\t(print (merge request-details { type: \"request-peg-out\", request-id: request-id }))\n\t\t(ok request-id)))\n(define-public (claim-peg-out (request-id uint) (fulfilled-by (buff 128)))\n\t(let (\n\t\t\t(claimer tx-sender)\n\t\t\t(request-details (try! (get-request-or-fail request-id))))\n\t\t(asserts! (not (var-get peg-out-paused)) err-paused)\n\t\t(asserts! (< (get claimed request-details) block-height) err-request-already-claimed)\n\t\t(asserts! (not (get revoked request-details)) err-request-already-revoked)\n\t\t(asserts! (not (get finalized request-details)) err-request-already-finalized)\n\t\t(as-contract (try! (contract-call? .btc-bridge-registry-v2-01 set-request request-id (merge request-details { claimed: (+ block-height (get-request-claim-grace-period)), claimed-by: claimer, fulfilled-by: fulfilled-by }))))\n\t\t(print (merge request-details { type: \"claim-peg-out\", request-id: request-id, claimed: (+ block-height (get-request-claim-grace-period)), claimed-by: claimer, fulfilled-by: fulfilled-by }))\n\t\t(ok true)))\n(define-public (finalize-peg-out\n\t(request-id uint)\n\t(tx (buff 32768))\n\t(block { header: (buff 80), height: uint })\n\t(proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n\t(output-idx uint) (fulfilled-by-idx uint))\n\t(let (\n\t\t\t(request-details (try! (get-request-or-fail request-id)))\n\t\t\t(was-mined (try! (verify-mined tx block proof)))\n\t\t\t(parsed-tx (try! (extract-tx-ins-outs tx)))\n\t\t\t(output (unwrap! (element-at (get outs parsed-tx) output-idx) err-invalid-tx))\n\t\t\t(fulfilled-by (get scriptPubKey (unwrap! (element-at (get outs parsed-tx) fulfilled-by-idx) err-invalid-tx)))\n\t\t\t(amount (get value output))\n\t\t\t(peg-out-address (get scriptPubKey output))\n\t\t\t(is-fulfilled-by-peg-in (is-peg-in-address-approved fulfilled-by)))\n\t\t(asserts! (not (var-get peg-out-paused)) err-paused)\n\t\t(asserts! (is-eq amount (get amount-net request-details)) err-invalid-amount)\n\t\t(asserts! (is-eq (get peg-out-address request-details) peg-out-address) err-address-mismatch)\n\t\t(asserts! (is-eq (get fulfilled-by request-details) fulfilled-by) err-address-mismatch)\n\t\t(asserts! (< (get requested-at-burn-height request-details) (get height block)) err-tx-mined-before-request)\n\t\t;; (asserts! (<= block-height (get claimed request-details)) err-request-claim-expired) ;; allow fulfilled if not claimed again\n\t\t(asserts! (not (get-peg-in-sent-or-default tx output-idx)) err-already-sent)\n\t\t(asserts! (not (get revoked request-details)) err-request-already-revoked)\n\t\t(asserts! (not (get finalized request-details)) err-request-already-finalized)\n\t\t(as-contract (try! (contract-call? .btc-bridge-registry-v2-01 set-peg-in-sent tx output-idx true)))\n\t\t(as-contract (try! (contract-call? .btc-bridge-registry-v2-01 set-request request-id (merge request-details { finalized: true }))))\n\t\t(and (> (get fee request-details) u0) (as-contract (try! (contract-call? .token-abtc transfer-fixed (get fee request-details) tx-sender (var-get fee-to-address) none))))\n\t\t(and (> (get gas-fee request-details) u0) (as-contract (try! (contract-call? .token-abtc transfer-fixed (get gas-fee request-details) tx-sender (if is-fulfilled-by-peg-in (var-get fee-to-address) (get claimed-by request-details)) none))))\n\t\t(if is-fulfilled-by-peg-in\n\t\t\t(as-contract (try! (contract-call? .token-abtc burn-fixed (get amount-net request-details) tx-sender)))\n\t\t\t(as-contract (try! (contract-call? .token-abtc transfer-fixed (get amount-net request-details) tx-sender (get claimed-by request-details) none))))\n\t\t(print { type: \"finalize-peg-out\", request-id: request-id, tx: tx })\n\t\t(ok true)))\n(define-public (revoke-peg-out (request-id uint))\n\t(let (\n\t\t\t(request-details (try! (get-request-or-fail request-id))))\n\t\t(asserts! (> block-height (+ (get requested-at request-details) (get-request-revoke-grace-period))) err-revoke-grace-period)\n\t\t(asserts! (< (get claimed request-details) block-height) err-request-already-claimed)\n\t\t(asserts! (not (get revoked request-details)) err-request-already-revoked)\n\t\t(asserts! (not (get finalized request-details)) err-request-already-finalized)\n\t\t(as-contract (try! (contract-call? .btc-bridge-registry-v2-01 set-request request-id (merge request-details { revoked: true }))))\n\t\t(and (> (get fee request-details) u0) (as-contract (try! (contract-call? .token-abtc transfer-fixed (get fee request-details) tx-sender (get requested-by request-details) none))))\n\t\t(and (> (get gas-fee request-details) u0) (as-contract (try! (contract-call? .token-abtc transfer-fixed (get gas-fee request-details) tx-sender (get requested-by request-details) none))))\n\t\t(as-contract (try! (contract-call? .token-abtc transfer-fixed (get amount-net request-details) tx-sender (get requested-by request-details) none)))\n\t\t(print { type: \"revoke-peg-out\", request-id: request-id })\n\t\t(ok true)))\n(define-private (max (a uint) (b uint))\n\t(if (< a b) b a))\n(define-private (min (a uint) (b uint))\n\t(if (< a b) a b))\n(define-private (mul-down (a uint) (b uint))\n\t(/ (* a b) ONE_8))\n(define-private (div-down (a uint) (b uint))\n\t(if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true))",
    "analysis": {
      "summary": "This contract facilitates peg-out requests from a Stacks token to Bitcoin, handling fees, pausing functionality, and request management.",
      "explanation": "The contract implements a system for users to convert (peg-out) a Stacks-based token into Bitcoin. It includes mechanisms for setting fees, pausing peg-outs, and managing peg-out requests, including validation, creation, claiming, finalizing, and revoking requests. Key functionalities are protected by checks to ensure only authorized users (DAO or extension contracts) can modify settings. It interacts with external contracts for additional validations and operations, such as verifying Bitcoin transaction inclusion and managing peg-out request records.\n\n- <L1-8> define constants for error codes.\n- <L9-12> define global variables for fee management and pause state.\n- <L13-20> administrative functions to set fee-related addresses and amounts, protected by 'is-dao-or-extension' checks.\n- <L21> checks if the caller is the DAO or an approved extension, centralizing authorization logic.\n- <L22-33> read-only functions to get contract state or interact with external contracts for peg-out operations.\n- <L34-38> extracts Bitcoin transaction inputs and outputs, handling both segwit and non-segwit transactions.\n- <L39-43> verifies if a Bitcoin transaction was mined, with a bypass for non-mainnet environments.\n- <L44-50> validates peg-out requests by ensuring the net amount after fees is positive.\n- <L51-67> handles peg-out request creation, including fee calculation and state updates in an external registry contract.\n- <L68-93> allows claiming of a peg-out request, setting the claim grace period and marking the request as claimed.\n- <L94-126> finalizes a peg-out request by verifying the Bitcoin transaction and updating the request state accordingly.\n- <L127-147> revokes a peg-out request if it's within the grace period and not yet claimed or finalized.\n- <L148-154>, <L155-161>, <L162-168> utility functions for arithmetic operations, adjusting for the token's decimal precision.\n- <L169-172> a placeholder callback function, potentially for future extensions or integrations.",
      "tags": [
        "DeFi",
        "peg-out",
        "Bitcoin",
        "fee-management",
        "request-management"
      ]
    }
  },
  {
    "rank": 32,
    "contract": "SP2AA3RQQ8R98CZER4J1SMCSG879A4KM3WH3PM1KW.bns-1718282853306-v1",
    "calls": 1128,
    "source": "(define-constant A tx-sender)\n\n(define-public (swap-x-for-y (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\ta0 u0)))\n\t\t(a1 (unwrap-panic (element-at b0 u1)))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta1 u1)))\n\t\t(a2 (get amt-out b1))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (swap-y-for-x (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta0 u1)))\n\t\t(a1 (get amt-out b0))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\ta1 u0)))\n\t\t(a2 (unwrap-panic (element-at b1 u0)))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (add-to-position (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta0 u1)))\n\t\t(a1 (get amt-out b0))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi\n\t\t\tu100000000 (* a1 u100) none)))\n\t\t(a2 (/ (get dx b1) u100))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (reduce-position (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi\n\t\t\tu100000000 (* a0 u100) none)))\n\t\t(a1 (/ (get dy b0) u100))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta1 u1)))\n\t\t(a2 (get amt-out b1))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (purchase-name (dx uint))\n    (ok (list \n        (swap-x-for-y dx)\n        (swap-y-for-x dx)\n        (add-to-position dx)\n        (reduce-position dx)\n    ))\n)",
    "analysis": {
      "summary": "This contract facilitates various swap and liquidity pool operations between two tokens, ensuring operations are only performed by a specific user.",
      "explanation": "This Clarity smart contract defines a series of public functions to perform token swaps and manage liquidity positions in a decentralized finance (DeFi) context. Each function is designed to be called by a specific user, identified by the constant 'A', which is set to the contract deployer's address at the time of deployment.\n\n- The contract starts by defining a constant 'A' as the tx-sender, which restricts the use of the contract's main functions to this user only <L1>.\n\n- The 'swap-x-for-y' function allows swapping token X for token Y by calling external contracts that facilitate the swap, ensuring that the amount received is greater than the amount sent <L3-26>.\n\n- Similarly, 'swap-y-for-x' performs the reverse operation, swapping token Y for token X with the same validation on amounts <L28-51>.\n\n- 'add-to-position' allows the user to add liquidity to a pool, receiving pool tokens in return, based on the amount of token X provided <L53-76>.\n\n- 'reduce-position' enables the user to remove liquidity from a pool, converting pool tokens back into token X, with validations similar to the swap functions <L78-101>.\n\n- Each of these functions performs an STX transfer to the contract itself as part of their operations, using the 'as-contract' call to execute these transfers and contract calls from the contract's perspective, ensuring that the contract's logic controls the flow of tokens <L5, L30, L55, L79>.\n\n- The 'purchase-name' function is a composite operation that sequentially calls the other four functions with the same input amount, demonstrating how multiple operations can be batched together in a single transaction <L103-110>.\n\n- The use of 'asserts!', 'try!', and 'unwrap-panic' throughout the contract ensures that operations only proceed if certain conditions are met and that errors in contract calls are handled gracefully, either by reverting the transaction or by providing meaningful error outputs <L6, L7, L10, L32, L56, L80>.\n\n- The contract interacts with external contracts for token swaps and liquidity management, requiring knowledge of the Clarity language's inter-contract communication features, such as 'contract-call?' and handling of complex return types <L11-12, L33-34, L57-58, L81-82>.",
      "tags": [
        "DeFi",
        "token-swap",
        "liquidity-pool",
        "restricted-access"
      ]
    }
  },
  {
    "rank": 33,
    "contract": "SPAG3YDTNKR58Z6X1RK74N861MXJ8RCRRE80A11W.balancer-v29-3",
    "calls": 1106,
    "source": "(define-constant ONE_6 u1000000)\n(define-constant ONE_8 u100000000)\n(define-constant ERR-NO-PR (err u400))\n\n(define-read-only (six-to-eight (n uint))\n    (/ (* n ONE_8) ONE_6)\n)\n\n(define-public (balancer1_i (in uint) (mrc uint))\n    (begin \n        (try! (contract-call? \n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper \n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 \n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi \n            u100000000 (six-to-eight in) none\n        ))\n        (let \n            (\n                (bb (stx-get-balance tx-sender))\n            )            \n            (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens  \n                u27 \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx \n                'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token \n                'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token   \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx   \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to  \n                (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) \n                u1\n            ))\n            (let \n                (\n                    (ba (stx-get-balance tx-sender))\n                    (rc (- ba bb))\n                )\n                (asserts! (>= rc mrc) ERR-NO-PR)\n                (ok (list bb ba))\n            ) \n        )\n    )\n)\n\n(define-public (balancer1 (dd uint) (mr uint) (ta uint))\n    (let (\n            (r (list \n                (balancer1_i dd mr)\n            ))\n        )\n        (and (> (stx-get-balance tx-sender) ta) (try! (stx-transfer? (- (stx-get-balance tx-sender) ta) tx-sender 'SPAG3YDTNKR58Z6X1RK74N861MXJ8RCRRE80A11W)))\n        (ok r)\n    )\n)\n\n\n(define-public (balancer2_i (in uint) (mout uint))\n    (begin\n        (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens  \n                u27 \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx \n                'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token  \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n                'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n                in \n                u1\n            ))\n        (let\n            (\n                (bb (stx-get-balance tx-sender))\n            )\n            (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper\n                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi \n                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2    \n                u100000000  \n                (six-to-eight (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)))\n                none\n            ))\n            (let \n                (\n                    (ba (stx-get-balance tx-sender))\n                    (rc (- ba bb))\n                )\n                (asserts! (>= rc mout) (err u400))\n                (ok (list bb ba))\n            ) \n        )\n    )\n)\n\n(define-public (balancer2 (dd uint) (mr uint) (ta uint))\n    (let (\n            (r (list \n                (balancer2_i dd mr)\n            ))\n        )\n        (and (> (stx-get-balance tx-sender) ta) (try! (stx-transfer? (- (stx-get-balance tx-sender) ta) tx-sender 'SPAG3YDTNKR58Z6X1RK74N861MXJ8RCRRE80A11W)))\n        (ok r)\n    )\n)\n\n(define-public (balancer (dd uint) (mr uint) (ta uint))\n    (let (\n            (r (list \n                (balancer1_i dd mr)\n                (balancer2_i dd mr)\n            ))\n        )\n        (and (> (stx-get-balance tx-sender) ta) (try! (stx-transfer? (- (stx-get-balance tx-sender) ta) tx-sender 'SPAG3YDTNKR58Z6X1RK74N861MXJ8RCRRE80A11W)))\n        (ok r)\n    )\n)",
    "analysis": {
      "summary": "This contract facilitates token swaps and balance adjustments on the Stacks blockchain, utilizing external contracts for swapping tokens and managing balances.",
      "explanation": "The contract consists of several functions designed to interact with external contracts for the purpose of swapping tokens and ensuring balance adjustments meet certain criteria. It uses constants for unit conversion and error handling, and defines public functions for initiating swaps and balance transfers.\n\n- Constants <L1-3>: Defines constants for unit conversion and error handling. `ONE_6` and `ONE_8` are used for decimal precision adjustments, and `ERR-NO-PR` is an error code for insufficient profit.\n\n- Function `six-to-eight` <L5-7>: Converts a uint value from 6 decimal places to 8 decimal places. This is useful for adjusting token amounts to match the decimal precision of different tokens.\n\n- Function `balancer1_i` <L9-37>: Attempts a token swap using an external contract (`amm-pool-v2-01`) and then another swap via `univ2-router`. It checks the balance before and after the operations to ensure the net balance change meets a minimum required change (`mrc`). It uses `six-to-eight` for unit conversion.\n\n- Function `balancer1` <L39-48>: Public interface that wraps `balancer1_i`, performing additional checks and a balance transfer if certain conditions are met.\n\n- Function `balancer2_i` <L50-78>: Similar to `balancer1_i`, but performs the token swap operations in reverse order. It ensures the net balance change meets a minimum required output (`mout`).\n\n- Function `balancer2` <L80-89>: Public interface for `balancer2_i`, with similar additional checks and a balance transfer.\n\n- Function `balancer` <L91-102>: Combines `balancer1_i` and `balancer2_i` operations, allowing for both sets of operations to be performed in one transaction, followed by a balance transfer if conditions are met.\n\nEach function that interacts with external contracts uses `contract-call?` to invoke methods on those contracts, passing in parameters as required. The use of `try!` ensures that if any of these external calls fail, the whole transaction is aborted. `asserts!` is used to enforce post-conditions (e.g., sufficient profit from swaps).",
      "tags": [
        "DeFi",
        "token-swap",
        "balance-management",
        "protocol-interaction"
      ]
    }
  },
  {
    "rank": 34,
    "contract": "SPVD6CE8RW90BGGKJZTKCSMGKS7HP0K8364TFR48.bitcoin-faces-airdrop",
    "calls": 1100,
    "source": "(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-constant DEPLOYER tx-sender)\n(define-constant ALL_HEX (contract-call? .utils get-all-hex))\n(define-constant ALL_HEX_ASCII (contract-call? .utils get-all-hex-ascii))\n\n(define-data-var nextId uint u1)\n\n(define-data-var url (string-ascii 256) \"https://bitcoinfaces.xyz/api/get-nft-metadata?hashedName=\")\n\n(define-map FirstOwners uint principal)\n\n(define-non-fungible-token bitcoin-faces uint)\n\n(define-read-only (get-last-token-id) (ok (- (var-get nextId) u1)))\n\n(define-read-only (get-token-uri (id uint))\n  (ok (as-max-len? (concat (var-get url) (fold buff-to-ascii (get-first-owner-buff id) \"0x\")) u256))\n)\n\n(define-private (buff-to-ascii (x (buff 1)) (out (string-ascii 1000)))\n    (unwrap-panic (as-max-len? (concat out (unwrap-panic (element-at? ALL_HEX_ASCII (unwrap-panic (index-of? ALL_HEX x))))) u1000))\n)\n\n(define-read-only (get-owner (id uint)) (ok (nft-get-owner? bitcoin-faces id)))\n\n(define-public (transfer (id uint) (from principal) (to principal))\n  (if (or (is-eq from tx-sender) (is-eq from contract-caller))\n    (begin\n      (map-insert FirstOwners id from)\n      (nft-transfer? bitcoin-faces id from to)\n    )\n    (err u4)\n  )\n)\n\n(define-public (burn (id uint) (from principal))\n  (if (or (is-eq from tx-sender) (is-eq from contract-caller))\n    (begin\n      (map-insert FirstOwners id from)\n      (nft-burn? bitcoin-faces id from)\n    )\n    (err u4)\n  )\n)\n\n(define-public (mint (to principal))\n  (let ((id (var-get nextId)))\n    (asserts! (is-eq DEPLOYER (get-standard-caller)) (err u401))\n    (var-set nextId (+ id u1))\n    (nft-mint? bitcoin-faces id to)\n  )\n)\n\n(define-public (set-url (new (string-ascii 256)))\n  (if (is-eq DEPLOYER (get-standard-caller))\n    (ok (var-set url new))\n    (err u401)\n  )\n)\n\n(define-public (airdrop (l1 (list 5000 principal)) (l2 (list 5000 principal)) (l3 (list 4995 principal)))\n  (if (is-eq DEPLOYER (get-standard-caller))\n    (ok (var-set nextId (fold drop l3 (fold drop l2 (fold drop l1 (var-get nextId))))))\n    (err u401)\n  )\n)\n\n(define-private (drop (to principal) (id uint))\n  (begin (is-err (nft-mint? bitcoin-faces id to)) (+ id u1))\n)\n\n(define-read-only (get-standard-caller)\n  (let ((d (unwrap-panic (principal-destruct? contract-caller))))\n    (unwrap-panic (principal-construct? (get version d) (get hash-bytes d)))\n  )\n)\n\n(define-read-only (get-first-owner (id uint)) \n  (match (map-get? FirstOwners id) addr (some addr)\n    (nft-get-owner? bitcoin-faces id)\n  )\n)\n\n(define-read-only (get-first-owner-buff (id uint))\n  (unwrap-panic (match (get-first-owner id) addr (to-consensus-buff? addr) (some 0x)))\n)\n\n(nft-mint? bitcoin-faces u0 (as-contract tx-sender))\n(as-contract (transfer u0 tx-sender DEPLOYER))\n",
    "analysis": {
      "summary": "This contract implements a unique NFT collection named Bitcoin Faces, allowing minting, transferring, and burning of NFTs, with additional functionality to track the first owner and dynamically set metadata URLs.",
      "explanation": "The contract starts by implementing a trait from another contract, ensuring it adheres to a predefined NFT interface. It defines constants for the deployer, and two sets of hexadecimal characters for ASCII conversion. A unique ID for the next NFT to be minted is tracked, along with a base URL for NFT metadata. It also maintains a map of the first owners of each NFT to track ownership history.\n\n- <L2-L4> Constants are defined for the deployer and for hexadecimal conversion utilities.\n- <L6> Initializes the next NFT ID.\n- <L8> Sets a base URL for NFT metadata.\n- <L10> A map to track the first owner of each NFT.\n- <L12> Declares a non-fungible token named bitcoin-faces.\n- <L14-16> Provides a function to get the last minted token's ID.\n- <L18-20> Concatenates the base URL with the NFT ID's first owner's address in ASCII to generate the token's metadata URL.\n- <L22-24> Converts a single byte buffer to its ASCII representation, aiding in metadata URL generation.\n- <L26> Retrieves the current owner of a specified NFT ID.\n- <L28-36> Enables transferring of NFTs, recording the first owner if not already set.\n- <L38-46> Allows burning of NFTs, similarly tracking the first owner.\n- <L48-54> Mints a new NFT to a specified address, incrementing the next ID.\n- <L56-60> Permits the deployer to update the base metadata URL.\n- <L62-68> An airdrop function to mint NFTs in bulk to specified addresses, bypassing the first owner tracking for efficiency.\n- <L70-72> Helper function for the airdrop, minting NFTs and incrementing the ID.\n- <L74-78> Extracts the standard caller's principal, useful for verifying contract calls.\n- <L80-86> Retrieves the first owner of an NFT, defaulting to the current owner if not found in the map.\n- <L88-90> Converts the first owner's principal to a consensus buffer for URL generation.\n\nThe contract concludes by minting the first NFT to the deployer and transferring it to the deployer, showcasing an initial setup process.\n\nThis contract combines NFT functionality with unique features like tracking the initial owner and dynamic metadata URLs, demonstrating advanced Clarity capabilities.",
      "tags": [
        "NFT",
        "metadata",
        "ownership-tracking",
        "Clarity"
      ]
    }
  },
  {
    "rank": 35,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.wrapper-velar-path-v-1-1",
    "calls": 1088,
    "source": ";; wrapper-velar-path-v-1-1\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n(use-trait univ2v2-pool-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait)\n(use-trait univ2v2-fees-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait)\n(use-trait curve-pool-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-pool-trait_v1_0_0.curve-pool-trait)\n(use-trait curve-fees-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-fees-trait_v1_0_0.curve-fees-trait)\n(use-trait ststx-pool-trait 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.curve-pool-trait_ststx.curve-pool-trait)\n(use-trait ststx-proxy-trait 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.curve-proxy-trait_ststx.curve-proxy-trait)\n\n(define-constant NUM_A u1000000)\n(define-constant NUM_B u100)\n\n(define-public (apply\n    (path (list 4 {a: (string-ascii 1), b: principal, c: uint, d: principal, e: principal, f: bool}))\n    (amt-in uint)\n    (token1 (optional <ft-trait>)) (token2 (optional <ft-trait>)) (token3 (optional <ft-trait>))\n    (token4 (optional <ft-trait>)) (token5 (optional <ft-trait>))\n    (share-fee-to (optional <share-fee-to-trait>))\n    (univ2v2-pool-1 (optional <univ2v2-pool-trait>)) (univ2v2-pool-2 (optional <univ2v2-pool-trait>))\n    (univ2v2-pool-3 (optional <univ2v2-pool-trait>)) (univ2v2-pool-4 (optional <univ2v2-pool-trait>))\n    (univ2v2-fees-1 (optional <univ2v2-fees-trait>)) (univ2v2-fees-2 (optional <univ2v2-fees-trait>))\n    (univ2v2-fees-3 (optional <univ2v2-fees-trait>)) (univ2v2-fees-4 (optional <univ2v2-fees-trait>))\n    (curve-pool-1 (optional <curve-pool-trait>)) (curve-pool-2 (optional <curve-pool-trait>))\n    (curve-pool-3 (optional <curve-pool-trait>)) (curve-pool-4 (optional <curve-pool-trait>))\n    (curve-fees-1 (optional <curve-fees-trait>)) (curve-fees-2 (optional <curve-fees-trait>))\n    (curve-fees-3 (optional <curve-fees-trait>)) (curve-fees-4 (optional <curve-fees-trait>))\n    (ststx-pool-1 (optional <ststx-pool-trait>)) (ststx-pool-2 (optional <ststx-pool-trait>))\n    (ststx-pool-3 (optional <ststx-pool-trait>)) (ststx-pool-4 (optional <ststx-pool-trait>))\n    (ststx-proxy-1 (optional <ststx-proxy-trait>)) (ststx-proxy-2 (optional <ststx-proxy-trait>))\n    (ststx-proxy-3 (optional <ststx-proxy-trait>)) (ststx-proxy-4 (optional <ststx-proxy-trait>))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.path-apply_staging apply\n                  path amt-in\n                  token1 token2 token3 token4 token5\n                  share-fee-to\n                  univ2v2-pool-1 univ2v2-pool-2 univ2v2-pool-3 univ2v2-pool-4\n                  univ2v2-fees-1 univ2v2-fees-2 univ2v2-fees-3 univ2v2-fees-4\n                  curve-pool-1 curve-pool-2 curve-pool-3 curve-pool-4\n                  curve-fees-1 curve-fees-2 curve-fees-3 curve-fees-4\n                  ststx-pool-1 ststx-pool-2 ststx-pool-3 ststx-pool-4\n                  ststx-proxy-1 ststx-proxy-2 ststx-proxy-3 ststx-proxy-4)))\n  )\n    (ok (get amt-out (get swap4 swap-a)))\n  )\n)\n\n(define-public (swap-univ2v2\n    (amt-in uint)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (univ2v2-pool <univ2v2-pool-trait>) (univ2v2-fees <univ2v2-fees-trait>)\n  )\n  (let (\n    (edge {a: \"v\", b: (contract-of univ2v2-pool), c: u0, d: (contract-of token-in), e: (contract-of token-out), f: false})\n    (swap-a (try! (contract-call?\n                  'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.path-apply_staging swap-univ2v2\n                  edge amt-in\n                  token-in token-out\n                  univ2v2-pool univ2v2-fees)))\n  )\n    (ok (get amt-out swap-a))\n  )\n)\n\n(define-public (swap-curve\n    (amt-in uint)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (curve-pool <curve-pool-trait>) (curve-fees <curve-fees-trait>)\n  )\n  (let (\n    (edge {a: \"c\", b: (contract-of curve-pool), c: u0, d: (contract-of token-in), e: (contract-of token-out), f: false})\n    (swap-a (try! (contract-call?\n                  'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.path-apply_staging swap-curve\n                  edge amt-in\n                  token-in token-out\n                  curve-pool curve-fees)))\n  )\n    (ok (get amt-out swap-a))\n  )\n)\n\n(define-public (swap-usdh\n    (amt-in uint)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (usdh-pool <curve-pool-trait>) (usdh-fees <curve-fees-trait>)\n  )\n  (let (\n    (edge {a: \"h\", b: (contract-of usdh-pool), c: u0, d: (contract-of token-in), e: (contract-of token-out), f: false})\n    (swap-a (try! (contract-call?\n                  'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.path-apply_staging swap-curve\n                  edge amt-in\n                  token-in token-out\n                  usdh-pool usdh-fees)))\n  )\n    (ok (get amt-out swap-a))\n  )\n)\n\n(define-public (swap-ststx\n    (amt-in uint)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (ststx-pool <ststx-pool-trait>) (curve-fees <curve-fees-trait>)\n    (ststx-proxy <ststx-proxy-trait>)\n  )\n  (let (\n    (edge {a: \"s\", b: (contract-of ststx-pool), c: u0, d: (contract-of token-in), e: (contract-of token-out), f: false})\n    (swap-a (try! (contract-call?\n                  'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.path-apply_staging swap-ststx\n                  edge amt-in\n                  token-in token-out\n                  ststx-pool curve-fees ststx-proxy)))\n  )\n    (ok (get amt-out swap-a))\n  )\n)\n\n(define-public (quote-univ2v2\n    (amount uint)\n    (token-in principal) (token-out principal)\n    (univ2v2-pool <univ2v2-pool-trait>)\n    (swap-fee {num: uint, den: uint})\n  )\n  (let (\n    (pool-data (try! (contract-call? univ2v2-pool get-pool)))\n    (swaps-reversed (and (is-eq token-in (get token1 pool-data)) (is-eq token-out (get token0 pool-data))))\n    (reserves {in: (if swaps-reversed (get reserve1 pool-data) (get reserve0 pool-data)), out: (if swaps-reversed (get reserve0 pool-data) (get reserve1 pool-data))})\n    (amount-adjusted (/ (* amount (get num swap-fee)) (get den swap-fee)))\n    (quote-a (try! (contract-call?\n                   'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-math find-dx\n                   (get out reserves) (get in reserves)\n                   amount-adjusted)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-public (quote-curve\n    (amount uint)\n    (token-in principal) (token-out principal)\n    (curve-pool <curve-pool-trait>)\n    (swap-fee {num: uint, den: uint})\n  )\n  (let (\n    (pool-data (try! (contract-call? curve-pool get-pool)))\n    (swaps-reversed (and (is-eq token-in (get token1 pool-data)) (is-eq token-out (get token0 pool-data))))\n    (reserves {in: (if swaps-reversed (get reserve1 pool-data) (get reserve0 pool-data)), out: (if swaps-reversed (get reserve0 pool-data) (get reserve1 pool-data))})\n    (amount-adjusted (/ (* amount (get num swap-fee)) (get den swap-fee)))\n    (quote-a (try! (contract-call?\n                   'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-math_v1_0_0 find-dx\n                   (get out reserves) (get in reserves)\n                   amount-adjusted u0 (get A pool-data))))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-public (quote-usdh\n    (amount uint)\n    (token-in principal) (token-out principal)\n    (usdh-pool <curve-pool-trait>)\n    (swap-fee {num: uint, den: uint})\n    (usdh-in bool)\n  )\n  (let (\n    (pool-data (try! (contract-call? usdh-pool get-pool)))\n    (swaps-reversed (and (is-eq token-in (get token1 pool-data)) (is-eq token-out (get token0 pool-data))))\n    (reserves {in: (if swaps-reversed (get reserve1 pool-data) (get reserve0 pool-data)), out: (if swaps-reversed (get reserve0 pool-data) (get reserve1 pool-data))})\n    (reserves-lifted {in: (if usdh-in (lift-amount (get in reserves)) (get in reserves)), out: (if usdh-in (get out reserves) (lift-amount (get out reserves)))})\n    (amount-adjusted (/ (* amount (get num swap-fee)) (get den swap-fee)))\n    (amount-lifted (if usdh-in (lift-amount amount-adjusted) amount-adjusted))\n    (quote-a (try! (contract-call? \n                   'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-math_v1_0_0 find-dx\n                   (get out reserves-lifted) (get in reserves-lifted)\n                   amount-lifted u0 (get A pool-data))))\n  )\n    (ok (if usdh-in quote-a (lower-amount quote-a)))\n  )\n)\n\n(define-public (quote-ststx\n    (amount uint)\n    (token-in principal) (token-out principal)\n    (ststx-pool <ststx-pool-trait>) (ststx-proxy <ststx-proxy-trait>)\n    (swap-fee {num: uint, den: uint})\n    (stx-in bool)\n  )\n  (let (\n    (pool-data (try! (contract-call? ststx-pool get-pool)))\n    (pool-ratio (try! (contract-call? ststx-proxy get-ratio)))\n    (swaps-reversed (and (is-eq token-in (get token1 pool-data)) (is-eq token-out (get token0 pool-data))))\n    (reserves {in: (if swaps-reversed (get reserve1 pool-data) (get reserve0 pool-data)), out: (if swaps-reversed (get reserve0 pool-data) (get reserve1 pool-data))})\n    (amount-adjusted (/ (* amount (get num swap-fee)) (get den swap-fee)))\n    (amount-adjusted-ratio (if stx-in (divide-ratio amount-adjusted pool-ratio) (multiply-ratio amount-adjusted pool-ratio)))\n    (quote-a (try! (contract-call?\n                   'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-math_v1_0_0 find-dx\n                   (get out reserves) (get in reserves)\n                   amount-adjusted-ratio u0 (get A pool-data))))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (multiply-ratio (amount uint) (ratio uint))\n  (/ (* amount ratio) NUM_A)\n)\n\n(define-private (divide-ratio (amount uint) (ratio uint))\n (/ (* amount NUM_A) ratio)\n)\n\n(define-private (lift-amount (amount uint))\n  (/ amount NUM_B)\n)\n\n(define-private (lower-amount (amount uint))\n  (* amount NUM_B)\n)",
    "analysis": {
      "summary": "This contract facilitates multi-step token swaps across different liquidity pools on the Stacks blockchain, including Uniswap V2-like pools, Curve-like pools, and a custom STX pool.",
      "explanation": "The contract uses multiple traits to interact with different types of liquidity pools and fee structures. It defines public functions to perform swaps and quote prices across these pools, leveraging a path-based approach for complex swap operations. The contract's core functionality is encapsulated in the `apply` function, which orchestrates swaps across potentially multiple pools according to a specified path. Each swap function (`swap-univ2v2`, `swap-curve`, `swap-usdh`, `swap-ststx`) and quote function (`quote-univ2v2`, `quote-curve`, `quote-usdh`, `quote-ststx`) is designed to handle interactions with a specific type of pool or token, utilizing the contract's ability to calculate and adjust amounts based on pool reserves, fees, and specific pool mechanics (e.g., lifting and lowering amounts for USDH swaps). The contract also includes utility functions for ratio calculations and amount adjustments to accommodate different pool mechanisms and fee structures.\n\n- The `apply` function <L19-44> orchestrates complex swap operations across multiple pools, dynamically calling another contract based on the provided path and swap details. It utilizes the `try!` macro to attempt these operations, which will abort the transaction if any step fails.\n- Swap functions like `swap-univ2v2` <L46-60>, `swap-curve` <L62-76>, `swap-usdh` <L78-92>, and `swap-ststx` <L94-109> each handle swaps for their respective pool types, constructing a swap path and calling the `apply` function with the appropriate parameters.\n- Quote functions like `quote-univ2v2` <L111-138>, `quote-curve` <L140-167>, `quote-usdh` <L169-200>, and `quote-ststx` <L202-232> provide estimated output amounts for given input amounts, pool types, and fee structures, making use of internal logic to adjust for pool-specific mechanics and fees.\n- Utility functions `multiply-ratio` <L234-236>, `divide-ratio` <L238-240>, `lift-amount` <L242-244>, and `lower-amount` <L246-248> are used for mathematical operations specific to the contract's swap and quote logic, such as adjusting amounts for specific pool mechanics or fee calculations.",
      "tags": [
        "DeFi",
        "swap",
        "liquidity-pool",
        "multi-pool",
        "token-swap",
        "Clarity"
      ]
    }
  },
  {
    "rank": 36,
    "contract": "SP1AY6K3PQV5MRT6R4S671NWW2FRVPKM0BR162CT6.leo-token",
    "calls": 975,
    "source": ";; ---------------------------------------------------------\n;; SIP-10 Fungible Token Contract\n;; ---------------------------------------------------------\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n(define-fungible-token leo)\n(define-constant contract-owner tx-sender)\n\n;; ---------------------------------------------------------\n;; Constants/Variables\n;; ---------------------------------------------------------\n(define-data-var token-uri (optional (string-utf8 256)) none)\n\n;; ---------------------------------------------------------\n;; Errors\n;; ---------------------------------------------------------\n(define-constant ERR_UNAUTHORIZED (err u100))\n\n;; ---------------------------------------------------------\n;; SIP-10 Functions\n;; ---------------------------------------------------------\n(define-public (transfer\n  (amount uint)\n  (sender principal)\n  (recipient principal)\n  (memo (optional (buff 34)))\n)\n  (begin\n    ;; #[filter(amount, recipient)]\n    (asserts! (is-eq tx-sender sender) ERR_UNAUTHORIZED)\n    (try! (ft-transfer? leo amount sender recipient))\n    (match memo to-print (print to-print) 0x)\n    (ok true)\n  )\n)\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance leo owner))\n)\n\n(define-read-only (get-name)\n  (ok \"Leo\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"LEO\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply leo))\n)\n\n(define-read-only (get-token-uri)\n    (ok (var-get token-uri)\n    )\n)\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  ;; #[filter(value)]\n  (if (is-eq tx-sender contract-owner)\n    (ok (var-set token-uri (some value)))\n    (err ERR_UNAUTHORIZED)\n  )\n)\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n  (try! (ft-mint? leo u10000000000000000 contract-owner)) \n)",
    "analysis": {
      "summary": "This contract implements a fungible token named 'Leo' adhering to the SIP-010 standard for Stacks blockchain.",
      "explanation": "This Clarity smart contract defines a fungible token using the SIP-010 standard, which is a specification for fungible tokens on the Stacks blockchain. The contract includes token basics such as transfer, balance checks, and metadata, along with minting functionality and a mechanism for updating the token's URI.\n\n- The contract starts by implementing the SIP-010 trait, ensuring it meets the standard's requirements for fungible tokens <L1>.\n- `define-fungible-token` creates the 'Leo' token <L3>.\n- The contract owner is set to the transaction sender at deployment <L4>.\n- A variable for the token's URI is declared, which can be optionally set <L7>.\n- An error constant for unauthorized actions is defined <L11>.\n\nThe `transfer` function <L15-24> allows token holders to transfer tokens to another address, requiring the sender to be the transaction initiator. It optionally logs a memo with the transaction.\n\n`get-balance`, `get-name`, `get-symbol`, `get-decimals`, `get-total-supply`, and `get-token-uri` <L26-50> are read-only functions that return the token's balance for a given address, name, symbol, decimals, total supply, and URI, respectively.\n\n`set-token-uri` <L52-57> allows the contract owner to update the token's URI, enforcing ownership through a check against `tx-sender`.\n\n`send-many` <L59-68> is a utility function enabling batch transfers by iterating over a list of recipients and amounts, calling `send-token` for each.\n\n`send-token` and `send-token-with-memo` <L70-80> are helper functions abstracting the transfer logic, including memo handling.\n\nFinally, the contract mints an initial supply of tokens to the contract owner <L83>.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "Clarity",
        "token",
        "DeFi"
      ]
    }
  },
  {
    "rank": 37,
    "contract": "SP3T54N6G4HN7GPBCYMSDKP4W00C45X19GQ4VT13Y.skullcoin-competitive-g1-base",
    "calls": 967,
    "source": ";; Skullcoin | Competitive | Game #1 | v.1.0.0\n;; skullco.in\n\n;; Traits\n(use-trait ft-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Constants and Errors\n(define-constant CONTRACT-OWNER tx-sender)\n(define-constant BURN-WALLET 'SP5EDWN88FN8Q6A1MQ0N7SKKAG0VZ0ZQ9MFZ6RS8)\n(define-constant ERR-NOT-AUTHORIZED (err u100))\n(define-constant ERR-SALE-NOT-ACTIVE (err u101))\n(define-constant ERR-NOT-OWNER (err u102))\n(define-constant ERR-NOT-TREASURE (err u103))\n(define-constant ERR-NOT-CHEST (err u104))\n(define-constant ERR-NOT-TOKENS (err u105))\n(define-constant ERR-NOT-STX (err u106))\n(define-constant REACHED-BLOCK-PICK-LIMIT (err u107))\n(define-constant ERR-NO-WL-REMAINING (err u108))\n\n;; Variables\n(define-data-var wl-sale-active bool false)\n(define-data-var sale-active bool false)\n(define-data-var last-block uint u0)\n(define-data-var byte-id uint u0)\n(define-data-var picked-id uint u0)\n(define-data-var last-vrf (buff 64) 0x00)\n\n;; Maps\n(define-map wl-count principal uint)\n(define-map treasure-phase-1 { id: uint} {claim: bool})\n(define-map treasure-phase-2 { id: uint} {claim: bool})\n(define-map treasure-phase-3 { id: uint} {claim: bool})\n(define-map chest-phase-1 { id: uint} {claim: bool})\n(define-map chest-phase-2 { id: uint} {claim: bool})\n(define-map chest-phase-3 { id: uint} {claim: bool})\n(define-map tokens-phase-1 { id: uint} {claim: bool})\n(define-map tokens-phase-2 { id: uint} {claim: bool})\n(define-map tokens-phase-3 { id: uint} {claim: bool})\n(define-map stx-phase-1 { id: uint} {claim: bool})\n(define-map stx-phase-2 { id: uint} {claim: bool})\n(define-map stx-phase-3 { id: uint} {claim: bool})\n\n;; Get whitelist balance\n(define-read-only (get-wl-balance (account principal))\n  (default-to u0\n    (map-get? wl-count account)))\n\n;; Check whitelist sales active\n(define-read-only (wl-enabled)\n  (ok (var-get wl-sale-active)))\n\n;; Check public sales active\n(define-read-only (public-enabled)\n  (ok (var-get sale-active)))\n\n;; Set whitelist sale flag (only contract owner)\n(define-public (flip-wl-sale)\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (var-set wl-sale-active (not (var-get wl-sale-active)))\n    (ok (var-get wl-sale-active))))\n\n;; Set public sale flag (only contract owner)\n(define-public (flip-sale)\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (var-set sale-active (not (var-get sale-active)))\n    (ok (var-get sale-active))))\n\n;; Deposit SIP-010 tokens in contract (only contract owner)\n(define-public (deposit-ft (asset <ft-trait>) (amount uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (try! (contract-call? asset transfer amount tx-sender (as-contract tx-sender) none))\n  (ok true)))\n\n;; Withdrawal SIP-010 tokens from contract (only contract owner)\n(define-public (withdraw-ft (asset <ft-trait>) (amount uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (try! (as-contract (contract-call? asset transfer amount tx-sender CONTRACT-OWNER none)))\n  (ok true)))\n\n;; Deposit STX in contract (only contract owner)\n(define-public (deposit-stx (amount uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (try! (stx-transfer? amount tx-sender (as-contract tx-sender)))\n  (ok true)))\n\n;; Withdrawal STX from contract (only contract owner)\n(define-public (withdraw-stx (amount uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (try! (as-contract (stx-transfer? amount tx-sender CONTRACT-OWNER)))\n  (ok true)))\n\n;; Set whitelist wallets (only contract owner)\n(define-public (set-wl-wallets (wallet principal) (amount uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set wl-count wallet amount)\n  (ok true)))\n\n;; Set treasures ids / Phase 1 (only contract owner)\n(define-public (set-treasure-phase-1 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set treasure-phase-1 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set treasures ids / Phase 2 (only contract owner)\n(define-public (set-treasure-phase-2 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set treasure-phase-2 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set treasures ids / Phase 3 (only contract owner)\n(define-public (set-treasure-phase-3 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set treasure-phase-3 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set chests ids / Phase 1 (only contract owner)\n(define-public (set-chest-phase-1 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set chest-phase-1 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set chests ids / Phase 2 (only contract owner)\n(define-public (set-chest-phase-2 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set chest-phase-2 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set chests ids / Phase 3 (only contract owner)\n(define-public (set-chest-phase-3 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set chest-phase-3 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set tokens ids / Phase 1 (only contract owner)\n(define-public (set-tokens-phase-1 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set tokens-phase-1 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set tokens ids / Phase 2 (only contract owner)\n(define-public (set-tokens-phase-2 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set tokens-phase-2 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set tokens ids / Phase 3 (only contract owner)\n(define-public (set-tokens-phase-3 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set tokens-phase-3 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set stx reward ids / Phase 1 (only contract owner)\n(define-public (set-stx-phase-1 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set stx-phase-1 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set stx reward ids / Phase 2 (only contract owner)\n(define-public (set-stx-phase-2 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set stx-phase-2 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set stx reward ids / Phase 3 (only contract owner)\n(define-public (set-stx-phase-3 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set stx-phase-3 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Claim 1 NFT\n(define-public (claim-one)\n  (begin\n    (try! (claim))\n    (ok true)))\n\n;; Claim 5 NFT\n(define-public (claim-five)\n  (begin\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (ok true)))\n\n;; Claim 10 NFT\n(define-public (claim-ten)\n  (begin\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (ok true)))\n\n;; Claim treasure / Phase 1\n(define-public (claim-treasure-phase-1 (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase1 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (get claim (unwrap-panic (map-get? treasure-phase-1 { id: id }))) true) ERR-NOT-TREASURE)\n    (try! (send-stx-to-winner amount tx-sender))\n    (map-set treasure-phase-1 { id: id } { claim: false})\n    (print \"Congrats\")\n  (ok true)))\n\n;; Claim treasure / Phase 2\n(define-public (claim-treasure-phase-2 (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase2 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (get claim (unwrap-panic (map-get? treasure-phase-2 { id: id }))) true) ERR-NOT-TREASURE)\n    (try! (send-stx-to-winner amount tx-sender))\n    (map-set treasure-phase-2 { id: id } { claim: false})\n    (print \"Congrats\")\n  (ok true)))\n\n;; Claim treasure / Phase 3\n(define-public (claim-treasure-phase-3 (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase3 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (get claim (unwrap-panic (map-get? treasure-phase-3 { id: id }))) true) ERR-NOT-TREASURE)\n    (try! (send-stx-to-winner amount tx-sender))\n    (map-set treasure-phase-3 { id: id } { claim: false})\n    (print \"Congrats\")\n  (ok true)))\n\n;; Claim chest / Phase 1\n(define-public (claim-chest-phase-1 (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase1 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (try! (pick-id))\n        (if (is-eq (mod (var-get picked-id) u2) u0)\n          (begin\n            (asserts! (is-eq (get claim (unwrap-panic (map-get? chest-phase-1 { id: id }))) true) ERR-NOT-CHEST)\n            (try! (send-stx-to-winner amount tx-sender))\n            (map-set chest-phase-1 { id: id } { claim: false})\n            (print \"Congrats\")\n            (ok (var-get picked-id)))\n          (begin\n            (map-set chest-phase-1 { id: id } { claim: false})\n            (print \"Not this time\")\n            (ok (var-get picked-id))))))\n\n;; Claim chest / Phase 2\n(define-public (claim-chest-phase-2 (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase2 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (try! (pick-id))\n        (if (is-eq (mod (var-get picked-id) u2) u0)\n          (begin\n            (asserts! (is-eq (get claim (unwrap-panic (map-get? chest-phase-2 { id: id }))) true) ERR-NOT-CHEST)\n            (try! (send-stx-to-winner amount tx-sender))\n            (map-set chest-phase-2 { id: id } { claim: false})\n            (print \"Congrats\")\n            (ok (var-get picked-id)))\n          (begin\n            (map-set chest-phase-2 { id: id } { claim: false})\n            (print \"Not this time\")\n            (ok (var-get picked-id))))))\n\n;; Claim chest / Phase 3\n(define-public (claim-chest-phase-3 (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase3 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (try! (pick-id))\n        (if (is-eq (mod (var-get picked-id) u2) u0)\n          (begin\n            (asserts! (is-eq (get claim (unwrap-panic (map-get? chest-phase-3 { id: id }))) true) ERR-NOT-CHEST)\n            (try! (send-stx-to-winner amount tx-sender))\n            (map-set chest-phase-3 { id: id } { claim: false})\n            (print \"Congrats\")\n            (ok (var-get picked-id)))\n          (begin\n            (map-set chest-phase-3 { id: id } { claim: false})\n            (print \"Not this time\")\n            (ok (var-get picked-id))))))\n\n;; Claim STX / Phase 1\n(define-public (claim-stx-phase-1 (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase1 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (get claim (unwrap-panic (map-get? stx-phase-1 { id: id }))) true) ERR-NOT-STX)\n    (try! (send-stx-to-winner amount tx-sender))\n    (map-set stx-phase-1 { id: id } { claim: false})\n    (print \"Congrats\")\n  (ok true)))\n\n;; Claim STX / Phase 2\n(define-public (claim-stx-phase-2 (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase2 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (get claim (unwrap-panic (map-get? stx-phase-2 { id: id }))) true) ERR-NOT-STX)\n    (try! (send-stx-to-winner amount tx-sender))\n    (map-set stx-phase-2 { id: id } { claim: false})\n    (print \"Congrats\")\n  (ok true)))\n\n;; Claim STX / Phase 3\n(define-public (claim-stx-phase-3 (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase3 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (get claim (unwrap-panic (map-get? stx-phase-3 { id: id }))) true) ERR-NOT-STX)\n    (try! (send-stx-to-winner amount tx-sender))\n    (map-set stx-phase-3 { id: id } { claim: false})\n    (print \"Congrats\")\n  (ok true)))\n\n;; Claim FT / Phase 1\n(define-public (claim-tokens-phase-1 (asset <ft-trait>) (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase1 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (get claim (unwrap-panic (map-get? tokens-phase-1 { id: id }))) true) ERR-NOT-TOKENS)\n    (try! (send-ft-to-winner asset amount tx-sender))\n    (map-set tokens-phase-1 { id: id } { claim: false})\n    (print \"Congrats\")\n  (ok true)))\n\n;; Claim FT / Phase 2\n(define-public (claim-tokens-phase-2 (asset <ft-trait>) (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase2 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (get claim (unwrap-panic (map-get? tokens-phase-2 { id: id }))) true) ERR-NOT-TOKENS)\n    (try! (send-ft-to-winner asset amount tx-sender))\n    (map-set tokens-phase-2 { id: id } { claim: false})\n    (print \"Congrats\")\n  (ok true)))\n\n;; Claim FT / Phase 3\n(define-public (claim-tokens-phase-3 (asset <ft-trait>) (id uint) (amount uint))\n  (begin\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase3 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (get claim (unwrap-panic (map-get? tokens-phase-3 { id: id }))) true) ERR-NOT-TOKENS)\n    (try! (send-ft-to-winner asset amount tx-sender))\n    (map-set tokens-phase-3 { id: id } { claim: false})\n    (print \"Congrats\")\n  (ok true)))\n\n;; Burn 5 NFTs / Phase 1\n(define-public (burn-phase-1 (id1 uint) (id2 uint) (id3 uint) (id4 uint) (id5 uint))\n  (begin\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase1 get-owner id1) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase1 get-owner id2) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase1 get-owner id3) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase1 get-owner id4) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase1 get-owner id5) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (try! (contract-call? .skullcoin-competitive-g1-phase1 transfer id1 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase1 transfer id2 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase1 transfer id3 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase1 transfer id4 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase1 transfer id5 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase2 mint tx-sender))\n      (try! (contract-call? .skullcoin-competitive-g1-phase2 mint tx-sender))\n      (ok true)))\n\n;; Burn 5 NFTs / Phase 2\n(define-public (burn-phase-2 (id1 uint) (id2 uint) (id3 uint) (id4 uint) (id5 uint))\n  (begin\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase2 get-owner id1) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase2 get-owner id2) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase2 get-owner id3) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase2 get-owner id4) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase2 get-owner id5) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (try! (contract-call? .skullcoin-competitive-g1-phase2 transfer id1 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase2 transfer id2 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase2 transfer id3 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase2 transfer id4 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase2 transfer id5 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase3 mint tx-sender))\n      (try! (contract-call? .skullcoin-competitive-g1-phase3 mint tx-sender))\n      (ok true)))\n\n;; Burn 5 NFTs / Phase 3\n(define-public (burn-phase-3 (id1 uint) (id2 uint) (id3 uint) (id4 uint) (id5 uint))\n  (begin\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase3 get-owner id1) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase3 get-owner id2) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase3 get-owner id3) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase3 get-owner id4) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-competitive-g1-phase3 get-owner id5) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (try! (contract-call? .skullcoin-competitive-g1-phase3 transfer id1 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase3 transfer id2 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase3 transfer id3 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase3 transfer id4 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase3 transfer id5 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-competitive-g1-phase4 mint tx-sender))\n      (ok true)))\n\n;; Internal - Claim NFT\n(define-private (claim)\n  (if (var-get wl-sale-active)\n    (wl-mint tx-sender)\n    (mint tx-sender)))\n\n;; Internal - Mint NFT via whitelist\n(define-private (wl-mint (new-owner principal))\n  (let ((wl-balance (get-wl-balance new-owner)))\n    (asserts! (> wl-balance u0) ERR-NO-WL-REMAINING)\n    (map-set wl-count new-owner (- wl-balance u1))\n    (try! (contract-call? .skullcoin-competitive-g1-phase1 mint new-owner))\n    (ok true)))\n\n;; Internal - Mint NFT via public\n(define-private (mint (new-owner principal))\n  (begin\n    (asserts! (var-get sale-active) ERR-SALE-NOT-ACTIVE)\n    (try! (contract-call? .skullcoin-competitive-g1-phase1 mint new-owner))\n    (ok true)))\n\n;; Internal - Send STX to winner player in claim function for treasure/chest/stx NFTs\n(define-private (send-stx-to-winner (amount uint) (player principal))\n  (begin\n    (try! (as-contract (stx-transfer? amount tx-sender player)))\n  (ok true)))\n\n;; Internal - Send SIP-010 tokens to winner player in claim function for tokens NFTs\n(define-private (send-ft-to-winner (asset <ft-trait>) (amount uint) (player principal))\n  (begin\n    (try! (as-contract (contract-call? asset transfer amount tx-sender player none)))\n  (ok true)))\n\n;; Internal - Pick id with RNG based on VRF\n(define-private (pick-id)\n  (let ((vrf (var-get last-vrf))\n        (b-idx (var-get byte-id)))\n    (if (is-eq (var-get last-block) block-height)\n      (begin\n        (asserts! (< b-idx u63) REACHED-BLOCK-PICK-LIMIT)\n        (var-set picked-id (buff-to-uint-be (unwrap-panic (element-at vrf b-idx))))\n        (var-set byte-id (+ b-idx u1))\n        (ok (var-get picked-id)))\n      (begin\n        (set-vrf)\n        (var-set last-block block-height)\n        (var-set picked-id (buff-to-uint-be (unwrap-panic (element-at vrf b-idx))))\n        (var-set byte-id u1)\n        (ok (var-get picked-id))))))\n\n;; Internal - Set VRF from previous block\n(define-private (set-vrf)    \n    (var-set last-vrf (sha512 (unwrap-panic (get-block-info? vrf-seed (- block-height u1))))))\n\n;; Register this contract as allowed to mint\n(as-contract (contract-call? .skullcoin-competitive-g1-phase1 set-mint-address))\n(as-contract (contract-call? .skullcoin-competitive-g1-phase2 set-mint-address))\n(as-contract (contract-call? .skullcoin-competitive-g1-phase3 set-mint-address))\n(as-contract (contract-call? .skullcoin-competitive-g1-phase4 set-mint-address))",
    "analysis": {
      "summary": "This contract manages a competitive game with phases, allowing players to claim treasures, chests, STX, and fungible tokens (FTs), mint new NFTs, and burn existing ones to progress through game phases.",
      "explanation": "The contract is designed for a game with multiple phases, each allowing players to claim various rewards and progress by burning NFTs. It uses the SIP-010 standard for fungible tokens and includes mechanisms for minting NFTs, claiming rewards, and managing sales. Key components include:\n\n- **Constants and Errors**: Defines the contract owner, burn wallet, and various error codes.\n- **Variables**: Tracks sale states, block numbers, and VRF-related data for randomness.\n- **Maps**: Stores data about whitelist counts, treasures, chests, tokens, and STX claims across different game phases.\n- **Whitelist and Sales Management**: Functions to toggle whitelist and public sales, and manage whitelist counts.\n- **Asset Management**: Allows the contract owner to deposit/withdraw STX and SIP-010 tokens.\n- **Game Progression**: Functions to set treasures, chests, tokens, and STX rewards for each phase, and mechanisms for players to claim these rewards. Includes a unique method to determine outcomes using VRF-based randomness.\n- **NFT Management**: Includes burning NFTs to progress through game phases and minting new NFTs as rewards.\n\nThe contract leverages Clarity's features like `map-get?`, `asserts!`, and `try!` for error handling and state management, and `contract-call?` for interacting with other contracts. The use of VRF for randomness in claiming chests introduces an element of chance in the game.",
      "tags": [
        "game",
        "NFT",
        "fungible-token",
        "DeFi",
        "protocol",
        "VRF",
        "competitive"
      ]
    }
  },
  {
    "rank": 38,
    "contract": "SP2N959SER36FZ5QT1CX9BR63W3E8X35WQCMBYYWC.leo-cats",
    "calls": 931,
    "source": ";; leo-cats\n;; contractType: public custom\n\n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-non-fungible-token leo-cats uint)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant COMM u1000)\n(define-constant COMM-ADDR 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S)\n\n(define-constant ERR-NO-MORE-NFTS u100)\n(define-constant ERR-NOT-ENOUGH-PASSES u101)\n(define-constant ERR-PUBLIC-SALE-DISABLED u102)\n(define-constant ERR-CONTRACT-INITIALIZED u103)\n(define-constant ERR-NOT-AUTHORIZED u104)\n(define-constant ERR-INVALID-USER u105)\n(define-constant ERR-LISTING u106)\n(define-constant ERR-WRONG-COMMISSION u107)\n(define-constant ERR-NOT-FOUND u108)\n(define-constant ERR-PAUSED u109)\n(define-constant ERR-MINT-LIMIT u110)\n(define-constant ERR-METADATA-FROZEN u111)\n(define-constant ERR-AIRDROP-CALLED u112)\n(define-constant ERR-NO-MORE-MINTS u113)\n(define-constant ERR-INVALID-PERCENTAGE u114)\n\n;; Internal variables\n(define-data-var mint-limit uint u10000)\n(define-data-var last-id uint u1)\n(define-data-var total-price uint u0)\n(define-data-var artist-address principal 'SP2N959SER36FZ5QT1CX9BR63W3E8X35WQCMBYYWC)\n(define-data-var ipfs-root (string-ascii 80) \"ipfs://ipfs/QmaAUry6B3QtuRSt4xSXy5eRHdhemmF8Gr3WSsiQkzHssX/json/\")\n(define-data-var mint-paused bool true)\n(define-data-var premint-enabled bool false)\n(define-data-var sale-enabled bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var airdrop-called bool false)\n(define-data-var mint-cap uint u0)\n\n(define-map mints-per-user principal uint)\n(define-map mint-passes principal uint)\n\n(define-public (claim) \n  (mint (list true)))\n\n(define-public (claim-two) (mint (list true true)))\n\n(define-public (claim-three) (mint (list true true true)))\n\n(define-public (claim-four) (mint (list true true true true)))\n\n(define-public (claim-five) (mint (list true true true true true)))\n\n(define-public (claim-six) (mint (list true true true true true true)))\n\n(define-public (claim-seven) (mint (list true true true true true true true)))\n\n(define-public (claim-eight) (mint (list true true true true true true true true)))\n\n(define-public (claim-nine) (mint (list true true true true true true true true true)))\n\n(define-public (claim-ten) (mint (list true true true true true true true true true true)))\n\n;; Mintpass Minting\n(define-private (mint (orders (list 25 bool)))\n  (let \n    (\n      (passes (get-passes tx-sender))\n    )\n    (if (var-get premint-enabled)\n      (begin\n        (asserts! (>= passes (len orders)) (err ERR-NOT-ENOUGH-PASSES))\n        (map-set mint-passes tx-sender (- passes (len orders)))\n        (mint-many orders)\n      )\n      (begin\n        (asserts! (var-get sale-enabled) (err ERR-PUBLIC-SALE-DISABLED))\n        (mint-many orders)\n      )\n    )))\n\n(define-private (mint-many (orders (list 25 bool )))  \n  (let \n    (\n      (last-nft-id (var-get last-id))\n      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))\n      (art-addr (var-get artist-address))\n      (id-reached (fold mint-many-iter orders last-nft-id))\n      (price (* (var-get total-price) (- id-reached last-nft-id)))\n      (total-commission (/ (* price COMM) u10000))\n      (current-balance (get-balance tx-sender))\n      (total-artist (- price total-commission))\n      (capped (> (var-get mint-cap) u0))\n      (user-mints (get-mints tx-sender))\n    )\n    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))\n    (asserts! (or (not capped) (is-eq tx-sender DEPLOYER) (is-eq tx-sender art-addr) (>= (var-get mint-cap) (+ (len orders) user-mints))) (err ERR-NO-MORE-MINTS))\n    (map-set mints-per-user tx-sender (+ (len orders) user-mints))\n    (if (or (is-eq tx-sender art-addr) (is-eq tx-sender DEPLOYER) (is-eq (var-get total-price) u0000000))\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n      )\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n        (try! (stx-transfer? total-artist tx-sender (var-get artist-address)))\n        (try! (stx-transfer? total-commission tx-sender COMM-ADDR))\n      )    \n    )\n    (ok id-reached)))\n\n(define-private (mint-many-iter (ignore bool) (next-id uint))\n  (if (<= next-id (var-get mint-limit))\n    (begin\n      (unwrap! (nft-mint? leo-cats next-id tx-sender) next-id)\n      (+ next-id u1)    \n    )\n    next-id))\n\n(define-public (set-artist-address (address principal))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set artist-address address))))\n\n(define-public (set-price (price uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set total-price price))))\n\n(define-public (toggle-pause)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set mint-paused (not (var-get mint-paused))))))\n\n(define-public (set-mint-limit (limit uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))\n    (ok (var-set mint-limit limit))))\n\n(define-public (burn (token-id uint))\n  (begin \n    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))\n    (nft-burn? leo-cats token-id tx-sender)))\n\n(define-private (is-owner (token-id uint) (user principal))\n    (is-eq user (unwrap! (nft-get-owner? leo-cats token-id) false)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))\n    (print { notification: \"token-metadata-update\", payload: { token-class: \"nft\", contract-id: (as-contract tx-sender) }})\n    (var-set ipfs-root new-base-uri)\n    (ok true)))\n\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Non-custodial SIP-009 transfer function\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))\n    (trnsfr id sender recipient)))\n\n;; read-only functions\n(define-read-only (get-owner (token-id uint))\n  (ok (nft-get-owner? leo-cats token-id)))\n\n(define-read-only (get-last-token-id)\n  (ok (- (var-get last-id) u1)))\n\n(define-read-only (get-token-uri (token-id uint))\n  (ok (some (concat (concat (var-get ipfs-root) \"{id}\") \".json\"))))\n\n(define-read-only (get-paused)\n  (ok (var-get mint-paused)))\n\n(define-read-only (get-price)\n  (ok (var-get total-price)))\n\n(define-read-only (get-artist-address)\n  (ok (var-get artist-address)))\n\n(define-read-only (get-mints (caller principal))\n  (default-to u0 (map-get? mints-per-user caller)))\n\n(define-read-only (get-mint-limit)\n  (ok (var-get mint-limit)))\n\n(define-data-var license-uri (string-ascii 90) \"https://images.gamma.io/ipfs/bafkreibjxj4akp5s63vvyby66yjjzzjikrpyu7h2yeq74coib6lgk4ilii\")\n(define-data-var license-name (string-ascii 40) \"COMMERCIAL\")\n\n(define-read-only (get-license-uri)\n  (ok (var-get license-uri)))\n  \n(define-read-only (get-license-name)\n  (ok (var-get license-name)))\n  \n(define-public (set-license-uri (uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-uri uri))))\n    \n(define-public (set-license-name (name (string-ascii 40)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-name name))))\n\n;; Non-custodial marketplace extras\n(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)\n\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal, royalty: uint})\n\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? leo-cats id sender recipient)\n    success\n      (let\n        ((sender-balance (get-balance sender))\n        (recipient-balance (get-balance recipient)))\n          (map-set token-count\n            sender\n            (- sender-balance u1))\n          (map-set token-count\n            recipient\n            (+ recipient-balance u1))\n          (ok success))\n    error (err error)))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? leo-cats id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? leo-cats id) (err ERR-NOT-FOUND)))\n      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))\n      (price (get price listing))\n      (royalty (get royalty listing)))\n    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (pay-royalty price royalty))\n    (try! (contract-call? comm-trait pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))\n    \n(define-data-var royalty-percent uint u0)\n\n(define-read-only (get-royalty-percent)\n  (ok (var-get royalty-percent)))\n\n(define-public (set-royalty-percent (royalty uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))\n    (ok (var-set royalty-percent royalty))))\n\n(define-private (pay-royalty (price uint) (royalty uint))\n  (let (\n    (royalty-amount (/ (* price royalty) u10000))\n  )\n  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))))\n    (try! (stx-transfer? royalty-amount tx-sender (var-get artist-address)))\n    (print false)\n  )\n  (ok true)))\n\n;; Extra functionality required for mintpass\n(define-public (toggle-sale-state)\n  (let \n    (\n      ;; (premint (not (var-get premint-enabled)))\n      (sale (not (var-get sale-enabled)))\n    )\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set premint-enabled false)\n    (var-set sale-enabled sale)\n    (print { sale: sale })\n    (ok true)))\n\n(define-public (clear-mintpasses (addresses (list 2000 principal)))\n  (let \n    (\n      (index-reached (fold clear-mintpasses-iter addresses u0))\n    )\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (print {\n      total-mintpasses-cleared: index-reached,\n    })\n    (ok true)))\n\n(define-public (add-mintpasses (addresses (list 2000 principal)))\n  (let \n    (\n      (index-reached (fold add-mintpasses-iter addresses u0))\n    )\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (print {\n      total-mintpasses-added: index-reached,\n    })\n    (ok true)))\n\n(define-private (clear-mintpasses-iter (address principal) (next-index uint))\n  (begin \n    (map-delete mint-passes address)    \n    (+ next-index u1)))\n\n(define-private (add-mintpasses-iter (address principal) (next-index uint))\n  (let \n    (\n      (mintpass-count (get-passes address))\n    ) \n    (map-set mint-passes address (+ mintpass-count u1))\n    (+ next-index u1)))\n\n(define-public (enable-premint)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set premint-enabled true))))\n\n(define-public (disable-premint)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set premint-enabled false))))\n\n(define-read-only (get-passes (caller principal))\n  (default-to u0 (map-get? mint-passes caller)))\n\n(define-read-only (get-premint-enabled)\n  (ok (var-get premint-enabled)))\n\n(define-read-only (get-sale-enabled)\n  (ok (var-get sale-enabled)))  \n",
    "analysis": {
      "summary": "This contract implements a non-fungible token (NFT) collection named leo-cats with minting, burning, and marketplace functionalities, adhering to the SIP-009 standard for NFTs on the Stacks blockchain.",
      "explanation": "The contract starts by implementing the 'nft-trait' from a specified address, ensuring compatibility with the Stacks NFT standard. It defines the leo-cats NFT using a unique identifier (uint) for each token. Constants include the deployer's address, commission rate, and commission address, along with various error codes for handling exceptions. The contract sets up internal variables for managing mint limits, artist addresses, IPFS metadata root, and sale states. It includes functions for minting (with support for batch minting up to 25 NFTs at once), setting various parameters (like artist address, mint price, and mint limit), and toggling the sale state. Minting can be paused, and there's support for preminting phases. The contract also allows for burning NFTs, updating metadata, and managing a non-custodial marketplace with listing, unlisting, and buying functionalities. It includes read-only functions for querying contract state and NFT ownership details. Additionally, it supports setting and querying license information for the NFT collection.",
      "tags": [
        "NFT",
        "marketplace",
        "SIP-009",
        "minting",
        "burning",
        "metadata-management",
        "licensing"
      ]
    }
  },
  {
    "rank": 39,
    "contract": "SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-peg-out-endpoint-v2-04",
    "calls": 875,
    "source": ";; SPDX-License-Identifier: BUSL-1.1\n\n(use-trait ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n\n(define-constant err-unauthorised (err u1000))\n(define-constant err-paused (err u1001))\n(define-constant err-peg-in-address-not-found (err u1002))\n(define-constant err-invalid-amount (err u1003))\n(define-constant err-token-mismatch (err u1004))\n(define-constant err-invalid-tx (err u1005))\n(define-constant err-already-sent (err u1006))\n(define-constant err-address-mismatch (err u1007))\n(define-constant err-request-already-revoked (err u1008))\n(define-constant err-request-already-finalized (err u1009))\n(define-constant err-revoke-grace-period (err u1010))\n(define-constant err-request-already-claimed (err u1011))\n(define-constant err-invalid-input (err u1012))\n(define-constant err-tx-mined-before-request (err u1013))\n(define-constant err-commit-tx-mismatch (err u1014))\n(define-constant err-invalid-burn-height (err u1003))\n(define-constant err-tx-mined-before-start (err u1015))\n\n(define-constant MAX_UINT u340282366920938463463374607431768211455)\n(define-constant ONE_8 u100000000)\n\n(define-constant burn-height-start burn-block-height)\n\n(define-data-var paused bool true)\n(define-data-var fee-to-address principal tx-sender)\n\n;; read-only functions\n\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao) (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao is-extension contract-caller)) err-unauthorised)))\n\n(define-read-only (is-paused)\n\t(var-get paused))\n\n(define-read-only (get-fee-to-address)\n  (var-get fee-to-address))\n\n(define-read-only (get-pair-details (pair { token: principal, chain-id: uint }))\n  (match (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-pair-details-or-fail pair)\n    ok-value (some ok-value)\n    err-value none))\n\n(define-read-only (get-pair-details-many (pairs (list 200 { token: principal, chain-id: uint })))\n  (map get-pair-details pairs))\n\n(define-read-only (get-request (request-id uint))\n  (match (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-request-or-fail request-id)\n    ok-value (some ok-value)\n    err-value none))\n\n(define-read-only (get-request-many (request-ids (list 200 uint)))\n  (map get-request request-ids))\n\n(define-read-only (get-request-revoke-grace-period)\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-request-revoke-grace-period))\n\n(define-read-only (get-request-claim-grace-period)\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-request-claim-grace-period))\n\n(define-read-only (is-peg-in-address-approved (address (buff 128)))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 is-peg-in-address-approved address))\n\n(define-read-only (get-pair-details-or-fail (pair { token: principal, chain-id: uint }))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-pair-details-or-fail pair))\n\n(define-read-only (get-tick-to-pair-or-fail (tick (string-utf8 256)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-tick-to-pair-or-fail tick))\n\n(define-read-only (get-peg-in-sent-or-default (bitcoin-tx (buff 32768)) (output uint) (offset uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-peg-in-sent-or-default bitcoin-tx output offset))\n\n(define-read-only (get-request-or-fail (request-id uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-request-or-fail request-id))\n\n(define-read-only (validate-peg-out (amount uint) (pair { token: principal, chain-id: uint }))\n  (let (\n      (token-details (try! (get-pair-details-or-fail pair)))\n      (fee (mul-down amount (get peg-out-fee token-details))))\n\t\t(asserts! (> amount fee) err-invalid-amount)\n    (asserts! (not (get peg-out-paused token-details)) err-paused)    \n    (ok { token-details: token-details, fee: fee })))\n\n(define-read-only (is-fulfill-address-approved (address (buff 128)))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 is-fulfill-address-approved address))\n\n;; governance functions\n\n(define-public (pause (new-paused bool))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set paused new-paused))))\n\n(define-public (set-fee-to-address (new-fee-to-address principal))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set fee-to-address new-fee-to-address))))\n\n(define-public (transfer-all-to (new-owner principal) (token-trait <ft-trait>))\n  (begin \n    (try! (is-dao-or-extension))\n    (as-contract (contract-call? token-trait transfer-fixed (unwrap-panic (contract-call? token-trait get-balance-fixed tx-sender)) tx-sender new-owner none))))\n\n(define-public (transfer-all-to-many (new-owner principal) (token-traits (list 10 <ft-trait>)))\n  (ok (map transfer-all-to (list new-owner new-owner new-owner new-owner new-owner new-owner new-owner new-owner new-owner new-owner) token-traits)))\n\n;; public functions\n\n;; request peg-out of `tick` of `amount` (net of fee) to `peg-out-address`\n;; request escrows the relevant pegged-in token and gas-fee token to the contract until the request is either finalized or revoked.\n;;\n;; token-trait => the trait of pegged-in token\n(define-public (request-peg-out (amount uint) (peg-out-address (buff 128)) (token-trait <ft-trait>) (the-chain-id uint))\n  (let (\n      (token (contract-of token-trait))\n\t\t\t(validation-data (try! (validate-peg-out amount { token: token, chain-id: the-chain-id })))\n      (token-details (get token-details validation-data))\n      (fee (get fee validation-data))\n      (amount-net (- amount fee))\n      (gas-fee (get peg-out-gas-fee token-details))\n      (request-details { requested-by: tx-sender, peg-out-address: peg-out-address, tick: (get tick token-details), token: token, amount-net: amount-net, fee: fee, gas-fee: gas-fee, claimed: u0, claimed-by: tx-sender, fulfilled-by: 0x, revoked: false, finalized: false, requested-at: tenure-height, requested-at-burn-height: burn-block-height })\n      (request-id (as-contract (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-request u0 request-details)))))\n    (try! (contract-call? token-trait transfer-fixed amount tx-sender (as-contract tx-sender) none))\n    (and (> gas-fee u0) (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc transfer-fixed gas-fee tx-sender (as-contract tx-sender) none)))\n    (print (merge request-details { type: \"request-peg-out\", request-id: request-id }))\n    (ok true)))\n\n;; claim peg-out request, so that the claimer can safely process the peg-out (within the grace period)\n;;\n(define-public (claim-peg-out (request-id uint) (fulfilled-by (buff 128)))\n  (let (\n      (claimer tx-sender)\n      (request-details (try! (get-request-or-fail request-id)))\n      (token-details (try! (get-pair-details-or-fail (try! (get-tick-to-pair-or-fail (get tick request-details)))))))\n    (asserts! (not (get peg-out-paused token-details)) err-paused)\n    (asserts! (< (get claimed request-details) tenure-height) err-request-already-claimed)\n    (asserts! (not (get revoked request-details)) err-request-already-revoked)\n    (asserts! (not (get finalized request-details)) err-request-already-finalized)\n\n    (as-contract (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-request request-id (merge request-details { claimed: (+ tenure-height (get-request-claim-grace-period)), claimed-by: claimer, fulfilled-by: fulfilled-by }))))\n\n    (print (merge request-details { type: \"claim-peg-out\", request-id: request-id, claimed: (+ tenure-height (get-request-claim-grace-period)), claimed-by: claimer, fulfilled-by: fulfilled-by }))\n    (ok true)\n  )\n)\n\n;; finalize peg-out request\n;; finalize `request-id` with `tx`\n;; pays the fee to `fee-to-address` and burn the relevant pegged-in tokens.\n;;\n;; peg-out finalization can be done by either a peg-in address or a non-peg-in (i.e. 3rd party) address\n;; if the latter, then the overall peg-in balance does not change.\n;; the claimer sends non-pegged-in BRC20 tokens to the peg-out requester and receives the pegged-in BRC20 tokens (along with gas-fee)\n;; if the former, then the overall peg-in balance decreases.\n;; the relevant BRC20 tokens are burnt (with fees paid to `fee-to-address`)\n(define-public (finalize-peg-out-on-index (request-id uint)\n  (tx { bitcoin-tx: (buff 32768), output: uint, offset: uint, tick: (string-utf8 256), amt: uint, from: (buff 128), to: (buff 128), from-bal: uint, to-bal: uint, decimals: uint })\n  (block { header: (buff 80), height: uint })\n  (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n  (signature-packs (list 10 { signer: principal, tx-hash: (buff 32), signature: (buff 65) }))\n  (token-trait <ft-trait>))\n  (begin \n    (try! (index-tx tx block proof signature-packs))\n    (finalize-peg-out request-id (get bitcoin-tx tx) (get output tx) (get offset tx) token-trait)))\n\n(define-public (finalize-peg-out (request-id uint) (tx (buff 32768)) (output-idx uint) (offset-idx uint) (token-trait <ft-trait>))\n  (let (\n      (token (contract-of token-trait))\n      (request-details (try! (get-request-or-fail request-id)))\n      (pair-details (try! (get-tick-to-pair-or-fail (get tick request-details))))\n      (token-details (try! (get-pair-details-or-fail pair-details)))\n      (tx-idxed (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-bitcoin-tx-indexed-or-fail tx output-idx offset-idx)))\n      (tx-mined-height (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-bitcoin-tx-mined-or-fail tx)))\n      (amount-in-decimals (get amt tx-idxed))\n      (fulfilled-by (get from tx-idxed))\n      (is-fulfilled-by-peg-in (or (is-peg-in-address-approved fulfilled-by) (is-fulfill-address-approved fulfilled-by))))\n    (asserts! (not (get peg-out-paused token-details)) err-paused)\n\t\t(asserts! (< burn-height-start tx-mined-height) err-tx-mined-before-start)\n    (asserts! (is-eq token (get token pair-details)) err-token-mismatch)\n    (asserts! (is-eq (get tick request-details) (get tick tx-idxed)) err-token-mismatch)\n    (asserts! (is-eq amount-in-decimals (fixed-to-decimals (get amount-net request-details) (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-tick-decimals-or-default (get tick tx-idxed)))) err-invalid-amount)\n    (asserts! (is-eq (get peg-out-address request-details) (get to tx-idxed)) err-address-mismatch)\n    (asserts! (is-eq (get fulfilled-by request-details) fulfilled-by) err-address-mismatch)\n    (asserts! (< (get requested-at-burn-height request-details) tx-mined-height) err-tx-mined-before-request)\n    (asserts! (not (get-peg-in-sent-or-default tx output-idx offset-idx)) err-already-sent)\n    (asserts! (not (get revoked request-details)) err-request-already-revoked)\n    (asserts! (not (get finalized request-details)) err-request-already-finalized)\n\n    (as-contract (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-in-sent { tx: tx, output: output-idx, offset: offset-idx } true)))\n    (as-contract (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-request request-id (merge request-details { finalized: true }))))\n\n    (and (> (get fee request-details) u0) (as-contract (try! (contract-call? token-trait transfer-fixed (get fee request-details) tx-sender (var-get fee-to-address) none))))\n    (and (> (get gas-fee request-details) u0) (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc transfer-fixed (get gas-fee request-details) tx-sender (if is-fulfilled-by-peg-in (var-get fee-to-address) (get claimed-by request-details)) none))))\n\n    (if is-fulfilled-by-peg-in\n      (and (not (get no-burn token-details)) (as-contract (try! (contract-call? token-trait burn-fixed (get amount-net request-details) tx-sender))))\n      (as-contract (try! (contract-call? token-trait transfer-fixed (get amount-net request-details) tx-sender (get claimed-by request-details) none)))\n    )\n\n    (print { type: \"finalize-peg-out\", request-id: request-id, tx: tx })\n    (ok true)))\n\n;; revoke peg-out request\n;; only after `request-revoke-grace-period` passed\n;; returns fee and pegged-in tokens to the requester.\n(define-public (revoke-peg-out (request-id uint) (token-trait <ft-trait>))\n  (let (\n      (token (contract-of token-trait))\n      (request-details (try! (get-request-or-fail request-id)))\n      (pair-details (try! (get-tick-to-pair-or-fail (get tick request-details))))\n      (token-details (try! (get-pair-details-or-fail pair-details))))      \n    (asserts! (> tenure-height (+ (get requested-at request-details) (get-request-revoke-grace-period))) err-revoke-grace-period)\n    (asserts! (is-eq token (get token pair-details)) err-token-mismatch)\n    (asserts! (< (get claimed request-details) tenure-height) err-request-already-claimed)\n    (asserts! (not (get revoked request-details)) err-request-already-revoked)\n    (asserts! (not (get finalized request-details)) err-request-already-finalized)\n\n    (as-contract (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-request request-id (merge request-details { revoked: true }))))\n\n    (and (> (get fee request-details) u0) (as-contract (try! (contract-call? token-trait transfer-fixed (get fee request-details) tx-sender (get requested-by request-details) none))))\n    (and (> (get gas-fee request-details) u0) (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc transfer-fixed (get gas-fee request-details) tx-sender (get requested-by request-details) none))))\n    (as-contract (try! (contract-call? token-trait transfer-fixed (get amount-net request-details) tx-sender (get requested-by request-details) none)))\n\n    (print { type: \"revoke-peg-out\", request-id: request-id })\n    (ok true)))\n\n;; internal functions\n\n(define-private (index-tx\n  (tx { bitcoin-tx: (buff 32768), output: uint, offset: uint, tick: (string-utf8 256), amt: uint, from: (buff 128), to: (buff 128), from-bal: uint, to-bal: uint, decimals: uint })\n  (block { header: (buff 80), height: uint })\n  (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n  (signature-packs (list 10 { signer: principal, tx-hash: (buff 32), signature: (buff 65) })))\n  (begin \n    (and \n      (not (is-ok (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-bitcoin-tx-indexed-or-fail (get bitcoin-tx tx) (get output tx) (get offset tx))))\n      (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 index-tx-many (list { tx: tx, block: block, proof: proof, signature-packs: signature-packs })))))\n    (print { type: \"indexed-tx\", tx: tx, block: block, proof: proof, signature-packs: signature-packs })\n    (ok true)))\n\n(define-private (min (a uint) (b uint))\n  (if (< a b) a b))\n\n(define-private (mul-down (a uint) (b uint))\n  (/ (* a b) ONE_8))\n\n(define-private (div-down (a uint) (b uint))\n  (if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n\n(define-private (decimals-to-fixed (amount uint) (decimals uint))\n  (/ (* amount ONE_8) (pow u10 decimals)))\n\n(define-private (fixed-to-decimals (amount uint) (decimals uint))\n  (/ (* amount (pow u10 decimals)) ONE_8))",
    "analysis": {
      "summary": "This contract facilitates cross-chain asset transfers, specifically peg-out requests, allowing users to lock assets in the contract on the Stacks blockchain and request their transfer to another blockchain.",
      "explanation": "The contract implements a bridge mechanism for transferring assets from the Stacks blockchain to other chains. It defines errors, constants, and state variables to manage the bridge's operation, including pausing functionality, fee management, and handling of peg-out requests. Key functionalities include requesting peg-outs, claiming peg-outs for processing, finalizing peg-outs by burning or transferring tokens, and revoking peg-out requests under certain conditions. The contract interacts with external contracts for token transfers, request management, and validation, ensuring only authorized addresses can initiate certain actions and that peg-out requests meet specified criteria before processing.\n\n- Error codes and constants <L2-17> define various failure modes and system parameters.\n- State variables <L19-20> track whether the bridge is paused and the address to receive fees.\n- Governance functions <L60-76> allow authorized entities to pause the bridge, change the fee recipient, and transfer assets.\n- The `request-peg-out` function <L78-101> initiates a peg-out request, escrowing the assets and fees.\n- The `claim-peg-out` function <L103-120> allows a claimer to mark a peg-out request for processing.\n- The `finalize-peg-out` functions <L122-125> and <L126-172> complete the peg-out process, transferring or burning the escrowed assets based on the request details.\n- The `revoke-peg-out` function <L174-196> enables requesters to cancel their peg-out request and retrieve their assets after a grace period.\n- Internal functions <L198-218> support operations like transaction indexing and mathematical calculations.",
      "tags": [
        "cross-chain",
        "asset-transfer",
        "bridge",
        "peg-out",
        "governance"
      ]
    }
  },
  {
    "rank": 40,
    "contract": "SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-peg-in-v2-04-swap",
    "calls": 824,
    "source": ";; SPDX-License-Identifier: BUSL-1.1\n\n(use-trait ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n\n(define-constant err-unauthorised (err u1000))\n(define-constant err-paused (err u1001))\n(define-constant err-peg-in-address-not-found (err u1002))\n(define-constant err-invalid-amount (err u1003))\n(define-constant err-token-mismatch (err u1004))\n(define-constant err-invalid-tx (err u1005))\n(define-constant err-already-sent (err u1006))\n(define-constant err-address-mismatch (err u1007))\n(define-constant err-request-already-revoked (err u1008))\n(define-constant err-request-already-finalized (err u1009))\n(define-constant err-revoke-grace-period (err u1010))\n(define-constant err-request-already-claimed (err u1011))\n(define-constant err-invalid-input (err u1012))\n(define-constant err-tx-mined-before-request (err u1013))\n(define-constant err-commit-tx-mismatch (err u1014))\n(define-constant err-invalid-burn-height (err u1003))\n(define-constant err-tx-mined-before-start (err u1015))\n(define-constant err-slippage-error (err u1016))\n(define-constant err-bitcoin-tx-not-mined (err u1017))\n(define-constant err-invalid-routing (err u1018))\n\n(define-constant MAX_UINT u340282366920938463463374607431768211455)\n(define-constant ONE_8 u100000000)\n\n(define-constant burn-height-start burn-block-height)\n\n(define-data-var paused bool true)\n(define-data-var fee-to-address principal 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao)\n\n(define-data-var peg-in-fee uint u0) ;; fixed in BTC\n\n;; read-only functions\n\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao) (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao is-extension contract-caller)) err-unauthorised)))\n\n(define-read-only (is-paused)\n\t(var-get paused))\n\n(define-read-only (get-fee-to-address)\n  (var-get fee-to-address))\n\n(define-read-only (get-peg-in-fee)\n\t(var-get peg-in-fee))\n\n(define-read-only (get-pair-details (pair { token: principal, chain-id: uint }))\n  (match (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-pair-details-or-fail pair) ok-value (some ok-value) err-value none))\n\n(define-read-only (get-pair-details-many (pairs (list 200 { token: principal, chain-id: uint })))\n  (map get-pair-details pairs))\n\n(define-read-only (get-tick-to-pair-or-fail (tick (string-utf8 256)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-tick-to-pair-or-fail tick))\n\n(define-read-only (is-peg-in-address-approved (address (buff 128)))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 is-peg-in-address-approved address))\n\n(define-read-only (get-pair-details-or-fail (pair { token: principal, chain-id: uint }))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-pair-details-or-fail pair))\n\n(define-read-only (is-approved-pair (pair { token: principal, chain-id: uint }))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 is-approved-pair pair))\n\n(define-read-only (get-peg-in-sent-or-default (bitcoin-tx (buff 32768)) (output uint) (offset uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-peg-in-sent-or-default bitcoin-tx output offset))\n\n;; @dev cross-swap order size > 80 bytes, so uses drop\n(define-read-only (create-order-cross-swap-or-fail (order { from: (buff 128), to: (buff 128), routing: (list 4 uint), token-out: principal, min-amount-out: (optional uint), chain-id: (optional uint) }))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 create-order-cross-swap-or-fail order))\n\n;; @dev no op-code offset for drop-based order\n(define-read-only (decode-order-cross-swap-or-fail (order-script (buff 512)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 decode-order-cross-swap-or-fail order-script u0))\n\n(define-read-only (decode-order-cross-swap-from-reveal-tx-or-fail (tx (buff 32768)) (order-idx uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 decode-order-cross-swap-from-reveal-tx-or-fail tx order-idx))\n\n(define-read-only (validate-tx-cross-swap (commit-tx { tx: (buff 32768), output-idx: uint, fee-idx: (optional uint) }) (reveal-tx { tx: (buff 32768), order-idx: uint }) (routing-traits (list 5 <ft-trait>)) (token-out-trait <ft-trait>))\n\t(validate-tx-cross-swap-extra (try! (validate-tx-cross-swap-base commit-tx reveal-tx)) routing-traits token-out-trait))\n\n(define-read-only (break-routing-id (token-in principal) (routing-ids (list 4 uint)))\n\t(fold break-routing-id-iter routing-ids (ok { routing-tokens: (list token-in), routing-factors: (list ) })))\n\n;; governance functions\n(define-public (pause (new-paused bool))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set paused new-paused))))\n\n(define-public (set-fee-to-address (new-fee-to-address principal))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set fee-to-address new-fee-to-address))))\n\n(define-public (set-peg-in-fee (fee uint))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set peg-in-fee fee))))\n\n(define-public (transfer-all-to (new-owner principal) (token-trait <ft-trait>))\n  (begin \n    (try! (is-dao-or-extension))\n    (as-contract (contract-call? token-trait transfer-fixed (unwrap-panic (contract-call? token-trait get-balance-fixed tx-sender)) tx-sender new-owner none))))\n\n(define-public (transfer-all-to-many (new-owner principal) (token-traits (list 10 <ft-trait>)))\n  (ok (map transfer-all-to (list new-owner new-owner new-owner new-owner new-owner new-owner new-owner new-owner new-owner new-owner) token-traits)))\n\n;; public functions\n\n(define-public (finalize-peg-in-cross-swap-on-index\n  (tx { bitcoin-tx: (buff 32768), output: uint, tick: (string-utf8 256), amt: uint, from: (buff 128), to: (buff 128), from-bal: uint, to-bal: uint, decimals: uint })\n  (block { header: (buff 80), height: uint })\n  (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n  (signature-packs (list 10 { signer: principal, tx-hash: (buff 32), signature: (buff 65) }))\n  (reveal-tx { tx: (buff 32768), order-idx: uint }) \n  (reveal-block { header: (buff 80), height: uint })\n  (reveal-proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })    \n  (fee-idx (optional uint)) (routing-traits (list 5 <ft-trait>)) (token-out-trait <ft-trait>)) \n  (begin\n    (try! (index-tx tx block proof signature-packs))\n    (finalize-peg-in-cross-swap { tx: (get bitcoin-tx tx), output-idx: (get output tx), fee-idx: fee-idx } reveal-tx reveal-block reveal-proof routing-traits token-out-trait)))\n\n(define-public (finalize-peg-in-cross-swap \n  (commit-tx { tx: (buff 32768), output-idx: uint, fee-idx: (optional uint) }) \n  (reveal-tx { tx: (buff 32768), order-idx: uint }) \n  (reveal-block { header: (buff 80), height: uint })\n  (reveal-proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })    \n  (routing-traits (list 5 <ft-trait>)) (token-out-trait <ft-trait>))\n  (let (\n      (is-reveal-tx-mined (try! (verify-mined (get tx reveal-tx) reveal-block reveal-proof)))\n      (validation-data (try! (validate-tx-cross-swap-base commit-tx reveal-tx)))\n\t\t\t(token-trait (unwrap-panic (element-at? routing-traits u0)))\n      (tx (get tx commit-tx))\n      (order-details (get order-details validation-data))\n\t\t\t(token-details (get token-details validation-data))\n      (fee (get fee validation-data))\n      (amt-net (get amt-net validation-data))\n\t\t\t(print-msg (merge (get tx-idxed validation-data) { type: \"finalize-peg-in-cross-swap\", order-details: order-details, fee: fee, amt-net: amt-net, tx-id: (try! (get-txid tx)), output-idx: (get output-idx commit-tx), offset-idx: u0 })))\n    (asserts! (not (get peg-in-paused token-details)) err-paused)\n\t\t(asserts! (< burn-height-start (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-bitcoin-tx-mined-or-fail tx))) err-tx-mined-before-start)\t\t\n    (match (get fee-idx commit-tx) some-value (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-bridge-registry-v2-01 set-peg-in-sent tx some-value true))) true)\n    (as-contract (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-in-sent { tx: tx, output: (get output-idx commit-tx), offset: u0 } true)))\n    (and (> fee u0) (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc mint-fixed fee tx-sender))))\n    (try! (check-trait token-trait (get token (get pair-details validation-data))))\n    (and (> amt-net u0) (if (get no-burn token-details) \n      (let (\n          (peg-out-balance (- (unwrap-panic (contract-call? token-trait get-balance-fixed .meta-peg-out-endpoint-v2-04)) amt-net))) \n        (as-contract (try! (contract-call? .meta-peg-out-endpoint-v2-04 transfer-all-to tx-sender token-trait)))\n        (as-contract (try! (contract-call? token-trait transfer-fixed peg-out-balance tx-sender .meta-peg-out-endpoint-v2-04 none))))\n      (as-contract (try! (contract-call? token-trait mint-fixed amt-net tx-sender)))))\n\t\t(match (validate-tx-cross-swap-extra validation-data routing-traits token-out-trait)\n\t\t\tok-value\n\t\t\t(begin\n\t\t\t\t(and (> fee u0) (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc transfer-fixed fee tx-sender (var-get fee-to-address) none))))\n\t\t\t\t(as-contract (try! (contract-call? .cross-router-v2-03 route amt-net routing-traits (get routing-factors ok-value) token-out-trait (get min-amount-out order-details) { address: (get to order-details), chain-id: (get chain-id order-details) })))\n\t\t\t\t(print (merge print-msg { success: true }))\n\t\t\t\t(ok true))\n\t\t\terr-value\n\t\t\t(begin \n        (as-contract (try! (refund fee amt-net (get from order-details) token-trait (get chain-id (get pair-details validation-data)))))\n\t\t\t\t(print (merge print-msg { success: false, err-value: err-value }))\n\t\t\t\t(ok false)))))\n\n;; internal functions\n\n(define-private (validate-tx-cross-swap-base (commit-tx { tx: (buff 32768), output-idx: uint, fee-idx: (optional uint) }) (reveal-tx { tx: (buff 32768), order-idx: uint }))\n  (let (\n\t\t\t(validation-data (try! (validate-drop-common commit-tx)))\n\t\t\t(reveal-tx-data (try! (decode-order-cross-swap-from-reveal-tx-or-fail (get tx reveal-tx) (get order-idx reveal-tx)))))\n    (asserts! (is-eq (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.clarity-bitcoin-v1-07 get-segwit-txid (get tx commit-tx)) (get commit-txid reveal-tx-data)) err-commit-tx-mismatch)\n    (ok (merge validation-data { order-details: (get order-details reveal-tx-data) }))))\n\n(define-private (validate-tx-cross-swap-extra\n  (validation-data { \n    fee: uint, amt-net: uint, \n    tx-idxed: { tick: (string-utf8 256), amt: uint, from: (buff 128), to: (buff 128) }, \n    pair-details: { token: principal, chain-id: uint },\n    token-details: { approved: bool, tick: (string-utf8 256), peg-in-paused: bool, peg-out-paused: bool, peg-in-fee: uint, peg-out-fee: uint, peg-out-gas-fee: uint, no-burn: bool },\n    order-details: { from: (buff 128), to: (buff 128), routing: (list 4 uint), token-out: principal, min-amount-out: (optional uint), chain-id: (optional uint) }})\n  (routing-traits (list 5 <ft-trait>))\n  (token-out-trait <ft-trait>))\n\t(let (\t\t\t\n\t\t\t(order-details (get order-details validation-data))\n      (token-in-trait (unwrap-panic (element-at? routing-traits u0)))\n\t\t\t(routing-details (try! (break-routing-id (contract-of token-in-trait) (get routing order-details)))))\n    (asserts! (is-eq (len routing-traits) (len (get routing-tokens routing-details))) err-token-mismatch)\n    (asserts! (is-ok (fold check-err (map check-trait routing-traits (get routing-tokens routing-details)) (ok true))) err-token-mismatch)\n    (try! (check-trait token-out-trait (get token-out order-details)))\n\t\t(try! (contract-call? .cross-router-v2-03 validate-route (get amt-net validation-data) (get routing-tokens routing-details) (get routing-factors routing-details) (get token-out order-details) (get min-amount-out order-details) { address: (get to order-details), chain-id: (get chain-id order-details) }))\n\t\t(ok (merge validation-data { routing-tokens: (get routing-tokens routing-details), routing-factors: (get routing-factors routing-details) }))))\n\n(define-private (validate-drop-common (commit-tx { tx: (buff 32768), output-idx: uint, fee-idx: (optional uint) }))\n\t(let (\n      (tx-idxed (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-bitcoin-tx-indexed-or-fail (get tx commit-tx) (get output-idx commit-tx) u0)))      \n      (pair-details (try! (get-tick-to-pair-or-fail (get tick tx-idxed))))\n      (token-details (try! (get-pair-details-or-fail pair-details)))\n      (amt-in-fixed (decimals-to-fixed (get amt tx-idxed) (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-tick-decimals-or-default (get tick tx-idxed)))))    \n    (asserts! (get approved token-details) err-unauthorised)\n    (asserts! (not (get-peg-in-sent-or-default (get tx commit-tx) (get output-idx commit-tx) u0)) err-already-sent)\n    (asserts! (is-peg-in-address-approved (get to tx-idxed)) err-peg-in-address-not-found)     \t\n    (ok (merge { tx-idxed: tx-idxed, pair-details: pair-details, token-details: token-details, amt-net: amt-in-fixed } (try! (process-fee (get tx commit-tx) (get fee-idx commit-tx)))))))\n\n(define-private (index-tx\n  (tx { bitcoin-tx: (buff 32768), output: uint, tick: (string-utf8 256), amt: uint, from: (buff 128), to: (buff 128), from-bal: uint, to-bal: uint, decimals: uint })\n  (block { header: (buff 80), height: uint })\n  (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n  (signature-packs (list 10 { signer: principal, tx-hash: (buff 32), signature: (buff 65) })))\n  (begin \n    (and \n      (not (is-ok (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-bitcoin-tx-indexed-or-fail (get bitcoin-tx tx) (get output tx) u0)))\n      (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 index-tx-many (list { tx: (merge tx { offset: u0 }), block: block, proof: proof, signature-packs: signature-packs })))))\n    (print { type: \"indexed-tx\", tx-id: (try! (get-txid (get bitcoin-tx tx))), block: block, proof: proof, signature-packs: signature-packs })\n    (ok true)))\n\n(define-private (max (a uint) (b uint))\n\t(if (< a b) b a))\n\n(define-private (min (a uint) (b uint))\n  (if (< a b) a b))\n\n(define-private (mul-down (a uint) (b uint))\n  (/ (* a b) ONE_8))\n\n(define-private (div-down (a uint) (b uint))\n  (if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n\n(define-private (decimals-to-fixed (amount uint) (decimals uint))\n  (/ (* amount ONE_8) (pow u10 decimals)))\n\n(define-private (unwrap-string-to-uint (input (string-ascii 40)))\n\t(unwrap-panic (string-to-uint? input)))\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value)))\n\n(define-private (check-trait (token-trait <ft-trait>) (token principal))\n  (ok (asserts! (is-eq (contract-of token-trait) token) err-token-mismatch)))\n\n(define-private (decode-from-reveal-tx-or-fail (tx (buff 32768)) (order-idx uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 decode-from-reveal-tx-or-fail tx order-idx))\n\n(define-private (extract-tx-ins-outs (tx (buff 32768)))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 extract-tx-ins-outs tx))\n\n(define-private (get-txid (tx (buff 32768)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 get-txid tx))\n\n(define-private (verify-mined (tx (buff 32768)) (block { header: (buff 80), height: uint }) (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint }))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 verify-mined tx block proof))\n\n(define-private (refund (btc-amount uint) (token-amount uint) (from (buff 128)) (token-trait <ft-trait>) (the-chain-id uint))\n  (let (\n      (pair-details { token: (contract-of token-trait), chain-id: the-chain-id })\n\t    (token-details (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-pair-details-or-fail pair-details)))\n      (btc-peg-out-fee (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 get-peg-out-fee))\n      (btc-peg-out-min-fee (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 get-peg-out-min-fee)))\n    (and (> btc-amount u0) (begin\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-fee u0))\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-min-fee u0))\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 request-peg-out-0 from btc-amount))\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-fee btc-peg-out-fee))\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-min-fee btc-peg-out-min-fee))\n      true))\n    (and (> token-amount u0) (begin\n      (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-out-fee pair-details u0))\n      (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-out-gas-fee pair-details u0))\n      (try! (contract-call? .meta-peg-out-endpoint-v2-04 request-peg-out token-amount from token-trait the-chain-id))\n      (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-out-fee pair-details (get peg-out-fee token-details)))\n      (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-out-gas-fee pair-details (get peg-out-gas-fee token-details)))\n      true))\n    (ok true))) \n\n(define-private (process-fee (tx (buff 32768)) (fee-idx (optional uint)))\n  (match fee-idx some-value\n    (let (\n\t\t\t  (fee-output (unwrap! (element-at (get outs (try! (extract-tx-ins-outs tx))) some-value) err-invalid-tx)))\n      (asserts! (>= (get value fee-output) (get-peg-in-fee)) err-invalid-amount)  \n\t\t  (asserts! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-bridge-registry-v2-01 is-peg-in-address-approved (get scriptPubKey fee-output)) err-peg-in-address-not-found)\n      (asserts! (not (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-bridge-registry-v2-01 get-peg-in-sent-or-default tx some-value)) err-already-sent)    \n      (ok { fee: (get value fee-output) }))\n    (begin \n      (asserts! (is-eq u0 (get-peg-in-fee)) err-invalid-amount)  \n      (ok { fee: u0 }))))\n\n(define-private (break-routing-id-iter (routing-id uint) (prev-val (response { routing-tokens: (list 5 principal), routing-factors: (list 4 uint) } uint)))\n\t(match prev-val\n\t\tok-value\n\t\t(let (\n\t\t\t\t(pool-details (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-pool-details-by-id routing-id)))\n\t\t\t\t(prev-routing-tokens (unwrap-panic (as-max-len? (get routing-tokens ok-value) u4)))\n\t\t\t\t(prev-routing-factors (unwrap-panic (as-max-len? (get routing-factors ok-value) u3)))\n\t\t\t\t(len-routing-tokens (len prev-routing-tokens))\n        (token-in (unwrap-panic (element-at? prev-routing-tokens u0))))\n\t\t\t\t(if (is-eq len-routing-tokens u1)\n\t\t\t\t\t(if (is-eq (get token-x pool-details) token-in)\n\t\t\t\t\t\t(ok { routing-tokens: (list token-in (get token-y pool-details)), routing-factors: (list (get factor pool-details)) })\n\t\t\t\t\t\t(if (is-eq (get token-y pool-details) token-in)\n\t\t\t\t\t\t\t (ok { routing-tokens: (list token-in (get token-x pool-details)), routing-factors: (list (get factor pool-details)) })\n\t\t\t\t\t\t\t err-invalid-routing))\n\t\t\t\t\t(if (is-eq (get token-x pool-details) (unwrap-panic (element-at? prev-routing-tokens (- len-routing-tokens u1))))\n\t\t\t\t\t\t(ok { routing-tokens: (append prev-routing-tokens (get token-y pool-details)), routing-factors: (append prev-routing-factors (get factor pool-details)) })\n\t\t\t\t\t\t(if (is-eq (get token-y pool-details) (unwrap-panic (element-at? prev-routing-tokens (- len-routing-tokens u1))))\n\t\t\t\t\t\t\t(ok { routing-tokens: (append prev-routing-tokens (get token-x pool-details)), routing-factors: (append prev-routing-factors (get factor pool-details)) })\n\t\t\t\t\t\t\terr-invalid-routing))))\n\t\terr-value (err err-value)))",
    "analysis": {
      "summary": "This contract facilitates cross-chain swaps and peg-in transactions, integrating with a decentralized oracle for Bitcoin transaction verification and supporting governance functions for operational control.",
      "explanation": "This Clarity smart contract is designed to enable cross-chain swaps and Bitcoin peg-in transactions on the Stacks blockchain. It interacts with external contracts for oracle services, token transfers, and liquidity pool routing. Key functionalities include verifying Bitcoin transactions, processing cross-chain swaps, and managing operational parameters like fees and contract pause state. Governance functions allow authorized entities to modify critical settings, ensuring adaptability and security. The contract employs a combination of public and private functions, read-only queries, and data variables to manage its state and interactions.\n\n- **Error Codes (<L2-19>)**: Defines various error codes for handling exceptions.\n- **Constants and Variables (<L21-27>)**: Sets up constants like maximum uint value, and initializes state variables such as pause status and fees.\n- **Read-Only Functions (<L29-62>)**: Provide information about the contract's state, like pause status, fees, and details about token pairs and transactions.\n- **Governance Functions (<L64-80>)**: Allow authorized entities to pause the contract, set fee distribution, and transfer token balances, ensuring operational control.\n- **Public Functions (<L82-126>)**: Main functionalities for processing peg-in transactions and finalizing cross-chain swaps, including transaction validation and token minting or transferring.\n- **Internal Functions (<L128-209>)**: Support the public and governance functions with utilities for transaction validation, fee processing, routing ID breakdown, and refunds.\n\nEach function is meticulously designed to ensure secure and efficient processing of cross-chain transactions, with checks for authorization, transaction validity, and error conditions. The contract leverages the SIP-010 trait for fungible tokens and interacts with external contracts for oracle services and liquidity pool operations, demonstrating a complex integration of blockchain functionalities.",
      "tags": [
        "cross-chain",
        "swap",
        "peg-in",
        "governance",
        "oracle",
        "fungible-token"
      ]
    }
  },
  {
    "rank": 41,
    "contract": "SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-swap-helper-v-1-2",
    "calls": 803,
    "source": "\n;; xyk-swap-helper-v-1-2\n\n;; Use XYK ft trait and XYK pool trait\n(use-trait xyk-ft-trait .sip-010-trait-ft-standard-v-1-1.sip-010-trait)\n(use-trait xyk-pool-trait .xyk-pool-trait-v-1-2.xyk-pool-trait)\n\n;; Error constants\n(define-constant ERR_NOT_AUTHORIZED (err u6001))\n(define-constant ERR_INVALID_AMOUNT (err u6002))\n(define-constant ERR_INVALID_PRINCIPAL (err u6003))\n(define-constant ERR_ALREADY_ADMIN (err u6004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u6005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u6006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u6007))\n(define-constant ERR_SWAP_STATUS (err u6008))\n(define-constant ERR_MINIMUM_RECEIVED (err u6009))\n\n;; Contract deployer address\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n;; Admins list and helper var used to remove admins\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n;; Data var used to enable or disable quotes and swaps\n(define-data-var swap-status bool true)\n\n;; Get admins list\n(define-read-only (get-admins)\n    (ok (var-get admins))\n)\n\n;; Get admin helper var\n(define-read-only (get-admin-helper)\n    (ok (var-get admin-helper))\n)\n\n;; Get swap status\n(define-read-only (get-swap-status)\n    (ok (var-get swap-status))\n)\n\n;; Add an admin to the admins list\n(define-public (add-admin (admin principal))\n    (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n    )\n    ;; Assert caller is an existing admin and new admin is not in admins-list\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n\n    ;; Add admin to list with max length of 5\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n\n    ;; Print add admin data and return true\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n    )\n)\n\n;; Remove an admin from the admins list\n(define-public (remove-admin (admin principal))\n    (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n    )\n    ;; Assert caller is an existing admin and admin to remove is in admins-list\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n\n    ;; Assert contract deployer cannot be removed\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n\n    ;; Set admin-helper to admin to remove and filter admins-list to remove admin\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removable admins-list))\n\n    ;; Print remove admin data and return true\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n    )\n)\n\n;; Enable or disable quotes and swaps\n(define-public (set-swap-status (status bool))\n    (let (\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n\n        ;; Set swap-status to status\n        (var-set swap-status status)\n\n        ;; Print function data and return true\n        (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n        (ok true)\n    )\n    )\n)\n\n;; Get quote for swap-helper-a\n(define-public (get-quote-a\n    (amount uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Get quotes for each swap\n    (quote-a (try! (xyk-qa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    )\n    ;; Return number of b tokens the caller would receive\n    (ok quote-a)\n    )\n)\n\n;; Get quote for swap-helper-b\n(define-public (get-quote-b\n    (amount uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>) (c <xyk-ft-trait>) (d <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>) (b <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Get quotes for each swap\n    (quote-a (try! (xyk-qa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    (quote-b (try! (xyk-qa quote-a (get c xyk-tokens) (get d xyk-tokens) (get b xyk-pools))))\n    )\n    ;; Return number of d tokens the caller would receive\n    (ok quote-b)\n    )\n)\n\n;; Get quote for swap-helper-c\n(define-public (get-quote-c\n    (amount uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>) (c <xyk-ft-trait>) (d <xyk-ft-trait>) (e <xyk-ft-trait>) (f <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>) (b <xyk-pool-trait>) (c <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Get quotes for each swap\n    (quote-a (try! (xyk-qa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    (quote-b (try! (xyk-qa quote-a (get c xyk-tokens) (get d xyk-tokens) (get b xyk-pools))))\n    (quote-c (try! (xyk-qa quote-b (get e xyk-tokens) (get f xyk-tokens) (get c xyk-pools))))\n    )\n    ;; Return number of f tokens the caller would receive\n    (ok quote-c)\n    )\n)\n\n;; Get quote for swap-helper-d\n(define-public (get-quote-d\n    (amount uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>) (c <xyk-ft-trait>) (d <xyk-ft-trait>) (e <xyk-ft-trait>) (f <xyk-ft-trait>) (g <xyk-ft-trait>) (h <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>) (b <xyk-pool-trait>) (c <xyk-pool-trait>) (d <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Get quotes for each swap\n    (quote-a (try! (xyk-qa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    (quote-b (try! (xyk-qa quote-a (get c xyk-tokens) (get d xyk-tokens) (get b xyk-pools))))\n    (quote-c (try! (xyk-qa quote-b (get e xyk-tokens) (get f xyk-tokens) (get c xyk-pools))))\n    (quote-d (try! (xyk-qa quote-c (get g xyk-tokens) (get h xyk-tokens) (get d xyk-pools))))\n    )\n    ;; Return number of h tokens the caller would receive\n    (ok quote-d)\n    )\n)\n\n;; Get quote for swap-helper-e\n(define-public (get-quote-e\n    (amount uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>) (c <xyk-ft-trait>) (d <xyk-ft-trait>) (e <xyk-ft-trait>) (f <xyk-ft-trait>) (g <xyk-ft-trait>) (h <xyk-ft-trait>) (i <xyk-ft-trait>) (j <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>) (b <xyk-pool-trait>) (c <xyk-pool-trait>) (d <xyk-pool-trait>) (e <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Get quotes for each swap\n    (quote-a (try! (xyk-qa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    (quote-b (try! (xyk-qa quote-a (get c xyk-tokens) (get d xyk-tokens) (get b xyk-pools))))\n    (quote-c (try! (xyk-qa quote-b (get e xyk-tokens) (get f xyk-tokens) (get c xyk-pools))))\n    (quote-d (try! (xyk-qa quote-c (get g xyk-tokens) (get h xyk-tokens) (get d xyk-pools))))\n    (quote-e (try! (xyk-qa quote-d (get i xyk-tokens) (get j xyk-tokens) (get e xyk-pools))))\n    )\n    ;; Return number of j tokens the caller would receive\n    (ok quote-e)\n    )\n)\n\n;; Swap via 1 XYK pool\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap\n    (swap-a (try! (xyk-sa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    )\n    (begin\n        ;; Assert that swap-a is greater than or equal to min-received\n        (asserts! (>= swap-a min-received) ERR_MINIMUM_RECEIVED)\n\n        ;; Print swap data and return number of b tokens the caller received\n        (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n            amount: amount,\n            min-received: min-received,\n            received: swap-a,\n            xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n                a: swap-a\n            }\n            }\n        }\n        })\n        (ok swap-a)\n    )\n    )\n)\n\n;; Swap via 2 XYK pools\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>) (c <xyk-ft-trait>) (d <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>) (b <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap\n    (swap-a (try! (xyk-sa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    (swap-b (try! (xyk-sa swap-a (get c xyk-tokens) (get d xyk-tokens) (get b xyk-pools))))\n    )\n    (begin\n        ;; Assert that swap-b is greater than or equal to min-received\n        (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n        ;; Print swap data and return number of d tokens the caller received\n        (print {\n        action: \"swap-helper-b\",\n        caller: tx-sender, \n        data: {\n            amount: amount,\n            min-received: min-received,\n            received: swap-b,\n            xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n                a: swap-a,\n                b: swap-b\n            }\n            }\n        }\n        })\n        (ok swap-b)\n    )\n    )\n)\n\n;; Swap via 3 XYK pools\n(define-public (swap-helper-c\n    (amount uint) (min-received uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>) (c <xyk-ft-trait>) (d <xyk-ft-trait>) (e <xyk-ft-trait>) (f <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>) (b <xyk-pool-trait>) (c <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap\n    (swap-a (try! (xyk-sa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    (swap-b (try! (xyk-sa swap-a (get c xyk-tokens) (get d xyk-tokens) (get b xyk-pools))))\n    (swap-c (try! (xyk-sa swap-b (get e xyk-tokens) (get f xyk-tokens) (get c xyk-pools))))\n    )\n    (begin\n        ;; Assert that swap-c is greater than or equal to min-received\n        (asserts! (>= swap-c min-received) ERR_MINIMUM_RECEIVED)\n\n        ;; Print swap data and return number of f tokens the caller received\n        (print {\n        action: \"swap-helper-c\",\n        caller: tx-sender, \n        data: {\n            amount: amount,\n            min-received: min-received,\n            received: swap-c,\n            xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n                a: swap-a,\n                b: swap-b,\n                c: swap-c\n            }\n            }\n        }\n        })\n        (ok swap-c)\n    )\n    )\n)\n\n;; Swap via 4 XYK pools\n(define-public (swap-helper-d\n    (amount uint) (min-received uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>) (c <xyk-ft-trait>) (d <xyk-ft-trait>) (e <xyk-ft-trait>) (f <xyk-ft-trait>) (g <xyk-ft-trait>) (h <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>) (b <xyk-pool-trait>) (c <xyk-pool-trait>) (d <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap\n    (swap-a (try! (xyk-sa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    (swap-b (try! (xyk-sa swap-a (get c xyk-tokens) (get d xyk-tokens) (get b xyk-pools))))\n    (swap-c (try! (xyk-sa swap-b (get e xyk-tokens) (get f xyk-tokens) (get c xyk-pools))))\n    (swap-d (try! (xyk-sa swap-c (get g xyk-tokens) (get h xyk-tokens) (get d xyk-pools))))\n    )\n    (begin\n        ;; Assert that swap-d is greater than or equal to min-received\n        (asserts! (>= swap-d min-received) ERR_MINIMUM_RECEIVED)\n\n        ;; Print swap data and return number of h tokens the caller received\n        (print {\n        action: \"swap-helper-d\",\n        caller: tx-sender, \n        data: {\n            amount: amount,\n            min-received: min-received,\n            received: swap-d,\n            xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n                a: swap-a,\n                b: swap-b,\n                c: swap-c,\n                d: swap-d\n            }\n            }\n        }\n        })\n        (ok swap-d)\n    )\n    )\n)\n\n;; Swap via 5 XYK pools\n(define-public (swap-helper-e\n    (amount uint) (min-received uint)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>) (c <xyk-ft-trait>) (d <xyk-ft-trait>) (e <xyk-ft-trait>) (f <xyk-ft-trait>) (g <xyk-ft-trait>) (h <xyk-ft-trait>) (i <xyk-ft-trait>) (j <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>) (b <xyk-pool-trait>) (c <xyk-pool-trait>) (d <xyk-pool-trait>) (e <xyk-pool-trait>)))\n    )\n    (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap\n    (swap-a (try! (xyk-sa amount (get a xyk-tokens) (get b xyk-tokens) (get a xyk-pools))))\n    (swap-b (try! (xyk-sa swap-a (get c xyk-tokens) (get d xyk-tokens) (get b xyk-pools))))\n    (swap-c (try! (xyk-sa swap-b (get e xyk-tokens) (get f xyk-tokens) (get c xyk-pools))))\n    (swap-d (try! (xyk-sa swap-c (get g xyk-tokens) (get h xyk-tokens) (get d xyk-pools))))\n    (swap-e (try! (xyk-sa swap-d (get i xyk-tokens) (get j xyk-tokens) (get e xyk-pools))))\n    )\n    (begin\n        ;; Assert that swap-e is greater than or equal to min-received\n        (asserts! (>= swap-e min-received) ERR_MINIMUM_RECEIVED)\n\n        ;; Print swap data and return number of j tokens the caller received\n        (print {\n        action: \"swap-helper-e\",\n        caller: tx-sender, \n        data: {\n            amount: amount,\n            min-received: min-received,\n            received: swap-e,\n            xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n                a: swap-a,\n                b: swap-b,\n                c: swap-c,\n                d: swap-d,\n                e: swap-e\n            }\n            }\n        }\n        })\n        (ok swap-e)\n    )\n    )\n)\n\n;; Helper function for removing an admin\n(define-private (admin-not-removable (admin principal))\n    (not (is-eq admin (var-get admin-helper)))\n)\n\n;; Check if input and output tokens are swapped relative to the pool's x and y tokens\n(define-private (is-xyk-path-reversed\n    (token-in <xyk-ft-trait>) (token-out <xyk-ft-trait>)\n    (pool-contract <xyk-pool-trait>)\n    )\n    (let (\n    (pool-data (unwrap-panic (contract-call? pool-contract get-pool)))\n    )\n    (not \n        (and \n        (is-eq (contract-of token-in) (get x-token pool-data))\n        (is-eq (contract-of token-out) (get y-token pool-data))\n        )\n    )\n    )\n)\n\n;; Get XYK quote using get-dy or get-dx based on token path\n(define-private (xyk-qa\n    (amount uint)\n    (token-in <xyk-ft-trait>) (token-out <xyk-ft-trait>)\n    (pool <xyk-pool-trait>)\n    )\n    (let (\n    ;; Determine if the token path is reversed\n    (is-reversed (is-xyk-path-reversed token-in token-out pool))\n    \n    ;; Get quote based on path\n    (quote-a (if (is-eq is-reversed false)\n                    (try! (contract-call?\n                    .xyk-core-v-1-2 get-dy\n                    pool\n                    token-in token-out\n                    amount))\n                    (try! (contract-call?\n                    .xyk-core-v-1-2 get-dx\n                    pool\n                    token-out token-in\n                    amount))))\n    )\n    (ok quote-a)\n    )\n)\n\n;; Perform XYK swap using swap-x-for-y or swap-y-for-x based on token path\n(define-private (xyk-sa\n    (amount uint)\n    (token-in <xyk-ft-trait>) (token-out <xyk-ft-trait>)\n    (pool <xyk-pool-trait>)\n    )\n    (let (\n    ;; Determine if the token path is reversed\n    (is-reversed (is-xyk-path-reversed token-in token-out pool))\n    \n    ;; Perform swap based on path\n    (swap-a (if (is-eq is-reversed false)\n                (try! (contract-call?\n                        .xyk-core-v-1-2 swap-x-for-y\n                        pool\n                        token-in token-out\n                        amount u1))\n                (try! (contract-call?\n                        .xyk-core-v-1-2 swap-y-for-x\n                        pool\n                        token-out token-in\n                        amount u1))))\n    )\n    (ok swap-a)\n    )\n)",
    "analysis": {
      "summary": "This contract facilitates multi-step swaps across XYK pools, manages swap permissions, and admin roles.",
      "explanation": "This Clarity smart contract provides a framework for executing swaps using the XYK model across multiple liquidity pools, managing swap permissions, and handling administrative roles. It integrates with external XYK pool and token contracts to perform the swaps and quotes.\n\n- **Use Trait Declarations**: The contract begins by declaring the use of two external traits, `xyk-ft-trait` for fungible tokens and `xyk-pool-trait` for liquidity pools, ensuring that any referenced contracts adhere to these specified interfaces <L2-3>.\n\n- **Error Constants**: Defines a series of error constants for handling various failure cases, such as unauthorized access or invalid operations <L5-13>.\n\n- **Contract Deployer and Admins Management**: It sets the contract deployer as an initial admin and allows for up to 5 admins to be added or removed. This is crucial for managing who can alter the swap status or modify admin roles <L15-53>.\n\n- **Swap Status Management**: Includes functionality to enable or disable the swapping feature, allowing admins to control when swaps can occur <L55-68>.\n\n- **Quote and Swap Functions**: Provides a series of public functions to get quotes for swaps and execute swaps across one to five XYK pools. These functions check the swap status and validate input amounts before proceeding with the swap logic, which involves calling external contracts to perform the actual swaps <L70-285>.\n\n- **Admin and Swap Path Helpers**: Includes private helper functions for admin management and determining the direction of swaps relative to the pool's token order. These are essential for the internal logic of adding/removing admins and executing swaps correctly <L287-333>.\n\nOverall, this contract acts as a bridge between users wanting to perform complex swaps across multiple pools and the underlying XYK liquidity pool contracts, while also providing administrative controls over these operations.",
      "tags": [
        "XYK",
        "swap",
        "liquidity-pool",
        "admin-control",
        "fungible-token"
      ]
    }
  },
  {
    "rank": 42,
    "contract": "SPAG3YDTNKR58Z6X1RK74N861MXJ8RCRRE80A11W.balancer-v2-4",
    "calls": 790,
    "source": "(define-constant ONE_6 u1000000)\n(define-constant ONE_8 u100000000)\n(define-constant ERR-NO-PR (err u400))\n\n(define-read-only (six-to-eight (n uint))\n    (/ (* n ONE_8) ONE_6)\n)\n\n;; not_alex->velar\n(define-public (balancer1_i (in uint) (mrc uint))\n    (begin \n        (try! (contract-call? \n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a \n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 \n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex \n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnot \n            u100000000 u100000000 (six-to-eight in) none))\n        (let \n            (\n                (bb (stx-get-balance tx-sender))\n            )            \n            (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens  \n                u16 \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx \n                'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope   \n                'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope  \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx  \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to \n                (unwrap-panic (contract-call? 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope get-balance tx-sender)) \n                u1\n            ))\n            (let \n                (\n                    (ba (stx-get-balance tx-sender))\n                    (rc (- ba bb))\n                )\n                (asserts! (>= rc mrc) ERR-NO-PR)\n                (ok (list bb ba))\n            ) \n        )\n    )\n)\n\n(define-public (balancer1 (dd uint) (mr uint) (ta uint))\n    (let (\n            (r (list \n                (balancer1_i dd mr)\n            ))\n        )\n        (and (> (stx-get-balance tx-sender) ta) (try! (stx-transfer? (- (stx-get-balance tx-sender) ta) tx-sender 'SPAG3YDTNKR58Z6X1RK74N861MXJ8RCRRE80A11W)))\n        (ok r)\n    )\n)\n\n;; not_velar->alex\n\n(define-public (balancer2_i (in uint) (mout uint))\n    (begin\n        (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens  \n                u16 \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx \n                'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx \n                'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope \n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to \n                in \n                u1\n            ))\n        (let\n            (\n                (bb (stx-get-balance tx-sender))\n            )\n            (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a \n                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnot  \n                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex \n                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2   \n                u100000000 u100000000  \n                (* u100000000 (unwrap-panic (contract-call? 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope get-balance tx-sender)))\n                none\n            ))\n            (let \n                (\n                    (ba (stx-get-balance tx-sender))\n                    (rc (- ba bb))\n                )\n                (asserts! (>= rc mout) (err u400))\n                (ok (list bb ba))\n            ) \n        )\n    )\n)\n\n(define-public (balancer2 (dd uint) (mr uint) (ta uint))\n    (let (\n            (r (list \n                (balancer2_i dd mr)\n            ))\n        )\n        (and (> (stx-get-balance tx-sender) ta) (try! (stx-transfer? (- (stx-get-balance tx-sender) ta) tx-sender 'SPAG3YDTNKR58Z6X1RK74N861MXJ8RCRRE80A11W)))\n        (ok r)\n    )\n)\n\n(define-public (balancer (dd uint) (mr uint) (ta uint))\n    (let (\n            (r (list \n                (balancer1_i dd mr)\n                (balancer2_i dd mr)\n            ))\n        )\n        (and (> (stx-get-balance tx-sender) ta) (try! (stx-transfer? (- (stx-get-balance tx-sender) ta) tx-sender 'SPAG3YDTNKR58Z6X1RK74N861MXJ8RCRRE80A11W)))\n        (ok r)\n    )\n)",
    "analysis": {
      "summary": "This contract facilitates token swaps and balance transfers, integrating with external contracts for swapping and transferring tokens.",
      "explanation": "The contract contains functions to convert amounts between different decimal places, swap tokens through external contracts, and transfer balances. It uses constants for conversion rates and error codes, and defines public functions for swapping tokens and transferring balances with checks on minimum return amounts and balance thresholds.\n\n- <L1-L3> define constants for conversion rates and an error code.\n- <L5-L7> `six-to-eight` function converts a uint amount from 6 to 8 decimal places.\n- <L9-L41> `balancer1_i` performs a token swap and checks if the balance increase meets a minimum required change (mrc), then returns the initial and final balances.\n- <L43-L51> `balancer1` calls `balancer1_i`, checks if the sender's balance is above a threshold (ta), and performs a STX transfer if true.\n- <L53-L83> `balancer2_i` is similar to `balancer1_i` but for a different token swap direction.\n- <L85-L93> `balancer2` mirrors `balancer1` functionality for the swap direction in `balancer2_i`.\n- <L95-L105> `balancer` combines the functionalities of `balancer1` and `balancer2`, performing both swaps and a balance transfer if the sender's balance exceeds the threshold.\n\nEach function uses `try!` for calling external contracts, ensuring that any error in those calls will halt execution. `asserts!` is used to ensure the post-swap balance increase is sufficient, with failure resulting in an error. The contract integrates with external AMM pools and routers for token swaps, indicating a DeFi utility.",
      "tags": [
        "DeFi",
        "token-swap",
        "balance-transfer",
        "external-integration"
      ]
    }
  },
  {
    "rank": 43,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.router-xyk-velar-v-1-1",
    "calls": 776,
    "source": ";; router-xyk-velar-v-1-1\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait xyk-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-trait-v-1-1.xyk-pool-trait)\n(use-trait share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n\n(define-constant ERR_NOT_AUTHORIZED (err u1001))\n(define-constant ERR_INVALID_AMOUNT (err u1002))\n(define-constant ERR_INVALID_PRINCIPAL (err u1003))\n(define-constant ERR_ALREADY_ADMIN (err u2001))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u2002))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u2003))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u2004))\n(define-constant ERR_SWAP_STATUS (err u4001))\n(define-constant ERR_MINIMUM_RECEIVED (err u4002))\n(define-constant ERR_SWAP_A (err u5001))\n(define-constant ERR_SWAP_B (err u5002))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var swap-status bool true)\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n(define-public (get-quote-a\n    (amount uint)\n    (pool-trait <xyk-pool-trait>)\n    (xyk-reversed bool)\n    (id uint)\n    (swap-fee (tuple (num uint) (den uint)))\n    (velar-reversed bool)\n  )\n  (let (\n    (quote-a (if (is-eq xyk-reversed false)\n                 (try! (contract-call? pool-trait get-dy amount))\n                 (try! (contract-call? pool-trait get-dx amount))))\n    (velar-pool (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-core do-get-pool id))\n    (r0 (if (is-eq velar-reversed false)\n            (get reserve0 velar-pool)\n            (get reserve1 velar-pool)))\n    (r1 (if (is-eq velar-reversed false)\n            (get reserve1 velar-pool)\n            (get reserve0 velar-pool)))\n    (quote-b (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-library get-amount-out\n                   quote-a\n                   r0 r1\n                   swap-fee)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-b\n    (amount uint)\n    (pool-trait <xyk-pool-trait>)\n    (xyk-reversed bool)\n    (id uint)\n    (swap-fee (tuple (num uint) (den uint)))\n    (velar-reversed bool)\n  )\n  (let (\n    (velar-pool (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-core do-get-pool id))\n    (r0 (if (is-eq velar-reversed false)\n            (get reserve0 velar-pool)\n            (get reserve1 velar-pool)))\n    (r1 (if (is-eq velar-reversed false)\n            (get reserve1 velar-pool)\n            (get reserve0 velar-pool)))\n    (quote-a (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-library get-amount-out\n                   amount\n                   r0 r1\n                   swap-fee)))\n    (quote-b (if (is-eq xyk-reversed false)\n                 (try! (contract-call? pool-trait get-dy quote-a))\n                 (try! (contract-call? pool-trait get-dx quote-a))))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (set-swap-status (status bool))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (var-set swap-status status)\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller-in-list (index-of admins-list tx-sender))\n    (admin-to-remove-in-list (index-of admins-list admin))\n    (caller tx-sender)\n  )\n    (asserts! (is-some caller-in-list) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some admin-to-remove-in-list) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removeable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <ft-trait>) (y-token-trait <ft-trait>)\n    (xyk-reversed bool)\n    (id uint)\n    (token0 <ft-trait>) (token1 <ft-trait>)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (if (is-eq xyk-reversed false)\n                (unwrap! (xyk-a pool-trait x-token-trait y-token-trait amount) ERR_SWAP_A)\n                (unwrap! (xyk-b pool-trait x-token-trait y-token-trait amount) ERR_SWAP_A)))\n    (swap-b (unwrap! (velar-a id token0 token1 token-in token-out share-fee-to swap-a) ERR_SWAP_B))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-a\",\n        caller: caller, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          pool-trait: (contract-of pool-trait),\n          x-token-trait: (contract-of x-token-trait),\n          y-token-trait: (contract-of y-token-trait),\n          xyk-reversed: xyk-reversed,\n          id: id,\n          token0: (contract-of token0),\n          token1: (contract-of token1),\n          token-in: (contract-of token-in),\n          token-out: (contract-of token-out),\n          share-fee-to: (contract-of share-fee-to)\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <ft-trait>) (y-token-trait <ft-trait>)\n    (xyk-reversed bool)\n    (id uint)\n    (token0 <ft-trait>) (token1 <ft-trait>)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (unwrap! (velar-a id token0 token1 token-in token-out share-fee-to amount) ERR_SWAP_A))\n    (swap-b (if (is-eq xyk-reversed false)\n                (unwrap! (xyk-a pool-trait x-token-trait y-token-trait swap-a) ERR_SWAP_B)\n                (unwrap! (xyk-b pool-trait x-token-trait y-token-trait swap-a) ERR_SWAP_B)))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-b\",\n        caller: caller, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          pool-trait: (contract-of pool-trait),\n          x-token-trait: (contract-of x-token-trait),\n          y-token-trait: (contract-of y-token-trait),\n          xyk-reversed: xyk-reversed,\n          id: id,\n          token0: (contract-of token0),\n          token1: (contract-of token1),\n          token-in: (contract-of token-in),\n          token-out: (contract-of token-out),\n          share-fee-to: (contract-of share-fee-to)\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-private (xyk-a\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <ft-trait>) (y-token-trait <ft-trait>)\n    (x-amount uint)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y\n                  pool-trait\n                  x-token-trait y-token-trait\n                  x-amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (xyk-b\n    (pool-trait <xyk-pool-trait>)\n    (x-token-trait <ft-trait>) (y-token-trait <ft-trait>)\n    (y-amount uint)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x\n                  pool-trait\n                  x-token-trait y-token-trait\n                  y-amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (velar-a\n    (id uint)\n    (token0 <ft-trait>) (token1 <ft-trait>)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n    (amt-in uint)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n                  id \n                  token0 token1\n                  token-in token-out\n                  share-fee-to\n                  amt-in u1)))\n  )\n    (ok (get amt-out swap-a))\n  )\n)\n\n(define-private (admin-not-removeable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)",
    "analysis": {
      "summary": "This contract facilitates token swaps using XYK and Velar pool mechanisms, with administrative controls over swap functionality.",
      "explanation": "The contract integrates with external XYK and Velar pool contracts to perform token swaps, offering two primary public functions for getting quotes and executing swaps, alongside administrative functions to manage swap availability and admin privileges.\n\n- **Use of Traits** (<L1-3>): The contract uses traits to interact with external contracts, ensuring that those contracts implement specific functions required for swapping tokens.\n\n- **Error Codes** (<L5-15>): Defines constants for error handling, improving readability and maintainability.\n\n- **Administrative Controls**:\n  - **Admins Management** (<L17-18>, <L20-85>): Manages a list of admin principals with the ability to add or remove admins, restricted by checks for authorization and list limits.\n  - **Swap Status** (<L86-102>): Allows admins to enable or disable the swap functionality, ensuring operational control.\n\n- **Swap Functions**:\n  - **get-quote-a/b** (<L103-137>, <L138-172>): Calculate the output amount for a given input amount by interacting with both XYK and Velar pools, considering swap fees and pool reserves.\n  - **swap-helper-a/b** (<L173-242>, <L243-312>): Execute swaps by first performing a swap on one pool and then on another, with checks for minimum received amounts to protect users from slippage.\n\n- **Private Helper Functions** (<L313-355>): Perform the actual swap logic by calling the respective swap functions on the XYK and Velar pool contracts.\n\n- **Security and Access Control**: The contract employs a pattern of administrative control, where certain actions can only be performed by listed admins. This pattern is crucial for managing operational aspects of the contract, such as enabling or disabling swaps to respond to market conditions or security incidents.\n\n- **Inter-Contract Communication**: Demonstrates extensive use of `contract-call?` for inter-contract communication, a core feature of Clarity that enables contracts to interact with each other in a composable ecosystem.",
      "tags": [
        "DeFi",
        "token-swap",
        "XYK-pool",
        "Velar-pool",
        "administrative-controls"
      ]
    }
  },
  {
    "rank": 44,
    "contract": "SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.farming-campaign-v2-02",
    "calls": 742,
    "source": ";; SPDX-License-Identifier: BUSL-1.1\n\n(use-trait ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait) \n\n(define-constant err-not-authorized (err u1000))\n(define-constant err-get-block-info (err u1001))\n(define-constant err-invalid-campaign-registration (err u1002))\n(define-constant err-invalid-campaign-id (err u1003))\n(define-constant err-registration-cutoff-passed (err u1004))\n(define-constant err-stake-cutoff-passed (err u1005))\n(define-constant err-campaign-not-ended (err u1006))\n(define-constant err-token-mismatch (err u1007))\n(define-constant err-invalid-input (err u1008))\n(define-constant err-invalid-reward-token (err u1010))\n(define-constant err-already-claimed (err u1011))\n(define-constant err-stake-end-passed (err u1005))\n(define-constant err-not-registered (err u1013))\n(define-constant err-revoke-disabled (err u1014))\n(define-constant err-registration-cutoff-not-passed (err u1015))\n(define-constant err-voting-cutoff-passed (err u1016))\n(define-constant err-pool-not-registered (err u1017))\n(define-constant err-pool-already-registered (err u1018))\n\n(define-constant ONE_8 u100000000)\n\n(define-data-var campaign-nonce uint u1) ;; the old version already used u0\n(define-data-var revoke-enabled bool false)\n(define-data-var whitelisted-pools (list 1000 uint) (list))\n(define-data-var project-reward-ignore-list (list 1000 principal) (list))\n\n(define-map campaigns uint { registration-cutoff: uint, voting-cutoff: uint, stake-cutoff: uint, stake-end: uint, reward-amount: uint, snapshot-block: uint }) ;; Campaign data.\n(define-map campaign-registrations { campaign-id: uint, pool-id: uint } { reward-amount-x: uint, reward-amount-y: uint, total-staked: uint }) ;; Registration data of particular pool.\n(define-map campaign-stakers { campaign-id: uint, pool-id: uint, staker: principal } { amount: uint, claimed: bool }) ;; Staker data of particular pool.\n(define-map campaign-total-vote uint uint) ;; campaign-id -> total-votes\n(define-map campaign-registered-pools uint (list 1000 uint)) ;; campaign-id -> pool-ids\n(define-map campaign-registrants { campaign-id: uint, pool-id: uint, registrant: principal } { token-x-amount: uint, token-y-amount: uint }) ;; Needed for revoke adding rewards\n(define-map campaign-voter-votes { campaign-id: uint, voter: principal } uint) ;; Tracks how much voting power a voter has spent across all pools in a campaign\n(define-map campaign-pool-votes-by-voter { campaign-id: uint, pool-id: uint, voter: principal } uint) ;; Tracks votes per pool per voter - used for project reward calculation\n(define-map campaign-pool-votes-for-project-reward { campaign-id: uint, pool-id: uint } uint) ;; Tracks total votes per pool for project reward distribution\n(define-map campaign-pool-votes-for-alex-reward { campaign-id: uint, pool-id: uint } uint) ;; Tracks total votes per pool for ALEX reward distribution\n(define-map campaign-vote-rewards-claimed { campaign-id: uint, pool-id: uint, voter: principal } bool) ;; Add new map for tracking claimed vote rewards\n\n;; read-only functions\n\n;; __IF_MAINNET__\t\t\t\t\n(define-read-only (block-timestamp)\n  (ok (unwrap! (get-stacks-block-info? time (- stacks-block-height u1)) err-get-block-info)))\n;; (define-data-var custom-timestamp (optional uint) none)\n;; (define-public (set-custom-timestamp (new-timestamp (optional uint)))\n;;     (begin\n;;         (try! (is-dao-or-extension))\n;;         (var-set custom-timestamp new-timestamp)\n;;         (ok true)))\n;; (define-read-only (block-timestamp)\n;;     (match (var-get custom-timestamp)\n;;         timestamp (ok timestamp)\n;;         (ok (unwrap! (get-stacks-block-info? time (- stacks-block-height u1)) err-get-block-info))))\n;; __ENDIF__\n(define-read-only (is-dao-or-extension) (ok (asserts! (or (is-eq tx-sender 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.executor-dao) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.executor-dao is-extension contract-caller)) err-not-authorized)))\n(define-read-only (get-campaign-nonce) (var-get campaign-nonce))\n(define-read-only (get-campaign-or-fail (campaign-id uint)) (ok (unwrap! (map-get? campaigns campaign-id) err-invalid-campaign-id)))\n(define-read-only (get-campaigns-or-fail-many (campaign-ids (list 200 uint))) (map get-campaign-or-fail campaign-ids))\n(define-read-only (get-campaign-registration-by-id-or-fail (campaign-id uint) (pool-id uint)) (ok (unwrap! (map-get? campaign-registrations { campaign-id: campaign-id, pool-id: pool-id }) err-invalid-campaign-registration)))\n(define-read-only (get-campaign-registration-by-id-or-fail-many (campaign-ids (list 200 uint)) (pool-ids (list 200 uint))) (map get-campaign-registration-by-id-or-fail campaign-ids pool-ids))\n(define-read-only (get-campaign-staker-or-default (campaign-id uint) (pool-id uint) (staker principal)) (default-to { amount: u0, claimed: false } (map-get? campaign-stakers { campaign-id: campaign-id, pool-id: pool-id, staker: staker })))\n(define-read-only (get-campaign-staker-or-default-many (campaign-ids (list 200 uint)) (pool-ids (list 200 uint)) (stakers (list 200 principal))) (map get-campaign-staker-or-default campaign-ids pool-ids stakers))\n(define-read-only (get-pool-whitelisted (pool-id uint)) (is-some (index-of (var-get whitelisted-pools) pool-id)))\n(define-read-only (get-whitelisted-pools) (var-get whitelisted-pools))\n\n(define-read-only (voting-power (campaign-id uint) (address principal) (lp-pools (list 200 uint)))\n  (let ((campaign (unwrap! (map-get? campaigns campaign-id) err-invalid-campaign-id))\n        (snapshot-block (get snapshot-block campaign))\n        (snapshot-block-id (unwrap-panic (get-stacks-block-info? id-header-hash snapshot-block)))\n        (snapshot-data (at-block snapshot-block-id\n          (let ((alex-balance (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance-fixed address)))\n                (auto-alex-balance (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wlialex get-balance-fixed address)))\n                (wrapped-auto-alex-balance \n\t\t\t\t\t\t\t\t\t(let ((bal-base (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-wrapped get-shares-to-tokens (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-wrapped get-balance address))))\n\t\t\t\t\t\t\t\t\t\t\t(decimals-base (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-wrapped get-decimals))))\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t(if (is-eq decimals-base u8) bal-base (/ (* bal-base ONE_8) (pow u10 decimals-base)))))\t\t\t\t\t\t\t\t\t\n                (manual-balance (match (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2 get-user-id address)\n                  some-value (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2 get-staker-at-cycle-or-default (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2 get-reward-cycle tenure-height)) some-value)\n                  { amount-staked: u0, to-return: u0 }))\n\t\t\t\t\t\t\t\t(lp-voting-power (fold calculate-lp-voting-power lp-pools { address: address, total: u0 })))\n            { alex: alex-balance, auto-alex: auto-alex-balance, manual-alex: (+ (get amount-staked manual-balance) (get to-return manual-balance)), lp-power: (get total lp-voting-power), wrapped: wrapped-auto-alex-balance })))\n        (total-voting-power (+ (get alex snapshot-data) (get auto-alex snapshot-data) (get manual-alex snapshot-data) (get lp-power snapshot-data) (get wrapped snapshot-data)))\n        (voted-amount (default-to u0 (map-get? campaign-voter-votes { campaign-id: campaign-id, voter: address }))))\n    (ok { voting-power: total-voting-power, voted: voted-amount, snapshot-data: snapshot-data })))\n\n(define-read-only (get-campaign-registered-pools (campaign-id uint)) (ok (default-to (list) (map-get? campaign-registered-pools campaign-id))))\n\n(define-read-only (get-campaign-summary (campaign-id uint))\n  (let ((campaign (unwrap! (map-get? campaigns campaign-id) (err err-invalid-campaign-id)))\n        (registered-pool-ids (default-to (list) (map-get? campaign-registered-pools campaign-id)))\n        (pool-summaries-result (fold get-pool-summary-fold registered-pool-ids { campaign-id: campaign-id, summaries: (list) }))\n        (total-votes (default-to u0 (map-get? campaign-total-vote campaign-id))))\n    (ok (merge campaign { pool-summaries: (get summaries pool-summaries-result), total-votes: total-votes }))))\n\n(define-read-only (get-campaign-staker-history-many (address principal) (campaign-ids (list 200 uint)))\n  (get history (fold get-campaign-staker-history campaign-ids { address: address, history: (list) })))\n\n(define-read-only (get-registration-or-default (campaign-id uint) (pool-id uint) (registrant principal))\n  (default-to { token-x-amount: u0, token-y-amount: u0 } (map-get? campaign-registrants { campaign-id: campaign-id, pool-id: pool-id, registrant: registrant })))\n\n(define-read-only (get-registration-or-default-many (campaign-id uint) (pool-ids (list 1000 uint)) (registrant principal))\n  (fold get-registration-fold pool-ids { campaign-id: campaign-id, registrant: registrant, registrations: (list) }))\n\n(define-read-only (get-revoke-enabled) (var-get revoke-enabled))\n\n(define-read-only (get-project-reward-ignore-list) (var-get project-reward-ignore-list))\n\n;; public functions\n\n(define-public (stake (pool-id uint) (campaign-id uint) (amount uint))\n  (let ((current-timestamp (try! (block-timestamp)))\n        (campaign-details (try! (get-campaign-or-fail campaign-id)))\n        (campaign-registration-details (try! (get-campaign-registration-by-id-or-fail campaign-id pool-id)))\n        (staker-info (get-campaign-staker-or-default campaign-id pool-id tx-sender))\n        (updated-staker-stake (+ (get amount staker-info) amount))\n        (updated-total-stake (+ (get total-staked campaign-registration-details) amount)))\n    (asserts! (> current-timestamp (get registration-cutoff campaign-details)) err-registration-cutoff-not-passed)\n    (asserts! (< current-timestamp (get stake-cutoff campaign-details)) err-stake-cutoff-passed)\n    (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-amm-pool-v2-01 transfer-fixed pool-id amount tx-sender (as-contract tx-sender)))\n    (map-set campaign-registrations { campaign-id: campaign-id, pool-id: pool-id } (merge campaign-registration-details { total-staked: updated-total-stake }))\n    (map-set campaign-stakers { campaign-id: campaign-id, pool-id: pool-id, staker: tx-sender } { amount: updated-staker-stake, claimed: false })\n    (print { notification: \"stake\", payload: { sender: tx-sender, campaign-id: campaign-id, pool-id: pool-id, total-stake: updated-total-stake, staker-stake: updated-staker-stake, amount: amount }})\n    (ok true)))\n\n(define-public (unstake (pool-id uint) (campaign-id uint))\n  (let ((sender tx-sender)\n        (current-timestamp (try! (block-timestamp)))\n        (campaign-details (try! (get-campaign-or-fail campaign-id)))\n        (campaign-registration-details (try! (get-campaign-registration-by-id-or-fail campaign-id pool-id)))\n        (staker-info (get-campaign-staker-or-default campaign-id pool-id sender))\n        (staker-stake (get amount staker-info))\n        (pool-votes (default-to u0 (map-get? campaign-pool-votes-for-alex-reward { campaign-id: campaign-id, pool-id: pool-id })))\n        (total-votes (default-to u0 (map-get? campaign-total-vote campaign-id)))\n        (total-alex-reward-for-pool (if (is-eq total-votes u0) u0 (div-down (mul-down (get reward-amount campaign-details) pool-votes) total-votes)))\n        (alex-reward (div-down (mul-down total-alex-reward-for-pool staker-stake) (get total-staked campaign-registration-details))))\n    (asserts! (< (get stake-end campaign-details) current-timestamp) err-campaign-not-ended)\n    (asserts! (not (get claimed staker-info)) err-already-claimed)\n    (and (> alex-reward u0) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex mint-fixed alex-reward sender)))\n    (map-set campaign-stakers { campaign-id: campaign-id, pool-id: pool-id, staker: sender } { amount: staker-stake, claimed: true })\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-amm-pool-v2-01 transfer-fixed pool-id staker-stake tx-sender sender)))\n    (print { notification: \"unstake\", payload: { sender: tx-sender, campaign-id: campaign-id, pool-id: pool-id, alex-reward: alex-reward, staker-stake: staker-stake }})\n    (ok true)))\n\n(define-public (register-for-campaign (pool-id uint) (campaign-id uint))\n  (let ((current-timestamp (try! (block-timestamp)))\n        (campaign-details (try! (get-campaign-or-fail campaign-id)))\n        (registered-pools (default-to (list) (map-get? campaign-registered-pools campaign-id)))\n        (existing-registration (map-get? campaign-registrations { campaign-id: campaign-id, pool-id: pool-id })))\n    (asserts! (get-pool-whitelisted pool-id) err-not-authorized)\n    (asserts! (< current-timestamp (get registration-cutoff campaign-details)) err-registration-cutoff-passed)\n    (asserts! (is-none existing-registration) err-pool-already-registered)\n    (map-set campaign-registrations { campaign-id: campaign-id, pool-id: pool-id } { reward-amount-x: u0, reward-amount-y: u0, total-staked: u0 })\n    (and (is-none (index-of registered-pools pool-id)) (map-set campaign-registered-pools campaign-id (unwrap! (as-max-len? (append registered-pools pool-id) u1000) err-invalid-input)))\n    (print { notification: \"register-for-campaign\", payload: { sender: tx-sender, campaign-id: campaign-id, pool-id: pool-id }})\n    (ok true)))\n\n(define-public (add-reward-for-campaign (pool-id uint) (campaign-id uint) (reward-token-trait <ft-trait>) (reward-amount uint))\n  (let ((reward-token (contract-of reward-token-trait))\n        (current-timestamp (try! (block-timestamp)))\n        (campaign-details (try! (get-campaign-or-fail campaign-id)))\n        (current-registration (get-registration-or-default campaign-id pool-id tx-sender))\n        (pool-details (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-pool-details-by-id pool-id)))\n        (is-token-x (is-eq reward-token (get token-x pool-details)))\n        (is-token-y (is-eq reward-token (get token-y pool-details))))\n    (asserts! (is-ok (get-campaign-registration-by-id-or-fail campaign-id pool-id)) err-pool-not-registered)\n    (asserts! (< current-timestamp (get voting-cutoff campaign-details)) err-voting-cutoff-passed)\n    (asserts! (or is-token-x is-token-y) err-invalid-reward-token)\n    (and (> reward-amount u0) (try! (contract-call? reward-token-trait transfer-fixed reward-amount tx-sender (as-contract tx-sender) none)))\n    (let ((registration (unwrap! (get-campaign-registration-by-id-or-fail campaign-id pool-id) err-pool-not-registered)))\n      (map-set campaign-registrations { campaign-id: campaign-id, pool-id: pool-id } (merge registration { reward-amount-x: (if is-token-x (+ (get reward-amount-x registration) reward-amount) (get reward-amount-x registration)), reward-amount-y: (if is-token-y (+ (get reward-amount-y registration) reward-amount) (get reward-amount-y registration)) })))\n    (map-set campaign-registrants { campaign-id: campaign-id, pool-id: pool-id, registrant: tx-sender } { token-x-amount: (if is-token-x (+ (get token-x-amount current-registration) reward-amount) (get token-x-amount current-registration)), token-y-amount: (if is-token-y (+ (get token-y-amount current-registration) reward-amount) (get token-y-amount current-registration)) })\n    (print { notification: \"add-reward-for-campaign\", payload: { sender: tx-sender, campaign-id: campaign-id, pool-id: pool-id, reward-token: reward-token, reward-amount-added: reward-amount }})\n    (ok true)))\n\n(define-public (vote-campaign (campaign-id uint) (votes (list 1000 { pool-id: uint, votes: uint })) (lp-pools (list 200 uint)))\n  (let ((campaign (unwrap! (map-get? campaigns campaign-id) err-invalid-campaign-id))\n        (current-timestamp (unwrap! (block-timestamp) err-get-block-info))\n        (voter-power (unwrap! (voting-power campaign-id tx-sender lp-pools) err-invalid-input))\n        (total-new-votes (fold + (map get-votes votes) u0))\n        (previous-votes (default-to u0 (map-get? campaign-voter-votes { campaign-id: campaign-id, voter: tx-sender })))\n        (total-votes-after (+ previous-votes total-new-votes)))\n    (asserts! (> current-timestamp (get registration-cutoff campaign)) err-registration-cutoff-not-passed)\n    (asserts! (< current-timestamp (get voting-cutoff campaign)) err-voting-cutoff-passed)\n    (asserts! (<= total-votes-after (get voting-power voter-power)) err-invalid-input)\n    (fold update-pool-votes votes { campaign-id: campaign-id, voter: tx-sender })\n    (map-set campaign-voter-votes { campaign-id: campaign-id, voter: tx-sender } total-votes-after)\n    (map-set campaign-total-vote campaign-id (+ (default-to u0 (map-get? campaign-total-vote campaign-id)) total-new-votes))\n    (print { notification: \"vote-campaign\", payload: { campaign-id: campaign-id, voter: tx-sender, votes: votes, total-new-votes: total-new-votes, total-votes-after: total-votes-after }})\n    (ok true)))\n\n(define-public (claim-vote-reward (pool-id uint) (campaign-id uint) (reward-token-x-trait <ft-trait>) (reward-token-y-trait <ft-trait>))\n  (let ((sender tx-sender)\n        (current-timestamp (try! (block-timestamp)))\n        (campaign-details (try! (get-campaign-or-fail campaign-id)))\n        (campaign-registration-details (try! (get-campaign-registration-by-id-or-fail campaign-id pool-id)))\n        (pool-details (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-pool-details-by-id pool-id)))\n        (voter-pool-votes (default-to u0 (map-get? campaign-pool-votes-by-voter { campaign-id: campaign-id, pool-id: pool-id, voter: sender })))\n        (pool-total-votes (default-to u0 (map-get? campaign-pool-votes-for-project-reward { campaign-id: campaign-id, pool-id: pool-id })))\n        (already-claimed (default-to false (map-get? campaign-vote-rewards-claimed { campaign-id: campaign-id, pool-id: pool-id, voter: sender })))\n        (is-ignored (is-some (index-of (var-get project-reward-ignore-list) sender)))\n\t\t\t\t(reward-x (div-down (mul-down (get reward-amount-x campaign-registration-details) voter-pool-votes) pool-total-votes))\n\t\t\t\t(reward-y (div-down (mul-down (get reward-amount-y campaign-registration-details) voter-pool-votes) pool-total-votes)))\n    (asserts! (> current-timestamp (get voting-cutoff campaign-details)) err-campaign-not-ended)\n    (asserts! (not already-claimed) err-already-claimed)\n    (asserts! (is-eq (contract-of reward-token-x-trait) (get token-x pool-details)) err-token-mismatch)\n    (asserts! (is-eq (contract-of reward-token-y-trait) (get token-y pool-details)) err-token-mismatch)\n    (asserts! (and (> voter-pool-votes u0) (not is-ignored)) err-invalid-input)\n    (and (> reward-x u0) (as-contract (try! (contract-call? reward-token-x-trait transfer-fixed reward-x tx-sender sender none))))\n    (and (> reward-y u0) (as-contract (try! (contract-call? reward-token-y-trait transfer-fixed reward-y tx-sender sender none))))\n    (map-set campaign-vote-rewards-claimed { campaign-id: campaign-id, pool-id: pool-id, voter: sender } true)\n    (print { notification: \"claim-vote-reward\", payload: { sender: tx-sender, campaign-id: campaign-id, pool-id: pool-id, voter-pool-votes: voter-pool-votes, pool-total-votes: pool-total-votes, reward-x: reward-x, reward-y: reward-y }})\n    (ok { reward-x: reward-x, reward-y: reward-y })))\n\n(define-public (claim-vote-reward-many (pool-ids (list 100 uint)) (campaign-ids (list 100 uint)) (reward-token-x-traits (list 100 <ft-trait>)) (reward-token-y-traits (list 100 <ft-trait>)))\n  (ok (map claim-vote-reward pool-ids campaign-ids reward-token-x-traits reward-token-y-traits)))\n\n;; privileged functions\n\n(define-public (revoke-registration (pool-id uint) (campaign-id uint) (registrant principal) (reward-token-x-trait <ft-trait>) (reward-token-y-trait <ft-trait>))\n  (let ((current-timestamp (try! (block-timestamp)))\n        (campaign-details (try! (get-campaign-or-fail campaign-id)))\n        (current-registration (get-registration-or-default campaign-id pool-id registrant))\n        (campaign-registration (try! (get-campaign-registration-by-id-or-fail campaign-id pool-id)))\n        (pool-details (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-pool-details-by-id pool-id)))\n        (token-x-amount (get token-x-amount current-registration))\n        (token-y-amount (get token-y-amount current-registration)))    \n    (asserts! (or (and (get-revoke-enabled) (is-eq tx-sender registrant)) (is-ok (is-dao-or-extension))) err-not-authorized)\n    (asserts! (or (> token-x-amount u0) (> token-y-amount u0)) err-not-registered)\n    (asserts! (< current-timestamp (get registration-cutoff campaign-details)) err-registration-cutoff-passed)\n    (asserts! (is-eq (contract-of reward-token-x-trait) (get token-x pool-details)) err-token-mismatch)\n    (asserts! (is-eq (contract-of reward-token-y-trait) (get token-y pool-details)) err-token-mismatch)\n    (map-set campaign-registrations { campaign-id: campaign-id, pool-id: pool-id } (merge campaign-registration { reward-amount-x: (- (get reward-amount-x campaign-registration) token-x-amount), reward-amount-y: (- (get reward-amount-y campaign-registration) token-y-amount) }))\n    (map-set campaign-registrants { campaign-id: campaign-id, pool-id: pool-id, registrant: registrant } { token-x-amount: u0, token-y-amount: u0 })\n    (and (> token-x-amount u0) (as-contract (try! (contract-call? reward-token-x-trait transfer-fixed token-x-amount tx-sender registrant none))))\n    (and (> token-y-amount u0) (as-contract (try! (contract-call? reward-token-y-trait transfer-fixed token-y-amount tx-sender registrant none))))\n    (print { notification: \"revoke-registration\", payload: { campaign-id: campaign-id, pool-id: pool-id, registrant: registrant, token-x-amount-refunded: token-x-amount, token-y-amount-refunded: token-y-amount }})\n    (ok true)))\n\n;; governance functions\n\n(define-public (set-campaign-nonce (new-nonce uint))\n  (begin (try! (is-dao-or-extension)) (var-set campaign-nonce new-nonce) (ok true)))\n\n(define-public (set-revoke-enabled (enabled bool))\n  (begin (try! (is-dao-or-extension)) (ok (var-set revoke-enabled enabled))))\n\n(define-public (whitelist-pools (pools (list 1000 uint)))\n  (begin (try! (is-dao-or-extension)) (var-set whitelisted-pools pools) (ok true)))\n\n(define-public (create-campaign (registration-cutoff uint) (voting-cutoff uint) (stake-cutoff uint) (stake-end uint) (reward-amount uint) (snapshot-block uint))\n  (let ((campaign-id (+ (var-get campaign-nonce) u1)))\n    (try! (is-dao-or-extension))\n    (asserts! (< registration-cutoff voting-cutoff) err-invalid-input)\n    (asserts! (<= voting-cutoff stake-cutoff) err-invalid-input)\n    (asserts! (< stake-cutoff stake-end) err-invalid-input)\n    (map-set campaigns campaign-id { registration-cutoff: registration-cutoff, voting-cutoff: voting-cutoff, stake-cutoff: stake-cutoff, stake-end: stake-end, reward-amount: reward-amount, snapshot-block: snapshot-block })\n    (print { notification: \"create-campaign\", payload: { campaign-id: campaign-id, registration-cutoff: registration-cutoff, voting-cutoff: voting-cutoff, stake-cutoff: stake-cutoff, stake-end: stake-end, reward-amount: reward-amount, snapshot-block: snapshot-block }})\n    (var-set campaign-nonce campaign-id)\n    (ok campaign-id)))\n\n(define-public (transfer-token (token-trait <ft-trait>) (amount uint) (recipient principal))\n  (begin (try! (is-dao-or-extension)) (as-contract (contract-call? token-trait transfer-fixed amount tx-sender recipient none))))\n\n(define-public (update-campaign (campaign-id uint) (details { registration-cutoff: uint, voting-cutoff: uint, stake-cutoff: uint, stake-end: uint, reward-amount: uint, snapshot-block: uint }))\n  (let ((campaign-details (try! (get-campaign-or-fail campaign-id))))\n    (try! (is-dao-or-extension))\n    (asserts! (< (get registration-cutoff details) (get voting-cutoff details)) err-invalid-input)\n    (asserts! (<= (get voting-cutoff details) (get stake-cutoff details)) err-invalid-input)\n    (asserts! (< (get stake-cutoff details) (get stake-end details)) err-invalid-input)      \n    (map-set campaigns campaign-id details)\n    (print { notification: \"update-campaign\", payload: { campaign-id: campaign-id, details: details }})\n    (ok true)))\n\n(define-public (update-campaign-registrations (campaign-id uint) (pool-id uint) (reward-amount-x uint) (reward-amount-y uint) (total-staked uint))\n  (let ((registered-pools (default-to (list) (map-get? campaign-registered-pools campaign-id))))\n    (try! (is-dao-or-extension))\n    (map-set campaign-registrations { campaign-id: campaign-id, pool-id: pool-id } { reward-amount-x: reward-amount-x, reward-amount-y: reward-amount-y, total-staked: total-staked })\n    (and (is-none (index-of registered-pools pool-id)) (map-set campaign-registered-pools campaign-id (unwrap! (as-max-len? (append registered-pools pool-id) u1000) err-invalid-input)))\n    (print { notification: \"update-campaign-registrations\", payload: { campaign-id: campaign-id, pool-id: pool-id, reward-amount-x: reward-amount-x, reward-amount-y: reward-amount-y, total-staked: total-staked }})\n    (ok true)))\n\n(define-public (update-campaign-stakers (campaign-id uint) (pool-id uint) (staker principal) (amount uint) (claimed bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (map-set campaign-stakers { campaign-id: campaign-id, pool-id: pool-id, staker: staker } { amount: amount, claimed: claimed })\n    (print { notification: \"update-campaign-stakers\", payload: { campaign-id: campaign-id, pool-id: pool-id, staker: staker, amount: amount, claimed: claimed }})\n    (ok true)))\n\n(define-public (update-campaign-registrants (campaign-id uint) (pool-id uint) (registrant principal) (token-x-amount uint) (token-y-amount uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (map-set campaign-registrants { campaign-id: campaign-id, pool-id: pool-id, registrant: registrant } { token-x-amount: token-x-amount, token-y-amount: token-y-amount })\n    (print { notification: \"update-campaign-registrants\", payload: { campaign-id: campaign-id, pool-id: pool-id, registrant: registrant, token-x-amount: token-x-amount, token-y-amount: token-y-amount }})\n    (ok true)))\n\n(define-public (set-project-reward-ignore-list (addresses (list 1000 principal)))\n  (begin (try! (is-dao-or-extension)) (ok (var-set project-reward-ignore-list addresses))))\n\n;; private functions\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value)))\n\n(define-private (mul-down (a uint) (b uint)) (/ (* a b) ONE_8))\n\n(define-private (div-down (a uint) (b uint)) (if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n\n(define-private (min (a uint) (b uint)) (if (<= a b) a b))\n\n(define-private (max (a uint) (b uint)) (if (>= a b) a b))\n\n(define-private (get-votes (entry { pool-id: uint, votes: uint })) (get votes entry))\n\n(define-private (update-pool-votes (vote { pool-id: uint, votes: uint }) (context { campaign-id: uint, voter: principal }))\n  (let ((campaign-id (get campaign-id context))\n        (voter (get voter context))\n        (pool-id (get pool-id vote))\n        (vote-amount (get votes vote))\n        (current-pool-votes-project (default-to u0 (map-get? campaign-pool-votes-for-project-reward { campaign-id: campaign-id, pool-id: pool-id })))\n        (current-pool-votes-alex (default-to u0 (map-get? campaign-pool-votes-for-alex-reward { campaign-id: campaign-id, pool-id: pool-id })))\n        (current-voter-pool-votes (default-to u0 (map-get? campaign-pool-votes-by-voter { campaign-id: campaign-id, pool-id: pool-id, voter: voter })))\n        (is-ignored (is-some (index-of (var-get project-reward-ignore-list) voter))))\n    (and (not is-ignored) (map-set campaign-pool-votes-for-project-reward { campaign-id: campaign-id, pool-id: pool-id } (+ current-pool-votes-project vote-amount)))\n    (map-set campaign-pool-votes-for-alex-reward { campaign-id: campaign-id, pool-id: pool-id } (+ current-pool-votes-alex vote-amount))\n    (map-set campaign-pool-votes-by-voter { campaign-id: campaign-id, pool-id: pool-id, voter: voter } (+ current-voter-pool-votes vote-amount))\n    context))\n\n(define-private (calculate-lp-voting-power (pool-id uint) (acc { address: principal, total: uint }))\n  (let ((pool-tokens (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-registry-v2-01 get-pool-details-by-id pool-id)))\n        (pool-details (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-pool-details (get token-x pool-tokens) (get token-y pool-tokens) (get factor pool-tokens))))\n        (total-supply (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-amm-pool-v2-01 get-total-supply pool-id)))\n        (user-farm-details (match (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-farming get-user-id 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-amm-pool-v2-01 pool-id (get address acc))\n          some-value (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-farming get-staker-at-cycle-or-default 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-amm-pool-v2-01 pool-id (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-farming get-reward-cycle 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-amm-pool-v2-01 pool-id tenure-height)) some-value)\n          { amount-staked: u0, to-return: u0 }))\n        (user-lp-balance (+ (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-amm-pool-v2-01 get-balance pool-id (get address acc))) (get amount-staked user-farm-details) (get to-return user-farm-details)))\n        (alex-from-x (if (or (is-eq (get token-x pool-tokens) 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex) (is-eq (get token-x pool-tokens) 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3)) (/ (* user-lp-balance (get balance-x pool-details)) total-supply) u0))\n        (alex-from-y (if (or (is-eq (get token-y pool-tokens) 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex) (is-eq (get token-y pool-tokens) 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3)) (/ (* user-lp-balance (get balance-y pool-details)) total-supply) u0)))\n    (merge acc { total: (+ (get total acc) alex-from-x alex-from-y) })))\n\n(define-private (get-pool-summary-fold (pool-id uint) (acc { campaign-id: uint, summaries: (list 1000 { pool-id: uint, votes: uint, project-reward-votes: uint, reward-amount-x: uint, reward-amount-y: uint, total-staked: uint })}))\n  (let ((campaign-id (get campaign-id acc))\n        (registration (unwrap-panic (map-get? campaign-registrations { campaign-id: campaign-id, pool-id: pool-id })))\n        (votes (default-to u0 (map-get? campaign-pool-votes-for-alex-reward { campaign-id: campaign-id, pool-id: pool-id })))\n        (project-reward-votes (default-to u0 (map-get? campaign-pool-votes-for-project-reward { campaign-id: campaign-id, pool-id: pool-id })))\n        (summary { pool-id: pool-id, votes: votes, project-reward-votes: project-reward-votes, reward-amount-x: (get reward-amount-x registration), reward-amount-y: (get reward-amount-y registration), total-staked: (get total-staked registration) }))\n    (merge acc { summaries: (unwrap-panic (as-max-len? (append (get summaries acc) summary) u1000)) })))\n\n(define-private (get-campaign-staker-history (campaign-id uint) (acc { address: principal, history: (list 1000 { campaign-id: uint, pool-id: uint, staker-info: { amount: uint, claimed: bool } }) }))\n  (let ((address (get address acc))\n        (registered-pools (default-to (list) (map-get? campaign-registered-pools campaign-id)))\n        (campaign-history (fold get-pool-staker-history registered-pools { campaign-id: campaign-id, address: address, history: (list) })))\n    (merge acc { history: (unwrap-panic (as-max-len? (concat (get history acc) (get history campaign-history)) u1000)) })))\n\n(define-private (get-pool-staker-history (pool-id uint) (acc { campaign-id: uint, address: principal, history: (list 1000 { campaign-id: uint, pool-id: uint, staker-info: { amount: uint, claimed: bool } }) }))\n  (let ((campaign-id (get campaign-id acc))\n        (address (get address acc))\n        (staker-info (get-campaign-staker-or-default campaign-id pool-id address))\n        (staker-record { campaign-id: campaign-id, pool-id: pool-id, staker-info: staker-info })\n        (updated-history (if (> (get amount (get staker-info staker-record)) u0) (unwrap-panic (as-max-len? (append (get history acc) staker-record) u1000)) (get history acc))))\n    (merge acc { history: updated-history })))\n\n(define-private (get-registration-fold (pool-id uint) (acc { campaign-id: uint, registrant: principal, registrations: (list 1000 { pool-id: uint, token-x-amount: uint, token-y-amount: uint }) }))\n  (let ((campaign-id (get campaign-id acc))\n        (registrant (get registrant acc))\n        (registration-info (get-registration-or-default campaign-id pool-id registrant))\n        (registration { pool-id: pool-id, token-x-amount: (get token-x-amount registration-info), token-y-amount: (get token-y-amount registration-info) }))\n    (merge acc { registrations: (unwrap-panic (as-max-len? (append (get registrations acc) registration) u1000)) })))\n",
    "analysis": {
      "summary": "This contract manages campaigns for staking, voting, and rewards distribution in a decentralized finance (DeFi) ecosystem.",
      "explanation": "The contract facilitates the creation and management of campaigns where users can stake tokens, vote, and claim rewards. It supports functionalities like staking tokens in campaigns, voting for pools within campaigns, adding rewards to campaigns, claiming vote rewards, and governance actions such as creating campaigns and whitelisting pools.\n\n- The contract uses several data maps to store campaigns, registrations, stakers, votes, and rewards information. For example, the `campaigns` map stores the details of each campaign, including cutoff times and reward amounts, while the `campaign-stakers` map tracks how much each user has staked in a pool for a campaign.\n- It defines errors for various failure states, such as unauthorized actions or invalid inputs <L3-22>.\n- Constants like `ONE_8` are used for decimal precision in calculations <L23>.\n- The contract includes read-only functions to get campaign details, check registration status, calculate voting power, and more. These functions facilitate querying campaign states without altering the contract state <L29-113>.\n- Public functions allow users to interact with campaigns by staking tokens, voting, adding rewards, and claiming rewards. These functions change the state of the contract based on the actions performed <L115-277>.\n- Privileged functions are available for governance actions, such as creating campaigns, setting campaign parameters, and whitelisting pools. These functions can only be executed by authorized users, ensuring that only trusted parties can perform sensitive operations <L279-377>.\n- Private helper functions perform calculations and state updates internally, supporting the public and privileged functions with common tasks like multiplying and dividing with precision or updating vote counts <L379-540>.\n\nThe contract leverages Clarity's features such as traits, maps, and data variables to create a comprehensive system for managing DeFi campaigns. It demonstrates advanced Clarity concepts like contract calls, error handling, data storage, and access control.",
      "tags": [
        "DeFi",
        "staking",
        "voting",
        "rewards",
        "governance"
      ]
    }
  },
  {
    "rank": 45,
    "contract": "SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hoot-dex",
    "calls": 730,
    "source": ";; Index Contract - Combined LP Token and AMM implementation\n\n;; Implement SIP-010 trait\n(impl-trait .charisma-traits-v1.sip010-ft-trait)\n\n;; Define the LP token\n(define-fungible-token index)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant CONTRACT (as-contract tx-sender))\n(define-constant ERR_UNAUTHORIZED (err u401))\n(define-constant MAX_SWAP_FEE u50000) ;; 5%\n(define-constant FEE_DENOMINATION u1000000)\n(define-constant ERR_INVALID_FEE (err u402))\n(define-constant PRECISION u1000000)\n(define-constant MAX_ALPHA u1000000) ;; 1.0 in fixed point\n(define-constant MIN_ALPHA u0)       ;; 0.0 = constant sum (stableswap)\n                                     ;; 1.0 = constant product\n\n;; Storage\n(define-data-var owner principal DEPLOYER)\n(define-data-var alpha uint u1000000) ;; Default to constant product\n(define-data-var token-name (string-ascii 32) \"HooterDex\")\n(define-data-var token-symbol (string-ascii 10) \"HDX\")\n(define-data-var token-uri (optional (string-utf8 256)) \n  (some u\"https://charisma.rocks/sip10/hooter/metadata.json\"))\n(define-data-var contract-uri (optional (string-utf8 256)) \n  (some u\"https://charisma.rocks/api/v0/interactions/engines/hooterdex\"))\n(define-data-var swap-fee uint u4000) ;; Default 0.4%\n(define-data-var first-start-block uint stacks-block-height)\n\n(define-map last-tap-block principal uint)\n\n;; Configuration functions\n\n(define-public (set-owner (new-owner principal))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set owner new-owner))))\n\n(define-public (set-alpha (new-alpha uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (asserts! (<= new-alpha MAX_ALPHA) ERR_UNAUTHORIZED)\n    (ok (var-set alpha new-alpha))))\n\n(define-public (set-swap-fee (new-fee uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (asserts! (<= new-fee MAX_SWAP_FEE) ERR_UNAUTHORIZED)\n    (ok (var-set swap-fee new-fee))))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if (is-eq contract-caller (var-get owner))\n    (ok (var-set token-uri (some value))) \n    ERR_UNAUTHORIZED))\n\n(define-public (set-contract-uri (new-uri (optional (string-utf8 256))))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set contract-uri new-uri))))\n\n;; Core AMM operations\n\n(define-private (calculate-output-amount \n    (x uint)     ;; reserve in\n    (y uint)     ;; reserve out\n    (dx uint)    ;; amount in\n    (amp uint))  ;; alpha parameter\n  (let (\n    ;; Constant sum portion (better for similar values)\n    (sum-term (/ (* dx y) x))\n    \n    ;; Constant product portion (better for different values)\n    (product-term (/ (* dx y) (+ x dx)))\n    \n    ;; Weighted sum of both terms\n    (weighted-output (+ (* (- PRECISION amp) sum-term)\n                       (* amp product-term)))\n  )\n    (/ weighted-output PRECISION)))\n\n(define-public (swap (forward bool) (amt-in uint))\n  (let (\n    (sender tx-sender)\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? .hooter-the-owl get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? .hooter-the-owl get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    (paid-energy (match (contract-call? .charisma-rulebook-v0 exhaust u10000000 sender) success true error false))\n    ;; Calculate effective input amount\n    (effective-in (if paid-energy amt-in (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION)))\n    ;; Calculate output with hybrid curve\n    (amt-out (calculate-output-amount \n               reserve-in \n               reserve-out \n               effective-in\n               (var-get alpha)))\n  )\n    (try! (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-in sender CONTRACT none) \n      (contract-call? .hooter-the-owl transfer amt-in sender CONTRACT none)))\n    (try! (as-contract (if forward (contract-call? .hooter-the-owl transfer amt-out CONTRACT sender none)\n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-out CONTRACT sender none))))\n    \n    (ok {amt-in: amt-in, amt-out: amt-out})))\n\n(define-public (mint (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? .hooter-the-owl get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (if (is-eq total-supply u0)\n                      amount\n                      (/ (* amount reserve0) total-supply)))\n    (token1-amount (if (is-eq total-supply u0)\n                      amount\n                      (/ (* amount reserve1) total-supply)))\n  )\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token0-amount who CONTRACT none))\n    (try! (contract-call? .hooter-the-owl transfer token1-amount who CONTRACT none))\n    (try! (ft-mint? index amount who))\n    \n    (ok {token0-amount: token0-amount, \n         token1-amount: token1-amount, \n         lp-amount: amount})))\n\n(define-public (burn (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? .hooter-the-owl get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (/ (* amount reserve0) total-supply))\n    (token1-amount (/ (* amount reserve1) total-supply))\n  )\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (ft-burn? index amount who))\n    (try! (as-contract (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token0-amount CONTRACT who none)))\n    (try! (as-contract (contract-call? .hooter-the-owl transfer token1-amount CONTRACT who none)))\n    \n    (ok {token0-amount: token0-amount, \n         token1-amount: token1-amount, \n         lp-amount: amount})))\n\n;; Read functions\n\n(define-read-only (get-owner)\n  (ok (var-get owner)))\n\n(define-read-only (get-alpha)\n  (ok (var-get alpha)))\n\n(define-read-only (get-tokens)\n  (ok {token0: 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token, token1: .hooter-the-owl}))\n\n(define-read-only (get-swap-fee)\n  (ok (var-get swap-fee)))\n\n(define-read-only (get-reserves)\n  (ok {\n    token0: (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)),\n    token1: (unwrap-panic (contract-call? .hooter-the-owl get-balance CONTRACT))\n  }))\n\n(define-read-only (get-quote (forward bool) (amt-in uint) (apply-fee bool))\n  (let (\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? .hooter-the-owl get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? .hooter-the-owl get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    ;; Apply fee if requested\n    (effective-in (if apply-fee\n                     (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) \n                        FEE_DENOMINATION)\n                     amt-in))\n  )\n    (ok (calculate-output-amount \n          reserve-in \n          reserve-out \n          effective-in \n          (var-get alpha)))))\n\n;; SIP-010 Implementation\n(define-read-only (get-name)\n  (ok (var-get token-name)))\n\n(define-read-only (get-symbol)\n  (ok (var-get token-symbol)))\n\n(define-read-only (get-decimals)\n  (ok u6))\n\n(define-read-only (get-balance (who principal))\n  (ok (ft-get-balance index who)))\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply index)))\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri)))\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender from) ERR_UNAUTHORIZED)\n    (ft-transfer? index amount from to)))\n\n\n;; Hold-to-Earn functions\n\n(define-private (get-balance-at (data { address: principal, block: uint }))\n    (let ((target-block (get block data)))\n        (if (< target-block stacks-block-height)\n            (let ((block-hash (unwrap-panic (get-stacks-block-info? id-header-hash target-block))))\n                (at-block block-hash (unwrap-panic (get-balance (get address data)))))\n                (unwrap-panic (get-balance (get address data))))))\n\n(define-private (calculate-trapezoid-areas-39 (balances (list 39 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u18)) (unwrap-panic (element-at balances u19))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u19)) (unwrap-panic (element-at balances u20))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u20)) (unwrap-panic (element-at balances u21))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u21)) (unwrap-panic (element-at balances u22))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u22)) (unwrap-panic (element-at balances u23))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u23)) (unwrap-panic (element-at balances u24))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u24)) (unwrap-panic (element-at balances u25))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u25)) (unwrap-panic (element-at balances u26))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u26)) (unwrap-panic (element-at balances u27))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u27)) (unwrap-panic (element-at balances u28))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u28)) (unwrap-panic (element-at balances u29))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u29)) (unwrap-panic (element-at balances u30))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u30)) (unwrap-panic (element-at balances u31))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u31)) (unwrap-panic (element-at balances u32))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u32)) (unwrap-panic (element-at balances u33))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u33)) (unwrap-panic (element-at balances u34))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u34)) (unwrap-panic (element-at balances u35))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u35)) (unwrap-panic (element-at balances u36))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u36)) (unwrap-panic (element-at balances u37))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u37)) (unwrap-panic (element-at balances u38))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-19 (balances (list 19 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-9 (balances (list 9 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-5 (balances (list 5 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-2 (balances (list 2 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)))\n\n(define-private (calculate-balance-integral-39 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? .meme-engine-manager-rc2 generate-sample-points-39 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u38))\n        (areas (calculate-trapezoid-areas-39 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-19 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? .meme-engine-manager-rc2 generate-sample-points-19 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u18))\n        (areas (calculate-trapezoid-areas-19 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-9 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? .meme-engine-manager-rc2 generate-sample-points-9 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u8))\n        (areas (calculate-trapezoid-areas-9 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-5 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? .meme-engine-manager-rc2 generate-sample-points-5 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u4))\n        (areas (calculate-trapezoid-areas-5 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-2 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? .meme-engine-manager-rc2 generate-sample-points-2 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u1))\n        (areas (calculate-trapezoid-areas-2 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral (address principal) (start-block uint) (end-block uint))\n    (let (\n        (block-difference (- end-block start-block))\n        (thresholds (unwrap-panic (contract-call? .meme-engine-manager-rc2 get-thresholds))))\n        (if (>= block-difference (get threshold-39-point thresholds)) (calculate-balance-integral-39 address start-block end-block)\n        (if (>= block-difference (get threshold-19-point thresholds)) (calculate-balance-integral-19 address start-block end-block)\n        (if (>= block-difference (get threshold-9-point thresholds)) (calculate-balance-integral-9 address start-block end-block)\n        (if (>= block-difference (get threshold-5-point thresholds)) (calculate-balance-integral-5 address start-block end-block)\n        (calculate-balance-integral-2 address start-block end-block)))))))\n\n(define-read-only (get-last-tap-block (address principal))\n    (default-to (var-get first-start-block) (map-get? last-tap-block address)))\n\n(define-read-only (get-contract-uri)\n  (ok (var-get contract-uri)))\n\n(define-public (tap)\n  (let (\n    (sender tx-sender)\n    (end-block stacks-block-height)\n    (start-block (get-last-tap-block sender))\n    (balance-integral (calculate-balance-integral sender start-block end-block))\n    (incentive-score (contract-call? .aura get-incentive-score CONTRACT))\n    (circulating-supply (unwrap-panic (get-total-supply)))\n    (potential-energy (/ (* balance-integral incentive-score) circulating-supply)))\n    (map-set last-tap-block sender end-block)\n    (contract-call? .charisma-rulebook-v0 energize potential-energy sender)))",
    "analysis": {
      "summary": "This contract combines an Automated Market Maker (AMM) for swapping tokens and a Liquidity Provider (LP) token functionality, with a unique feature of rewarding users based on their hold-to-earn mechanism.",
      "explanation": "The contract implements the SIP-010 standard for fungible tokens, allowing it to create and manage its own LP token named 'index'. It features core AMM operations for token swapping, liquidity provision (minting/burning LP tokens), and a hold-to-earn mechanism that rewards users based on the duration and amount of tokens they hold. Key components include:\n\n- **SIP-010 Implementation (<L232-242>)**: Defines standard functions for a fungible token, such as `get-name`, `get-symbol`, `get-decimals`, `get-balance`, `get-total-supply`, and `transfer`.\n\n- **LP Token and AMM Setup (<L3-23>)**: Initializes the LP token and sets up constants and variables for the AMM's operation, including fees, the alpha parameter for price calculation, and metadata URLs.\n\n- **Configuration Functions (<L25-61>)**: Allows the contract owner to adjust critical parameters like swap fee, alpha, and ownership.\n\n- **Core AMM Operations (<L63-125>)**: Implements the swap logic with a hybrid curve combining constant product and constant sum formulas, adjusted by the alpha parameter to optimize for different scenarios.\n\n- **Liquidity Provision (<L127-152>, <L154-179>)**: Enables users to mint and burn LP tokens in exchange for providing liquidity to the AMM. The mint function calculates the amount of each token to be deposited based on the current reserves and total supply of LP tokens. The burn function allows users to withdraw their share of the reserves by burning LP tokens.\n\n- **Hold-to-Earn Mechanism (<L184-303>)**: Utilizes a sophisticated method to calculate rewards for users based on their token holding patterns over time. It involves generating sample points, calculating the area under the balance-time curve (using trapezoidal rule approximations), and then rewarding users based on this calculated 'balance integral'.\n\n- **Read Functions (<L181-231>, <L305-314>)**: Provide access to contract state information, such as reserves, swap fee, and contract URI, and enable users to estimate swap outcomes with or without fees applied.\n\nOverall, the contract is designed to incentivize liquidity provision and long-term holding through its AMM functionality and unique hold-to-earn rewards system.",
      "tags": [
        "AMM",
        "LP-token",
        "fungible-token",
        "hold-to-earn",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 46,
    "contract": "SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2",
    "calls": 730,
    "source": "\n;; stableswap-core-v-1-2\n\n;; Use Stableswap pool trait and SIP 010 trait\n(use-trait stableswap-pool-trait .stableswap-pool-trait-v-1-2.stableswap-pool-trait)\n(use-trait sip-010-trait .sip-010-trait-ft-standard-v-1-1.sip-010-trait)\n\n;; Error constants\n(define-constant ERR_NOT_AUTHORIZED (err u1001))\n(define-constant ERR_INVALID_AMOUNT (err u1002))\n(define-constant ERR_INVALID_PRINCIPAL (err u1003))\n(define-constant ERR_ALREADY_ADMIN (err u1004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u1005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u1006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u1007))\n(define-constant ERR_NO_POOL_DATA (err u1008))\n(define-constant ERR_POOL_NOT_CREATED (err u1009))\n(define-constant ERR_POOL_DISABLED (err u1010))\n(define-constant ERR_POOL_ALREADY_CREATED (err u1011))\n(define-constant ERR_INVALID_POOL (err u1012))\n(define-constant ERR_INVALID_POOL_URI (err u1013))\n(define-constant ERR_INVALID_POOL_SYMBOL (err u1014))\n(define-constant ERR_INVALID_POOL_NAME (err u1015))\n(define-constant ERR_MATCHING_TOKEN_CONTRACTS (err u1016))\n(define-constant ERR_INVALID_X_TOKEN (err u1017))\n(define-constant ERR_INVALID_Y_TOKEN (err u1018))\n(define-constant ERR_MINIMUM_X_AMOUNT (err u1019))\n(define-constant ERR_MINIMUM_Y_AMOUNT (err u1020))\n(define-constant ERR_MINIMUM_LP_AMOUNT (err u1021))\n(define-constant ERR_UNEQUAL_POOL_BALANCES (err u1022))\n(define-constant ERR_MINIMUM_D_VALUE (err u1023))\n(define-constant ERR_INVALID_FEE (err u1024))\n(define-constant ERR_MINIMUM_BURN_AMOUNT (err u1025))\n(define-constant ERR_INVALID_MIN_BURNT_SHARES (err u1026))\n\n;; Contract deployer address\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n;; Number of tokens per pair\n(define-constant NUM_OF_TOKENS u2)\n\n;; Multiplier used in swaps to check if amount is less than x10 of balance\n(define-constant MAX_AMOUNT_PER_BALANCE_MULTIPLIER u10)\n\n;; Maximum BPS\n(define-constant BPS u10000)\n\n;; Index loop for using Newton-Raphson method to converge square root that goes up to u384\n(define-constant index-list (list u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31 u32 u33 u34 u35 u36 u37 u38 u39 u40 u41 u42 u43 u44 u45 u46 u47 u48 u49 u50 u51 u52 u53 u54 u55 u56 u57 u58 u59 u60 u61 u62 u63 u64 u65 u66 u67 u68 u69 u70 u71 u72 u73 u74 u75 u76 u77 u78 u79 u80 u81 u82 u83 u84 u85 u86 u87 u88 u89 u90 u91 u92 u93 u94 u95 u96 u97 u98 u99 u100 u101 u102 u103 u104 u105 u106 u107 u108 u109 u110 u111 u112 u113 u114 u115 u116 u117 u118 u119 u120 u121 u122 u123 u124 u125 u126 u127 u128 u129 u130 u131 u132 u133 u134 u135 u136 u137 u138 u139 u140 u141 u142 u143 u144 u145 u146 u147 u148 u149 u150 u151 u152 u153 u154 u155 u156 u157 u158 u159 u160 u161 u162 u163 u164 u165 u166 u167 u168 u169 u170 u171 u172 u173 u174 u175 u176 u177 u178 u179 u180 u181 u182 u183 u184 u185 u186 u187 u188 u189 u190 u191 u192 u193 u194 u195 u196 u197 u198 u199 u200 u201 u202 u203 u204 u205 u206 u207 u208 u209 u210 u211 u212 u213 u214 u215 u216 u217 u218 u219 u220 u221 u222 u223 u224 u225 u226 u227 u228 u229 u230 u231 u232 u233 u234 u235 u236 u237 u238 u239 u240 u241 u242 u243 u244 u245 u246 u247 u248 u249 u250 u251 u252 u253 u254 u255 u256 u257 u258 u259 u260 u261 u262 u263 u264 u265 u266 u267 u268 u269 u270 u271 u272 u273 u274 u275 u276 u277 u278 u279 u280 u281 u282 u283 u284 u285 u286 u287 u288 u289 u290 u291 u292 u293 u294 u295 u296 u297 u298 u299 u300 u301 u302 u303 u304 u305 u306 u307 u308 u309 u310 u311 u312 u313 u314 u315 u316 u317 u318 u319 u320 u321 u322 u323 u324 u325 u326 u327 u328 u329 u330 u331 u332 u333 u334 u335 u336 u337 u338 u339 u340 u341 u342 u343 u344 u345 u346 u347 u348 u349 u350 u351 u352 u353 u354 u355 u356 u357 u358 u359 u360 u361 u362 u363 u364 u365 u366 u367 u368 u369 u370 u371 u372 u373 u374 u375 u376 u377 u378 u379 u380 u381 u382 u383 u384))\n\n;; Admins list and helper var used to remove admins\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n;; ID of last created pool\n(define-data-var last-pool-id uint u0)\n\n;; Minimum shares required to mint when creating a pool\n(define-data-var minimum-total-shares uint u10000)\n\n;; Minimum shares required to burn when creating a pool\n(define-data-var minimum-burnt-shares uint u1000)\n\n;; Data var used to enable or disable pool creation by anyone\n(define-data-var public-pool-creation bool false)\n\n;; Define pools map\n(define-map pools uint {\n    id: uint,\n    name: (string-ascii 32),\n    symbol: (string-ascii 32),\n    pool-contract: principal\n})\n\n;; Get admins list\n(define-read-only (get-admins)\n    (ok (var-get admins))\n)\n\n;; Get admin helper var\n(define-read-only (get-admin-helper)\n    (ok (var-get admin-helper))\n)\n\n;; Get ID of last created pool\n(define-read-only (get-last-pool-id)\n    (ok (var-get last-pool-id))\n)\n\n;; Get a pool by pool ID\n(define-read-only (get-pool-by-id (id uint))\n    (ok (map-get? pools id))\n)\n\n;; Get minimum shares required to mint when creating a pool\n(define-read-only (get-minimum-total-shares)\n    (ok (var-get minimum-total-shares))\n)\n\n;; Get minimum shares required to burn when creating a pool\n(define-read-only (get-minimum-burnt-shares)\n    (ok (var-get minimum-burnt-shares))\n)\n\n;; Get public pool creation status\n(define-read-only (get-public-pool-creation)\n    (ok (var-get public-pool-creation))\n)\n\n;; Get DY\n(define-public (get-dy\n    (pool-trait <stableswap-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get x-protocol-fee pool-data))\n    (provider-fee (get x-provider-fee pool-data))\n    (convergence-threshold (get convergence-threshold pool-data))\n    (amplification-coefficient (get amplification-coefficient pool-data))\n    \n    ;; Scale up pool balances and swap amounts to perform AMM calculations with get-y\n    (pool-balances-scaled (scale-up-amounts x-balance y-balance x-token-trait y-token-trait))\n    (x-balance-scaled (get x-amount pool-balances-scaled))\n    (y-balance-scaled (get y-amount pool-balances-scaled))\n    (swap-amounts-scaled (scale-up-amounts x-amount u0 x-token-trait y-token-trait))\n    (x-amount-scaled (get x-amount swap-amounts-scaled))\n    (x-amount-fees-protocol-scaled (/ (* x-amount-scaled protocol-fee) BPS))\n    (x-amount-fees-provider-scaled (/ (* x-amount-scaled provider-fee) BPS))\n    (x-amount-fees-total-scaled (+ x-amount-fees-protocol-scaled x-amount-fees-provider-scaled))\n    (dx-scaled (- x-amount-scaled x-amount-fees-total-scaled))\n    (updated-y-balance-scaled (get-y dx-scaled x-balance-scaled y-balance-scaled amplification-coefficient convergence-threshold))\n    \n    ;; Scale down to precise amounts for y and dy\n    (updated-y-balance (get y-amount (scale-down-amounts u0 updated-y-balance-scaled x-token-trait y-token-trait)))\n    (dy (- y-balance updated-y-balance))\n    )\n    ;; Assert that pool-status is true and correct token traits are used\n    (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n    (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n    (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n    ;; Assert that x-amount is greater than 0 and less than x10 of x-balance\n    (asserts! (and (> x-amount u0) (< x-amount (* x-balance MAX_AMOUNT_PER_BALANCE_MULTIPLIER))) ERR_INVALID_AMOUNT)\n    \n    ;; Return number of y tokens the caller would receive\n    (ok dy)\n    )\n)\n\n;; Get DX\n(define-public (get-dx\n    (pool-trait <stableswap-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (y-amount uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get y-protocol-fee pool-data))\n    (provider-fee (get y-provider-fee pool-data))\n    (convergence-threshold (get convergence-threshold pool-data))\n    (amplification-coefficient (get amplification-coefficient pool-data))\n    \n    ;; Scale up pool balances and swap amounts to perform AMM calculations with get-x\n    (pool-balances-scaled (scale-up-amounts x-balance y-balance x-token-trait y-token-trait))\n    (x-balance-scaled (get x-amount pool-balances-scaled))\n    (y-balance-scaled (get y-amount pool-balances-scaled))\n    (swap-amounts-scaled (scale-up-amounts u0 y-amount x-token-trait y-token-trait))\n    (y-amount-scaled (get y-amount swap-amounts-scaled))\n    (y-amount-fees-protocol-scaled (/ (* y-amount-scaled protocol-fee) BPS))\n    (y-amount-fees-provider-scaled (/ (* y-amount-scaled provider-fee) BPS))\n    (y-amount-fees-total-scaled (+ y-amount-fees-protocol-scaled y-amount-fees-provider-scaled))\n    (dy-scaled (- y-amount-scaled y-amount-fees-total-scaled))\n    (updated-x-balance-scaled (get-x dy-scaled y-balance-scaled x-balance-scaled amplification-coefficient convergence-threshold))\n    \n    ;; Scale down to precise amounts for x and dx\n    (updated-x-balance (get x-amount (scale-down-amounts updated-x-balance-scaled u0 x-token-trait y-token-trait)))\n    (dx (- x-balance updated-x-balance))\n    )\n    ;; Assert that pool-status is true and correct token traits are used\n    (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n    (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n    (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n    ;; Assert that y-amount is greater than 0 and less than x10 of y-balance\n    (asserts! (and (> y-amount u0) (< y-amount (* y-balance MAX_AMOUNT_PER_BALANCE_MULTIPLIER))) ERR_INVALID_AMOUNT)\n    \n    ;; Return number of x tokens the caller would receive\n    (ok dx)\n    )\n)\n\n;; Get DLP\n(define-public (get-dlp\n    (pool-trait <stableswap-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (y-amount uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (total-shares (get total-shares pool-data))\n    (liquidity-fee (get liquidity-fee pool-data))\n    (convergence-threshold (get convergence-threshold pool-data))\n    (amplification-coefficient (get amplification-coefficient pool-data))\n    (updated-x-balance (+ x-balance x-amount))\n    (updated-y-balance (+ y-balance y-amount))\n    \n    ;; Scale up for AMM calculations depending on decimal places assigned to tokens\n    (amounts-added-scaled (scale-up-amounts x-amount y-amount x-token-trait y-token-trait))\n    (x-amount-scaled (get x-amount amounts-added-scaled))\n    (y-amount-scaled (get y-amount amounts-added-scaled))\n    (pool-balances-scaled (scale-up-amounts x-balance y-balance x-token-trait y-token-trait))\n    (x-balance-scaled (get x-amount pool-balances-scaled))\n    (y-balance-scaled (get y-amount pool-balances-scaled))\n    (updated-pool-balances-scaled (scale-up-amounts updated-x-balance updated-y-balance x-token-trait y-token-trait))\n    (updated-x-balance-scaled (get x-amount updated-pool-balances-scaled))\n    (updated-y-balance-scaled (get y-amount updated-pool-balances-scaled))\n    \n    ;; Calculate ideal pool balance\n    (d-a (get-d x-balance-scaled y-balance-scaled amplification-coefficient convergence-threshold))\n    (d-b (get-d updated-x-balance-scaled updated-y-balance-scaled amplification-coefficient convergence-threshold))\n    (ideal-x-balance-scaled (/ (* d-b x-balance-scaled) d-a))\n    (ideal-y-balance-scaled (/ (* d-b y-balance-scaled) d-a))\n    (x-difference (if (> ideal-x-balance-scaled updated-x-balance-scaled) (- ideal-x-balance-scaled updated-x-balance-scaled) (- updated-x-balance-scaled ideal-x-balance-scaled)))\n    (y-difference (if (> ideal-y-balance-scaled updated-y-balance-scaled) (- ideal-y-balance-scaled updated-y-balance-scaled) (- updated-y-balance-scaled ideal-y-balance-scaled)))\n    \n    ;; Calculate fees to apply if adding imbalanced liquidity\n    (ideal-x-amount-fee-liquidity-scaled (/ (* x-difference liquidity-fee) BPS))\n    (ideal-y-amount-fee-liquidity-scaled (/ (* y-difference liquidity-fee) BPS))\n    (x-amount-fee-liquidity-scaled (if (> x-amount-scaled ideal-x-amount-fee-liquidity-scaled) ideal-x-amount-fee-liquidity-scaled x-amount-scaled))\n    (y-amount-fee-liquidity-scaled (if (> y-amount-scaled ideal-y-amount-fee-liquidity-scaled) ideal-y-amount-fee-liquidity-scaled y-amount-scaled))\n    (updated-x-amount-scaled (- x-amount-scaled x-amount-fee-liquidity-scaled))\n    (updated-y-amount-scaled (- y-amount-scaled y-amount-fee-liquidity-scaled))\n    (updated-balance-x-post-fee-scaled (+ x-balance-scaled updated-x-amount-scaled))\n    (updated-balance-y-post-fee-scaled (+ y-balance-scaled updated-y-amount-scaled))\n    (updated-d (get-d updated-balance-x-post-fee-scaled updated-balance-y-post-fee-scaled amplification-coefficient convergence-threshold))\n    \n    ;; Scale down for precise token balance updates and transfers\n    (precise-fees-liquidity (scale-down-amounts x-amount-fee-liquidity-scaled y-amount-fee-liquidity-scaled x-token-trait y-token-trait))\n    (x-amount-fees-liquidity (get x-amount precise-fees-liquidity))\n    (y-amount-fees-liquidity (get y-amount precise-fees-liquidity))\n    (amounts-added (scale-down-amounts updated-x-amount-scaled updated-y-amount-scaled x-token-trait y-token-trait))\n    (updated-x-amount (get x-amount amounts-added))\n    (updated-y-amount (get y-amount amounts-added))\n    (updated-pool-balances-post-fee (scale-down-amounts updated-balance-x-post-fee-scaled updated-balance-y-post-fee-scaled x-token-trait y-token-trait))\n    (updated-x-balance-post-fee (get x-amount updated-pool-balances-post-fee))\n    (updated-y-balance-post-fee (get y-amount updated-pool-balances-post-fee))\n    \n    ;; Check that updated-d is greater than d-a and calculate dlp\n    (minimum-d-check (asserts! (> updated-d d-a) ERR_MINIMUM_D_VALUE))\n    (dlp (/ (* total-shares (- updated-d d-a)) d-a))\n    )\n    ;; Assert that pool-status is true and correct token traits are used\n    (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n    (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n    (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n    ;; Assert that x-amount + y-amount is greater than 0\n    (asserts! (> (+ x-amount y-amount) u0) ERR_INVALID_AMOUNT)\n    \n    ;; Return number of LP tokens caller would receive\n    (ok dlp)\n    )\n)\n\n;; Get x using fold-x-for-loop\n(define-read-only (get-x (y-amount uint) (y-bal uint) (x-bal uint) (amp uint) (threshold uint))\n    (let (\n    (an (* amp NUM_OF_TOKENS))\n    (updated-y-balance (+ y-bal y-amount))\n    (current-d (get-d x-bal y-bal amp threshold))\n    (c-a current-d)\n    (c-b (/ (* c-a current-d) (* NUM_OF_TOKENS updated-y-balance)))\n    (c-c (/ (* c-b current-d) (* an NUM_OF_TOKENS)))\n    (b (+ updated-y-balance (/ current-d an)))\n    )\n    (get converged (fold fold-x-for-loop index-list {x: current-d, c: c-c, b: b, d: current-d, threshold: threshold, converged: u0}))\n    )\n)\n\n;; Get y using fold-y-for-loop\n(define-read-only (get-y (x-amount uint) (x-bal uint) (y-bal uint) (amp uint) (threshold uint))\n    (let (\n    (an (* amp NUM_OF_TOKENS))\n    (updated-x-balance (+ x-bal x-amount))\n    (current-d (get-d x-bal y-bal amp threshold))\n    (c-a current-d)\n    (c-b (/ (* c-a current-d) (* NUM_OF_TOKENS updated-x-balance)))\n    (c-c (/ (* c-b current-d) (* an NUM_OF_TOKENS)))\n    (b (+ updated-x-balance (/ current-d an)))\n    )\n    (get converged (fold fold-y-for-loop index-list {y: current-d, c: c-c, b: b, d: current-d, threshold: threshold, converged: u0}))\n    )\n)\n\n;; Get d using fold-d-for-loop\n(define-read-only (get-d (x-bal uint) (y-bal uint) (amp uint) (threshold uint))\n    (get converged (fold fold-d-for-loop index-list {x-bal: x-bal, y-bal: y-bal, d: (+ x-bal y-bal), an: (* amp NUM_OF_TOKENS), threshold: threshold, converged: u0}))\n)\n\n;; Set minimum shares required to mint and burn when creating a pool\n(define-public (set-minimum-shares (min-total uint) (min-burnt uint))\n    (let (\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and amounts are greater than 0\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (and (> min-total u0) (> min-burnt u0)) ERR_INVALID_AMOUNT)\n        \n        ;; Assert that min-total is greater than min-burnt\n        (asserts! (> min-total min-burnt) ERR_INVALID_MIN_BURNT_SHARES)\n\n        ;; Update minimum-total-shares and minimum-burnt-shares\n        (var-set minimum-total-shares min-total)\n        (var-set minimum-burnt-shares min-burnt)\n\n        ;; Print function data and return true\n        (print {\n        action: \"set-minimum-shares\",\n        caller: caller,\n        data: {\n            min-total: min-total,\n            min-burnt: min-burnt\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Enable or disable public pool creation\n(define-public (set-public-pool-creation (status bool))\n    (let (\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n\n        ;; Set public-pool-creation to status\n        (var-set public-pool-creation status)\n        \n        ;; Print function data and return true\n        (print {action: \"set-public-pool-creation\", caller: caller, data: {status: status}})\n        (ok true)\n    )\n    )\n)\n\n;; Set pool uri for a pool\n(define-public (set-pool-uri (pool-trait <stableswap-pool-trait>) (uri (string-utf8 256)))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Assert that uri length is greater than 0\n        (asserts! (> (len uri) u0) ERR_INVALID_POOL_URI)\n        \n        ;; Set pool uri for pool\n        (try! (contract-call? pool-trait set-pool-uri uri))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-pool-uri\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            uri: uri\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set pool status for a pool\n(define-public (set-pool-status (pool-trait <stableswap-pool-trait>) (status bool))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Set pool status for pool\n        (try! (contract-call? pool-trait set-pool-status status))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-pool-status\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            status: status\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set fee address for a pool\n(define-public (set-fee-address (pool-trait <stableswap-pool-trait>) (address principal))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Assert that address is standard principal\n        (asserts! (is-standard address) ERR_INVALID_PRINCIPAL)\n        \n        ;; Set fee address for pool\n        (try! (contract-call? pool-trait set-fee-address address))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-fee-address\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            address: address\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set x fees for a pool\n(define-public (set-x-fees (pool-trait <stableswap-pool-trait>) (protocol-fee uint) (provider-fee uint))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Assert protocol-fee and provider-fee is less than maximum BPS\n        (asserts! (< (+ protocol-fee provider-fee) BPS) ERR_INVALID_FEE)\n        \n        ;; Assert protocol-fee and provider-fee is less than maximum BPS\n        (try! (contract-call? pool-trait set-x-fees protocol-fee provider-fee))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-x-fees\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            protocol-fee: protocol-fee,\n            provider-fee: provider-fee\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set y fees for a pool\n(define-public (set-y-fees (pool-trait <stableswap-pool-trait>) (protocol-fee uint) (provider-fee uint))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n        \n        ;; Assert protocol-fee and provider-fee is less than maximum BPS\n        (asserts! (< (+ protocol-fee provider-fee) BPS) ERR_INVALID_FEE)\n        \n        ;; Set y fees for pool\n        (try! (contract-call? pool-trait set-y-fees protocol-fee provider-fee))\n        \n        ;; Print function data and return true\n        (print {\n        action: \"set-y-fees\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            protocol-fee: protocol-fee,\n            provider-fee: provider-fee\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set liquidity fee for a pool\n(define-public (set-liquidity-fee (pool-trait <stableswap-pool-trait>) (fee uint))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n\n        ;; Assert fee is less than maximum BPS\n        (asserts! (< fee BPS) ERR_INVALID_FEE)\n\n        ;; Set liquidity fee for pool\n        (try! (contract-call? pool-trait set-liquidity-fee fee))\n\n        ;; Print function data and return true\n        (print {\n        action: \"set-liquidity-fee\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            fee: fee\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set amplification coefficient for a pool\n(define-public (set-amplification-coefficient (pool-trait <stableswap-pool-trait>) (coefficient uint))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n\n        ;; Set amplification coefficient for pool\n        (try! (contract-call? pool-trait set-amplification-coefficient coefficient))\n\n        ;; Print function data and return true\n        (print {\n        action: \"set-amplification-coefficient\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            coefficient: coefficient\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Set convergence threshold for a pool\n(define-public (set-convergence-threshold (pool-trait <stableswap-pool-trait>) (threshold uint))\n    (let (\n    ;; Gather all pool data\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert caller is an admin and pool is created and valid\n        (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n        (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL)\n        (asserts! (is-eq (get pool-created pool-data) true) ERR_POOL_NOT_CREATED)\n\n        ;; Set convergence threshold for pool\n        (try! (contract-call? pool-trait set-convergence-threshold threshold))\n\n        ;; Print function data and return true\n        (print {\n        action: \"set-convergence-threshold\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            threshold: threshold\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Create a new pool\n(define-public (create-pool \n    (pool-trait <stableswap-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (y-amount uint)\n    (burn-amount uint)\n    (x-protocol-fee uint) (x-provider-fee uint)\n    (y-protocol-fee uint) (y-provider-fee uint)\n    (liquidity-fee uint)\n    (amplification-coefficient uint)\n    (convergence-threshold uint)\n    (fee-address principal) (uri (string-utf8 256)) (status bool)\n    )\n    (let (\n    ;; Gather all pool data and pool contract\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-contract (contract-of pool-trait))\n    \n    ;; Get pool ID and create pool symbol and name \n    (new-pool-id (+ (var-get last-pool-id) u1))\n    (symbol (unwrap! (create-symbol x-token-trait y-token-trait) ERR_INVALID_POOL_SYMBOL))\n    (name (concat symbol \"-LP\"))\n    (x-token-contract (contract-of x-token-trait))\n    (y-token-contract (contract-of y-token-trait))\n    \n    ;; Scale up pool balances and calculate total shares\n    (pool-balances-scaled (scale-up-amounts x-amount y-amount x-token-trait y-token-trait))\n    (x-balance-scaled (get x-amount pool-balances-scaled))\n    (y-balance-scaled (get y-amount pool-balances-scaled))\n    (total-shares (+ x-balance-scaled y-balance-scaled))\n    (min-burnt-shares (var-get minimum-burnt-shares))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that caller is an admin or public-pool-creation is true\n        (asserts! (or (is-some (index-of (var-get admins) caller)) (var-get public-pool-creation)) ERR_NOT_AUTHORIZED)\n        \n        ;; Assert that pool is not created\n        (asserts! (is-eq (get pool-created pool-data) false) ERR_POOL_ALREADY_CREATED)\n\n        ;; Assert that x-token-contract and y-token-contract are not matching\n        (asserts! (not (is-eq x-token-contract y-token-contract)) ERR_MATCHING_TOKEN_CONTRACTS)\n\n        ;; Assert that addresses are standard principals\n        (asserts! (is-standard x-token-contract) ERR_INVALID_PRINCIPAL)\n        (asserts! (is-standard y-token-contract) ERR_INVALID_PRINCIPAL)\n        (asserts! (is-standard fee-address) ERR_INVALID_PRINCIPAL)\n        \n        ;; Assert that x and y amount is greater than 0\n        (asserts! (and (> x-amount u0) (> y-amount u0)) ERR_INVALID_AMOUNT)\n\n        ;; Assert that balances are equal\n        (asserts! (is-eq x-balance-scaled y-balance-scaled) ERR_UNEQUAL_POOL_BALANCES)\n\n        ;; Assert that total shares minted meets minimum total shares required\n        (asserts! (>= total-shares (var-get minimum-total-shares)) ERR_MINIMUM_LP_AMOUNT)\n\n        ;; Assert that burn amount meets minimum shares required to burn\n        (asserts! (>= burn-amount min-burnt-shares) ERR_MINIMUM_BURN_AMOUNT)\n        \n        ;; Assert that total shares is greater than or equal to 0 after subtracting burn amount\n        (asserts! (>= (- total-shares burn-amount) u0) ERR_MINIMUM_LP_AMOUNT)\n\n        ;; Assert that length of pool uri, symbol, and name is greater than 0\n        (asserts! (> (len uri) u0) ERR_INVALID_POOL_URI)\n        (asserts! (> (len symbol) u0) ERR_INVALID_POOL_SYMBOL)\n        (asserts! (> (len name) u0) ERR_INVALID_POOL_NAME)\n\n        ;; Assert that fees are less than maximum BPS\n        (asserts! (< (+ x-protocol-fee x-provider-fee) BPS) ERR_INVALID_FEE)\n        (asserts! (< (+ y-protocol-fee y-provider-fee) BPS) ERR_INVALID_FEE)\n        (asserts! (< liquidity-fee BPS) ERR_INVALID_FEE)\n\n        ;; Create pool and set fees\n        (try! (contract-call? pool-trait create-pool x-token-contract y-token-contract fee-address contract-caller amplification-coefficient convergence-threshold new-pool-id name symbol uri status))\n        (try! (contract-call? pool-trait set-x-fees x-protocol-fee x-provider-fee))\n        (try! (contract-call? pool-trait set-y-fees y-protocol-fee y-provider-fee))\n        (try! (contract-call? pool-trait set-liquidity-fee liquidity-fee))\n        \n        ;; Update ID of last created pool and add pool to pools map\n        (var-set last-pool-id new-pool-id)\n        (map-set pools new-pool-id {id: new-pool-id, name: name, symbol: symbol, pool-contract: pool-contract})\n        \n        ;; Transfer x-amount x tokens and y-amount y tokens from caller to pool-contract\n        (try! (contract-call? x-token-trait transfer x-amount caller pool-contract none))\n        (try! (contract-call? y-token-trait transfer y-amount caller pool-contract none))\n\n        ;; Update pool balances and d value\n        (try! (contract-call? pool-trait update-pool-balances x-amount y-amount total-shares))\n\n        ;; Mint LP tokens to caller \n        (try! (contract-call? pool-trait pool-mint (- total-shares burn-amount) caller))\n        \n        ;; Mint burn amount LP token to pool-contract\n        (try! (contract-call? pool-trait pool-mint burn-amount pool-contract))\n        \n        ;; Print create pool data and return true\n        (print {\n        action: \"create-pool\",\n        caller: caller,\n        data: {\n            pool-id: new-pool-id,\n            pool-name: name,\n            pool-contract: pool-contract,\n            x-token: x-token-contract,\n            y-token: y-token-contract,\n            x-protocol-fee: x-protocol-fee,\n            x-provider-fee: x-provider-fee,\n            y-protocol-fee: y-protocol-fee,\n            y-provider-fee: y-provider-fee,\n            liquidity-fee: liquidity-fee,\n            x-amount: x-amount,\n            y-amount: y-amount,\n            burn-amount: burn-amount,\n            total-shares: total-shares,\n            pool-symbol: symbol,\n            pool-uri: uri,\n            pool-status: status,\n            creation-height: burn-block-height,\n            fee-address: fee-address,\n            amplification-coefficient: amplification-coefficient,\n            convergence-threshold: convergence-threshold\n        }\n        })\n        (ok true)\n    )\n    )\n)\n\n;; Swap x token for y token via a pool\n(define-public (swap-x-for-y\n    (pool-trait <stableswap-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (min-dy uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (pool-contract (contract-of pool-trait))\n    (fee-address (get fee-address pool-data))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get x-protocol-fee pool-data))\n    (provider-fee (get x-provider-fee pool-data))\n    (convergence-threshold (get convergence-threshold pool-data))\n    (amplification-coefficient (get amplification-coefficient pool-data))\n    \n    ;; Scale up pool balances and swap amounts to perform AMM calculations with get-y\n    (pool-balances-scaled (scale-up-amounts x-balance y-balance x-token-trait y-token-trait))\n    (x-balance-scaled (get x-amount pool-balances-scaled))\n    (y-balance-scaled (get y-amount pool-balances-scaled))\n    (swap-amounts-scaled (scale-up-amounts x-amount u0 x-token-trait y-token-trait))\n    (x-amount-scaled (get x-amount swap-amounts-scaled))\n    (x-amount-fees-protocol-scaled (/ (* x-amount-scaled protocol-fee) BPS))\n    (x-amount-fees-provider-scaled (/ (* x-amount-scaled provider-fee) BPS))\n    (x-amount-fees-total-scaled (+ x-amount-fees-protocol-scaled x-amount-fees-provider-scaled))\n    (dx-scaled (- x-amount-scaled x-amount-fees-total-scaled))\n    (updated-x-balance-scaled (+ x-balance-scaled dx-scaled x-amount-fees-provider-scaled))\n    (updated-y-balance-scaled (get-y dx-scaled x-balance-scaled y-balance-scaled amplification-coefficient convergence-threshold))\n    \n    ;; Scale down to precise amounts for y and dy, as well as x-amount-fees-protocol and x-amount-fees-provider\n    (updated-y-balance (get y-amount (scale-down-amounts u0 updated-y-balance-scaled x-token-trait y-token-trait)))\n    (dy (- y-balance updated-y-balance))\n    (x-amount-fees-protocol (get x-amount (scale-down-amounts x-amount-fees-protocol-scaled u0 x-token-trait y-token-trait)))\n    (x-amount-fees-provider (get x-amount (scale-down-amounts x-amount-fees-provider-scaled u0 x-token-trait y-token-trait)))\n    (x-amount-fees-total (+ x-amount-fees-protocol x-amount-fees-provider))\n    (dx (- x-amount x-amount-fees-total))\n    (updated-dx (+ dx x-amount-fees-provider))\n    (updated-d (get-d updated-x-balance-scaled updated-y-balance-scaled amplification-coefficient convergence-threshold))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that pool-status is true and correct token traits are used\n        (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n        ;; Assert that x-amount is greater than 0 and less than x10 of x-balance\n        (asserts! (and (> x-amount u0) (< x-amount (* x-balance MAX_AMOUNT_PER_BALANCE_MULTIPLIER))) ERR_INVALID_AMOUNT)\n        \n        ;; Assert that min-dy is greater than 0 and dy is greater than or equal to min-dy\n        (asserts! (> min-dy u0) ERR_INVALID_AMOUNT)\n        (asserts! (>= dy min-dy) ERR_MINIMUM_Y_AMOUNT)\n\n        ;; Transfer updated-dx x tokens from caller to pool-contract\n        (try! (contract-call? x-token-trait transfer updated-dx caller pool-contract none))\n\n        ;; Transfer dy y tokens from pool-contract to caller\n        (try! (contract-call? pool-trait pool-transfer y-token-trait dy caller))\n\n        ;; Transfer x-amount-fees-protocol x tokens from caller to fee-address\n        (if (> x-amount-fees-protocol u0)\n        (try! (contract-call? x-token-trait transfer x-amount-fees-protocol caller fee-address none))\n        false\n        )\n\n        ;; Update pool balances and d value\n        (try! (contract-call? pool-trait update-pool-balances (+ x-balance updated-dx) updated-y-balance updated-d))\n\n        ;; Print swap data and return number of y tokens the caller received\n        (print {\n        action: \"swap-x-for-y\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: pool-contract,\n            x-token: x-token,\n            y-token: y-token,\n            x-amount: x-amount,\n            x-amount-fees-protocol: x-amount-fees-protocol,\n            x-amount-fees-provider: x-amount-fees-provider,\n            dy: dy,\n            min-dy: min-dy\n        }\n        })\n        (ok dy)\n    )\n    )\n)\n\n;; Swap y token for x token via a pool\n(define-public (swap-y-for-x\n    (pool-trait <stableswap-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (y-amount uint) (min-dx uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (pool-contract (contract-of pool-trait))\n    (fee-address (get fee-address pool-data))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (protocol-fee (get y-protocol-fee pool-data))\n    (provider-fee (get y-provider-fee pool-data))\n    (convergence-threshold (get convergence-threshold pool-data))\n    (amplification-coefficient (get amplification-coefficient pool-data))\n    \n    ;; Scale up pool balances and swap amounts to perform AMM calculations with get-x\n    (pool-balances-scaled (scale-up-amounts x-balance y-balance x-token-trait y-token-trait))\n    (x-balance-scaled (get x-amount pool-balances-scaled))\n    (y-balance-scaled (get y-amount pool-balances-scaled))\n    (swap-amounts-scaled (scale-up-amounts u0 y-amount x-token-trait y-token-trait))\n    (y-amount-scaled (get y-amount swap-amounts-scaled))\n    (y-amount-fees-protocol-scaled (/ (* y-amount-scaled protocol-fee) BPS))\n    (y-amount-fees-provider-scaled (/ (* y-amount-scaled provider-fee) BPS))\n    (y-amount-fees-total-scaled (+ y-amount-fees-protocol-scaled y-amount-fees-provider-scaled))\n    (dy-scaled (- y-amount-scaled y-amount-fees-total-scaled))\n    (updated-y-balance-scaled (+ y-balance-scaled dy-scaled y-amount-fees-provider-scaled))\n    (updated-x-balance-scaled (get-x dy-scaled y-balance-scaled x-balance-scaled amplification-coefficient convergence-threshold))\n    \n    ;; Scale down to precise amounts for x and dx, as well as y-amount-fees-protocol and y-amount-fees-provider\n    (updated-x-balance (get x-amount (scale-down-amounts updated-x-balance-scaled u0 x-token-trait y-token-trait)))\n    (dx (- x-balance updated-x-balance))\n    (y-amount-fees-protocol (get y-amount (scale-down-amounts u0 y-amount-fees-protocol-scaled x-token-trait y-token-trait)))\n    (y-amount-fees-provider (get y-amount (scale-down-amounts u0 y-amount-fees-provider-scaled x-token-trait y-token-trait)))\n    (y-amount-fees-total (+ y-amount-fees-protocol y-amount-fees-provider))\n    (dy (- y-amount y-amount-fees-total))\n    (updated-dy (+ dy y-amount-fees-provider))\n    (updated-d (get-d updated-x-balance-scaled updated-y-balance-scaled amplification-coefficient convergence-threshold))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that pool-status is true and correct token traits are used\n        (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n        ;; Assert that y-amount is greater than 0 and less than x10 of y-balance\n        (asserts! (and (> y-amount u0) (< y-amount (* y-balance MAX_AMOUNT_PER_BALANCE_MULTIPLIER))) ERR_INVALID_AMOUNT)\n        \n        ;; Assert that min-dx is greater than 0 and dx is greater than or equal to min-dx\n        (asserts! (> min-dx u0) ERR_INVALID_AMOUNT)\n        (asserts! (>= dx min-dx) ERR_MINIMUM_X_AMOUNT)\n\n        ;; Transfer updated-dy y tokens from caller to pool-contract\n        (try! (contract-call? y-token-trait transfer updated-dy caller pool-contract none))\n\n        ;; Transfer dx x tokens from pool-contract to caller\n        (try! (contract-call? pool-trait pool-transfer x-token-trait dx caller))\n\n        ;; Transfer y-amount-fees-protocol y tokens from caller to fee-address\n        (if (> y-amount-fees-protocol u0)\n        (try! (contract-call? y-token-trait transfer y-amount-fees-protocol caller fee-address none))\n        false\n        )\n\n        ;; Update pool balances and d value\n        (try! (contract-call? pool-trait update-pool-balances updated-x-balance (+ y-balance updated-dy) updated-d))\n\n        ;; Print swap data and return number of x tokens the caller received\n        (print {\n        action: \"swap-y-for-x\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: pool-contract,\n            x-token: x-token,\n            y-token: y-token,\n            y-amount: y-amount,\n            y-amount-fees-protocol: y-amount-fees-protocol,\n            y-amount-fees-provider: y-amount-fees-provider,\n            dx: dx,\n            min-dx: min-dx\n        }\n        })\n        (ok dx)\n    )\n    )\n)\n\n;; Add liquidity to a pool\n(define-public (add-liquidity\n    (pool-trait <stableswap-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (x-amount uint) (y-amount uint) (min-dlp uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (pool-contract (contract-of pool-trait))\n    (fee-address (get fee-address pool-data))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (total-shares (get total-shares pool-data))\n    (liquidity-fee (get liquidity-fee pool-data))\n    (convergence-threshold (get convergence-threshold pool-data))\n    (amplification-coefficient (get amplification-coefficient pool-data))\n    (updated-x-balance (+ x-balance x-amount))\n    (updated-y-balance (+ y-balance y-amount))\n\n    ;; Scale up for AMM calculations depending on decimal places assigned to tokens\n    (amounts-added-scaled (scale-up-amounts x-amount y-amount x-token-trait y-token-trait))\n    (x-amount-scaled (get x-amount amounts-added-scaled))\n    (y-amount-scaled (get y-amount amounts-added-scaled))\n    (pool-balances-scaled (scale-up-amounts x-balance y-balance x-token-trait y-token-trait))\n    (x-balance-scaled (get x-amount pool-balances-scaled))\n    (y-balance-scaled (get y-amount pool-balances-scaled))\n    (updated-pool-balances-scaled (scale-up-amounts updated-x-balance updated-y-balance x-token-trait y-token-trait))\n    (updated-x-balance-scaled (get x-amount updated-pool-balances-scaled))\n    (updated-y-balance-scaled (get y-amount updated-pool-balances-scaled))\n    \n    ;; Calculate ideal pool balance\n    (d-a (get-d x-balance-scaled y-balance-scaled amplification-coefficient convergence-threshold))\n    (d-b (get-d updated-x-balance-scaled updated-y-balance-scaled amplification-coefficient convergence-threshold))\n    (ideal-x-balance-scaled (/ (* d-b x-balance-scaled) d-a))\n    (ideal-y-balance-scaled (/ (* d-b y-balance-scaled) d-a))\n    (x-difference (if (> ideal-x-balance-scaled updated-x-balance-scaled) (- ideal-x-balance-scaled updated-x-balance-scaled) (- updated-x-balance-scaled ideal-x-balance-scaled)))\n    (y-difference (if (> ideal-y-balance-scaled updated-y-balance-scaled) (- ideal-y-balance-scaled updated-y-balance-scaled) (- updated-y-balance-scaled ideal-y-balance-scaled)))\n    \n    ;; Calculate fees to apply if adding imbalanced liquidity\n    (ideal-x-amount-fee-liquidity-scaled (/ (* x-difference liquidity-fee) BPS))\n    (ideal-y-amount-fee-liquidity-scaled (/ (* y-difference liquidity-fee) BPS))\n    (x-amount-fee-liquidity-scaled (if (> x-amount-scaled ideal-x-amount-fee-liquidity-scaled) ideal-x-amount-fee-liquidity-scaled x-amount-scaled))\n    (y-amount-fee-liquidity-scaled (if (> y-amount-scaled ideal-y-amount-fee-liquidity-scaled) ideal-y-amount-fee-liquidity-scaled y-amount-scaled))\n    (updated-x-amount-scaled (- x-amount-scaled x-amount-fee-liquidity-scaled))\n    (updated-y-amount-scaled (- y-amount-scaled y-amount-fee-liquidity-scaled))\n    (updated-balance-x-post-fee-scaled (+ x-balance-scaled updated-x-amount-scaled))\n    (updated-balance-y-post-fee-scaled (+ y-balance-scaled updated-y-amount-scaled))\n    (updated-d (get-d updated-balance-x-post-fee-scaled updated-balance-y-post-fee-scaled amplification-coefficient convergence-threshold))\n    \n    ;; Scale down for precise token balance updates and transfers\n    (precise-fees-liquidity (scale-down-amounts x-amount-fee-liquidity-scaled y-amount-fee-liquidity-scaled x-token-trait y-token-trait))\n    (x-amount-fees-liquidity (get x-amount precise-fees-liquidity))\n    (y-amount-fees-liquidity (get y-amount precise-fees-liquidity))\n    (amounts-added (scale-down-amounts updated-x-amount-scaled updated-y-amount-scaled x-token-trait y-token-trait))\n    (updated-x-amount (get x-amount amounts-added))\n    (updated-y-amount (get y-amount amounts-added))\n    (updated-pool-balances-post-fee (scale-down-amounts updated-balance-x-post-fee-scaled updated-balance-y-post-fee-scaled x-token-trait y-token-trait))\n    (updated-x-balance-post-fee (get x-amount updated-pool-balances-post-fee))\n    (updated-y-balance-post-fee (get y-amount updated-pool-balances-post-fee))\n    \n    ;; Check that updated-d is greater than d-a and calculate dlp\n    (minimum-d-check (asserts! (> updated-d d-a) ERR_MINIMUM_D_VALUE))\n    (dlp (/ (* total-shares (- updated-d d-a)) d-a))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that pool-status is true and correct token traits are used\n        (asserts! (is-eq (get pool-status pool-data) true) ERR_POOL_DISABLED)\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n        ;; Assert that x-amount + y-amount is greater than 0\n        (asserts! (> (+ x-amount y-amount) u0) ERR_INVALID_AMOUNT)\n\n        ;; Assert that min-dlp is greater than 0 and dlp is greater than or equal to min-dlp\n        (asserts! (> min-dlp u0) ERR_INVALID_AMOUNT)\n        (asserts! (>= dlp min-dlp) ERR_MINIMUM_LP_AMOUNT)\n\n        ;; Transfer updated-x-amount x tokens from caller to pool-contract\n        (if (> updated-x-amount u0)\n        (try! (contract-call? x-token-trait transfer updated-x-amount caller pool-contract none))\n        false\n        )\n\n        ;; Transfer updated-y-amount y tokens from caller to pool-contract\n        (if (> updated-y-amount u0)\n        (try! (contract-call? y-token-trait transfer updated-y-amount caller pool-contract none))\n        false\n        )\n\n        ;; Transfer x-amount-fees-liquidity x tokens from caller to fee-address\n        (if (> x-amount-fees-liquidity u0)\n        (try! (contract-call? x-token-trait transfer x-amount-fees-liquidity caller fee-address none))\n        false\n        )\n\n        ;; Transfer y-amount-fees-liquidity y tokens from caller to fee-address\n        (if (> y-amount-fees-liquidity u0)\n        (try! (contract-call? y-token-trait transfer y-amount-fees-liquidity caller fee-address none))\n        false\n        )\n\n        ;; Update pool balances and d value\n        (try! (contract-call? pool-trait update-pool-balances updated-x-balance-post-fee updated-y-balance-post-fee updated-d))\n        \n        ;; Mint LP tokens to caller\n        (try! (contract-call? pool-trait pool-mint dlp caller))\n\n        ;; Print add liquidity data and return number of LP tokens caller received\n        (print {\n        action: \"add-liquidity\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: pool-contract,\n            x-token: x-token,\n            y-token: y-token,\n            x-amount: updated-x-amount,\n            y-amount: updated-y-amount,\n            x-amount-fees-liquidity: x-amount-fees-liquidity,\n            y-amount-fees-liquidity: y-amount-fees-liquidity,\n            dlp: dlp,\n            min-dlp: min-dlp\n        }\n        })\n        (ok dlp)\n    )\n    )\n)\n\n;; Withdraw liquidity from a pool\n(define-public (withdraw-liquidity\n    (pool-trait <stableswap-pool-trait>)\n    (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>)\n    (amount uint) (min-x-amount uint) (min-y-amount uint)\n    )\n    (let (\n    ;; Gather all pool data and check if pool is valid\n    (pool-data (unwrap! (contract-call? pool-trait get-pool) ERR_NO_POOL_DATA))\n    (pool-validity-check (asserts! (is-valid-pool (get pool-id pool-data) (contract-of pool-trait)) ERR_INVALID_POOL))\n    (x-token (get x-token pool-data))\n    (y-token (get y-token pool-data))\n    (x-balance (get x-balance pool-data))\n    (y-balance (get y-balance pool-data))\n    (total-shares (get total-shares pool-data))\n    (convergence-threshold (get convergence-threshold pool-data))\n    (amplification-coefficient (get amplification-coefficient pool-data))\n    \n    ;; Calculate x-amount and y-amount to transfer and updated balances\n    (x-amount (/ (* amount x-balance) total-shares))\n    (y-amount (/ (* amount y-balance) total-shares))\n    (updated-x-balance (- x-balance x-amount))\n    (updated-y-balance (- y-balance y-amount))\n\n    ;; Scale up balances and calculate updated-d\n    (updated-pool-balances-scaled (scale-up-amounts updated-x-balance updated-y-balance x-token-trait y-token-trait))\n    (updated-x-balance-scaled (get x-amount updated-pool-balances-scaled))\n    (updated-y-balance-scaled (get y-amount updated-pool-balances-scaled))\n    (updated-d (get-d updated-x-balance-scaled updated-y-balance-scaled amplification-coefficient convergence-threshold))\n    (caller tx-sender)\n    )\n    (begin\n        ;; Assert that correct token traits are used\n        (asserts! (is-eq (contract-of x-token-trait) x-token) ERR_INVALID_X_TOKEN)\n        (asserts! (is-eq (contract-of y-token-trait) y-token) ERR_INVALID_Y_TOKEN)\n\n        ;; Assert that amount is greater than 0\n        (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n\n        ;; Assert that x-amount + y-amount is greater than 0\n        (asserts! (> (+ x-amount y-amount) u0) ERR_INVALID_AMOUNT)\n\n        ;; Assert that x-amount is greater than or equal to min-x-amount\n        (asserts! (>= x-amount min-x-amount) ERR_MINIMUM_X_AMOUNT)\n\n        ;; Assert that y-amount is greater than or equal to min-y-amount\n        (asserts! (>= y-amount min-y-amount) ERR_MINIMUM_Y_AMOUNT)\n\n        ;; Transfer x-amount x tokens from pool-contract to caller\n        (if (> x-amount u0)\n        (try! (contract-call? pool-trait pool-transfer x-token-trait x-amount caller))\n        false\n        )\n        \n        ;; Transfer y-amount y tokens from pool-contract to caller\n        (if (> y-amount u0)\n        (try! (contract-call? pool-trait pool-transfer y-token-trait y-amount caller))\n        false\n        )\n\n        ;; Update pool balances and d value\n        (try! (contract-call? pool-trait update-pool-balances updated-x-balance updated-y-balance updated-d))\n        \n        ;; Burn LP tokens from caller\n        (try! (contract-call? pool-trait pool-burn amount caller))\n        \n        ;; Print withdraw liquidity data and return number of x and y tokens caller received\n        (print {\n        action: \"withdraw-liquidity\",\n        caller: caller,\n        data: {\n            pool-id: (get pool-id pool-data),\n            pool-name: (get pool-name pool-data),\n            pool-contract: (contract-of pool-trait),\n            x-token: x-token,\n            y-token: y-token,\n            amount: amount,\n            x-amount: x-amount,\n            y-amount: y-amount,\n            min-x-amount: min-x-amount,\n            min-y-amount: min-y-amount\n        }\n        })\n        (ok {x-amount: x-amount, y-amount: y-amount})\n    )\n    )\n)\n\n;; Add an admin to the admins list\n(define-public (add-admin (admin principal))\n    (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n    )\n    ;; Assert caller is an existing admin and new admin is not in admins-list\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    \n    ;; Add admin to list with max length of 5\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    \n    ;; Print add admin data and return true\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n    )\n)\n\n;; Remove an admin from the admins list\n(define-public (remove-admin (admin principal))\n    (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n    )\n    ;; Assert caller is an existing admin and admin to remove is in admins-list\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n\n    ;; Assert contract deployer cannot be removed\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n\n    ;; Set admin-helper to admin to remove and filter admins-list to remove admin\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removable admins-list))\n\n    ;; Print remove admin data and return true\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n    )\n)\n\n;; Set pool uri for multiple pools\n(define-public (set-pool-uri-multi\n    (pool-traits (list 120 <stableswap-pool-trait>))\n    (uris (list 120 (string-utf8 256)))\n    )\n    (ok (map set-pool-uri pool-traits uris))\n)\n\n;; Set pool status for multiple pools\n(define-public (set-pool-status-multi\n    (pool-traits (list 120 <stableswap-pool-trait>))\n    (statuses (list 120 bool))\n    )\n    (ok (map set-pool-status pool-traits statuses))\n)\n\n;; Set fee address for multiple pools\n(define-public (set-fee-address-multi\n    (pool-traits (list 120 <stableswap-pool-trait>))\n    (addresses (list 120 principal))\n    )\n    (ok (map set-fee-address pool-traits addresses))\n)\n\n;; Set x fees for multiple pools\n(define-public (set-x-fees-multi\n    (pool-traits (list 120 <stableswap-pool-trait>))\n    (protocol-fees (list 120 uint)) (provider-fees (list 120 uint))\n    )\n    (ok (map set-x-fees pool-traits protocol-fees provider-fees))\n)\n\n;; Set y fees for multiple pools\n(define-public (set-y-fees-multi\n    (pool-traits (list 120 <stableswap-pool-trait>))\n    (protocol-fees (list 120 uint)) (provider-fees (list 120 uint))\n    )\n    (ok (map set-y-fees pool-traits protocol-fees provider-fees))\n)\n\n;; Set liquidity fee for multiple pools\n(define-public (set-liquidity-fee-multi\n    (pool-traits (list 120 <stableswap-pool-trait>))\n    (fees (list 120 uint))\n    )\n    (ok (map set-liquidity-fee pool-traits fees))\n)\n\n;; Set amplification coefficient for multiple pools\n(define-public (set-amplification-coefficient-multi\n    (pool-traits (list 120 <stableswap-pool-trait>))\n    (coefficients (list 120 uint))\n    )\n    (ok (map set-amplification-coefficient pool-traits coefficients))\n)\n\n;; Set convergence threshold for multiple pools\n(define-public (set-convergence-threshold-multi\n    (pool-traits (list 120 <stableswap-pool-trait>))\n    (thresholds (list 120 uint))\n    )\n    (ok (map set-convergence-threshold pool-traits thresholds))\n)\n\n;; Helper function for removing an admin\n(define-private (admin-not-removable (admin principal))\n    (not (is-eq admin (var-get admin-helper)))\n)\n\n;; Create pool symbol using x token and y token symbols\n(define-private (create-symbol (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>))\n    (let (\n    ;; Get x token and y token symbols\n    (x-symbol (unwrap-panic (contract-call? x-token-trait get-symbol)))\n    (y-symbol (unwrap-panic (contract-call? y-token-trait get-symbol)))\n    \n    ;; Truncate symbols if length exceeds 14\n    (x-truncated \n        (if (> (len x-symbol) u14)\n        (unwrap-panic (slice? x-symbol u0 u14))\n        x-symbol\n        )\n    )\n    (y-truncated\n        (if (> (len y-symbol) u14)\n        (unwrap-panic (slice? y-symbol u0 u14))\n        y-symbol\n        )\n    )\n    )\n    ;; Return pool symbol with max length of 29\n    (as-max-len? (concat x-truncated (concat \"-\" y-truncated)) u29)\n    )\n)\n\n;; Check if a pool is valid\n(define-private (is-valid-pool (id uint) (contract principal))\n    (let (\n    (pool-data (unwrap! (map-get? pools id) false))\n    )\n    (is-eq contract (get pool-contract pool-data))\n    )\n)\n\n;; Helper for get x\n(define-private (fold-x-for-loop (n uint) (static-data {x: uint, c: uint, b: uint, d: uint, threshold: uint, converged: uint})) \n    (let (\n    (current-x (get x static-data))\n    (current-c (get c static-data))\n    (current-b (get b static-data))\n    (current-d (get d static-data))\n    (current-threshold (get threshold static-data))\n    (current-converged (get converged static-data))\n    (x-numerator (+ (* current-x current-x) current-c))\n    (x-denominator (- (+ (* NUM_OF_TOKENS current-x) current-b) current-d))\n    (new-x (/ x-numerator x-denominator))\n    )\n    (if (is-eq current-converged u0)\n        (if (> new-x  current-x)\n        (if (<= (- new-x current-x) current-threshold)\n            {x: new-x, c: current-c, b: current-b, d: current-d, threshold: current-threshold, converged: new-x}\n            {x: new-x, c: current-c, b: current-b, d: current-d, threshold: current-threshold, converged: u0}\n        )\n        (if (<= (- current-x new-x) current-threshold)\n            {x: new-x, c: current-c, b: current-b, d: current-d, threshold: current-threshold, converged: new-x}\n            {x: new-x, c: current-c, b: current-b, d: current-d, threshold: current-threshold, converged: u0}\n        )\n        )\n        static-data\n    )\n    )\n)\n\n;; Helper for get y\n(define-private (fold-y-for-loop (n uint) (static-data {y: uint, c: uint, b: uint, d: uint, threshold: uint, converged: uint})) \n    (let (\n    (current-y (get y static-data))\n    (current-c (get c static-data))\n    (current-b (get b static-data))\n    (current-d (get d static-data))\n    (current-threshold (get threshold static-data))\n    (current-converged (get converged static-data))\n    (y-numerator (+ (* current-y current-y) current-c))\n    (y-denominator (- (+ (* NUM_OF_TOKENS current-y) current-b) current-d))\n    (new-y (/ y-numerator y-denominator))\n    )\n    (if (is-eq current-converged u0)\n        (if (> new-y current-y)\n        (if (<= (- new-y current-y) current-threshold)\n            {y: new-y, c: current-c, b: current-b, d: current-d, threshold: current-threshold, converged: new-y}\n            {y: new-y, c: current-c, b: current-b, d: current-d, threshold: current-threshold, converged: u0}\n        )\n        (if (<= (- current-y new-y) current-threshold)\n            {y: new-y, c: current-c, b: current-b, d: current-d, threshold: current-threshold, converged: new-y}\n            {y: new-y, c: current-c, b: current-b, d: current-d, threshold: current-threshold, converged: u0}\n        )\n        )\n        static-data\n    )\n    )\n)\n\n;; Helper for get-d\n(define-private (fold-d-for-loop (n uint) (static-data {x-bal: uint, y-bal: uint, d: uint, an: uint, threshold: uint, converged: uint})) \n    (let (\n    ;; Gather all data from static-data\n    (current-x-balance (get x-bal static-data))\n    (current-y-balance (get y-bal static-data))\n    (current-s (+ current-x-balance current-y-balance))\n    (current-d-partial (get d static-data))\n    (current-d (get d static-data))\n    (current-an (get an static-data))\n    (current-threshold (get threshold static-data))\n    (current-converged (get converged static-data))\n\n    ;; Start logic for calculating new d\n    ;; Calculate new partial d with respect to x\n    (new-d-partial-x (/ (* current-d current-d-partial) (* NUM_OF_TOKENS current-x-balance)))\n    \n    ;; Calculate new partial d with respect to new x and y\n    (new-d-partial (/ (* current-d new-d-partial-x) (* NUM_OF_TOKENS current-y-balance)))\n    (new-numerator (* (+ (* current-an current-s) (* NUM_OF_TOKENS new-d-partial)) current-d))\n    (new-denominator (+ (* (- current-an u1) current-d) (* (+ NUM_OF_TOKENS u1) new-d-partial)))\n    (new-d (/ new-numerator new-denominator))         \n    )\n    ;; Check if converged value or new d was already found\n    (if (is-eq current-converged u0)\n        (if (> new-d current-d)\n        (if (<= (- new-d current-d) current-threshold)\n            {x-bal: current-x-balance, y-bal: current-y-balance, d: new-d, an: current-an, threshold: current-threshold, converged: new-d}\n            {x-bal: current-x-balance, y-bal: current-y-balance, d: new-d, an: current-an, threshold: current-threshold, converged: u0}\n        )\n        (if (<= (- current-d new-d) current-threshold)\n            {x-bal: current-x-balance, y-bal: current-y-balance, d: new-d, an: current-an, threshold: current-threshold, converged: new-d}\n            {x-bal: current-x-balance, y-bal: current-y-balance, d: new-d, an: current-an, threshold: current-threshold, converged: u0}\n        )\n        )\n        static-data\n    )\n    )\n)\n\n;; Scale up token amounts to the same level of precision before performing AMM calculations\n(define-private (scale-up-amounts (x-amount uint) (y-amount uint) (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>))\n    (let (\n    ;; Get decimals for x and y tokens\n    (x-decimals (unwrap-panic (contract-call? x-token-trait get-decimals)))\n    (y-decimals (unwrap-panic (contract-call? y-token-trait get-decimals)))\n\n    ;; Scale x amount and y amounts\n    (x-amount-scaled\n        (if (is-eq x-decimals y-decimals)\n        x-amount\n        (if (> x-decimals y-decimals)\n            x-amount\n            (* x-amount (pow u10 (- y-decimals x-decimals)))\n        )\n        )\n    )\n    (y-amount-scaled\n        (if (is-eq x-decimals y-decimals)\n        y-amount\n        (if (> y-decimals x-decimals)\n            y-amount\n            (* y-amount (pow u10 (- x-decimals y-decimals)))\n        )\n        )\n    )\n    )\n    ;; Return scaled x and y amounts\n    {x-amount: x-amount-scaled, y-amount: y-amount-scaled}\n    )\n)\n\n;; Scale down token amounts to their respective levels of precision before performing any transfers\n(define-private (scale-down-amounts (x-amount uint) (y-amount uint) (x-token-trait <sip-010-trait>) (y-token-trait <sip-010-trait>))\n    (let (\n    ;; Get decimals for x and y tokens\n    (x-decimals (unwrap-panic (contract-call? x-token-trait get-decimals)))\n    (y-decimals (unwrap-panic (contract-call? y-token-trait get-decimals)))\n    \n    ;; Scale x and y amounts\n    (x-amount-scaled\n        (if (is-eq x-decimals y-decimals)\n        x-amount\n        (if (> x-decimals y-decimals)\n            x-amount\n            (/ x-amount (pow u10 (- y-decimals x-decimals)))\n        )\n        )\n    )\n    (y-amount-scaled\n        (if (is-eq x-decimals y-decimals)\n        y-amount\n        (if (> y-decimals x-decimals)\n            y-amount\n            (/ y-amount (pow u10 (- x-decimals y-decimals)))\n        )\n        )\n    )\n    )\n    ;; Return scaled x and y amounts\n    {x-amount: x-amount-scaled, y-amount: y-amount-scaled}\n    )\n)",
    "analysis": {
      "summary": "This contract implements a decentralized exchange mechanism with stableswap functionality, allowing for efficient swaps, liquidity provision, and pool management.",
      "explanation": "The contract leverages the Stableswap algorithm to provide users with low-slippage swaps between tokens, especially for stablecoins or similarly priced assets. It includes features for creating liquidity pools, adding/removing liquidity, performing swaps, and managing pool parameters. Key components include error constants for standardized error handling, data variables for tracking pool states and admin roles, and a series of public and private functions for interacting with the pools.\n\n- Error constants (<L6-27>) define various error scenarios for strict contract execution.\n- Data variables (<L29-43>) store contract-wide settings like the deployer address, token pair limits, and pool creation toggles.\n- The `create-pool` function (<L1097-1237>) allows authorized users to create new liquidity pools with specific parameters.\n- Swap functions (`swap-x-for-y` and `swap-y-for-x` <L1239-1426> and <L1428-1615>) enable users to exchange tokens with dynamic pricing based on pool reserves and the Stableswap formula.\n- Liquidity functions (`add-liquidity` and `withdraw-liquidity` <L1617-1906> and <L1908-2152>) let users deposit or withdraw assets from pools, affecting their share of the pool's total liquidity.\n- Admin functions (<L2154-2423>) provide mechanisms for governance, allowing designated administrators to adjust pool parameters, manage fees, and update pool metadata.\n\nThe contract uses Clarity traits to interact with external token contracts compliant with the SIP-010 standard, ensuring broad compatibility across the Stacks ecosystem.",
      "tags": [
        "DeFi",
        "Stableswap",
        "DEX",
        "Liquidity-Pools",
        "Governance"
      ]
    }
  },
  {
    "rank": 47,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4",
    "calls": 720,
    "source": ";; Bitflow Stableswap Core Contract - v1.4\n;; This contract handles the core logic of the Stableswap protocol.\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;; Cons, Vars, & Maps ;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(use-trait sip-010-trait .sip-010-trait-ft-standard.sip-010-trait)\n(use-trait lp-trait .lp-trait.lp-trait)\n\n;;;;;;;;;;;;;;;\n;; Constants ;;\n;;;;;;;;;;;;;;;\n\n;; This contract address\n(define-constant this-contract (as-contract tx-sender))\n\n;; Deployment height\n(define-constant deployment-height burn-block-height)\n\n;; Cycle length in blocks (1 day = 144 blocks)\n(define-constant cycle-length u144)\n\n;; Index loop for using Newton-Raphson method to converge square root that goes up to u384\n(define-constant index-list (list u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31 u32 u33 u34 u35 u36 u37 u38 u39 u40 u41 u42 u43 u44 u45 u46 u47 u48 u49 u50 u51 u52 u53 u54 u55 u56 u57 u58 u59 u60 u61 u62 u63 u64 u65 u66 u67 u68 u69 u70 u71 u72 u73 u74 u75 u76 u77 u78 u79 u80 u81 u82 u83 u84 u85 u86 u87 u88 u89 u90 u91 u92 u93 u94 u95 u96 u97 u98 u99 u100 u101 u102 u103 u104 u105 u106 u107 u108 u109 u110 u111 u112 u113 u114 u115 u116 u117 u118 u119 u120 u121 u122 u123 u124 u125 u126 u127 u128 u129 u130 u131 u132 u133 u134 u135 u136 u137 u138 u139 u140 u141 u142 u143 u144 u145 u146 u147 u148 u149 u150 u151 u152 u153 u154 u155 u156 u157 u158 u159 u160 u161 u162 u163 u164 u165 u166 u167 u168 u169 u170 u171 u172 u173 u174 u175 u176 u177 u178 u179 u180 u181 u182 u183 u184 u185 u186 u187 u188 u189 u190 u191 u192 u193 u194 u195 u196 u197 u198 u199 u200 u201 u202 u203 u204 u205 u206 u207 u208 u209 u210 u211 u212 u213 u214 u215 u216 u217 u218 u219 u220 u221 u222 u223 u224 u225 u226 u227 u228 u229 u230 u231 u232 u233 u234 u235 u236 u237 u238 u239 u240 u241 u242 u243 u244 u245 u246 u247 u248 u249 u250 u251 u252 u253 u254 u255 u256 u257 u258 u259 u260 u261 u262 u263 u264 u265 u266 u267 u268 u269 u270 u271 u272 u273 u274 u275 u276 u277 u278 u279 u280 u281 u282 u283 u284 u285 u286 u287 u288 u289 u290 u291 u292 u293 u294 u295 u296 u297 u298 u299 u300 u301 u302 u303 u304 u305 u306 u307 u308 u309 u310 u311 u312 u313 u314 u315 u316 u317 u318 u319 u320 u321 u322 u323 u324 u325 u326 u327 u328 u329 u330 u331 u332 u333 u334 u335 u336 u337 u338 u339 u340 u341 u342 u343 u344 u345 u346 u347 u348 u349 u350 u351 u352 u353 u354 u355 u356 u357 u358 u359 u360 u361 u362 u363 u364 u365 u366 u367 u368 u369 u370 u371 u372 u373 u374 u375 u376 u377 u378 u379 u380 u381 u382 u383 u384))\n\n;; Number of tokens per pair\n(define-constant number-of-tokens u2)\n\n;; Contract deployer\n(define-constant contract-deployer tx-sender)\n\n;; Protocol Address\n(define-constant protocol-address 'SP31C60QVZKZ9CMMZX73TQ3F3ZZNS89YX2DCCFT8P)\n\n;; Contract for Stableswap Staking and Rewards\n(define-data-var staking-and-rewards-contract principal tx-sender)\n\n\n;;;;;;;;;;;;\n;; Errors ;;\n;;;;;;;;;;;;\n\n\n;;;;;;;;;;;;;;;\n;; Variables ;;\n;;;;;;;;;;;;;;;\n\n;; Admin Governance List\n(define-data-var admins (list 5 principal) (list tx-sender))\n\n;; Swap Fees (5 total bps initialized, 3 bps to LPs, 2 bps to protocol)\n(define-data-var swap-fees {lps: uint, protocol: uint} {lps: u3, protocol: u2})\n\n;; Liquidity Fees (3 bps initialized, all to protocol)\n(define-data-var liquidity-fees uint u3)\n\n;; Helper var to remove admin\n(define-data-var helper-principal principal tx-sender)\n\n;; Convergence Threshold\n(define-data-var convergence-threshold uint u2)\n\n\n;;;;;;;;;;\n;; Maps ;;\n;;;;;;;;;;\n\n(define-map PairsDataMap {x-token: principal, y-token: principal, lp-token: principal} {\n    approval: bool,\n    total-shares: uint,\n    x-decimals: uint,\n    y-decimals: uint,\n    balance-x: uint,\n    balance-y: uint,\n    d: uint,\n    amplification-coefficient: uint,\n})\n\n(define-map CycleDataMap {x-token: principal, y-token: principal, lp-token: principal, cycle-num: uint} {\n    cycle-fee-balance-x: uint,\n    cycle-fee-balance-y: uint,\n})\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Read-Only Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Get pair data\n(define-read-only (get-pair-data (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <sip-010-trait>)) \n    (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)})\n)\n\n;; Get cycle data\n(define-read-only (get-cycle-data (x-token principal) (y-token principal) (lp-token principal) (cycle-num uint)) \n    (map-get? CycleDataMap {x-token: x-token, y-token: y-token, lp-token: lp-token, cycle-num: cycle-num})\n)\n\n;; Get current cycle\n(define-read-only (get-current-cycle) \n    (/ (- burn-block-height deployment-height) cycle-length)\n)\n\n;; Get cycle from height\n(define-read-only (get-cycle-from-height (height uint)) \n    (/ (- height deployment-height) cycle-length)\n)\n\n;; Get starting height from cycle\n(define-read-only (get-starting-height-from-cycle (cycle uint)) \n    (+ deployment-height (* cycle cycle-length))\n)\n\n;; Get deployment height\n(define-read-only (get-deployment-height) \n    deployment-height\n)\n\n;; Get up to last 120 cycle rewards -> nice to have\n;; (define-read-only (get-cycle-rewards) body)\n\n;; Get DX\n(define-read-only (get-dx (y-token <sip-010-trait>) (x-token <sip-010-trait>) (lp-token <lp-trait>) (y-amount uint))\n    (let \n        (\n            (pair-data (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get swap-fees)))\n            (swap-fee-protocol (get protocol (var-get swap-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-protocol))\n            (current-amplification-coefficient (get amplification-coefficient pair-data))\n\n            ;; Scale up balances to perform AMM calculations with get-x\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts u0 y-amount x-decimals y-decimals))\n            (y-amount-scaled (get scaled-y scaled-up-swap-amount))\n            (y-amount-fees-lps-scaled (/ (* y-amount-scaled swap-fee-lps) u10000))\n            (y-amount-fees-protocol-scaled (/ (* y-amount-scaled swap-fee-protocol) u10000))\n            (y-amount-total-fees-scaled (/ (* y-amount total-swap-fee) u10000))\n            (updated-y-amount-scaled (- y-amount-scaled y-amount-total-fees-scaled))\n            (updated-y-balance-scaled (+ current-balance-y-scaled updated-y-amount-scaled))\n            (new-x-scaled (get-x current-balance-y-scaled current-balance-x-scaled updated-y-amount-scaled (* current-amplification-coefficient number-of-tokens)))\n\n            ;; Scale down to precise amounts for x and dx, as well as y-amount-fee-lps, and y-amount-fee-protocol\n            (new-x (get scaled-x (get-scaled-down-token-amounts new-x-scaled u0 x-decimals y-decimals)))\n            (dx (- current-balance-x new-x))\n            (y-amount-fee-lps (get scaled-y (get-scaled-down-token-amounts u0 y-amount-fees-lps-scaled x-decimals y-decimals)))\n            (y-amount-fee-protocol (get scaled-y (get-scaled-down-token-amounts u0 y-amount-fees-protocol-scaled x-decimals y-decimals)))\n        )\n        (ok dx)\n    )\n)\n\n;; Get X\n;; Maybe move into get-dx?\n(define-read-only (get-x (y-bal uint) (x-bal uint) (y-amount uint) (ann uint))\n    (let \n        (\n            (y-bal-new (+ y-bal y-amount))\n            (current-D (get-D x-bal y-bal ann))\n            (c0 current-D)\n            (c1 (/ (* c0 current-D) (* number-of-tokens y-bal-new)))\n            (c2 (/ (* c1 current-D) (* ann number-of-tokens)))\n            (b (+ y-bal-new (/ current-D ann)))\n        )\n        (get converged (fold x-for-loop index-list {x: current-D, c: c2, b: b, D: current-D, converged: u0}))\n    )\n)\n\n;; Get X Helper\n(define-private (x-for-loop (n uint) (x-info {x: uint, c: uint, b: uint, D: uint, converged: uint})) \n    (let\n        (\n            (current-x (get x x-info))\n            (current-c (get c x-info))\n            (current-b (get b x-info))\n            (current-D (get D x-info))\n            (current-converged (get converged x-info))\n            (x-numerator (+ (* current-x current-x) current-c))\n            (x-denominator (- (+ (* u2 current-x) current-b) current-D))\n            (new-x (/ x-numerator x-denominator))\n            (threshold (var-get convergence-threshold))\n\n        )\n\n        (if (is-eq current-converged u0)\n            (if (> new-x  current-x)\n                (if (<= (- new-x current-x) threshold)\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: new-x}\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n                (if (<= (- current-x new-x) threshold)\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: new-x}\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n            )\n            x-info\n        )\n\n\n    )\n)\n\n;; Get DY\n(define-read-only (get-dy (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (x-amount uint))\n    (let \n        (\n            \n            (pair-data (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get swap-fees)))\n            (swap-fee-protocol (get protocol (var-get swap-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-protocol))\n            (current-amplification-coefficient (get amplification-coefficient pair-data))\n\n            ;; Scale up balances to perform AMM calculations with get-y\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts x-amount u0 x-decimals y-decimals))\n            (x-amount-scaled (get scaled-x scaled-up-swap-amount))\n            (x-amount-fees-lps-scaled (/ (* x-amount-scaled swap-fee-lps) u10000))\n            (x-amount-fees-protocol-scaled (/ (* x-amount-scaled swap-fee-protocol) u10000))\n            (x-amount-total-fees-scaled (/ (* x-amount total-swap-fee) u10000))\n            (updated-x-amount-scaled (- x-amount-scaled x-amount-total-fees-scaled))\n            (updated-x-balance-scaled (+ current-balance-x-scaled updated-x-amount-scaled))\n            (new-y-scaled (get-y current-balance-x-scaled current-balance-y-scaled updated-x-amount-scaled (* current-amplification-coefficient number-of-tokens)))\n            \n            ;; Scale down to precise amounts for y and dy, as well as x-amount-fee-lps, and x-amount-fee-protocol\n            (new-y (get scaled-y (get-scaled-down-token-amounts u0 new-y-scaled x-decimals y-decimals)))\n            (dy (- current-balance-y new-y))\n            (x-amount-fee-lps (get scaled-x (get-scaled-down-token-amounts x-amount-fees-lps-scaled u0 x-decimals y-decimals)))\n            (x-amount-fee-protocol (get scaled-x (get-scaled-down-token-amounts x-amount-fees-protocol-scaled u0 x-decimals y-decimals)))\n        )\n        (ok dy)\n    )\n)\n\n;; Get Y\n;; Maybe move into get-dy?\n(define-read-only (get-y (x-bal uint) (y-bal uint) (x-amount uint) (ann uint))\n    (let \n        (\n            (x-bal-new (+ x-bal x-amount))\n            (current-D (get-D x-bal y-bal ann))\n            (c0 current-D)\n            (c1 (/ (* c0 current-D) (* number-of-tokens x-bal-new)))\n            (c2 (/ (* c1 current-D) (* ann number-of-tokens)))\n            (b (+ x-bal-new (/ current-D ann)))\n        )\n        (get converged (fold y-for-loop index-list {y: current-D, c: c2, b: b, D: current-D, converged: u0}))\n    )\n)\n\n;; Get Y Helper\n(define-private (y-for-loop (n uint) (y-info {y: uint, c: uint, b: uint, D: uint, converged: uint})) \n    (let\n        (\n            (current-y (get y y-info))\n            (current-c (get c y-info))\n            (current-b (get b y-info))\n            (current-D (get D y-info))\n            (current-converged (get converged y-info))\n            (y-numerator (+ (* current-y current-y) current-c))\n            (y-denominator (- (+ (* u2 current-y) current-b) current-D))\n            (new-y (/ y-numerator y-denominator))\n            (threshold (var-get convergence-threshold))\n\n        )\n\n        (if (is-eq current-converged u0)\n            (if (> new-y  current-y)\n                (if (<= (- new-y current-y) threshold)\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: new-y}\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n                (if (<= (- current-y new-y) threshold)\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: new-y}\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n            )\n            y-info\n        )\n\n    )\n)\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;\n;;; Swap Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;\n\n;; Swap X -> Y\n;; @desc: Swaps X token for Y token\n;; @params: x-token: principal, y-token: principal, lp-token: principal, x-amount: uint, min-y-amount: uint\n(define-public (swap-x-for-y (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (x-amount uint) (min-y-amount uint)) \n    (let \n        (\n            (swapper tx-sender)\n            (pair-data (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval pair-data))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get swap-fees)))\n            (swap-fee-protocol (get protocol (var-get swap-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-protocol))\n            (current-amplification-coefficient (get amplification-coefficient pair-data))\n\n            ;; Scale up balances and the swap amount to perform AMM calculations with get-y\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts x-amount u0 x-decimals y-decimals))\n            (x-amount-scaled (get scaled-x scaled-up-swap-amount))\n            (x-amount-fees-lps-scaled (/ (* x-amount-scaled swap-fee-lps) u10000))\n            (x-amount-fees-protocol-scaled (/ (* x-amount-scaled swap-fee-protocol) u10000))\n            (updated-x-amount-scaled (- x-amount-scaled (+ x-amount-fees-lps-scaled x-amount-fees-protocol-scaled)))\n            (updated-x-balance-scaled (+ current-balance-x-scaled updated-x-amount-scaled))\n            (new-y-scaled (get-y current-balance-x-scaled current-balance-y-scaled updated-x-amount-scaled (* current-amplification-coefficient number-of-tokens)))\n            \n            ;; Scale down to precise amounts for y and dy, as well as x-amount-fee-lps, and x-amount-fee-protocol\n            (new-y (get scaled-y (get-scaled-down-token-amounts u0 new-y-scaled x-decimals y-decimals)))\n            (dy (- current-balance-y new-y))\n            (x-amount-fee-lps (get scaled-x (get-scaled-down-token-amounts x-amount-fees-lps-scaled u0 x-decimals y-decimals)))\n            (x-amount-fee-protocol (get scaled-x (get-scaled-down-token-amounts x-amount-fees-protocol-scaled u0 x-decimals y-decimals)))\n            (updated-x-amount (- x-amount (+ x-amount-fee-lps x-amount-fee-protocol)))\n            (updated-x-balance (+ current-balance-x updated-x-amount))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! current-approval (err \"err-pair-not-approved\"))\n\n        ;; Assert that x-amount is less than x10 of current-balance-x\n        (asserts! (< x-amount (* u10 current-balance-x)) (err \"err-x-amount-too-high\"))\n\n        ;; Assert that dy is greater than min-y-amount\n        (asserts! (> dy min-y-amount) (err \"err-min-y-amount\"))\n\n        ;; Transfer updated-x-balance tokens from tx-sender to this contract\n        (if (> updated-x-amount u0) \n            (unwrap! (contract-call? x-token transfer updated-x-amount swapper (as-contract tx-sender) none) (err \"err-transferring-token-x\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-lps tokens from tx-sender to staking-and-rewards-contract\n        (if (> x-amount-fee-lps u0) \n            (unwrap! (contract-call? x-token transfer x-amount-fee-lps swapper (var-get staking-and-rewards-contract) none) (err \"err-transferring-token-x-fee\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-protocol tokens from tx-sender to protocol-address\n        (if (> x-amount-fee-protocol u0) \n            (unwrap! (contract-call? x-token transfer x-amount-fee-protocol swapper protocol-address none) (err \"err-transferring-token-x-fee-protocol\"))\n            false\n        )\n\n        ;; Transfer dy tokens from this contract to tx-sender\n        (if (> dy u0) \n            (unwrap! (as-contract (contract-call? y-token transfer dy tx-sender swapper none)) (err \"err-transferring-token-y\")) \n            false\n        )\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            pair-data \n            {\n                balance-x: updated-x-balance,\n                balance-y: new-y,\n                d: (get-D updated-x-balance-scaled new-y-scaled (* (get amplification-coefficient pair-data) number-of-tokens))\n            }\n        ))\n\n        ;; Match if map-get? returns some for CycleDataMap\n        (match (map-get? CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)})\n            cycle-data\n                ;; Update CycleDataMap\n                (map-set CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} (merge \n                    cycle-data \n                    {\n                        cycle-fee-balance-x: (+ (get cycle-fee-balance-x cycle-data) x-amount-fee-lps)\n                    }\n                ))\n                ;; Create new CycleDataMap\n                (map-set CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} {\n                    cycle-fee-balance-x: x-amount-fee-lps,\n                    cycle-fee-balance-y: u0,\n                }) \n        )\n\n        ;; Return the number of y tokens returned from the swap\n        (ok dy)\n\n    )\n)\n;; Swap Y -> X\n;; @desc: Swaps Y token for X token\n;; @params: y-token: principal, x-token: principal, lp-token: principal, x-amount: uint, min-x-amount: uint\n(define-public (swap-y-for-x (y-token <sip-010-trait>) (x-token <sip-010-trait>) (lp-token <lp-trait>) (y-amount uint) (min-x-amount uint)) \n    (let \n        (\n            (swapper tx-sender)\n            (pair-data (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval pair-data))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get swap-fees)))\n            (swap-fee-protocol (get protocol (var-get swap-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-protocol))\n            (current-amplification-coefficient (get amplification-coefficient pair-data))\n\n            ;; Scale up balances and the swap amount to perform AMM calculations with get-x\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts u0 y-amount x-decimals y-decimals))\n            (y-amount-scaled (get scaled-y scaled-up-swap-amount))\n            (y-amount-fees-lps-scaled (/ (* y-amount-scaled swap-fee-lps) u10000))\n            (y-amount-fees-protocol-scaled (/ (* y-amount-scaled swap-fee-protocol) u10000))\n            (updated-y-amount-scaled (- y-amount-scaled (+ y-amount-fees-lps-scaled y-amount-fees-protocol-scaled)))\n            (updated-y-balance-scaled (+ current-balance-y-scaled updated-y-amount-scaled))\n            (new-x-scaled (get-x current-balance-y-scaled current-balance-x-scaled updated-y-amount-scaled (* current-amplification-coefficient number-of-tokens)))\n            \n            ;; Scale down to precise amounts for y and dy, as well as y-amount-fee-lps, and y-amount-fee-protocol\n            (new-x (get scaled-x (get-scaled-down-token-amounts new-x-scaled u0 x-decimals y-decimals)))\n            (dx (- current-balance-x new-x))\n            (y-amount-fee-lps (get scaled-y (get-scaled-down-token-amounts u0 y-amount-fees-lps-scaled x-decimals y-decimals)))\n            (y-amount-fee-protocol (get scaled-y (get-scaled-down-token-amounts u0 y-amount-fees-protocol-scaled x-decimals y-decimals)))\n            (updated-y-amount (- y-amount (+ y-amount-fee-lps y-amount-fee-protocol)))\n            (updated-y-balance (+ current-balance-y updated-y-amount))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! current-approval (err \"err-pair-not-approved\"))\n\n        ;; Assert that y-amount is less than x10 of current-balance-y\n        (asserts! (< y-amount (* u10 current-balance-y)) (err \"err-y-amount-too-high\"))\n\n        ;; Assert that dx is greater than min-x-amount\n        (asserts! (> dx min-x-amount) (err \"err-min-x-amount\"))\n\n        ;; Transfer updated-y-balance tokens from tx-sender to this contract\n        (if (> updated-y-amount u0) \n            (unwrap! (contract-call? y-token transfer updated-y-amount swapper (as-contract tx-sender) none) (err \"err-transferring-token-y\"))\n            false\n        )\n\n        ;; Transfer y-amount-fee-lps tokens from tx-sender to staking-and-rewards-contract\n        (if (> y-amount-fee-lps u0) \n            (unwrap! (contract-call? y-token transfer y-amount-fee-lps swapper (var-get staking-and-rewards-contract) none) (err \"err-transferring-token-y-swap-fee\"))\n            false\n        )\n\n        ;; Transfer y-amount-fee-protocol tokens from tx-sender to protocol-address\n        (if (> y-amount-fee-protocol u0) \n            (unwrap! (contract-call? y-token transfer y-amount-fee-protocol swapper protocol-address none) (err \"err-transferring-token-y-protocol-fee\"))\n            false\n        )\n\n        ;; Transfer dx tokens from this contract to tx-sender\n        (if (> dx u0) \n            (unwrap! (as-contract (contract-call? x-token transfer dx tx-sender swapper none)) (err \"err-transferring-token-x\"))\n            false\n        )\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            pair-data \n            {\n                balance-x: new-x,\n                balance-y: updated-y-balance,\n                d: (get-D new-x-scaled updated-y-balance-scaled (* (get amplification-coefficient pair-data) number-of-tokens))\n            }\n        ))\n\n        ;; Match if map-get? returns some for CycleDataMap\n        (match (map-get? CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)})\n            cycle-data\n                ;; Update CycleDataMap\n                (map-set CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} (merge \n                    cycle-data \n                    {\n                        cycle-fee-balance-y: (+ (get cycle-fee-balance-y cycle-data) y-amount-fee-lps)\n                    }\n                ))\n                ;; Create new CycleDataMap\n                (map-set CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} {\n                    cycle-fee-balance-x: u0,\n                    cycle-fee-balance-y: y-amount-fee-lps,\n                }) \n        )\n\n        ;; Return the number of x tokens returned from the swap\n        (ok dx)\n\n    )\n)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Liquidity Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Add Liquidity\n;; @desc: Adds liquidity to a pair, mints the appropriate amount of LP tokens\n;; @params: x-token: principal, y-token: principal, lp-token: principal, x-amount-added: uint, y-amount-added: uint\n(define-public (add-liquidity (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (x-amount-added uint) (y-amount-added uint) (min-lp-amount uint) )\n    (let \n        (\n            ;; Grabbing all data from PairsDataMap\n            (liquidity-provider tx-sender)\n            (current-pair (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval current-pair))\n            (x-decimals (get x-decimals current-pair))\n            (y-decimals (get y-decimals current-pair))\n            (current-balance-x (get balance-x current-pair))\n            (new-balance-x (+ current-balance-x x-amount-added))\n            (current-balance-y (get balance-y current-pair))\n            (new-balance-y (+ current-balance-y y-amount-added))\n            (current-total-shares (get total-shares current-pair))\n            (current-amplification-coefficient (get amplification-coefficient current-pair))\n            \n            ;; Scale up for AMM calculations depending on decimal places assigned to tokens\n            (amounts-added-scaled (get-scaled-up-token-amounts x-amount-added y-amount-added x-decimals y-decimals))\n            (x-amount-added-scaled (get scaled-x amounts-added-scaled))\n            (y-amount-added-scaled (get scaled-y amounts-added-scaled))\n            (current-balances-scaled (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x current-balances-scaled))\n            (current-balance-y-scaled (get scaled-y current-balances-scaled))\n            (new-balances-scaled (get-scaled-up-token-amounts new-balance-x new-balance-y x-decimals y-decimals))\n            (new-balance-x-scaled (get scaled-x new-balances-scaled))\n            (new-balance-y-scaled (get scaled-y new-balances-scaled))\n            \n            ;; Calculating the ideal balance\n            (d0 (get-D current-balance-x-scaled current-balance-y-scaled (* current-amplification-coefficient number-of-tokens)))\n            (d1 (get-D new-balance-x-scaled new-balance-y-scaled (* current-amplification-coefficient number-of-tokens)))\n            (ideal-balance-x-scaled (/ (* d1 current-balance-x-scaled) d0))\n            (ideal-balance-y-scaled (/ (* d1 current-balance-y-scaled) d0))\n            (x-difference (if (> ideal-balance-x-scaled new-balance-x-scaled) (- ideal-balance-x-scaled new-balance-x-scaled) (- new-balance-x-scaled ideal-balance-x-scaled)))\n            (y-difference (if (> ideal-balance-y-scaled new-balance-y-scaled) (- ideal-balance-y-scaled new-balance-y-scaled) (- new-balance-y-scaled ideal-balance-y-scaled)))\n            \n            ;; Fees applied if adding imbalanced liquidity\n            (ideal-x-fee-scaled (/ (* x-difference (var-get liquidity-fees)) u10000))\n            (ideal-y-fee-scaled (/ (* y-difference (var-get liquidity-fees)) u10000))\n            (x-fee-scaled (if (> x-amount-added-scaled ideal-x-fee-scaled) ideal-x-fee-scaled x-amount-added-scaled))\n            (y-fee-scaled (if (> y-amount-added-scaled ideal-y-fee-scaled) ideal-y-fee-scaled y-amount-added-scaled))\n            (x-amount-added-updated-scaled (- x-amount-added-scaled x-fee-scaled))\n            (y-amount-added-updated-scaled (- y-amount-added-scaled y-fee-scaled))\n            (new-balance-x-post-fee-scaled (+ current-balance-x-scaled x-amount-added-updated-scaled))\n            (new-balance-y-post-fee-scaled (+ current-balance-y-scaled y-amount-added-updated-scaled))\n            (d2 (get-D new-balance-x-post-fee-scaled new-balance-y-post-fee-scaled (* current-amplification-coefficient number-of-tokens)))\n\n            ;; Scale down for precise token balance updates and transfers\n            (precise-fees (get-scaled-down-token-amounts x-fee-scaled y-fee-scaled x-decimals y-decimals))\n            (x-fee (get scaled-x precise-fees))\n            (y-fee (get scaled-y precise-fees))\n            (amounts-added-scaled-down (get-scaled-down-token-amounts x-amount-added-updated-scaled y-amount-added-updated-scaled x-decimals y-decimals))\n            (x-amount-added-updated (get scaled-x amounts-added-scaled-down))\n            (y-amount-added-updated (get scaled-y amounts-added-scaled-down))\n            (balances-post-fee-scaled-down (get-scaled-down-token-amounts new-balance-x-post-fee-scaled new-balance-y-post-fee-scaled x-decimals y-decimals))\n            (new-balance-x-post-fee (get scaled-x balances-post-fee-scaled-down))\n            (new-balance-y-post-fee (get scaled-y balances-post-fee-scaled-down))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! current-approval (err \"err-pair-not-approved\"))\n\n        ;; Assert that either x-amount-added or y-amount-added is greater than 0\n        (asserts! (or (> x-amount-added-updated u0) (> y-amount-added-updated u0)) (err \"err-x-or-y-amount-added-zero\"))\n\n        ;; Assert that d2 is greater than d0\n        (asserts! (> d2 d0) (err \"err-d2-less-than-d0\"))\n\n        ;; Assert that derived mint amount is greater than min-lp-amount\n        (asserts! (> (/ (* current-total-shares (- d2 d0)) d0) min-lp-amount) (err \"err-derived-amount-less-than-lp\"))\n\n        ;; ;; Transfer x-amount-added tokens from tx-sender to this contract\n        (if (> x-amount-added-updated u0) \n            (unwrap! (contract-call? x-token transfer x-amount-added-updated liquidity-provider (as-contract tx-sender) none) (err \"err-transferring-token-x-escrow\"))\n            false\n        )\n\n        ;; Transfer y-amount-added tokens from tx-sender to this contract\n        (if (> y-amount-added-updated u0)\n            (unwrap! (contract-call? y-token transfer y-amount-added-updated liquidity-provider (as-contract tx-sender) none) (err \"err-transferring-token-y\"))\n            false\n        )\n        \n        ;; Transfer x-fees tokens from tx-sender to protocol-address\n        (if (> x-fee u0)\n            (unwrap! (contract-call? x-token transfer x-fee liquidity-provider protocol-address none) (err \"err-transferring-token-x-protocol\"))\n            false\n        )\n         ;; Transfer y-fees tokens from tx-sender to protocol-address\n        (if (> y-fee u0)\n            (unwrap! (contract-call? y-token transfer y-fee liquidity-provider protocol-address none) (err \"err-transferring-token-y-protocol\"))\n            false\n        )\n\n        ;; Mint LP tokens to tx-sender\n        (unwrap! (as-contract (contract-call? lp-token mint liquidity-provider (/ (* current-total-shares (- d2 d0)) d0))) (err \"err-minting-lp-tokens\"))\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} \n            (merge \n                current-pair \n                {\n                    balance-x: new-balance-x-post-fee,\n                    balance-y: new-balance-y-post-fee,\n                    total-shares: (+ current-total-shares (/ (* current-total-shares (- d2 d0)) d0)),\n                    d: d2\n                }\n        ))\n\n        ;; Return the number of LP tokens minted\n        (ok (/ (* current-total-shares (- d2 d0)) d0))\n    )\n)\n\n;; Withdraw Liquidity\n;; @desc: Withdraws liquidity from both pairs & burns the appropriate amount of LP tokens\n;; @params: x-token: principal, y-token: principal, lp-token: principal, lp-amount: uint, min-x-amount: uint, min-y-amount: uint\n(define-public (withdraw-liquidity (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (lp-amount uint) (min-x-amount uint) (min-y-amount uint))\n    (let \n        (\n            ;; Grabbing all data from PairsDataMap\n            (current-pair (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval current-pair))\n            (x-decimals (get x-decimals current-pair))\n            (y-decimals (get y-decimals current-pair))\n            (current-balance-x (get balance-x current-pair))\n            (current-balance-y (get balance-y current-pair))\n            (current-total-shares (get total-shares current-pair))\n            (current-amplification-coefficient (get amplification-coefficient current-pair))\n            (withdrawal-balance-x (/ (* current-balance-x lp-amount) current-total-shares))\n            (withdrawal-balance-y (/ (* current-balance-y lp-amount) current-total-shares))\n            (new-balance-x (- current-balance-x withdrawal-balance-x))\n            (new-balance-y (- current-balance-y withdrawal-balance-y))\n            (liquidity-remover tx-sender)\n            ;; get-D using the new-balance-x and new-balance-y\n            (new-balances-scaled (get-scaled-up-token-amounts new-balance-x new-balance-y x-decimals y-decimals))\n            (new-balance-x-scaled (get scaled-x new-balances-scaled))\n            (new-balance-y-scaled (get scaled-y new-balances-scaled))\n            (new-d (get-D new-balance-x-scaled new-balance-y-scaled (* current-amplification-coefficient number-of-tokens)))\n        )\n\n        ;; Assert that withdrawal-balance-x is greater than min-x-amount\n        (asserts! (> withdrawal-balance-x min-x-amount) (err \"err-withdrawal-balance-x-less-than-min-x-amount\"))\n\n        ;; Assert that withdrawal-balance-y is greater than min-y-amount\n        (asserts! (> withdrawal-balance-y min-y-amount) (err \"err-withdrawal-balance-y-less-than-min-y-amount\"))\n\n        ;; Burn LP tokens from tx-sender\n        (unwrap! (contract-call? lp-token burn liquidity-remover lp-amount) (err \"err-burning-lp-tokens\"))\n\n        ;; Transfer withdrawal-balance-x tokens from this contract to liquidity-taker\n        (unwrap! (as-contract (contract-call? x-token transfer withdrawal-balance-x tx-sender liquidity-remover none)) (err \"err-transferring-token-x\"))\n\n        ;; Transfer withdrawal-balance-y tokens from this contract to liquidity-taker\n        (unwrap! (as-contract (contract-call? y-token transfer withdrawal-balance-y tx-sender liquidity-remover none)) (err \"err-transferring-token-y\"))\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            current-pair \n            {\n                balance-x: new-balance-x,\n                balance-y: new-balance-y,\n                total-shares: (- current-total-shares lp-amount),\n                d: new-d\n            }\n        ))\n\n        ;; Return the number X tokens and Y tokens received after withdrawing from pool\n        (ok {withdrawal-x-balance: withdrawal-balance-x, withdrawal-y-balance: withdrawal-balance-y})\n    )\n)\n\n\n;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;\n;;; AMM Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;\n\n;; D for loop\n;; Get D\n(define-read-only (get-D (x-bal uint) (y-bal uint) (ann uint))\n    (get converged (fold D-for-loop index-list {D: (+ x-bal y-bal), x-bal: x-bal, y-bal: y-bal, ann: ann, converged: u0}))\n)\n\n;; Get D Helper\n(define-private (D-for-loop (n uint) (D-info {D: uint, x-bal: uint, y-bal: uint, ann: uint, converged: uint})) \n    (let \n        (\n            ;; Grabbing everything from D-info\n            (current-D-partial (get D D-info))\n            (current-D (get D D-info))\n            (current-x-bal (get x-bal D-info))\n            (current-y-bal (get y-bal D-info))\n            (current-S (+ current-x-bal current-y-bal))\n            (current-ann (get ann D-info))\n            (current-converged (get converged D-info))\n\n            ;; Start logic for calculating new D\n            ;; Calculate new partial D with respect to x\n            (new-D-partial-x (/ (* current-D current-D-partial) (* u2 current-x-bal)))\n            ;; Calculate new partial D with respect to now x & y\n            (new-D-partial (/ (* current-D new-D-partial-x ) (* u2 current-y-bal)))\n\n            (new-numerator (* (+ (* current-ann current-S) (* number-of-tokens new-D-partial)) current-D))\n            (new-denominator (+ (* (- current-ann u1) current-D) (* (+ number-of-tokens u1 ) new-D-partial)))\n\n            (new-D (/ new-numerator new-denominator))\n            (threshold (var-get convergence-threshold))\n\n            \n        )\n        \n        ;; Check if converged value / new D was already found\n        (if (is-eq current-converged u0)\n            (if (> new-D  current-D)\n                (if (<= (- new-D current-D) threshold)\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: new-D}\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: u0}\n                )\n                (if (<= (- current-D new-D) threshold)\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: new-D}\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: u0}\n                )\n            )\n            D-info\n        )\n    \n    )\n)\n\n;; Scale up the token amounts to the same level of precision before performing AMM calculations\n;; @params: x-amount-unscaled: uint, y-amount-unscaled:uint, x-num-decimals: uint, y-num-decimals: uint\n(define-private (get-scaled-up-token-amounts (x-amount-unscaled uint) (y-amount-unscaled uint) (x-num-decimals uint) (y-num-decimals uint))\n    (let \n        (\n            (scaled-x \n                ;; if same number of decimals, set to x-amount-unscaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    x-amount-unscaled\n                    ;; if x has more decimals, set to x-amount-unscaled; otherwise scale up by the difference in decimals\n                    (if (> x-num-decimals y-num-decimals) x-amount-unscaled (* x-amount-unscaled (pow u10 (- y-num-decimals x-num-decimals))))\n                )\n            )\n            (scaled-y \n                ;; if same number of decimals, set to y-amount-unscaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    y-amount-unscaled\n                    ;; if y has more decimals, set to y-amount-unscaled; otherwise scale up by the difference in decimals\n                    (if (> y-num-decimals x-num-decimals) y-amount-unscaled (* y-amount-unscaled (pow u10 (- x-num-decimals y-num-decimals))))\n                )\n            )\n        )\n        {scaled-x: scaled-x, scaled-y: scaled-y}\n    )\n)\n\n;; Scale down the token amounts to their respective levels of precision before performing any transfers\n;; @params: x-amount-scaled: uint, y-amount-scaled:uint, x-num-decimals: uint, y-num-decimals: uint\n(define-private (get-scaled-down-token-amounts (x-amount-scaled uint) (y-amount-scaled uint) (x-num-decimals uint) (y-num-decimals uint))\n    (let \n        (\n            (scaled-x \n                ;; if same number of decimals, set to x-amount-scaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    x-amount-scaled\n                    ;; if x has more decimals, set to x-amount-scaled; otherwise scale down by the difference in decimals\n                    (if (> x-num-decimals y-num-decimals) x-amount-scaled (/ x-amount-scaled (pow u10 (- y-num-decimals x-num-decimals))))\n                )\n            )\n            (scaled-y \n                ;; if same number of decimals, set to y-amount-scaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    y-amount-scaled\n                    ;; if y has more decimals, set to y-amount-scaled; otherwise scale down by the difference in decimals\n                    (if (> y-num-decimals x-num-decimals) y-amount-scaled (/ y-amount-scaled (pow u10 (- x-num-decimals y-num-decimals))))\n                )\n            )\n        )\n        {scaled-x: scaled-x, scaled-y: scaled-y}\n    )\n)\n\n;; @desc - Helper function for removing a admin\n(define-private (is-not-removeable (admin principal))\n  (not (is-eq admin (var-get helper-principal)))\n)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Goverance Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Create Pair\n;; @desc: Creates a new pair for trading\n;; @params: x-token: principal, y-token: principal, lp-token: principal, amplification-coefficient: uint, pair-name: string, x-balance: uint, y-balance: uint\n;; initial-balance param is for TOTAL balance of x + y tokens (aka 2x or 2y or (x + y))\n(define-public (create-pair (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (amplification-coefficient uint) (pair-name (string-ascii 32)) (initial-x-bal uint) (initial-y-bal uint))\n    (let \n        (\n            (lp-owner tx-sender)\n            (x-decimals (unwrap! (contract-call? x-token get-decimals) (err \"err-getting-x-decimals\")))\n            (y-decimals (unwrap! (contract-call? y-token get-decimals) (err \"err-getting-y-decimals\")))\n            (scaled-up-balances (get-scaled-up-token-amounts initial-x-bal initial-y-bal x-decimals y-decimals))\n            (initial-x-bal-scaled (get scaled-x scaled-up-balances))\n            (initial-y-bal-scaled (get scaled-y scaled-up-balances))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of (var-get admins) tx-sender )) (err \"err-not-admin\"))\n\n        ;; Assert using and that the pair does not already exist using is-none & map-get?\n        (asserts! (and \n            (is-none (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}))\n            (is-none (map-get? PairsDataMap {x-token: (contract-of y-token), y-token: (contract-of x-token), lp-token: (contract-of lp-token)}))\n        )  (err \"err-pair-xy-or-yx-exists\"))\n\n        ;; Assert that both initial balances are greater than 0\n        (asserts! (or (> initial-x-bal u0) (> initial-y-bal u0)) (err \"err-initial-bal-zero\"))\n\n        ;; Assert that x & y tokens are the same\n        (asserts! (is-eq initial-x-bal-scaled initial-y-bal-scaled) (err \"err-initial-bal-odd\"))\n\n        ;; Mint LP tokens to tx-sender\n        (unwrap! (as-contract (contract-call? lp-token mint lp-owner (+ initial-x-bal-scaled initial-y-bal-scaled))) (err \"err-minting-lp-tokens\"))\n\n        ;; Transfer token x liquidity to this contract\n        (unwrap! (contract-call? x-token transfer initial-x-bal tx-sender (as-contract tx-sender) none) (err \"err-transferring-token-x\"))\n\n        ;; Transfer token y liquidity to this contract\n        (unwrap! (contract-call? y-token transfer initial-y-bal tx-sender (as-contract tx-sender) none) (err \"err-transferring-token-y\"))\n\n        ;; Update all appropriate maps\n        (ok (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} {\n            approval: true,\n            total-shares: (+ initial-x-bal-scaled initial-y-bal-scaled),\n            x-decimals: x-decimals,\n            y-decimals: y-decimals,\n            balance-x: initial-x-bal,\n            balance-y: initial-y-bal,\n            d: (+ initial-x-bal-scaled initial-y-bal-scaled),\n            amplification-coefficient: amplification-coefficient,\n        }))\n    )\n)\n\n\n;; Setting Pair Approval\n;; @desc: Sets the approval of a pair\n;; @params: x-token: principal, y-token: principal, lp-token: principal, approval: bool\n(define-public (set-pair-approval (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (approval bool))\n    (let \n        (\n            (current-pair (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of (var-get admins) tx-sender)) (err \"err-not-admin\"))\n\n        ;; Update all appropriate maps\n        (ok (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            current-pair\n            {\n                approval: approval\n            }\n        )))\n    )\n)\n\n;; Add Admin\n;; @desc: Adds an admin to the admins var list\n;; @params: admin: principal\n(define-public (add-admin (admin principal))\n    (let \n        (\n            (current-admins (var-get admins))\n            ;;(new-admins (unwrap! (as-max-len? (append current-admins admin) u5) (\"err-add-admin-overflow\")))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Assert that admin is not already an admin using is-none & index-of with the admins var\n        (asserts! (is-none (index-of current-admins admin)) (err \"err-already-admin\"))\n\n        ;; Update all appropriate maps\n        (ok (var-set admins (unwrap! (as-max-len? (append current-admins admin) u5) (err \"err-admin-overflow\"))))\n    )\n)\n\n;; Remove admin\n(define-public (remove-admin (admin principal))\n  (let\n    (\n      (current-admin-list (var-get admins))\n      (caller-principal-position-in-list (index-of current-admin-list tx-sender))\n      (removeable-principal-position-in-list (index-of current-admin-list admin))\n    )\n\n    ;; asserts tx-sender is an existing whitelist address\n    (asserts! (is-some caller-principal-position-in-list) (err \"err-not-auth\"))\n\n    ;; asserts param principal (removeable whitelist) already exist\n    (asserts! (is-some removeable-principal-position-in-list) (err \"err-not-whitelisted\"))\n\n    ;; asserts the initial contract deployer cannot be removed from admin list to protect against rogue admins\n    (asserts! (not (is-eq admin contract-deployer)) (err \"err-cannot-remove-contract-deployer\"))\n\n    ;; temporary var set to help remove param principal\n    (var-set helper-principal admin)\n\n    ;; filter existing whitelist address\n    (ok \n      (var-set admins (filter is-not-removeable current-admin-list))\n    )\n  )\n)\n\n;; Change Swap Fee\n(define-public (change-swap-fee (new-lps-fee uint) (new-protocol-fee uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set swap-fees {lps: new-lps-fee, protocol: new-protocol-fee}))\n    )\n)\n\n;; Change Liquidity Fee\n(define-public (change-liquidity-fee (new-liquidity-fee uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set liquidity-fees new-liquidity-fee))\n    )\n)\n\n;; Admins can change the amplification coefficient in PairsDataMap\n;; @params: x-token: principal, y-token: principal, lp-token: principal, amplification-coefficient: uint\n(define-public (change-amplification-coefficient (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (amplification-coefficient uint))\n    (let \n        (\n            (current-pair (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-admins (var-get admins))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Update all appropriate maps\n        (ok (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            current-pair\n            {\n                amplification-coefficient: amplification-coefficient\n            }\n        )))\n    )\n)\n\n;; Change Convergence Threshold \n(define-public (change-convergence-threshold (new-convergence-threshold uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set convergence-threshold new-convergence-threshold))\n    )\n)\n\n;; Admins can set the contract for handling staking and rewards\n;; @params: staking-contract: principal\n(define-public (set-staking-contract (staking-contract principal))\n    (let \n        (\n            (current-admins (var-get admins))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Set contract for handling staking and rewards\n        (var-set staking-and-rewards-contract staking-contract)\n        \n        (ok staking-contract)\n    )\n)",
    "analysis": {
      "summary": "This contract implements the core logic for a Stableswap-like decentralized exchange (DEX) on the Stacks blockchain, including liquidity provision, swaps, and governance.",
      "explanation": "The Bitflow Stableswap Core Contract is a sophisticated implementation of a DEX with features tailored for stablecoin trading, but adaptable to other tokens. It includes mechanisms for liquidity management, swap operations, and governance. The contract uses the Newton-Raphson method for numerical analysis, specifically for calculating square roots in the AMM formula, which is crucial for price determination in swaps. Governance features allow for administrative control over key parameters and operations, ensuring the protocol can adapt to changing conditions or improve over time.\n\nKey components include:\n- **Constants and Variables**: Defines essential constants like `cycle-length` for time-based operations and variables for managing fees, admin governance, and more.\n- **Maps**: Utilizes Clarity maps to store pair data and cycle-specific information, facilitating the tracking of liquidity and fees over time.\n- **Swap Functions**: Implements the logic for token swaps, including `swap-x-for-y` and `swap-y-for-x`, with fee calculations and balance updates.\n- **Liquidity Functions**: Handles liquidity addition and removal, adjusting token balances and LP token supply accordingly.\n- **AMM Functions**: Contains the core mathematical operations for the AMM, including the calculation of the invariant `D` using the Newton-Raphson method.\n- **Governance Functions**: Allows admins to manage the protocol, including creating pairs, setting fees, and adjusting the amplification coefficient.\n\nEach function is meticulously designed to ensure the protocol's integrity, from safeguarding against unauthorized access to ensuring mathematical accuracy in its AMM calculations.",
      "tags": [
        "DeFi",
        "DEX",
        "Stableswap",
        "Liquidity-Pools",
        "Governance",
        "AMM"
      ]
    }
  },
  {
    "rank": 48,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.router-stableswap-alex-v-1-2",
    "calls": 692,
    "source": ";; router-stableswap-alex-v-1-2\n\n(use-trait stableswap-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait stableswap-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-pool-trait-v-1-2.stableswap-pool-trait)\n(use-trait alex-ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n\n(define-constant ERR_NOT_AUTHORIZED (err u6001))\n(define-constant ERR_INVALID_AMOUNT (err u6002))\n(define-constant ERR_INVALID_PRINCIPAL (err u6003))\n(define-constant ERR_ALREADY_ADMIN (err u6004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u6005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u6006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u6007))\n(define-constant ERR_SWAP_STATUS (err u6008))\n(define-constant ERR_MINIMUM_RECEIVED (err u6009))\n(define-constant ERR_SWAP_A (err u6010))\n(define-constant ERR_SWAP_B (err u6011))\n(define-constant ERR_SCALED_AMOUNT_A (err u6012))\n(define-constant ERR_QUOTE_A (err u6013))\n(define-constant ERR_QUOTE_B (err u6014))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var swap-status bool true)\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (set-swap-status (status bool))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (var-set swap-status status)\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (get-quote-a\n    (amount uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>)))\n    (alex-factors (tuple (a uint)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (stableswap-qa amount stableswap-tokens stableswap-pools) ERR_QUOTE_A)\n                 (unwrap! (alex-qa amount alex-tokens alex-factors) ERR_QUOTE_A)))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-stableswap-amount quote-a (get b stableswap-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount quote-a (get b alex-tokens) (get a stableswap-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qa scaled-amount-a alex-tokens alex-factors) ERR_QUOTE_B)\n                 (unwrap! (stableswap-qa scaled-amount-a stableswap-tokens stableswap-pools) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-b\n    (amount uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (stableswap-qa amount stableswap-tokens stableswap-pools) ERR_QUOTE_A)\n                 (unwrap! (alex-qb amount alex-tokens alex-factors) ERR_QUOTE_A)))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-stableswap-amount quote-a (get b stableswap-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount quote-a (get c alex-tokens) (get a stableswap-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qb scaled-amount-a alex-tokens alex-factors) ERR_QUOTE_B)\n                 (unwrap! (stableswap-qa scaled-amount-a stableswap-tokens stableswap-pools) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-c\n    (amount uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (stableswap-qa amount stableswap-tokens stableswap-pools) ERR_QUOTE_A)\n                 (unwrap! (alex-qc amount alex-tokens alex-factors) ERR_QUOTE_A)))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-stableswap-amount quote-a (get b stableswap-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount quote-a (get d alex-tokens) (get a stableswap-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qc scaled-amount-a alex-tokens alex-factors) ERR_QUOTE_B)\n                 (unwrap! (stableswap-qa scaled-amount-a stableswap-tokens stableswap-pools) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-d\n    (amount uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>) (e <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (stableswap-qa amount stableswap-tokens stableswap-pools) ERR_QUOTE_A)\n                 (unwrap! (alex-qd amount alex-tokens alex-factors) ERR_QUOTE_A)))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-stableswap-amount quote-a (get b stableswap-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount quote-a (get e alex-tokens) (get a stableswap-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (alex-qd scaled-amount-a alex-tokens alex-factors) ERR_QUOTE_B)\n                 (unwrap! (stableswap-qa scaled-amount-a stableswap-tokens stableswap-pools) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>)))\n    (alex-factors (tuple (a uint)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (stableswap-sa amount stableswap-tokens stableswap-pools) ERR_SWAP_A)\n                (unwrap! (alex-sa amount alex-tokens alex-factors) ERR_SWAP_A)))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-stableswap-amount swap-a (get b stableswap-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount swap-a (get b alex-tokens) (get a stableswap-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sa scaled-amount-a alex-tokens alex-factors) ERR_SWAP_B)\n                (unwrap! (stableswap-sa scaled-amount-a stableswap-tokens stableswap-pools) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n             a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          alex-data: {\n            alex-tokens: alex-tokens,\n            alex-factors: alex-factors,\n            alex-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (stableswap-sa amount stableswap-tokens stableswap-pools) ERR_SWAP_A)\n                (unwrap! (alex-sb amount alex-tokens alex-factors) ERR_SWAP_A)))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-stableswap-amount swap-a (get b stableswap-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount swap-a (get c alex-tokens) (get a stableswap-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sb scaled-amount-a alex-tokens alex-factors) ERR_SWAP_B)\n                (unwrap! (stableswap-sa scaled-amount-a stableswap-tokens stableswap-pools) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-b\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          alex-data: {\n            alex-tokens: alex-tokens,\n            alex-factors: alex-factors,\n            alex-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-c\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (stableswap-sa amount stableswap-tokens stableswap-pools) ERR_SWAP_A)\n                (unwrap! (alex-sc amount alex-tokens alex-factors) ERR_SWAP_A)))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-stableswap-amount swap-a (get b stableswap-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount swap-a (get d alex-tokens) (get a stableswap-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sc scaled-amount-a alex-tokens alex-factors) ERR_SWAP_B)\n                (unwrap! (stableswap-sa scaled-amount-a stableswap-tokens stableswap-pools) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-c\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          alex-data: {\n            alex-tokens: alex-tokens,\n            alex-factors: alex-factors,\n            alex-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-d\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>) (e <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (stableswap-sa amount stableswap-tokens stableswap-pools) ERR_SWAP_A)\n                (unwrap! (alex-sd amount alex-tokens alex-factors) ERR_SWAP_A)))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-stableswap-amount swap-a (get b stableswap-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount swap-a (get e alex-tokens) (get a stableswap-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (alex-sd scaled-amount-a alex-tokens alex-factors) ERR_SWAP_B)\n                (unwrap! (stableswap-sa scaled-amount-a stableswap-tokens stableswap-pools) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-d\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          alex-data: {\n            alex-tokens: alex-tokens,\n            alex-factors: alex-factors,\n            alex-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-private (admin-not-removable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)\n\n(define-private (is-stableswap-path-reversed\n    (token-in <stableswap-ft-trait>) (token-out <stableswap-ft-trait>)\n    (pool-contract <stableswap-pool-trait>)\n  )\n  (let (\n    (pool-data (unwrap-panic (contract-call? pool-contract get-pool)))\n  )\n    (not (and (is-eq (contract-of token-in) (get x-token pool-data)) (is-eq (contract-of token-out) (get y-token pool-data))))\n  )\n)\n\n(define-private (scale-up-stableswap-amount\n    (amount uint)\n    (stableswap-token <stableswap-ft-trait>)\n    (alex-token <alex-ft-trait>)\n  )\n  (let (\n    (stableswap-decimals (unwrap-panic (contract-call? stableswap-token get-decimals)))\n    (alex-decimals (unwrap-panic (contract-call? alex-token get-decimals)))\n    (scaled-amount\n      (if (is-eq stableswap-decimals alex-decimals)\n        amount\n        (if (> stableswap-decimals alex-decimals)\n          (/ amount (pow u10 (- stableswap-decimals alex-decimals)))\n          (* amount (pow u10 (- alex-decimals stableswap-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n(define-private (scale-down-alex-amount\n    (amount uint)\n    (alex-token <alex-ft-trait>)\n    (stableswap-token <stableswap-ft-trait>)\n  )\n  (let (\n    (alex-decimals (unwrap-panic (contract-call? alex-token get-decimals)))\n    (stableswap-decimals (unwrap-panic (contract-call? stableswap-token get-decimals)))\n    (scaled-amount\n      (if (is-eq alex-decimals stableswap-decimals)\n        amount\n        (if (> alex-decimals stableswap-decimals)\n          (/ amount (pow u10 (- alex-decimals stableswap-decimals)))\n          (* amount (pow u10 (- stableswap-decimals alex-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n(define-private (stableswap-qa\n    (amount uint)\n    (tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    (is-reversed (is-stableswap-path-reversed (get a tokens) (get b tokens) (get a pools)))\n    (quote-a (if (is-eq is-reversed false)\n                 (try! (contract-call?\n                 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 get-dy\n                 (get a pools)\n                 (get a tokens) (get b tokens)\n                 amount))\n                 (try! (contract-call?\n                 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 get-dx\n                 (get a pools)\n                 (get b tokens) (get a tokens)\n                 amount))))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (alex-qa\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>)))\n    (factors (tuple (a uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (quote-a (unwrap-panic (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper\n                           (contract-of a-token) (contract-of b-token)\n                           (get a factors)\n                           amount)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (alex-qb\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (c-token (get c tokens))\n    (quote-a (unwrap-panic (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper-a\n                           (contract-of a-token) (contract-of b-token) (contract-of c-token)\n                           (get a factors) (get b factors)\n                           amount)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (alex-qc\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (c-token (get c tokens))\n    (d-token (get d tokens))\n    (quote-a (unwrap-panic (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper-b\n                           (contract-of a-token) (contract-of b-token) (contract-of c-token)\n                           (contract-of d-token)\n                           (get a factors) (get b factors) (get c factors)\n                           amount)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (alex-qd\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>) (e <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (c-token (get c tokens))\n    (d-token (get d tokens))\n    (e-token (get e tokens))\n    (quote-a (unwrap-panic (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper-c\n                           (contract-of a-token) (contract-of b-token) (contract-of c-token)\n                           (contract-of d-token) (contract-of e-token)\n                           (get a factors) (get b factors) (get c factors) (get d factors)\n                           amount)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (stableswap-sa\n    (amount uint)\n    (tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    (is-reversed (is-stableswap-path-reversed (get a tokens) (get b tokens) (get a pools)))\n    (swap-a (if (is-eq is-reversed false)\n                (try! (contract-call?\n                      'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 swap-x-for-y\n                      (get a pools)\n                      (get a tokens) (get b tokens)\n                      amount u1))\n                (try! (contract-call?\n                      'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 swap-y-for-x\n                      (get a pools)\n                      (get b tokens) (get a tokens)\n                      amount u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (alex-sa\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>)))\n    (factors (tuple (a uint)))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper\n                  (get a tokens) (get b tokens)\n                  (get a factors)\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (alex-sb\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a\n                  (get a tokens) (get b tokens) (get c tokens)\n                  (get a factors) (get b factors)\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (alex-sc\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-b\n                  (get a tokens) (get b tokens) (get c tokens) (get d tokens)\n                  (get a factors) (get b factors) (get c factors)\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (alex-sd\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>) (e <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-c\n                  (get a tokens) (get b tokens) (get c tokens) (get d tokens) (get e tokens)\n                  (get a factors) (get b factors) (get c factors) (get d factors)\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)",
    "analysis": {
      "summary": "This contract facilitates token swaps between different pools and tokens, utilizing both stableswap and ALEX AMM mechanisms, with administrative controls.",
      "explanation": "The contract defines a set of error constants for various failure states, such as unauthorized access or invalid amounts. It sets the contract deployer as the initial admin and allows for a list of up to five admins. Admins can add or remove other admins, but the contract deployer cannot be removed. The contract's main functionality revolves around swapping tokens through either stableswap pools or ALEX AMM pools, with the ability to handle swaps in reverse order and scale amounts based on token decimals. It includes four public functions (`get-quote-a`, `get-quote-b`, `get-quote-c`, `get-quote-d`) for estimating swap outcomes and four corresponding functions (`swap-helper-a`, `swap-helper-b`, `swap-helper-c`, `swap-helper-d`) to execute the swaps, ensuring the minimum received amount is met. The contract uses private helper functions for admin management, swap direction determination, amount scaling, and interacting with external pool contracts for quotes and swaps. It emphasizes security through the use of `asserts!` for condition checking and `unwrap!` or `try!` for handling potential errors from external calls.",
      "tags": [
        "DeFi",
        "stableswap",
        "ALEX AMM",
        "token-swap",
        "administrative-controls"
      ]
    }
  },
  {
    "rank": 49,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router-api-v1_0_0",
    "calls": 684,
    "source": ";;; UniswapV2Router02.sol\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n\n(use-trait pool-trait     .univ2-pool-trait_v1_0_0.univ2-pool-trait)\n(use-trait lp-token-trait .univ2-lp-token-trait_v1_0_0.univ2-lp-token-trait)\n(use-trait fees-trait     .univ2-fees-trait_v1_0_0.univ2-fees-trait)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-constant err-router-preconditions  (err u200))\n(define-constant err-router-postconditions (err u201))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; add-liquidity\n(define-private\n  (add-liquidity-calc\n    (pool_        <pool-trait>)\n    (amt0-desired uint)\n    (amt1-desired uint)\n    (amt0-min     uint)\n    (amt1-min     uint))\n  (let ((pool (try! (contract-call? pool_ get-pool)))\n        (r0   (get reserve0 pool))\n        (r1   (get reserve1 pool)))\n    (if (and (is-eq r0 u0) (is-eq r1 u0))\n        (ok {amt0: amt0-desired, amt1: amt1-desired})\n        (let ((amt1-optimal (try! (contract-call? .univ2-library quote amt0-desired r0 r1)))\n              (amt0-optimal (try! (contract-call? .univ2-library quote amt1-desired r1 r0))) )\n            ;; Note we do not use optimal if > desired.\n            (if (<= amt1-optimal amt1-desired)\n                (begin\n                  (asserts! (>= amt1-optimal amt1-min) err-router-preconditions)\n                  (ok {amt0: amt0-desired, amt1: amt1-optimal}))\n                (begin\n                  (asserts!\n                    (and\n                      (<= amt0-optimal amt0-desired)\n                      (>= amt0-optimal amt0-min))\n                    err-router-preconditions)\n                  (ok {amt0: amt0-optimal, amt1: amt1-desired})) )) )))\n\n(define-public\n  (add-liquidity\n    (pool         <pool-trait>)\n    (token0       <ft-trait>)\n    (token1       <ft-trait>)\n    (lp-token     <lp-token-trait>)\n    (amt0-desired uint)\n    (amt1-desired uint)\n    (amt0-min     uint)\n    (amt1-min     uint))\n\n  (let ((amts (try! (add-liquidity-calc\n                pool amt0-desired amt1-desired amt0-min amt1-min))))\n\n    (asserts!\n     (and (<= amt0-min amt0-desired)\n          (<= amt1-min amt1-desired)\n          (>= amt0-min u0)\n          (>= amt1-min u0)\n          (>= amt0-desired u0)\n          (>= amt1-desired u0))\n     err-router-preconditions)\n\n    (contract-call? pool mint\n      token0\n      token1\n      lp-token\n      (get amt0 amts)\n      (get amt1 amts)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; remove-liquidity\n(define-public\n  (remove-liquidity\n    (pool      <pool-trait>)\n    (token0    <ft-trait>)\n    (token1    <ft-trait>)\n    (lp-token  <lp-token-trait>)\n    (liquidity uint)\n    (amt0-min  uint)\n    (amt1-min  uint))\n\n  (let ((event (try! (contract-call? pool burn\n                  token0 token1 lp-token liquidity))))\n\n    (asserts!\n      (and (>= (get amt0 event) amt0-min)\n           (>= (get amt1 event) amt1-min))\n      err-router-postconditions)\n\n    (ok event) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; swap\n(define-public\n  (swap-exact-tokens-for-tokens\n    (pool_          <pool-trait>)\n    (token0         <ft-trait>)\n    (token1         <ft-trait>)\n    (token-in       <ft-trait>)\n    (token-out      <ft-trait>)\n    (fees_          <fees-trait>)\n    (amt-in      uint)\n    (amt-out-min uint))\n\n  (let ((pool      (try! (contract-call? pool_ get-pool)))\n        (fees      (try! (contract-call? fees_ get-fees)))\n        (is-token0 (is-eq (contract-of token0) (contract-of token-in)))\n        (amt-out   (try! (contract-call? .univ2-library get-amount-out\n          amt-in\n          (if is-token0 (get reserve0 pool) (get reserve1 pool))\n          (if is-token0 (get reserve1 pool) (get reserve0 pool))\n          (get swap-fee fees) )))\n       (event      (try! (contract-call? pool_ swap\n          token-in\n          token-out\n          fees_\n          amt-in\n          amt-out))) )\n\n    (asserts!\n     (and (is-eq (get token0 pool) (contract-of token0))\n          (is-eq (get token1 pool) (contract-of token1))\n          (> amt-in      u0)\n          (> amt-out-min u0) )\n     err-router-preconditions)\n\n    (asserts!\n      (and (>= (get amt-out event) amt-out-min))\n      err-router-postconditions)\n\n    (ok event) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public\n  (swap-tokens-for-exact-tokens\n    (pool_        <pool-trait>)\n    (token0       <ft-trait>)\n    (token1       <ft-trait>)\n    (token-in     <ft-trait>)\n    (token-out    <ft-trait>)\n    (fees_        <fees-trait>)\n    (amt-in-max   uint)\n    (amt-out      uint))\n\n  (let ((pool      (try! (contract-call? pool_ get-pool)))\n        (fees      (try! (contract-call? fees_ get-fees)))\n        (is-token0 (is-eq (contract-of token0) (contract-of token-in)))\n        (amt-in    (try! (contract-call? .univ2-library get-amount-in\n          amt-out\n          (if is-token0 (get reserve0 pool) (get reserve1 pool))\n          (if is-token0 (get reserve1 pool) (get reserve0 pool))\n          (get swap-fee fees) )))\n        (event     (try! (contract-call? pool_ swap\n          token-in\n          token-out\n          fees_\n          amt-in\n          amt-out))) )\n\n  (asserts!\n   (and (is-eq (get token0 pool) (contract-of token0))\n        (is-eq (get token1 pool) (contract-of token1))\n        (> amt-in-max u0)\n        (> amt-out    u0) )\n   err-router-preconditions)\n\n  (asserts!\n    (and (<= (get amt-in event) amt-in-max))\n    err-router-postconditions)\n\n  (ok event) ))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract is a decentralized exchange router for adding liquidity, removing liquidity, and swapping tokens on the Stacks blockchain, following a Uniswap V2-like model.",
      "explanation": "The contract integrates with liquidity pools and token standards on Stacks, facilitating token swaps and liquidity management. It uses traits to interact with fungible tokens and liquidity pools, ensuring compatibility and standardization.\n\n- The `use-trait` declarations <L3-6> link external contracts/trait definitions, allowing this contract to call functions defined in those traits.\n\n- `add-liquidity-calc` <L10-36> is a private function calculating the optimal amount of tokens to add to a liquidity pool, ensuring the ratio remains balanced. It uses the 'quote' function from a library contract to find the optimal amounts.\n\n- `add-liquidity` <L38-58> is a public function allowing users to add liquidity to a pool. It checks for minimum amounts to prevent slippage and calls the pool's `mint` function to issue LP tokens.\n\n- `remove-liquidity` <L60-75> lets users remove their liquidity from a pool, receiving back the underlying tokens. It calls the pool's `burn` function to destroy LP tokens and release the underlying assets, ensuring the amounts received are not less than the minimum specified.\n\n- `swap-exact-tokens-for-tokens` <L77-108> and `swap-tokens-for-exact-tokens` <L110-144> are functions for token swaps, either specifying the exact input amount or the exact output amount, respectively. They calculate the required input or output amounts using the `get-amount-out` and `get-amount-in` functions from a library contract, then perform the swap through the pool's `swap` function.\n\nEach function includes preconditions and postconditions checks using `asserts!`, ensuring that the operations do not proceed under undesirable conditions (e.g., insufficient input amounts or excessive slippage). These checks help in maintaining the integrity and security of swaps and liquidity transactions.",
      "tags": [
        "DeFi",
        "DEX",
        "Liquidity-Pools",
        "Token-Swap",
        "Stacks"
      ]
    }
  },
  {
    "rank": 50,
    "contract": "SP21YTSM60CAY6D011EZVEVNKXVW8FVZE198XEFFP.pox4-fast-pool-v3",
    "calls": 671,
    "source": ";; @contract pox-4 Self-Service Pool\n;; @version 3\n;; Changelog: update to pox-4, introduce commit admin\n\n;; Self-service non-custodial stacking pool\n;; The pool locks for 1 cycle, amount can be increased at each cycle.\n;; Users trust the reward admin that they will receive their share of rewards.\n;; Reward admin can be a contract as well.\n;;\n;;\n;; User calls delegate-stx once.\n;; For next cycles, users can call delegate-stx\n;; or ask automation, friends or family to extend stacking using delegate-stack-stx.\n\n;; Self-service function \"delegate-stx\" does the following:\n;; 1. Revoke delegation if necessary.\n;; 2. Delegates STX.\n;; 3. For first time user, stacks the caller's stx tokens for 1 cycle.\n;;    For stackerd user, extends locking and if needed increases amount.\n;;    The amount is the minimum of the balance and the delegate amount\n;;    minus some STX as buffer.\n;;    The STX buffer is left unlocked for users to call revoke-delegate-stx.\n\n;; Pool operators function \"delegate-stack-stx\" does\n;; step 3. (for stacked users)\n;; This function can be called by anyone when less than 1050 blocks are\n;; left until the cycle start. This gives the stacker 1 week to unlock\n;; the STX if wanted before it can be locked again for friends and family (or enemies).\n\n;; Commit admins are trusted users who can commit the partically stacked STX\n;; at the end of each cycle.\n;; The commit transaction contains a signature from the selected signer node.\n\n;;\n;; Data storage\n;;\n\n;; Map of reward cycle to pox reward set index.\n;; Reward set index gives access to the total locked stx of the pool.\n(define-map pox-addr-indices uint uint)\n;; Map of reward cyle to block height of last commit\n(define-map last-aggregation uint uint)\n;; Map of users to locked amounts with this pool\n;; used to handle pool members swimming in two pools\n(define-map locked-amounts principal {amount-ustx: uint, unlock-height: uint})\n;; Map of admins that can change the pox-address\n(define-map reward-admins principal bool)\n(map-set reward-admins tx-sender true)\n\n(define-data-var active bool false)\n(define-data-var pool-pox-address {hashbytes: (buff 32), version: (buff 1)}\n  {version: 0x,\n   hashbytes: 0x})\n(define-data-var stx-buffer uint u1000000) ;; 1 STX\n\n(define-constant pox-info (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-pox-info)))\n;; Half cycle lenght is 1050 for mainnet\n(define-constant half-cycle-length (/ (get reward-cycle-length pox-info) u2))\n\n(define-constant err-unauthorized (err u401))\n(define-constant err-forbidden (err u403))\n(define-constant err-too-early (err u500))\n(define-constant err-decrease-forbidden (err u503))\n(define-constant err-pox-address-deactivated (err u504))\n;; Error code 3 is used by pox-4 contract for already stacking errors\n(define-constant err-already-stacking (err u603))\n;; Error code 9 is used by pox-4 contract for permission denied errors\n(define-constant err-stacking-permission-denied (err u609))\n;; Allowed contract-callers handling a user's stacking activity.\n(define-map allowance-contract-callers\n  { sender: principal, contract-caller: principal}\n  { until-burn-ht: (optional uint)})\n\n\n;;\n;; Helper functions for pox-4 calls\n;;\n\n;; Revokes and delegates stx\n(define-private (delegate-stx-inner (amount-ustx uint) (delegate-to principal) (until-burn-ht (optional uint)))\n  (let ((result-revoke\n            ;; Calls revoke and ignores result\n          (contract-call? 'SP000000000000000000002Q6VF78.pox-4 revoke-delegate-stx)))\n    ;; Calls delegate-stx, converts any error to uint\n    (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stx amount-ustx delegate-to until-burn-ht none)\n      success (ok success)\n      error (err (* u1000 (to-uint error))))))\n\n;; Tries to lock delegated stx (delegate-stack-stx).\n;; If user already stacked then extend and increase\n(define-private (lock-delegated-stx (user principal))\n  (let ((start-burn-ht (+ burn-block-height u1))\n        (pox-address (var-get pool-pox-address))\n        (buffer-amount (var-get stx-buffer))\n        (user-account (stx-account user))\n        (allowed-amount (min (get-delegated-amount user)\n                             (+ (get locked user-account) (get unlocked user-account))))\n        ;; Amount to lock must be leq allowed-amount and geq locked amount.\n        ;; Increase the locked amount if possible, but leave a buffer for revoke tx fees if possible.\n        ;; Decreasing the locked amount requires a cool down cycle.\n        (amount-ustx (if (> allowed-amount buffer-amount)\n                            (max (get locked user-account) (- allowed-amount buffer-amount))\n                            allowed-amount)))\n    (asserts! (var-get active) err-pox-address-deactivated)\n    (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-stx\n             user amount-ustx\n             pox-address start-burn-ht u1)\n      stacker-details  (begin\n                          (map-set locked-amounts user {amount-ustx: amount-ustx, unlock-height: (get unlock-burn-height stacker-details)})\n                          (ok stacker-details))\n      error (if (is-eq error 3) ;; check whether user is already stacked\n              (delegate-stack-extend-increase user amount-ustx pox-address)\n              (err (* u1000 (to-uint error)))))))\n\n(define-private (lock-delegated-stx-fold (user principal) (result (list 30 (response {lock-amount: uint, stacker: principal, unlock-burn-height: uint} uint))))\n  (let ((stack-result (lock-delegated-stx user)))\n    (unwrap-panic (as-max-len? (append result stack-result) u30))))\n\n;; Calls pox-4 delegate-stack-extend and delegate-stack-increase.\n;; parameter amount-ustx must be lower or equal the stx balance and the delegated amount\n(define-private (delegate-stack-extend-increase (user principal)\n                  (amount-ustx uint)\n                  (pox-address {hashbytes: (buff 32), version: (buff 1)}))\n  (let ((status (stx-account user))\n        (locked-amount (get locked status)))\n    (asserts! (>= amount-ustx locked-amount) err-decrease-forbidden)\n    (match (maybe-extend-for-next-cycle user pox-address status)\n      success-extend (let ((unlock-burn-height (get unlock-burn-height success-extend)))\n            (if (is-eq amount-ustx locked-amount)\n                ;; do not increase\n                (begin\n                  ;; update locked-amounts map if necessary\n                  (asserts! (> unlock-burn-height (get unlock-height status)) err-already-stacking)\n                  (map-extend-locked-amount user unlock-burn-height)\n                  (ok {lock-amount: locked-amount,\n                      stacker: user,\n                      unlock-burn-height: unlock-burn-height}))\n                ;; else increase\n                (let ((increase-by (- amount-ustx locked-amount)))\n                  (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-increase\n                          user pox-address increase-by)\n                    success-increase (begin\n                                      (map-extend-increase-locked-amount user increase-by unlock-burn-height)\n                                      (ok {lock-amount: (get total-locked success-increase),\n                                          stacker: user,\n                                          unlock-burn-height: unlock-burn-height}))\n                    error-increase (err (* u1000000000 (to-uint error-increase)))))))\n      error (err (* u1000000 (to-uint error))))))\n\n;; Tries to extend the user's locking to the next cycle\n;; if not yet locked until the end of the next cycle.\n(define-private (maybe-extend-for-next-cycle\n                  (user principal)\n                  (pox-address {hashbytes: (buff 32), version: (buff 1)})\n                  (status {locked: uint, unlocked: uint, unlock-height: uint})\n                )\n  (let ((current-cycle (contract-call? 'SP000000000000000000002Q6VF78.pox-4 current-pox-reward-cycle))\n        (unlock-height (get unlock-height status)))\n    (if (not-locked-for-cycle unlock-height (+ u1 current-cycle))\n      (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-extend\n             user pox-address u1) ;; one cycle only\n      (ok {stacker: user, unlock-burn-height: unlock-height}))))\n\n(define-private (map-extend-locked-amount (user principal) (unlock-height uint))\n  (match (map-get? locked-amounts user)\n    locked-amount (map-set locked-amounts user (merge locked-amount {unlock-height: unlock-height}))\n    true))\n\n(define-private (map-extend-increase-locked-amount (user principal) (increase-by uint) (unlock-height uint))\n  (match (map-get? locked-amounts user)\n    locked-amount (map-set locked-amounts user {amount-ustx: (+ (get amount-ustx locked-amount) increase-by), unlock-height: unlock-height})\n    true))\n\n;;\n;; Public functions\n;;\n\n;; @desc User calls this function to delegate and lock their tokens to the self-service pool.\n;; Users can revoke delegation and stx tokens will unlock at the end of the locking period.\n;;\n;; @param amount-ustx; amount to delegate. Can be higher than current stx balance.\n(define-public (delegate-stx (amount-ustx uint))\n  (let ((user tx-sender)\n        (current-cycle (current-pox-reward-cycle)))\n    ;; Must be called directly by the tx-sender or by an allowed contract-caller\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    ;; Do 1. and 2.\n    (try! (delegate-stx-inner amount-ustx (as-contract tx-sender) none))\n    ;; Do 3.\n    (as-contract (lock-delegated-stx user))))\n\n;; Stacks the delegated amount for the given user for the next cycle.\n;; This function can be called by automation, friends or family for user that have delegated once.\n;; This function can be called only after the current cycle is half through\n(define-public (delegate-stack-stx (user principal))\n  (let ((current-cycle (current-pox-reward-cycle)))\n    (asserts! (can-lock-now current-cycle) err-too-early)\n    ;; Do 3.\n    (as-contract (lock-delegated-stx user))))\n\n;; Stacks the delegated amount for the given users for the next cycle.\n;; This function can be called by automation, friends or family for users that have delegated once.\n;; This function can be called only after the current cycle is half through\n(define-public (delegate-stack-stx-many (users (list 30 principal)))\n  (let ((current-cycle (current-pox-reward-cycle))\n        (start-burn-ht (+ burn-block-height u1)))\n    (asserts! (can-lock-now current-cycle) err-too-early)\n    ;; Do 3. for users\n    (ok (as-contract (fold lock-delegated-stx-fold users (list))))))\n\n;; Tries to calls stack aggregation commit. If the minimum is met,\n;; subsequent calls increase the total amount using\n;; the index of the first successful call.\n;; This index gives access to the internal map of the pox-4 contract\n;; that handles the reward addresses.\n(define-public (maybe-stack-aggregation-commit (current-cycle uint)\n                  (signer-sig (optional (buff 65))) (signer-key (buff 33))\n                  (max-amount uint) (auth-id uint))\n  (let ((reward-cycle (+ u1 current-cycle)))\n    (match (map-get? pox-addr-indices reward-cycle)\n            ;; Total stacked already reached minimum.\n            ;; Call stack-aggregate-increase.\n            ;; It might fail because called in the same cycle twice.\n      index (match (as-contract (contract-call? 'SP000000000000000000002Q6VF78.pox-4 stack-aggregation-increase (var-get pool-pox-address) reward-cycle index signer-sig signer-key max-amount auth-id))\n              success (begin (map-set last-aggregation reward-cycle block-height) (ok true))\n              error (begin (print {err-increase-ignored: error}) (ok false)))\n            ;; Total stacked is still below minimum.\n            ;; Just try to commit, it might fail because minimum not yet met\n      (match (as-contract (contract-call? 'SP000000000000000000002Q6VF78.pox-4 stack-aggregation-commit-indexed (var-get pool-pox-address) reward-cycle signer-sig signer-key max-amount auth-id))\n        index (begin\n                (map-set pox-addr-indices reward-cycle index)\n                (map-set last-aggregation reward-cycle block-height)\n                (ok true))\n        error (begin (print {err-commit-ignored: error}) (ok false)))))) ;; ignore errors\n\n;;\n;; Admin functions\n;;\n\n(define-public (set-active (is-active bool))\n  (begin\n    (asserts! (default-to false (map-get? reward-admins contract-caller)) err-unauthorized)\n    (ok (var-set active is-active))))\n\n(define-public (set-pool-pox-address (pox-addr {hashbytes: (buff 32), version: (buff 1)}))\n  (begin\n    (asserts! (default-to false (map-get? reward-admins contract-caller)) err-unauthorized)\n    (ok (var-set pool-pox-address pox-addr))))\n\n(define-public (set-pool-pox-address-active (pox-addr {hashbytes: (buff 32), version: (buff 1)}))\n  (begin\n    (asserts! (default-to false (map-get? reward-admins contract-caller)) err-unauthorized)\n    (var-set pool-pox-address pox-addr)\n    (ok (var-set active true))))\n\n(define-public (set-stx-buffer (amount-ustx uint))\n  (begin\n    (asserts! (default-to false (map-get? reward-admins contract-caller)) err-unauthorized)\n    (ok (var-set stx-buffer amount-ustx))))\n\n(define-public (set-reward-admin (new-admin principal) (enable bool))\n  (begin\n    (asserts! (default-to false (map-get? reward-admins contract-caller)) err-unauthorized)\n    (asserts! (not (is-eq contract-caller new-admin)) err-forbidden)\n    (ok (map-set reward-admins new-admin enable))))\n\n;;\n;; Read-only functions\n;;\n\n;; What's the reward cycle number of the burnchain block height?\n;; Will runtime-abort if height is less than the first burnchain block (this is intentional)\n(define-read-only (burn-height-to-reward-cycle (height uint))\n    (/ (- height (get first-burnchain-block-height pox-info)) (get reward-cycle-length pox-info)))\n\n;; What's the block height at the start of a given reward cycle?\n(define-read-only (reward-cycle-to-burn-height (cycle uint))\n    (+ (get first-burnchain-block-height pox-info) (* cycle (get reward-cycle-length pox-info))))\n\n;; What's the current PoX reward cycle?\n(define-read-only (current-pox-reward-cycle)\n    (burn-height-to-reward-cycle burn-block-height))\n\n;; Total of locked stacked by cycle.\n;; Function get-reward-set-pox-address contains the information but\n;; is deleted when stx unlock.\n;; Therefore, we look at the value at the end of that cycle, more\n;; precisely at the last stack-aggregation-* call for the next cycle (that happens\n;; during the request cycle).\n(define-read-only (get-reward-set (reward-cycle uint))\n  (match (print (map-get? last-aggregation (+ reward-cycle u1)))\n    stacks-height (get-reward-set-at-block reward-cycle stacks-height)\n    none))\n\n(define-read-only (get-reward-set-at-block (reward-cycle uint) (stacks-height uint))\n  (at-block (unwrap! (get-block-info? id-header-hash stacks-height) none)\n    (get-reward-set-from-pox reward-cycle)))\n\n(define-read-only (get-reward-set-from-pox (reward-cycle uint))\n  (match (map-get? pox-addr-indices reward-cycle)\n      index (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-reward-set-pox-address reward-cycle index)\n      none))\n\n;; Returns currently delegated amount for a given user\n(define-read-only (get-delegated-amount (user principal))\n  (default-to u0 (get amount-ustx (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-delegation-info user))))\n\n(define-read-only (get-pox-addr-index (cycle uint))\n  (map-get? pox-addr-indices cycle))\n\n(define-read-only (not-locked-for-cycle (unlock-burn-height uint) (cycle uint))\n  (<= unlock-burn-height (reward-cycle-to-burn-height cycle)))\n\n(define-read-only (get-last-aggregation (cycle uint))\n  (map-get? last-aggregation cycle))\n\n(define-read-only (is-admin-enabled (admin principal))\n  (map-get? reward-admins admin))\n\n(define-read-only (get-pool-pox-address)\n  (var-get pool-pox-address))\n\n(define-read-only (can-lock-now (cycle uint))\n  (> burn-block-height (+ (reward-cycle-to-burn-height cycle) half-cycle-length)))\n\n;; Returns minimum\n(define-private (min (amount-1 uint) (amount-2 uint))\n  (if (< amount-1 amount-2)\n    amount-1\n    amount-2))\n\n;; Returns maximum\n(define-private (max (amount-1 uint) (amount-2 uint))\n  (if (> amount-1 amount-2)\n    amount-1\n    amount-2))\n\n;;\n;; Functions about allowance of delegation/stacking contract calls\n;;\n\n;; Give a contract-caller authorization to call stacking methods\n;;  normally, stacking methods may only be invoked by _direct_ transactions\n;;   (i.e., the tx-sender issues a direct contract-call to the stacking methods)\n;;  by issuing an allowance, the tx-sender may call through the allowed contract\n(define-public (allow-contract-caller (caller principal) (until-burn-ht (optional uint)))\n  (begin\n    (asserts! (is-eq tx-sender contract-caller) err-stacking-permission-denied)\n    (ok (map-set allowance-contract-callers\n          { sender: tx-sender, contract-caller: caller}\n          { until-burn-ht: until-burn-ht}))))\n\n;; Revokes contract-caller authorization to call stacking methods\n(define-public (disallow-contract-caller (caller principal))\n  (begin\n    (asserts! (is-eq tx-sender contract-caller) err-stacking-permission-denied)\n    (ok (map-delete allowance-contract-callers { sender: tx-sender, contract-caller: caller}))))\n\n;; Verifies that the contract caller has allowance to handle the tx-sender's stacking\n(define-read-only (check-caller-allowed)\n  (or (is-eq tx-sender contract-caller)\n    (let ((caller-allowed\n                 ;; if not in the caller map, return false\n            (unwrap! (map-get? allowance-contract-callers\n                       { sender: tx-sender, contract-caller: contract-caller})\n              false))\n          (expires-at\n                ;; if until-burn-ht not set, then return true (because no expiry)\n            (unwrap! (get until-burn-ht caller-allowed) true)))\n          ;; is the caller allowance still valid\n      (< burn-block-height expires-at))))\n\n;; Returns the burn height at which a particular contract is allowed to stack for a particular principal.\n;; The result is (some (some X)) if X is the burn height at which the allowance terminates.\n;; The result is (some none) if the caller is allowed indefinitely.\n;; The result is none if there is no allowance record.\n(define-read-only (get-allowance-contract-callers (sender principal) (calling-contract principal))\n  (map-get? allowance-contract-callers { sender: sender, contract-caller: calling-contract}))\n",
    "analysis": {
      "summary": "This contract implements a non-custodial stacking pool for the Stacks blockchain, allowing users to delegate and stack their STX tokens in a self-service manner, with features for extending stacking, handling rewards, and admin functionalities.",
      "explanation": "The contract provides mechanisms for users to delegate their STX tokens to be stacked in a pool for earning rewards. It includes functionalities for revoking delegation, extending the stacking period, and increasing the stacking amount. It also allows designated 'commit admins' to commit the partially stacked STX at the end of each cycle. The contract interacts with the 'pox-4' contract for stacking operations and maintains data maps for tracking reward indices, locked amounts by users, and admin privileges.\n\nKey functionalities include:\n- `delegate-stx`: Allows users to delegate their STX for stacking. It revokes any previous delegation, delegates STX, and locks the tokens for stacking. It handles first-time users and existing stackers differently, ensuring a buffer of STX remains unlocked for potential revocation (<L88-96>).\n- `delegate-stack-stx` and `delegate-stack-stx-many`: Enable stacking for the next cycle, callable by anyone for a user after the current cycle is halfway through, facilitating stacking by automation, friends, or family (<L120>, <L128>).\n- Admin functions (`set-active`, `set-pool-pox-address`, etc.) allow designated admins to manage the pool's operation, including activating/deactivating the pool, setting the pool's PoX address, and managing the STX buffer amount (<L160-184>).\n- The contract includes several read-only functions for querying stacking details, such as the current PoX reward cycle, delegated amounts, and admin status.\n\nThe contract utilizes Clarity's features like `define-map`, `define-data-var`, `match`, `let`, and `asserts!` to manage state, handle errors, and ensure conditions are met for operations. It demonstrates complex interactions with the PoX contract and sophisticated state management to facilitate non-custodial stacking in a decentralized manner.",
      "tags": [
        "DeFi",
        "Stacking",
        "Protocol",
        "pox-4",
        "Non-Custodial"
      ]
    }
  },
  {
    "rank": 51,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.router-stableswap-velar-v-1-2",
    "calls": 666,
    "source": ";; router-stableswap-velar-v-1-2\n\n(use-trait stableswap-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait stableswap-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-pool-trait-v-1-2.stableswap-pool-trait)\n(use-trait velar-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait velar-share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n\n(define-constant ERR_NOT_AUTHORIZED (err u6001))\n(define-constant ERR_INVALID_AMOUNT (err u6002))\n(define-constant ERR_INVALID_PRINCIPAL (err u6003))\n(define-constant ERR_ALREADY_ADMIN (err u6004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u6005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u6006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u6007))\n(define-constant ERR_SWAP_STATUS (err u6008))\n(define-constant ERR_MINIMUM_RECEIVED (err u6009))\n(define-constant ERR_SWAP_A (err u6010))\n(define-constant ERR_SWAP_B (err u6011))\n(define-constant ERR_QUOTE_A (err u6012))\n(define-constant ERR_QUOTE_B (err u6013))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var swap-status bool true)\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (set-swap-status (status bool))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (var-set swap-status status)\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (get-quote-a\n    (amount uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (stableswap-qa amount stableswap-tokens stableswap-pools) ERR_QUOTE_A)\n                 (unwrap! (velar-qa amount velar-tokens) ERR_QUOTE_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qa quote-a velar-tokens) ERR_QUOTE_B)\n                 (unwrap! (stableswap-qa quote-a stableswap-tokens stableswap-pools) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-b\n    (amount uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (stableswap-qa amount stableswap-tokens stableswap-pools) ERR_QUOTE_A)\n                 (unwrap! (velar-qb amount velar-tokens) ERR_QUOTE_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qb quote-a velar-tokens) ERR_QUOTE_B)\n                 (unwrap! (stableswap-qa quote-a stableswap-tokens stableswap-pools) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-c\n    (amount uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (stableswap-qa amount stableswap-tokens stableswap-pools) ERR_QUOTE_A)\n                 (unwrap! (velar-qc amount velar-tokens) ERR_QUOTE_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qc quote-a velar-tokens) ERR_QUOTE_B)\n                 (unwrap! (stableswap-qa quote-a stableswap-tokens stableswap-pools) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-d\n    (amount uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>) (e <velar-ft-trait>)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (stableswap-qa amount stableswap-tokens stableswap-pools) ERR_QUOTE_A)\n                 (unwrap! (velar-qd amount velar-tokens) ERR_QUOTE_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (velar-qd quote-a velar-tokens) ERR_QUOTE_B)\n                 (unwrap! (stableswap-qa quote-a stableswap-tokens stableswap-pools) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>)))\n    (velar-share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (stableswap-sa amount stableswap-tokens stableswap-pools) ERR_SWAP_A)\n                (unwrap! (velar-sa amount velar-tokens velar-share-fee-to) ERR_SWAP_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sa swap-a velar-tokens velar-share-fee-to) ERR_SWAP_B)\n                (unwrap! (stableswap-sa swap-a stableswap-tokens stableswap-pools) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          velar-data: {\n            velar-tokens: velar-tokens,\n            velar-share-fee-to: velar-share-fee-to,\n            velar-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>)))\n    (velar-share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (stableswap-sa amount stableswap-tokens stableswap-pools) ERR_SWAP_A)\n                (unwrap! (velar-sb amount velar-tokens velar-share-fee-to) ERR_SWAP_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sb swap-a velar-tokens velar-share-fee-to) ERR_SWAP_B)\n                (unwrap! (stableswap-sa swap-a stableswap-tokens stableswap-pools) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-b\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          velar-data: {\n            velar-tokens: velar-tokens,\n            velar-share-fee-to: velar-share-fee-to,\n            velar-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-c\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>)))\n    (velar-share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (stableswap-sa amount stableswap-tokens stableswap-pools) ERR_SWAP_A)\n                (unwrap! (velar-sc amount velar-tokens velar-share-fee-to) ERR_SWAP_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sc swap-a velar-tokens velar-share-fee-to) ERR_SWAP_B)\n                (unwrap! (stableswap-sa swap-a stableswap-tokens stableswap-pools) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-c\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          velar-data: {\n            velar-tokens: velar-tokens,\n            velar-share-fee-to: velar-share-fee-to,\n            velar-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-d\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>) (e <velar-ft-trait>)))\n    (velar-share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (stableswap-sa amount stableswap-tokens stableswap-pools) ERR_SWAP_A)\n                (unwrap! (velar-sd amount velar-tokens velar-share-fee-to) ERR_SWAP_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (velar-sd swap-a velar-tokens velar-share-fee-to) ERR_SWAP_B)\n                (unwrap! (stableswap-sa swap-a stableswap-tokens stableswap-pools) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-d\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          velar-data: {\n            velar-tokens: velar-tokens,\n            velar-share-fee-to: velar-share-fee-to,\n            velar-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-private (admin-not-removable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)\n\n(define-private (is-stableswap-path-reversed\n    (token-in <stableswap-ft-trait>) (token-out <stableswap-ft-trait>)\n    (pool-contract <stableswap-pool-trait>)\n  )\n  (let (\n    (pool-data (unwrap-panic (contract-call? pool-contract get-pool)))\n  )\n    (not (and (is-eq (contract-of token-in) (get x-token pool-data)) (is-eq (contract-of token-out) (get y-token pool-data))))\n  )\n)\n\n(define-private (stableswap-qa\n    (amount uint)\n    (tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    (is-reversed (is-stableswap-path-reversed (get a tokens) (get b tokens) (get a pools)))\n    (quote-a (if (is-eq is-reversed false)\n                 (try! (contract-call?\n                 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 get-dy\n                 (get a pools)\n                 (get a tokens) (get b tokens)\n                 amount))\n                 (try! (contract-call?\n                 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 get-dx\n                 (get a pools)\n                 (get b tokens) (get a tokens)\n                 amount))))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (velar-qa\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>)))\n  )\n  (let (\n    (quote-a (contract-call?\n             'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 amount-out\n             amount\n             (get a tokens) (get b tokens)))\n  )\n    (ok quote-a)\n  )\n)\n\n(define-private (velar-qb\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>)))\n  )\n  (let (\n    (quote-a (contract-call?\n             'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 get-amount-out-3\n             amount\n             (get a tokens) (get b tokens) (get c tokens)))\n  )\n    (ok (get c quote-a))\n  )\n)\n\n(define-private (velar-qc\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>)))\n  )\n  (let (\n    (quote-a (contract-call?\n             'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 get-amount-out-4\n             amount\n             (get a tokens) (get b tokens) (get c tokens) (get d tokens)\n             (list u1 u2 u3 u4)))\n  )\n    (ok (get d quote-a))\n  )\n)\n\n(define-private (velar-qd\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>) (e <velar-ft-trait>)))\n  )\n  (let (\n    (quote-a (contract-call?\n             'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 get-amount-out-5\n             amount\n             (get a tokens) (get b tokens) (get c tokens) (get d tokens) (get e tokens)))\n  )\n    (ok (get e quote-a))\n  )\n)\n\n(define-private (stableswap-sa\n    (amount uint)\n    (tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    (is-reversed (is-stableswap-path-reversed (get a tokens) (get b tokens) (get a pools)))\n    (swap-a (if (is-eq is-reversed false)\n                (try! (contract-call?\n                      'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 swap-x-for-y\n                      (get a pools)\n                      (get a tokens) (get b tokens)\n                      amount u1))\n                (try! (contract-call?\n                      'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 swap-y-for-x\n                      (get a pools)\n                      (get b tokens) (get a tokens)\n                      amount u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (velar-sa\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>)))\n    (share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 do-swap\n                  amount\n                  (get a tokens) (get b tokens)\n                  share-fee-to)))\n  )\n    (ok (get amt-out swap-a))\n  )\n)\n\n(define-private (velar-sb\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>)))\n    (share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-3\n                  amount u1\n                  (get a tokens) (get b tokens) (get c tokens)\n                  share-fee-to)))\n  )\n    (ok (get amt-out (get c swap-a)))\n  )\n)\n\n(define-private (velar-sc\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>)))\n    (share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-4\n                  amount u1\n                  (get a tokens) (get b tokens) (get c tokens) (get d tokens)\n                  share-fee-to)))\n  )\n    (ok (get amt-out (get d swap-a)))\n  )\n)\n\n(define-private (velar-sd\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>) (e <velar-ft-trait>)))\n    (share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-5\n                  amount u1\n                  (get a tokens) (get b tokens) (get c tokens) (get d tokens) (get e tokens)\n                  share-fee-to)))\n  )\n    (ok (get amt-out (get e swap-a)))\n  )\n)",
    "analysis": {
      "summary": "This contract facilitates multi-step swaps between tokens using a combination of stableswap and Velar protocols, with administrative controls.",
      "explanation": "This Clarity smart contract implements a decentralized exchange mechanism that supports complex swap operations across different liquidity pools and token standards on the Stacks blockchain. It integrates with both stableswap pools for stablecoin trades and Velar protocol for broader token swaps, offering users optimized trade paths and rates. The contract includes administrative functions to manage swap operations and ensure security and flexibility in its operation.\n\n- The contract uses multiple traits to interact with external contracts, ensuring compliance with SIP-010 fungible token standards and specific stableswap and Velar protocol interfaces <L1-4>.\n- It defines a series of error codes for handling common exceptions <L6-25>.\n- The CONTRACT_DEPLOYER constant and admins variable manage administrative privileges, restricting certain actions to authorized users <L27-29>.\n- Administrative functions allow adding or removing admins, with checks to prevent unauthorized changes or removing the contract deployer <L31-76>.\n- The swap-status variable and its setter function control the availability of swap operations, providing an emergency stop mechanism <L78-89>.\n- The contract offers multiple public functions to get quotes for swaps and execute swaps with varying numbers of intermediary steps and token types. These functions check for the swap's availability, validate amounts, and calculate or execute swaps through either stableswap or Velar protocol paths, depending on the tokens involved and whether the swap is reversed <L91-364>.\n- Private helper functions perform core logic for quote calculation and token swapping, abstracting the interactions with the stableswap and Velar protocols to simplify the main public functions <L366-533>.\n\nOverall, the contract is designed to offer flexible, efficient, and secure swap operations for a wide range of tokens on the Stacks blockchain, with administrative features to manage its operation.",
      "tags": [
        "DeFi",
        "stableswap",
        "Velar",
        "token-swap",
        "protocol",
        "administrative"
      ]
    }
  },
  {
    "rank": 52,
    "contract": "SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-deposit",
    "calls": 659,
    "source": ";; sBTC Deposit contract\n\n;; constants\n\n;; The required length of a txid\n(define-constant txid-length u32)\n(define-constant dust-limit u546)\n\n;; protocol contract type\n(define-constant deposit-role 0x01)\n\n;; error codes\n;; TXID used in deposit is not the correct length\n(define-constant ERR_TXID_LEN (err u300))\n;; Deposit has already been completed\n(define-constant ERR_DEPOSIT_REPLAY (err u301))\n(define-constant ERR_LOWER_THAN_DUST (err u302))\n(define-constant ERR_DEPOSIT_INDEX_PREFIX (unwrap-err! ERR_DEPOSIT (err true)))\n(define-constant ERR_DEPOSIT (err u303))\n(define-constant ERR_INVALID_CALLER (err u304))\n(define-constant ERR_INVALID_BURN_HASH (err u305))\n\n;; public functions\n\n;; Accept a new deposit request\n;; Note that this function can only be called by the current\n;; bootstrap signer set address - it cannot be called by users directly.\n;; This function handles the validation & minting of sBTC, it then calls\n;; into the sbtc-registry contract to update the state of the protocol\n(define-public (complete-deposit-wrapper (txid (buff 32))\n\t\t\t\t\t\t\t\t\t\t (vout-index uint)\n\t\t\t\t\t\t\t\t\t\t (amount uint)\n\t\t\t\t\t\t\t\t\t\t (recipient principal)\n\t\t\t\t\t\t\t\t\t\t (burn-hash (buff 32))\n\t\t\t\t\t\t\t\t\t\t (burn-height uint)\n\t\t\t\t\t\t\t\t\t\t (sweep-txid (buff 32)))\n\t(let\n\t\t(\n\t\t\t(current-signer-data (contract-call? .sbtc-registry get-current-signer-data))\n\t\t\t(replay-fetch (contract-call? .sbtc-registry get-deposit-status txid vout-index))\n\t\t)\n\n\t\t;; Check that the caller is the current signer principal\n\t\t(asserts! (is-eq (get current-signer-principal current-signer-data) tx-sender) ERR_INVALID_CALLER)\n\n\t\t;; Check that amount is greater than dust limit\n\t\t(asserts! (>= amount dust-limit) ERR_LOWER_THAN_DUST)\n\n\t\t;; Check that txid is the correct length\n\t\t(asserts! (is-eq (len txid) txid-length) ERR_TXID_LEN)\n\n\t\t;; Check that sweep txid is the correct length\n\t\t(asserts! (is-eq (len sweep-txid) txid-length) ERR_TXID_LEN)\n\n\t\t;; Assert that the deposit has not already been completed (no replay)\n\t\t(asserts! (is-none replay-fetch) ERR_DEPOSIT_REPLAY)\n\n\t\t;; Verify that Bitcoin hasn't forked by comparing the burn hash provided\n\t\t(asserts! (is-eq (some burn-hash) (get-burn-header burn-height)) ERR_INVALID_BURN_HASH)\n\n\t\t;; Mint the sBTC to the recipient\n\t\t(try! (contract-call? .sbtc-token protocol-mint amount recipient deposit-role))\n\n\t\t;; Complete the deposit\n\t\t(contract-call? .sbtc-registry complete-deposit txid vout-index amount recipient burn-hash burn-height sweep-txid)\n\t)\n)\n\n;; Return the bitcoin header hash of the bitcoin block at the given height.\n(define-read-only (get-burn-header (height uint))\n\t(get-burn-block-info? header-hash height)\n)\n\n;; Accept multiple new deposit requests\n;; Note that this function can only be called by the current\n;; bootstrap signer set address - it cannot be called by users directly.\n;;\n;; This function handles the validation & minting of sBTC by handling multiple (up to 500) deposits at a time,\n;; it then calls into the sbtc-registry contract to update the state of the protocol.\n(define-public (complete-deposits-wrapper\n\t\t(deposits (list 500 {txid: (buff 32), vout-index: uint, amount: uint, recipient: principal, burn-hash: (buff 32), burn-height: uint, sweep-txid: (buff 32)}))\n\t)\n\t(begin\n\t\t;; Check that the caller is the current signer principal\n\t\t(asserts! (is-eq\n\t\t\t(contract-call? .sbtc-registry get-current-signer-principal)\n\t\t\ttx-sender\n\t\t) ERR_INVALID_CALLER)\n\n\t\t(fold complete-individual-deposits-helper deposits (ok u0))\n\t)\n)\n\n;; private functions\n(define-private (complete-individual-deposits-helper (deposit {txid: (buff 32), vout-index: uint, amount: uint, recipient: principal, burn-hash: (buff 32), burn-height: uint, sweep-txid: (buff 32)}) (helper-response (response uint uint)))\n\t(match helper-response\n\t\tindex\n\t\t\t(begin\n\t\t\t\t(unwrap!\n\t\t\t\t\t(complete-deposit-wrapper\n\t\t\t\t\t\t(get txid deposit)\n\t\t\t\t\t\t(get vout-index deposit)\n\t\t\t\t\t\t(get amount deposit)\n\t\t\t\t\t\t(get recipient deposit)\n\t\t\t\t\t\t(get burn-hash deposit)\n\t\t\t\t\t\t(get burn-height deposit)\n\t\t\t\t\t\t(get sweep-txid deposit))\n\t\t\t\t(err (+ ERR_DEPOSIT_INDEX_PREFIX (+ u10 index))))\n\t\t\t\t(ok (+ index u1))\n\t\t\t)\n\t\terr-response\n\t\t\t(err err-response)\n\t)\n)\n\n",
    "analysis": {
      "summary": "This contract manages the deposit process for sBTC, including validation and minting, with safeguards against replay and dust transactions.",
      "explanation": "The contract is designed to facilitate deposits into the sBTC system, ensuring that each deposit meets certain criteria before minting sBTC to a recipient's address. The contract includes a series of checks to prevent common issues such as replay attacks, insufficient deposit amounts, and incorrect transaction ID lengths. Key functions and their purposes are outlined below:\n\n- `complete-deposit-wrapper`: This public function is the primary entry point for processing a single deposit. It performs several checks to validate the deposit request, including verifying the caller's identity as the current signer, ensuring the deposit amount is above a predefined dust limit, and confirming the transaction ID and sweep transaction ID lengths are correct. Additionally, it checks for replay attacks and validates the Bitcoin burn hash against a known good value to prevent issues related to Bitcoin forks. Upon passing all checks, it mints sBTC to the recipient and records the deposit in the sbtc-registry.\n\n- `get-burn-header`: A read-only function that returns the Bitcoin header hash for a given block height, used to verify the burn hash provided in deposit requests.\n\n- `complete-deposits-wrapper`: Similar to `complete-deposit-wrapper`, but designed to handle multiple deposit requests at once, up to a maximum of 500. It uses the `fold` function to iterate over each deposit in the provided list, processing them individually through a helper function.\n\n- `complete-individual-deposits-helper`: A private function used by `complete-deposits-wrapper` to process each deposit in the list. It calls `complete-deposit-wrapper` for each deposit and handles any errors that occur, adjusting the error code based on the index of the deposit in the list for easier debugging.\n\nThroughout the contract, error handling is a critical component, with specific error codes defined for various failure scenarios. This ensures that the contract can fail gracefully and provide meaningful feedback to the caller.",
      "tags": [
        "sBTC",
        "deposit",
        "validation",
        "minting",
        "Bitcoin",
        "protocol"
      ]
    }
  },
  {
    "rank": 53,
    "contract": "SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.router-xyk-alex-v-1-3",
    "calls": 640,
    "source": "\n;; router-xyk-alex-v-1-3\n\n;; Use all required traits\n(use-trait xyk-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait xyk-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-trait-v-1-2.xyk-pool-trait)\n(use-trait alex-ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n\n;; Error constants\n(define-constant ERR_NOT_AUTHORIZED (err u6001))\n(define-constant ERR_INVALID_AMOUNT (err u6002))\n(define-constant ERR_INVALID_PRINCIPAL (err u6003))\n(define-constant ERR_ALREADY_ADMIN (err u6004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u6005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u6006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u6007))\n(define-constant ERR_SWAP_STATUS (err u6008))\n(define-constant ERR_MINIMUM_RECEIVED (err u6009))\n(define-constant ERR_SCALED_AMOUNT_A (err u6010))\n\n;; Contract deployer address\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n;; Admins list and helper var used to remove admins\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n;; Data var used to enable or disable quotes and swaps\n(define-data-var swap-status bool true)\n\n;; Get admins list\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n;; Get admin helper var\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n;; Get swap status\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n;; Add an admin to the admins list\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      ;; Assert caller is an existing admin and new admin is not in admins-list\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n\n      ;; Add admin to list with max length of 5\n      (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n\n      ;; Print add admin data and return true\n      (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n      (ok true)\n    )\n  )\n)\n\n;; Remove an admin from the admins list\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      ;; Assert caller is an existing admin and admin to remove is in admins-list\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n\n      ;; Assert contract deployer cannot be removed\n      (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n\n      ;; Set admin-helper to admin to remove and filter admins-list to remove admin\n      (var-set admin-helper admin)\n      (var-set admins (filter admin-not-removable admins-list))\n\n      ;; Print remove admin data and return true\n      (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n      (ok true)\n    )\n  )\n)\n\n;; Enable or disable quotes and swaps\n(define-public (set-swap-status (status bool))\n  (let (\n    (caller tx-sender)\n  )\n    (begin\n      ;; Assert caller is an admin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n\n      ;; Set swap-status to status\n      (var-set swap-status status)\n\n      ;; Print function data and return true\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n;; Get quote for swap-helper-a\n(define-public (get-quote-a\n    (amount uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>)))\n    (alex-factors (tuple (a uint)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Get quotes for each swap and calculate scaled amounts\n    (quote-a (try! (if (is-eq swaps-reversed false)\n                       (xyk-quote-a amount xyk-tokens xyk-pools)\n                       (alex-quote-a amount alex-tokens alex-factors))))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-xyk-amount quote-a (get b xyk-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount quote-a (get b alex-tokens) (get a xyk-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (try! (if (is-eq swaps-reversed false)\n                       (alex-quote-a scaled-amount-a alex-tokens alex-factors)\n                       (xyk-quote-a scaled-amount-a xyk-tokens xyk-pools))))\n  )\n    ;; Return number of tokens the caller would receive\n    (ok quote-b)\n  )\n)\n\n;; Get quote for swap-helper-b\n(define-public (get-quote-b\n    (amount uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Get quotes for each swap and calculate scaled amounts\n    (quote-a (try! (if (is-eq swaps-reversed false)\n                       (xyk-quote-a amount xyk-tokens xyk-pools)\n                       (alex-quote-b amount alex-tokens alex-factors))))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-xyk-amount quote-a (get b xyk-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount quote-a (get c alex-tokens) (get a xyk-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (try! (if (is-eq swaps-reversed false)\n                       (alex-quote-b scaled-amount-a alex-tokens alex-factors)\n                       (xyk-quote-a scaled-amount-a xyk-tokens xyk-pools))))\n  )\n    ;; Return number of tokens the caller would receive\n    (ok quote-b)\n  )\n)\n\n;; Get quote for swap-helper-c\n(define-public (get-quote-c\n    (amount uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Get quotes for each swap and calculate scaled amounts\n    (quote-a (try! (if (is-eq swaps-reversed false)\n                       (xyk-quote-a amount xyk-tokens xyk-pools)\n                       (alex-quote-c amount alex-tokens alex-factors))))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-xyk-amount quote-a (get b xyk-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount quote-a (get d alex-tokens) (get a xyk-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (try! (if (is-eq swaps-reversed false)\n                       (alex-quote-c scaled-amount-a alex-tokens alex-factors)\n                       (xyk-quote-a scaled-amount-a xyk-tokens xyk-pools))))\n  )\n    ;; Return number of tokens the caller would receive\n    (ok quote-b)\n  )\n)\n\n;; Get quote for swap-helper-d\n(define-public (get-quote-d\n    (amount uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>) (e <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Get quotes for each swap and calculate scaled amounts\n    (quote-a (try! (if (is-eq swaps-reversed false)\n                       (xyk-quote-a amount xyk-tokens xyk-pools)\n                       (alex-quote-d amount alex-tokens alex-factors))))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-xyk-amount quote-a (get b xyk-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount quote-a (get e alex-tokens) (get a xyk-tokens)) ERR_SCALED_AMOUNT_A)))\n    (quote-b (try! (if (is-eq swaps-reversed false)\n                       (alex-quote-d scaled-amount-a alex-tokens alex-factors)\n                       (xyk-quote-a scaled-amount-a xyk-tokens xyk-pools))))\n  )\n    ;; Return number of tokens the caller would receive\n    (ok quote-b)\n  )\n)\n\n;; Perform swap via XYK Core and ALEX\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>)))\n    (alex-factors (tuple (a uint)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap and calculate scaled amounts\n    (swap-a (if (is-eq swaps-reversed false)\n                (try! (xyk-swap-a amount xyk-tokens xyk-pools))\n                (try! (alex-swap-a amount alex-tokens alex-factors))))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-xyk-amount swap-a (get b xyk-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount swap-a (get b alex-tokens) (get a xyk-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (try! (alex-swap-a scaled-amount-a alex-tokens alex-factors))\n                (try! (xyk-swap-a scaled-amount-a xyk-tokens xyk-pools))))\n  )\n    (begin\n      ;; Assert that swap-b is greater than or equal to min-received\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n      ;; Print swap data and return number of tokens the caller received\n      (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          alex-data: {\n            alex-tokens: alex-tokens,\n            alex-factors: alex-factors,\n            alex-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n;; Perform swap via XYK Core and ALEX\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap and calculate scaled amounts\n    (swap-a (if (is-eq swaps-reversed false)\n                (try! (xyk-swap-a amount xyk-tokens xyk-pools))\n                (try! (alex-swap-b amount alex-tokens alex-factors))))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-xyk-amount swap-a (get b xyk-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount swap-a (get c alex-tokens) (get a xyk-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (try! (alex-swap-b scaled-amount-a alex-tokens alex-factors))\n                (try! (xyk-swap-a scaled-amount-a xyk-tokens xyk-pools))))\n  )\n    (begin\n      ;; Assert that swap-b is greater than or equal to min-received\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n      ;; Print swap data and return number of tokens the caller received\n      (print {\n        action: \"swap-helper-b\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          alex-data: {\n            alex-tokens: alex-tokens,\n            alex-factors: alex-factors,\n            alex-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n;; Perform swap via XYK Core and ALEX\n(define-public (swap-helper-c\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap and calculate scaled amounts\n    (swap-a (if (is-eq swaps-reversed false)\n                (try! (xyk-swap-a amount xyk-tokens xyk-pools))\n                (try! (alex-swap-c amount alex-tokens alex-factors))))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-xyk-amount swap-a (get b xyk-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount swap-a (get d alex-tokens) (get a xyk-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (try! (alex-swap-c scaled-amount-a alex-tokens alex-factors))\n                (try! (xyk-swap-a scaled-amount-a xyk-tokens xyk-pools))))\n  )\n    (begin\n      ;; Assert that swap-b is greater than or equal to min-received\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n      ;; Print swap data and return number of tokens the caller received\n      (print {\n        action: \"swap-helper-c\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          alex-data: {\n            alex-tokens: alex-tokens,\n            alex-factors: alex-factors,\n            alex-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n;; Perform swap via XYK Core and ALEX\n(define-public (swap-helper-d\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (alex-tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>) (e <alex-ft-trait>)))\n    (alex-factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    \n    ;; Perform each swap and calculate scaled amounts\n    (swap-a (if (is-eq swaps-reversed false)\n                (try! (xyk-swap-a amount xyk-tokens xyk-pools))\n                (try! (alex-swap-d amount alex-tokens alex-factors))))\n    (scaled-amount-a (if (is-eq swaps-reversed false)\n                         (unwrap! (scale-up-xyk-amount swap-a (get b xyk-tokens) (get a alex-tokens)) ERR_SCALED_AMOUNT_A)\n                         (unwrap! (scale-down-alex-amount swap-a (get e alex-tokens) (get a xyk-tokens)) ERR_SCALED_AMOUNT_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (try! (alex-swap-d scaled-amount-a alex-tokens alex-factors))\n                (try! (xyk-swap-a scaled-amount-a xyk-tokens xyk-pools))))\n  )\n    (begin\n      ;; Assert that swap-b is greater than or equal to min-received\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n      ;; Print swap data and return number of tokens the caller received\n      (print {\n        action: \"swap-helper-d\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          alex-data: {\n            alex-tokens: alex-tokens,\n            alex-factors: alex-factors,\n            alex-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n;; Helper function for removing an admin\n(define-private (admin-not-removable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)\n\n;; Check if token path for swap via XYK Core is reversed relative to the pool's tokens\n(define-private (is-xyk-path-reversed\n    (token-in <xyk-ft-trait>) (token-out <xyk-ft-trait>)\n    (pool-contract <xyk-pool-trait>)\n  )\n  (let (\n    (pool-data (unwrap-panic (contract-call? pool-contract get-pool)))\n  )\n    (not\n      (and\n        (is-eq (contract-of token-in) (get x-token pool-data))\n        (is-eq (contract-of token-out) (get y-token pool-data))\n      )\n    )\n  )\n)\n\n;; Scale up XYK Core token amount\n(define-private (scale-up-xyk-amount\n    (amount uint)\n    (xyk-token <xyk-ft-trait>)\n    (alex-token <alex-ft-trait>)\n  )\n  (let (\n    ;; Get decimals for tokens\n    (xyk-decimals (unwrap-panic (contract-call? xyk-token get-decimals)))\n    (alex-decimals (unwrap-panic (contract-call? alex-token get-decimals)))\n\n    ;; Calculate scaled amount\n    (scaled-amount\n      (if (is-eq xyk-decimals alex-decimals)\n        amount\n        (if (> xyk-decimals alex-decimals)\n          (/ amount (pow u10 (- xyk-decimals alex-decimals)))\n          (* amount (pow u10 (- alex-decimals xyk-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n;; Scale down ALEX token amount\n(define-private (scale-down-alex-amount\n    (amount uint)\n    (alex-token <alex-ft-trait>)\n    (xyk-token <xyk-ft-trait>)\n  )\n  (let (\n    ;; Get decimals for tokens\n    (alex-decimals (unwrap-panic (contract-call? alex-token get-decimals)))\n    (xyk-decimals (unwrap-panic (contract-call? xyk-token get-decimals)))\n\n    ;; Calculate scaled amount\n    (scaled-amount\n      (if (is-eq alex-decimals xyk-decimals)\n        amount\n        (if (> alex-decimals xyk-decimals)\n          (/ amount (pow u10 (- alex-decimals xyk-decimals)))\n          (* amount (pow u10 (- xyk-decimals alex-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n;; Get swap quote via XYK Core using two tokens\n(define-private (xyk-quote-a\n    (amount uint)\n    (tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    ;; Determine if token path is reversed\n    (is-reversed (is-xyk-path-reversed (get a tokens) (get b tokens) (get a pools)))\n\n    ;; Get quote based on path direction\n    (quote-result (if (is-eq is-reversed false)\n                      (try! (contract-call?\n                            'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 get-dy\n                            (get a pools)\n                            (get a tokens) (get b tokens)\n                            amount))\n                      (try! (contract-call?\n                            'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 get-dx\n                            (get a pools)\n                            (get b tokens) (get a tokens)\n                            amount))))\n  )\n    (ok quote-result)\n  )\n)\n\n;; Get swap quote via ALEX using two tokens\n(define-private (alex-quote-a\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>)))\n    (factors (tuple (a uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (quote-result (unwrap-panic (contract-call?\n                                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper\n                                (contract-of a-token) (contract-of b-token)\n                                (get a factors)\n                                amount)))\n  )\n    (ok quote-result)\n  )\n)\n\n;; Get swap quote via ALEX using three tokens\n(define-private (alex-quote-b\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (c-token (get c tokens))\n    (quote-result (unwrap-panic (contract-call?\n                                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper-a\n                                (contract-of a-token) (contract-of b-token) (contract-of c-token)\n                                (get a factors) (get b factors)\n                                amount)))\n  )\n    (ok quote-result)\n  )\n)\n\n;; Get swap quote via ALEX using four tokens\n(define-private (alex-quote-c\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (c-token (get c tokens))\n    (d-token (get d tokens))\n    (quote-result (unwrap-panic (contract-call?\n                                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper-b\n                                (contract-of a-token) (contract-of b-token) (contract-of c-token)\n                                (contract-of d-token)\n                                (get a factors) (get b factors) (get c factors)\n                                amount)))\n  )\n    (ok quote-result)\n  )\n)\n\n;; Get swap quote via ALEX using five tokens\n(define-private (alex-quote-d\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>) (e <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (a-token (get a tokens))\n    (b-token (get b tokens))\n    (c-token (get c tokens))\n    (d-token (get d tokens))\n    (e-token (get e tokens))\n    (quote-result (unwrap-panic (contract-call?\n                                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper-c\n                                (contract-of a-token) (contract-of b-token) (contract-of c-token)\n                                (contract-of d-token) (contract-of e-token)\n                                (get a factors) (get b factors) (get c factors) (get d factors)\n                                amount)))\n  )\n    (ok quote-result)\n  )\n)\n\n;; Perform swap via XYK Core using two tokens\n(define-private (xyk-swap-a\n    (amount uint)\n    (tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    ;; Determine if token path is reversed\n    (is-reversed (is-xyk-path-reversed (get a tokens) (get b tokens) (get a pools)))\n\n    ;; Perform swap based on path direction\n    (swap-result (if (is-eq is-reversed false)\n                     (try! (contract-call?\n                           'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 swap-x-for-y\n                           (get a pools)\n                           (get a tokens) (get b tokens)\n                           amount u1))\n                     (try! (contract-call?\n                           'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 swap-y-for-x\n                           (get a pools)\n                           (get b tokens) (get a tokens)\n                           amount u1))))\n  )\n    (ok swap-result)\n  )\n)\n\n;; Perform swap via ALEX using two tokens\n(define-private (alex-swap-a\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>)))\n    (factors (tuple (a uint)))\n  )\n  (let (\n    (swap-result (try! (contract-call?\n                       'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper\n                       (get a tokens) (get b tokens)\n                       (get a factors)\n                       amount (some u1))))\n  )\n    (ok swap-result)\n  )\n)\n\n;; Perform swap via ALEX using three tokens\n(define-private (alex-swap-b\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint)))\n  )\n  (let (\n    (swap-result (try! (contract-call?\n                       'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a\n                       (get a tokens) (get b tokens) (get c tokens)\n                       (get a factors) (get b factors)\n                       amount (some u1))))\n  )\n    (ok swap-result)\n  )\n)\n\n;; Perform swap via ALEX using four tokens\n(define-private (alex-swap-c\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint)))\n  )\n  (let (\n    (swap-result (try! (contract-call?\n                       'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-b\n                       (get a tokens) (get b tokens) (get c tokens) (get d tokens)\n                       (get a factors) (get b factors) (get c factors)\n                       amount (some u1))))\n  )\n    (ok swap-result)\n  )\n)\n\n;; Perform swap via ALEX using five tokens\n(define-private (alex-swap-d\n    (amount uint)\n    (tokens (tuple (a <alex-ft-trait>) (b <alex-ft-trait>) (c <alex-ft-trait>) (d <alex-ft-trait>) (e <alex-ft-trait>)))\n    (factors (tuple (a uint) (b uint) (c uint) (d uint)))\n  )\n  (let (\n    (swap-result (try! (contract-call?\n                       'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-c\n                       (get a tokens) (get b tokens) (get c tokens) (get d tokens) (get e tokens)\n                       (get a factors) (get b factors) (get c factors) (get d factors)\n                       amount (some u1))))\n  )\n    (ok swap-result)\n  )\n)",
    "analysis": {
      "summary": "This Clarity smart contract facilitates token swaps between XYK Core and ALEX models on the Stacks blockchain, managing swap operations, admin roles, and swap status.",
      "explanation": "The contract integrates with both XYK Core and ALEX liquidity pool models to perform token swaps. It defines error constants, a list of admin principals, and a swap status flag. Admins can add or remove other admins, and the contract deployer cannot be removed. The swap status can be toggled to enable or disable swapping. The contract provides functions to get quotes for swaps and to execute swaps, supporting various swap paths (single, double, triple, and quadruple token swaps). It uses private functions to check if token paths are reversed, scale amounts based on token decimals, and interact with XYK Core and ALEX contracts for quotes and swaps. The contract ensures swaps meet a minimum received amount and logs swap actions.",
      "tags": [
        "DeFi",
        "swap",
        "XYK",
        "ALEX",
        "token",
        "liquidity-pool"
      ]
    }
  },
  {
    "rank": 54,
    "contract": "SP804CDG3KBN9M6E00AD744K8DC697G7HBCG520Q.sbtc-yield-rewards",
    "calls": 598,
    "source": "(define-constant ERR_ACTIVATION_HEIGHT_NOT_MET (err u100))\n(define-constant ERR_ALREADY_ENROLLED (err u101))\n(define-constant ERR_USER_BLACKLISTED (err u102))\n(define-constant ERR_NOT_ENROLLED (err u103))\n(define-constant ERR_NOT_ADMIN (err u104))\n;; This should never be thrown\n(define-constant ERR_CYCLE_ENDED_2 (err u107))\n(define-constant ERR_NOT_REWARDED_ALL (err u108))\n(define-constant ERR_NOT_SNAPSHOTTED_ALL_PARTICIPANTS (err u109))\n(define-constant ERR_CYCLE_ENDED (err u110))\n(define-constant ERR_NOT_ALL_SNAPSHOTS (err u111))\n(define-constant ERR_CANNOT_DISTRIBUTE_REWARDS (err u112))\n(define-constant ERR_ALREADY_REWARDED (err u113))\n(define-constant ERR_STX_BLOCK_TOO_LOW (err u114))\n(define-constant ERR_STX_BLOCK_TOO_HIGH (err u115))\n(define-constant ERR_NOT_NEW_CYCLE_YET (err u116))\n(define-constant ERR_CONTRACT_ALREADY_ACTIVE (err u117))\n(define-constant ERR_CONTRACT_NOT_ACTIVE (err u118))\n(define-constant ERR_NOT_NEW_SNAPSHOT_YET (err u119))\n(define-constant ERR_STX_BLOCK_IN_FUTURE (err u120))\n(define-constant ERR_SNAPSHOTS_NOT_CONCLUDED (err u121))\n(define-constant ERR_REWARDS_NOT_SENT_YET (err u122))\n(define-constant ERR_APR_TOO_HIGH (err u998))\n(define-constant ERR_APR_TOO_LOW (err u999))\n\n\n(define-constant first_snapshot_new_cycle u1000)\n(define-constant average-burn-blocks-year u52560)\n(define-constant APR_DECIMALS u100000000)\n(define-constant MIN_APR_ONE_EIGHT u1000000) ;; 1% APR - 0,01 * 10^8\n(define-constant MAX_APR_ONE_EIGHT u8000000) ;; 8% APR - 0,1 * 10^8\n\n;; Modularize the variables for different networks\n\n(define-data-var is-contract-active bool false)\n(define-data-var cycle-id uint u0)\n\n(define-data-var current-cycle-stacks-block-height uint u0)\n(define-data-var current-snapshot-tenure-height uint u0)\n(define-data-var current-snapshot-stacks-block-height uint u0)\n(define-data-var concluded-snapshots bool false)\n\n;; For Testnet\n(define-data-var current-cycle-tenure-height uint u0)\n(define-data-var nr-blocks-snapshot uint u0)\n(define-data-var nr-snapshots-cycle uint u0) ;; last snapshot is: next-cycle-bitcoin-block - nr-blocks-snapshot\n\n(if is-in-mainnet \n  (begin \n    (var-set current-cycle-tenure-height u178880) \n    (var-set nr-snapshots-cycle u14)\n    (var-set nr-blocks-snapshot u150)\n  )\n  ;; simnet and testnet use the same chain-id\n  (begin \n    (var-set current-cycle-tenure-height u69290) \n    (var-set nr-snapshots-cycle u3)\n    (var-set nr-blocks-snapshot u67)\n  )\n)\n\n(define-data-var next-nr-blocks-snapshot uint (var-get nr-blocks-snapshot))\n(define-data-var next-nr-snapshots-cycle uint (var-get nr-snapshots-cycle)) \n\n(define-data-var rewarded-count uint u0)\n(define-data-var participants-count uint u0)\n\n;; Number of participants enrolled at the beginning of the current cycle\n(define-data-var current-cycle-participants-count uint u0)\n\n(define-data-var current-cycle-total uint u0)\n\n(define-data-var local-stx-id-header-hash (buff 32) 0x0000000000000000000000000000000000000000000000000000000000000000)\n\n(define-data-var current-snapshot-total uint u0)\n(define-data-var current-snapshot-count uint u0)\n(define-data-var current-snapshot-index uint u0)\n\n(define-data-var next-cycle-tenure-height uint (+ (var-get current-cycle-tenure-height) (* (var-get nr-blocks-snapshot) (var-get nr-snapshots-cycle))))\n(define-data-var can-distribute-rewards bool false)\n;; yield of the smart contract -> total rewards for this cycle\n;; if rewards_cycle/total_sbtc_cycle % > max-rate %\n;; rewards_cycle = max-rate% * total_sbtc_cycle, the remaining will be used for future cycles\n(define-data-var rewards-to-distribute uint u0)\n\n(define-data-var admin principal contract-caller)\n;; APR - annual percentage rate scaled by 10^8. This represents the maximum\n;; percentage of the sBTC yield contributors are ready to give away as rewards\n;; in a year.\n(define-data-var APR uint u8000000)\n(define-data-var next-APR uint u8000000)\n\n;; data maps\n;;\n;; when someone enrolls, gets added to the map\n;; when someone leaves, gets removed from the map\n;; verify at get-burn-block-info state of map when doing calculations\n(define-map participants \n  { address: principal } \n  { \n    rewarded-address: principal, ;; default contract-caller if not set\n  }\n)\n\n(define-map blacklist \n  { address: principal } \n  { \n    blacklisted: bool, ;; default true\n  }\n)\n\n(define-map participant-holding { cycle-id: uint, address: principal } { amount: uint, last-snapshot: uint, rewarded: bool, reward-amount: uint })\n(define-map rewards-holding { cycle-id: uint, rewarded-address: principal } { amount: uint })\n\n(define-map cycle-snapshot-to-stx-block-height\n  { cycle-id: uint, snapshot-id: uint }\n  { stx-block-height: uint, tenure-height-stored: uint }\n)\n\n(define-map distribution-finalized-stx-block-height-when-called { cycle-id: uint } { stx-block-height: uint })\n\n(define-public (update-initialize-block (new-tenure-height uint))\n  (begin \n    (asserts! (not (var-get is-contract-active)) ERR_CONTRACT_ALREADY_ACTIVE)\n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (ok (var-set current-cycle-tenure-height new-tenure-height)) \n  )\n)\n\n(define-public (compute-current-snapshot-balances (principals (list 900 principal)))\n  (let\n    ((stx-id-header-hash (unwrap! (get-stacks-block-info? id-header-hash (var-get current-snapshot-stacks-block-height)) ERR_STX_BLOCK_IN_FUTURE)))\n    (var-set local-stx-id-header-hash stx-id-header-hash)\n    (let ((snapshot-total (fold compute-and-update-balances-one-user principals u0)))  \n      (var-set current-snapshot-total (+ (var-get current-snapshot-total) snapshot-total))\n      (ok snapshot-total)\n    )\n  )\n)\n\n(define-private (compute-and-update-balances-one-user (address principal) (current-total uint))\n  (let\n    (\n      (balance (at-block\n        ;; unexistent balance on that block height - should never happen\n        (var-get local-stx-id-header-hash)\n        (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance-available address))))\n      (new-total (+ current-total balance))\n      (participant-hold (map-get? participant-holding { cycle-id: (var-get cycle-id), address: address }))\n      (local-current-snapshot-index (var-get current-snapshot-index))\n    )\n    ;; only add those that are part of the pool and aren't already snapshotted\n    (if \n      (or \n        (not (is-enrolled-this-cycle address)) \n        (and (is-enrolled-this-cycle address) (is-eq (default-to first_snapshot_new_cycle (get last-snapshot participant-hold)) local-current-snapshot-index))\n      )\n      ;; don't count him\n      current-total\n      ;; count him\n      (begin \n        (var-set current-snapshot-count (+ (var-get current-snapshot-count) u1))\n        (map-set participant-holding \n          { cycle-id: (var-get cycle-id), address: address }\n          { \n            amount: (+ balance  (default-to u0 (get amount participant-hold))),\n            last-snapshot: local-current-snapshot-index,\n            rewarded: false,\n            reward-amount: u0\n          }\n        )\n        (print \n          {\n            cycle-id: (var-get cycle-id),\n            snapshot-index: (var-get current-snapshot-index),\n            balance: balance,\n            enrolled-address: address,\n            function-name: \"compute-current-snapshot-balance\"\n          }\n        )\n        new-total\n      )\n    )\n  )\n)\n\n(define-private (reset-state-for-cycle (stx-block-height uint)) \n  (begin \n    (var-set nr-blocks-snapshot (var-get next-nr-blocks-snapshot))\n    (var-set nr-snapshots-cycle (var-get next-nr-snapshots-cycle))\n    (var-set APR (var-get next-APR))\n    (var-set can-distribute-rewards false)\n    (var-set current-cycle-stacks-block-height stx-block-height)\n    (var-set current-cycle-total u0)\n    (var-set current-snapshot-total u0)\n    (var-set rewarded-count u0) \n    (var-set concluded-snapshots false)\n    (var-set current-cycle-participants-count \n      (at-block (unwrap-panic (get-stacks-block-info? id-header-hash stx-block-height)) (var-get participants-count)))\n  )\n)\n\n;; contract initialization\n(define-public (initialize-contract (stx-block-height uint))\n  (begin \n    (asserts! (>= tenure-height (var-get current-cycle-tenure-height)) ERR_ACTIVATION_HEIGHT_NOT_MET)\n    (asserts! (not (var-get is-contract-active)) ERR_CONTRACT_ALREADY_ACTIVE)\n    (asserts! (> (var-get current-cycle-tenure-height) (block-height-to-tenure-height (- stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (asserts! (is-eq (var-get current-cycle-tenure-height) (block-height-to-tenure-height stx-block-height)) ERR_STX_BLOCK_TOO_LOW)\n    \n    (reset-state-for-cycle stx-block-height)\n    (update-snapshot-for-new-cycle stx-block-height)\n    (map-set cycle-snapshot-to-stx-block-height \n      { cycle-id: (var-get cycle-id), snapshot-id: (var-get current-snapshot-index)}\n      { stx-block-height: stx-block-height, tenure-height-stored: (var-get current-cycle-tenure-height) }\n    )\n    (var-set is-contract-active true)\n    (ok true)\n  )\n)\n\n;; enroll-for-rewards\n(define-public (enroll (rewarded-address (optional principal)))\n  (let ((rewards-recipient (default-to contract-caller rewarded-address)))\n    (asserts! (is-none (map-get? participants {address: contract-caller})) ERR_ALREADY_ENROLLED)\n    (asserts! (is-none (map-get? blacklist {address: contract-caller})) ERR_USER_BLACKLISTED)\n    (var-set participants-count (+ (var-get participants-count) u1))\n    (map-set participants {address: contract-caller} {\n      rewarded-address: rewards-recipient\n    })\n    (print\n      {\n        tenure-height: tenure-height,\n        reward-address: rewards-recipient,\n        enrolled-address: contract-caller,\n        function-name: \"enroll\"\n      }\n    )\n    (ok true)\n  )\n)\n\n(define-public (enroll-dex (dex-contract principal) (rewarded-address (optional principal)))\n  (let ((rewards-recipient (default-to dex-contract rewarded-address)))\n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (asserts! (is-none (map-get? participants {address: dex-contract})) ERR_ALREADY_ENROLLED)\n    (asserts! (is-none (map-get? blacklist {address: dex-contract})) ERR_USER_BLACKLISTED)\n    (var-set participants-count (+ (var-get participants-count) u1))\n    (map-set participants {address: dex-contract} {\n      rewarded-address: rewards-recipient\n    })\n    (print\n      {\n        tenure-height: tenure-height,\n        reward-address: rewards-recipient,\n        enrolled-address: dex-contract,\n        function-name: \"enroll\"\n      }\n    )\n    (ok true)\n  )\n)\n\n(define-public (change-reward-address (new-address principal)) \n  (let ((participant (map-get? participants {address: contract-caller})))\n    (asserts! (is-some participant) ERR_NOT_ENROLLED)\n    (ok (map-set participants \n      {address: contract-caller} \n      (merge (unwrap-panic participant) { rewarded-address: new-address})\n    ))\n  )\n)\n\n(define-public (change-reward-address-dex (dex-contract principal) (new-reward-address principal)) \n  (let ((participant (map-get? participants {address: dex-contract})))\n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (asserts! (is-some participant) ERR_NOT_ENROLLED)\n    (ok (map-set participants \n      {address: dex-contract} \n      (merge (unwrap-panic participant) { rewarded-address: new-reward-address})\n    ))\n  )\n)\n\n(define-private (remove-participant (address principal))\n  (begin \n    (map-delete participants {address: address})\n    (var-set participants-count (- (var-get participants-count) u1))\n  )\n)\n\n(define-public (opt-out) \n  (begin \n    (asserts! (is-some (map-get? participants {address: contract-caller})) ERR_NOT_ENROLLED)\n    (print\n      {\n        tenure-height: tenure-height,\n        enrolled-address: contract-caller,\n        function-name: \"opt-out\"\n      }\n    )\n    (ok (remove-participant contract-caller))\n  )\n)\n\n(define-public (opt-out-dex (dex-contract principal))\n  (begin \n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (asserts! (is-some (map-get? participants {address: dex-contract})) ERR_NOT_ENROLLED)\n    (print\n      {\n        tenure-height: tenure-height,\n        enrolled-address: dex-contract,\n        function-name: \"opt-out\"\n      }\n    )\n    (ok (remove-participant dex-contract))\n  )\n)\n\n(define-public (add-blacklisted (address principal))\n  (begin \n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (if (is-some (map-get? participants {address: address}))\n      (begin \n        (remove-participant address)\n        (ok (map-set blacklist {address: address} {blacklisted: true}))\n      )\n      (ok (map-set blacklist {address: address} {blacklisted: true}))\n    )\n  )\n)\n\n(define-public (remove-blacklisted (address principal))\n  (begin \n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (ok (map-delete blacklist {address: address}))\n  )\n)\n\n(define-public (update-admin (new-admin-address principal)) \n  (begin \n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (ok (var-set admin new-admin-address))\n  )\n)\n\n;; update cycle/snapshot rules - admin functions\n\n;; Update the number of blocks per snapshot. The new value will be picked up\n;; in the next cycle, after the head-to-next-cycle function is called.\n(define-public (update-snapshot-length (updated-nr-blocks-snapshot uint))\n  (begin\n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (ok (var-set next-nr-blocks-snapshot updated-nr-blocks-snapshot))\n  )\n)\n\n;; Update the number of snapshots per cycle. The new value will be picked up\n;; in the next cycle, after the head-to-next-cycle function is called.\n(define-public (update-nr-snapshots-cycle (updated-nr-snapshots-cycle uint))\n  (begin \n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (ok (var-set next-nr-snapshots-cycle updated-nr-snapshots-cycle))\n  )\n)\n\n;; Update the number of snapshots per cycle and the numberof blocks per snapshot. \n;; The new value will be picked up in the next cycle, after the \n;; head-to-next-cycle function is called.\n(define-public (update-cycle-data (updated-nr-snapshots-cycle uint) (updated-nr-blocks-snapshot uint))\n  (begin\n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (var-set next-nr-snapshots-cycle updated-nr-snapshots-cycle)\n    (ok (var-set next-nr-blocks-snapshot updated-nr-blocks-snapshot))\n  )\n)\n\n(define-public (update-APR (new-apr-one-six uint))\n  (begin \n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (asserts! (>= new-apr-one-six MIN_APR_ONE_EIGHT) ERR_APR_TOO_LOW)\n    (asserts! (<= new-apr-one-six MAX_APR_ONE_EIGHT) ERR_APR_TOO_HIGH)\n    (ok (var-set next-APR new-apr-one-six))\n  )\n)\n\n\n(define-read-only (check-new-cycle-valid-stacks-block-height (stx-block-height uint)) \n  (begin\n    (asserts! (> (var-get current-cycle-tenure-height) (block-height-to-tenure-height (- stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (asserts! (is-eq (var-get current-cycle-tenure-height) (block-height-to-tenure-height stx-block-height)) ERR_STX_BLOCK_TOO_LOW)\n    (ok true)\n  )\n)\n\n(define-read-only (check-new-snapshot-valid-stacks-block-height (stx-block-height uint)) \n  (begin\n    (asserts! (> (var-get current-snapshot-tenure-height) (block-height-to-tenure-height (- stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (asserts! (is-eq (var-get current-snapshot-tenure-height) (block-height-to-tenure-height stx-block-height)) ERR_STX_BLOCK_TOO_LOW)\n    (ok true)\n  )\n)\n\n(define-public (head-to-next-snapshot (new-stx-block-height uint))\n  (let ((next-snapshot-tenure-height (+ (var-get current-snapshot-tenure-height) (var-get nr-blocks-snapshot))))\n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (>= tenure-height next-snapshot-tenure-height) ERR_NOT_NEW_SNAPSHOT_YET)\n    (asserts! (is-eq (var-get current-snapshot-count) (var-get current-cycle-participants-count)) ERR_NOT_SNAPSHOTTED_ALL_PARTICIPANTS)\n    (asserts! (not (is-eq (var-get nr-snapshots-cycle) (+ (var-get current-snapshot-index) u1))) ERR_CYCLE_ENDED)\n    (asserts! (< next-snapshot-tenure-height (var-get next-cycle-tenure-height)) ERR_CYCLE_ENDED_2)\n    (asserts! (> next-snapshot-tenure-height (block-height-to-tenure-height (- new-stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (asserts! (is-eq next-snapshot-tenure-height (block-height-to-tenure-height new-stx-block-height)) ERR_STX_BLOCK_TOO_LOW)\n\n    (var-set current-snapshot-tenure-height next-snapshot-tenure-height)\n    (var-set current-cycle-total (+ (var-get current-cycle-total) (var-get current-snapshot-total)))\n    (var-set current-snapshot-total u0)\n    (var-set current-snapshot-count u0)\n    (var-set current-snapshot-index (+ (var-get current-snapshot-index) u1))\n    (map-set cycle-snapshot-to-stx-block-height \n      { cycle-id: (var-get cycle-id), snapshot-id: (var-get current-snapshot-index)}\n      { stx-block-height: new-stx-block-height, tenure-height-stored: next-snapshot-tenure-height }\n    )\n    (ok (var-set current-snapshot-stacks-block-height new-stx-block-height))\n  )\n)\n\n(define-private (update-snapshot-for-new-cycle (stx-block-height uint))\n  (let ((next-snapshot-tenure-height (var-get current-cycle-tenure-height)))\n    (var-set current-snapshot-tenure-height next-snapshot-tenure-height)\n    (var-set current-snapshot-count u0)\n    (var-set current-snapshot-index u0)\n    (var-set current-snapshot-stacks-block-height stx-block-height)\n  )\n)\n\n(define-public (finalize-reward-distribution) \n  (begin\n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (is-eq (var-get current-cycle-participants-count) (var-get rewarded-count)) ERR_NOT_REWARDED_ALL)\n\n    (map-set distribution-finalized-stx-block-height-when-called {cycle-id: (var-get cycle-id)} {stx-block-height: stacks-block-height})\n    (ok true)\n  )\n)\n\n(define-public (head-to-next-cycle (stx-block-height uint)) \n  (begin\n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (>= tenure-height (var-get next-cycle-tenure-height)) ERR_NOT_NEW_CYCLE_YET)\n    (asserts! (is-eq (var-get current-cycle-participants-count) (var-get rewarded-count)) ERR_NOT_REWARDED_ALL) \n    (asserts! (is-some (map-get? distribution-finalized-stx-block-height-when-called {cycle-id: (var-get cycle-id)})) ERR_REWARDS_NOT_SENT_YET)\n    (asserts! (> (var-get next-cycle-tenure-height) (block-height-to-tenure-height (- stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (asserts! (is-eq (var-get next-cycle-tenure-height) (block-height-to-tenure-height stx-block-height)) ERR_STX_BLOCK_TOO_LOW)\n  \n    (var-set current-cycle-tenure-height \n      (+ (var-get current-cycle-tenure-height) \n        (* (var-get nr-blocks-snapshot) (var-get nr-snapshots-cycle))))\n    (reset-state-for-cycle stx-block-height)\n    (var-set next-cycle-tenure-height \n      (+ (var-get current-cycle-tenure-height) \n        (* (var-get nr-blocks-snapshot) (var-get nr-snapshots-cycle))))\n    (var-set cycle-id (+ (var-get cycle-id) u1))\n    (update-snapshot-for-new-cycle stx-block-height)\n\n    (map-set cycle-snapshot-to-stx-block-height \n      { cycle-id: (var-get cycle-id), snapshot-id: (var-get current-snapshot-index)}\n      { stx-block-height: stx-block-height, tenure-height-stored: (var-get current-cycle-tenure-height) }\n    )\n    (ok true)\n  )\n)\n\n(define-public (distribute-rewards (principals (list 900 principal))) \n  (let \n    ((stx-id-header-hash (unwrap! (get-stacks-block-info? id-header-hash (var-get current-cycle-stacks-block-height)) ERR_STX_BLOCK_IN_FUTURE)))\n    (var-set local-stx-id-header-hash stx-id-header-hash)\n    (asserts! (var-get can-distribute-rewards) ERR_CANNOT_DISTRIBUTE_REWARDS)\n    (if \n      (is-eq (var-get current-cycle-total) u0)\n        (begin \n          (var-set rewarded-count (var-get current-cycle-participants-count))\n          (ok (list ))\n        )\n        (ok (map distribute-reward-user principals))\n    )\n  )\n)\n\n(define-private (distribute-reward-user (user principal)) \n  (let \n    (\n      (holding-state (unwrap! (map-get? participant-holding {address: user, cycle-id: (var-get cycle-id)}) ERR_NOT_ENROLLED))\n      (alredy-rewarded-amount (default-to u0 (get amount (map-get? rewards-holding {rewarded-address: user, cycle-id: (var-get cycle-id)}))))\n      (participant-state (unwrap! (at-block (var-get local-stx-id-header-hash) (map-get? participants {address: user})) ERR_NOT_ENROLLED))\n      (rewarded-address (get rewarded-address participant-state))\n      (reward-amount \n        (/\n          (* \n            (get amount holding-state)\n            (var-get rewards-to-distribute)\n          ) \n          (* \n            (var-get current-cycle-total)\n            APR_DECIMALS\n          )\n        )\n      )\n    )\n    (if (get rewarded holding-state)\n      ERR_ALREADY_REWARDED\n      (begin\n        (var-set rewarded-count (+ (var-get rewarded-count) u1))\n        (map-set participant-holding \n          {address: user, cycle-id: (var-get cycle-id)} \n          (merge holding-state {rewarded: true, reward-amount: reward-amount})\n        )\n        (map-set rewards-holding {rewarded-address: rewarded-address, cycle-id: (var-get cycle-id)} \n          {amount: (+ alredy-rewarded-amount reward-amount)}\n        )\n        (if (> reward-amount u0) \n          (try! (as-contract (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token transfer \n            reward-amount\n            tx-sender rewarded-address none)))\n          false\n        )\n        (print\n          {\n            cycle-id: (var-get cycle-id),\n            enrolled-address: user,\n            reward-address: rewarded-address,\n            amount: reward-amount,\n            function-name: \"distribute-rewards\"\n          }\n        )\n        (ok true)\n      )\n    )\n  )\n)\n\n(define-public (conclude-cycle-snapshots) \n  (begin \n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (is-eq (+ (var-get current-snapshot-index) u1) (var-get nr-snapshots-cycle)) ERR_NOT_ALL_SNAPSHOTS)\n    (asserts! (is-eq (var-get current-snapshot-count) (var-get current-cycle-participants-count)) ERR_NOT_SNAPSHOTTED_ALL_PARTICIPANTS)\n    ;; add in the calculation the total amount from the last snapshot\n    (var-set current-cycle-total (+ (var-get current-cycle-total) (var-get current-snapshot-total)))\n    (var-set concluded-snapshots true)\n    (print\n      {\n        cycle-id: (var-get cycle-id),\n        current-cycle-total: (var-get current-cycle-total),\n        function-name: \"conclude-cycle-snapshots\"\n      }\n    )\n    (ok true)\n  )\n)\n\n(define-public (set-can-distribute-rewards)\n  (begin \n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (var-get concluded-snapshots) ERR_SNAPSHOTS_NOT_CONCLUDED)\n    (let ((pool-rewards (at-block \n                  (unwrap-panic (get-stacks-block-info? id-header-hash (var-get current-snapshot-stacks-block-height))) \n                  (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance-available (as-contract contract-caller)))))\n          (max-cap-rewards (/ (* (cycle-percentage-rate) (var-get current-cycle-total)) (var-get nr-snapshots-cycle)))\n          (local-rewards-to-distribute \n            (if \n              (< (* APR_DECIMALS pool-rewards) max-cap-rewards) \n              (* APR_DECIMALS pool-rewards)\n              max-cap-rewards)))\n      (var-set rewards-to-distribute local-rewards-to-distribute)\n      (var-set can-distribute-rewards true)\n      (ok true)\n    )\n  )\n)\n\n;; Number of cycles per year - average number of blocks in a year / number of\n;; blocks in a cycle. When nr-blocks-snapshot or next-nr-snapshots-cycle are\n;; updated, this value is recalculated.\n(define-read-only (nr-cycles-year) \n  (/ average-burn-blocks-year (* (var-get nr-blocks-snapshot) (var-get nr-snapshots-cycle)))\n)\n\n;; Cycle percentage rate scaled by 10^8. This represents the maximum\n;; percentage of the sBTC yield contributors are ready to give away as rewards\n;; in a cycle.\n;; CPR = APR / nr-cycles-per-year\n;; When APR or nr-cycles-per-year are updated, this value is recalculated.\n(define-read-only (cycle-percentage-rate) \n  (/ (var-get APR) (nr-cycles-year))\n)\n\n(define-read-only (block-height-to-tenure-height (stx-block-height uint)) \n  (at-block (unwrap-panic (get-stacks-block-info? id-header-hash stx-block-height)) tenure-height)\n)\n\n(define-read-only (is-enrolled-in-next-cycle (address principal)) \n  (is-some (map-get? participants {address: address}))\n)\n\n(define-read-only (is-enrolled-this-cycle (address principal)) \n  (is-some \n    (at-block \n      (unwrap-panic (get-stacks-block-info? id-header-hash (var-get current-cycle-stacks-block-height)))\n      (map-get? participants {address: address}))\n  )\n)\n\n(define-read-only (get-is-blacklisted (address principal)) \n  (is-some (map-get? blacklist {address: address}))\n)\n\n(define-read-only (get-is-blacklisted-list (addresses (list 900 principal)))\n  (map is-blacklisted addresses)\n)\n\n(define-private (is-blacklisted (address principal))\n  (is-some (map-get? blacklist {address: address}))\n)\n\n(define-read-only (cycle-data) \n  {\n    cycle-id: (var-get cycle-id),\n    current-cycle-tenure-height: (var-get current-cycle-tenure-height),\n    next-cycle-tenure-height: (var-get next-cycle-tenure-height),\n    current-cycle-stacks-block-height: (var-get current-cycle-stacks-block-height),\n    participants-count: (var-get current-cycle-participants-count),\n    nr-snapshots-cycle: (var-get nr-snapshots-cycle),\n    nr-blocks-snapshot: (var-get nr-blocks-snapshot),\n    current-snapshot-index: (var-get current-snapshot-index),\n  }\n)\n\n(define-read-only (current-cycle-id)\n  (var-get cycle-id)\n)\n\n(define-read-only (snapshot-data) \n  {\n    current-snapshot-tenure-height: (var-get current-snapshot-tenure-height),\n    current-snapshot-stacks-block-height: (var-get current-snapshot-stacks-block-height),\n    current-snapshot-count: (var-get current-snapshot-count),\n    current-snapshot-total: (var-get current-snapshot-total),\n    current-snapshot-index: (var-get current-snapshot-index),\n    nr-blocks-snapshot: (var-get nr-blocks-snapshot),\n  }\n)\n\n(define-read-only (rewarded-data) \n  {\n    rewarded-count: (var-get rewarded-count),\n    can-distribute-rewards: (var-get can-distribute-rewards),\n  }\n)\n\n(define-read-only (check-can-distribute-rewards) \n  (var-get can-distribute-rewards)\n)\n\n;; if SC not initialized, returns tenure block height for it\n;; else returns the tenure block height for next snapshot/cycle\n(define-read-only (tenure-height-for-next-state)\n  (if (var-get is-contract-active) \n    (+ (var-get current-snapshot-tenure-height) (var-get nr-blocks-snapshot))\n    (var-get current-cycle-tenure-height)\n  )\n)\n\n(define-read-only (current-overview-data) \n  {\n    cycle-id: (var-get cycle-id),\n    snapshot-index: (var-get current-snapshot-index),\n    nr-snapshots-cycle: (var-get nr-snapshots-cycle)\n  }\n)\n\n(define-read-only (get-admin)\n  (var-get admin))\n\n(define-read-only (get-is-contract-active)\n  (var-get is-contract-active))\n\n(define-read-only (get-current-tenure-height) \n  tenure-height)\n\n(define-read-only (get-latest-reward-address (address principal))\n  (get rewarded-address (map-get? participants {address: address})))\n\n(define-read-only (get-stacks-block-height-for-cycle-snapshot\n    (checked-cycle-id uint)\n    (checked-snapshot-id uint)\n  )\n  (get stx-block-height\n    (map-get? cycle-snapshot-to-stx-block-height\n      { \n        cycle-id: checked-cycle-id,\n        snapshot-id: checked-snapshot-id\n      }\n    )\n  )\n)\n\n(define-read-only (get-tenure-height-for-cycle-snapshot\n    (checked-cycle-id uint)\n    (checked-snapshot-id uint)\n  )\n  (get tenure-height-stored\n    (map-get? cycle-snapshot-to-stx-block-height\n      { \n        cycle-id: checked-cycle-id,\n        snapshot-id: checked-snapshot-id\n      }\n    )\n  )\n)\n\n(define-read-only (stx-block-height-distribution-finalized (wanted-cycle-id uint)) \n  (map-get? distribution-finalized-stx-block-height-when-called {cycle-id: wanted-cycle-id})\n)\n\n(define-read-only (reward-amount-for-cycle-and-address (wanted-cycle-id uint) (address principal)) \n  (get reward-amount (map-get? participant-holding {\n    cycle-id: wanted-cycle-id,\n    address: address\n  }))\n)\n\n(define-read-only (reward-amount-for-cycle-and-reward-address (wanted-cycle-id uint) (reward-address principal)) \n  (get amount (map-get? rewards-holding {\n    cycle-id: wanted-cycle-id,\n    rewarded-address: reward-address\n  }))\n)\n\n(define-read-only (get-cycle-current-state)\n  {\n    cycle-id: (var-get cycle-id),\n    first-tenure: (var-get current-cycle-tenure-height),\n    last-tenure: (- (var-get next-cycle-tenure-height) u1), \n  }\n)\n",
    "analysis": {
      "summary": "This contract manages a reward distribution system, allowing participants to enroll, snapshot their balances at intervals, and distribute rewards based on their contributions.",
      "explanation": "This Clarity smart contract is designed for a reward distribution system, where participants can enroll to be part of a reward cycle. The contract handles enrollment, blacklisting, snapshots of participant balances, and distribution of rewards. It uses various data variables and maps to track the state of cycles, participants, and rewards. Key functions include enrollment (with special provisions for DEX contracts), snapshot balance computation, reward distribution, and administrative functions like updating the APR or cycle parameters. The contract ensures that rewards are distributed only after all participants have been snapshotted and the total reward amount is calculated based on the participants' contributions relative to the total contributions and the set APR. It also includes mechanisms for updating administrative settings and transitioning between cycles and snapshots.",
      "tags": [
        "DeFi",
        "rewards-distribution",
        "staking"
      ]
    }
  },
  {
    "rank": 55,
    "contract": "SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-stake-registry-v2-1",
    "calls": 593,
    "source": ";; @contract Stake Registry - Keep track of all staking pools\n;; Users can stake, unstake and claim rewards from active pools.\n;; DAO can activate a new pool or deactivate an existing one.\n;; When a pool is deactivated, users can not stake but they can unstake.\n;; @version 1.1\n\n(use-trait ft-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait stake-pool-trait .arkadiko-stake-pool-trait-v1.stake-pool-trait)\n(use-trait stake-registry-trait .arkadiko-stake-registry-trait-v1.stake-registry-trait)\n(impl-trait .arkadiko-stake-registry-trait-v1.stake-registry-trait)\n\n;; Errors\n(define-constant ERR-INVALID-POOL (err u19001))\n(define-constant ERR-POOL-EXIST (err u19002))\n(define-constant ERR-POOL-INACTIVE (err u19003))\n(define-constant ERR-WRONG-REGISTRY (err u19004))\n(define-constant ERR-NOT-AUTHORIZED u19401)\n\n;; Variables\n(define-data-var pool-count uint u0)\n\n;; Pool maps\n(define-map pools-data-map\n  { pool: principal }\n  {\n    name: (string-ascii 256),\n    deactivated-block: uint,\n    deactivated-rewards-per-block: uint,\n    rewards-percentage: uint\n  }\n)\n\n;; Get pool info\n(define-read-only (get-pool-data (pool principal))\n  (unwrap-panic (map-get? pools-data-map { pool: pool }))\n)\n\n;; Set pool info\n(define-public (set-pool-data\n  (pool principal)\n  (name (string-ascii 256))\n  (deactivated-block uint)\n  (deactivated-rewards-per-block uint)\n  (rewards-percentage uint)\n)\n  (begin\n    (asserts! (is-eq tx-sender (contract-call? .arkadiko-dao get-dao-owner)) (err ERR-NOT-AUTHORIZED))\n\n    (map-set pools-data-map\n      { pool: pool }\n      {\n        name: name,\n        deactivated-block: deactivated-block,\n        deactivated-rewards-per-block: deactivated-rewards-per-block,\n        rewards-percentage: rewards-percentage\n      }\n    )\n    (ok true)\n  )\n)\n\n;; Get pool rewards per block\n(define-read-only (get-rewards-per-block-for-pool (pool principal))\n  (let (\n    (total-staking-rewards (contract-call? .arkadiko-diko-guardian-v3-1 get-staking-rewards-per-stacks-block))\n    (pool-percentage (get rewards-percentage (get-pool-data pool)))\n    (deactivated-block (get deactivated-block (get-pool-data pool)))\n    (deactivated-rewards-per-block (get deactivated-rewards-per-block (get-pool-data pool)))\n  )\n    (if (is-eq deactivated-block u0)\n      (ok (/ (* total-staking-rewards pool-percentage) u1000000))\n      (ok deactivated-rewards-per-block)\n    )\n  )\n)\n\n;; Get pool deactivated block\n(define-read-only (get-pool-deactivated-block (pool principal))\n  (let (\n    (pool-info (unwrap! (map-get? pools-data-map { pool: pool }) ERR-POOL-EXIST))\n    (block (get deactivated-block pool-info))\n  )\n    (ok block)\n  )\n)\n\n;; @desc stake tokens\n;; @param registry-trait; current stake registry, to be used by stake pool\n;; @param pool-trait; pool to stake tokens in\n;; @param token-trait; token to stake in pool\n;; @param amount; amount of tokens to stake\n;; @post uint; returns amount of staked tokens\n(define-public (stake (registry-trait <stake-registry-trait>) (pool-trait <stake-pool-trait>) (token-trait <ft-trait>) (amount uint))\n  (begin\n    (let (\n      (pool (contract-of pool-trait)) \n      (pool-info (unwrap! (map-get? pools-data-map { pool: pool }) ERR-POOL-EXIST))\n    )\n      (asserts! (is-eq (as-contract tx-sender) (contract-of registry-trait)) ERR-WRONG-REGISTRY)\n      (asserts! (is-eq (get deactivated-block pool-info) u0) ERR-POOL-INACTIVE)\n\n      (print {\n        type: \"pool\",\n        action: \"stake\",\n        data: { registry: registry-trait, pool: pool-trait, token: token-trait, amount: amount, owner: tx-sender }\n      })\n      (contract-call? pool-trait stake registry-trait token-trait tx-sender amount)\n    )\n  )\n)\n\n;; @desc unstake tokens\n;; @param registry-trait; current stake registry, to be used by pool\n;; @param pool-trait; pool to unstake tokens from\n;; @param token-trait; token to unstake from pool\n;; @param amount; amount of tokens to unstake\n;; @post uint; returns amount of unstaked tokens\n(define-public (unstake (registry-trait <stake-registry-trait>) (pool-trait <stake-pool-trait>) (token-trait <ft-trait>) (amount uint))\n  (begin\n    (let (\n      (pool (contract-of pool-trait)) \n      (pool-info (unwrap! (map-get? pools-data-map { pool: pool }) ERR-POOL-EXIST))\n    )\n      (asserts! (is-eq (as-contract tx-sender) (contract-of registry-trait)) ERR-WRONG-REGISTRY)\n\n      (print {\n        type: \"pool\",\n        action: \"unstake\",\n        data: { registry: registry-trait, pool: pool-trait, token: token-trait, amount: amount, owner: tx-sender }\n      })\n      (contract-call? pool-trait unstake registry-trait token-trait tx-sender amount)\n    )\n  )\n)\n\n;; @desc get amount of pending DIKO rewards for pool\n;; @param registry-trait; current stake registry, to be used by pool\n;; @param pool-trait; pool to get pending rewards from\n;; @post uint; returns amount of pending rewards\n(define-public (get-pending-rewards (registry-trait <stake-registry-trait>) (pool-trait <stake-pool-trait>))\n  (begin\n    (let (\n      (pool (contract-of pool-trait)) \n      (pool-info (unwrap! (map-get? pools-data-map { pool: pool }) ERR-POOL-EXIST))\n    )\n      (asserts! (is-eq (as-contract tx-sender) (contract-of registry-trait)) ERR-WRONG-REGISTRY)\n      (contract-call? pool-trait get-pending-rewards registry-trait tx-sender)\n    )\n  )\n)\n\n;; @desc claim pending DIKO rewards for pool\n;; @param registry-trait; current stake registry, to be used by pool\n;; @param pool-trait; pool to claim rewards on\n;; @post uint; returns amount of claimed rewards\n(define-public (claim-pending-rewards (registry-trait <stake-registry-trait>) (pool-trait <stake-pool-trait>))\n  (begin\n    (asserts! (is-eq (as-contract tx-sender) (contract-of registry-trait)) ERR-WRONG-REGISTRY)\n    (contract-call? pool-trait claim-pending-rewards registry-trait tx-sender)\n  )\n)\n\n;; @desc claim pending DIKO rewards for pool and immediately stake in DIKO pool\n;; @param registry-trait; current stake registry, to be used by pool\n;; @param pool-trait; pool to claim rewards on\n;; @param diko-pool-trait; DIKO pool to stake rewards\n;; @param diko-token-trait; DIKO token contract\n;; @post uint; returns amount of claimed/staked rewards\n(define-public (stake-pending-rewards \n    (registry-trait <stake-registry-trait>) \n    (pool-trait <stake-pool-trait>) \n    (diko-pool-trait <stake-pool-trait>)\n    (diko-token-trait <ft-trait>)\n  )\n  (let (\n    (claimed-rewards (unwrap-panic (contract-call? pool-trait claim-pending-rewards registry-trait tx-sender)))\n  )\n    (asserts! (is-eq (as-contract tx-sender) (contract-of registry-trait)) ERR-WRONG-REGISTRY)\n\n    (print {\n      type: \"pool\",\n      action: \"stake-pending-rewards\",\n      data: { registry: registry-trait, pool: pool-trait, owner: tx-sender }\n    })\n    (contract-call? diko-pool-trait stake registry-trait diko-token-trait tx-sender claimed-rewards)\n  )\n)\n\n;; ---------------------------------------------------------\n;; Contract initialisation\n;; ---------------------------------------------------------\n\n;; TODO - UPDATE FOR MAINNET - SET ALL REWARDS-PERCENTAGE TO 0\n(begin\n  ;; DIKO pool\n  (map-set pools-data-map\n    { pool: 'ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.arkadiko-stake-pool-diko-v1-4 }\n    {\n      name: \"DIKO\",\n      deactivated-block: u0,\n      deactivated-rewards-per-block: u0,\n      rewards-percentage: u100000 ;; 10% \n    }\n  )\n  ;; DIKO-USDA LP\n  (map-set pools-data-map\n    { pool: 'ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.arkadiko-stake-pool-diko-usda-v1-1 }\n    {\n      name: \"DIKO-USDA LP\",\n      deactivated-block: u0,\n      deactivated-rewards-per-block: u0,\n      rewards-percentage: u250000 ;; 25% \n    }\n  )\n  ;; wSTX-USDA LP\n  (map-set pools-data-map\n    { pool: 'ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.arkadiko-stake-pool-wstx-usda-v1-1 }\n    {\n      name: \"wSTX-USDA LP\",\n      deactivated-block: u0,\n      deactivated-rewards-per-block: u0,\n      rewards-percentage: u500000 ;; 50% \n    }\n  )\n  ;; wSTX-DIKO LP\n  (map-set pools-data-map\n    { pool: 'ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.arkadiko-stake-pool-wstx-diko-v1-1 }\n    {\n      name: \"wSTX-DIKO LP\",\n      deactivated-block: u0,\n      deactivated-rewards-per-block: u0,\n      rewards-percentage: u150000 ;; 15% \n    }\n  )\n)\n",
    "analysis": {
      "summary": "This contract manages staking pools, allowing users to stake/unstake tokens, and claim rewards. It also enables the DAO to activate or deactivate pools.",
      "explanation": "The contract is designed for managing multiple staking pools, tracking each pool's data, and handling user interactions such as staking and unstaking. It uses traits to interact with other contracts for fungible tokens and pool-specific operations.\n\n- The contract uses `use-trait` directives (<L1-3>) to integrate external contracts, ensuring they adhere to predefined interfaces.\n- It defines several errors (<L8-12>) for handling common issues like invalid pools or unauthorized access.\n- A variable for counting pools and a map for storing pool data are declared (<L14-22>), which include details like the pool's name and rewards information.\n- Functions for setting and retrieving pool data are provided (<L24-39>), with access control ensuring only the DAO can update pool data.\n- The contract calculates rewards per block for each pool (<L41-54>), considering whether a pool is active or deactivated.\n- Staking and unstaking operations (<L56-90>) are implemented to interact with specific pools, ensuring the caller is authorized and the pool is active for staking.\n- Functions to claim pending rewards (<L92-116>) and to stake claimed rewards directly into another pool (<L118-138>) are included, enhancing user experience by simplifying reward management.\n- The contract initializes with predefined pools (<L142-170>), setting up basic pools with specific reward percentages. This section is marked for update before mainnet deployment, indicating a need for final configuration.\n\nOverall, the contract serves as a central registry and manager for staking pools, facilitating interactions between users, pools, and the DAO. It emphasizes security and modularity through the use of traits and careful access control.",
      "tags": [
        "staking",
        "DeFi",
        "DAO",
        "rewards-management"
      ]
    }
  },
  {
    "rank": 56,
    "contract": "SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.dual-farming",
    "calls": 589,
    "source": "(use-trait ft-trait .trait-sip-010.sip-010-trait)\n(use-trait sft-trait .trait-semi-fungible.semi-fungible-trait)\n(define-constant ERR-NOT-AUTHORIZED (err u1000))\n(define-constant ERR-NOT-FOUND (err u1003))\n(define-constant ERR-USER-ID-NOT-FOUND (err u1004))\n(define-constant ONE_8 u100000000)\n(define-constant MAX_UINT u340282366920938463463374607431768211455)\n(define-map approved-pair { token: principal, id: uint } { dual-token: principal, multiplier-in-fixed: uint, start-cycle: uint, end-cycle: uint })\n(define-read-only (is-dao-or-extension)\n    (ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) ERR-NOT-AUTHORIZED)))\n\t\t\n(define-read-only (check-is-approved-pair (token principal) (token-id uint) (dual-token principal))\n  (ok (asserts! (is-eq dual-token (get dual-token (try! (get-pair-details-or-fail token token-id)))) ERR-NOT-AUTHORIZED)))\n(define-read-only (get-pair-details (token principal) (token-id uint))\n  (map-get? approved-pair { token: token, id: token-id }))\n(define-read-only (get-pair-details-or-fail (token principal) (token-id uint))\n  (ok (unwrap! (get-pair-details token token-id) ERR-NOT-FOUND)))\n(define-read-only (get-dual-token-or-fail (token principal) (token-id uint))\n  (ok (get dual-token (try! (get-pair-details-or-fail token token-id)))))\n(define-read-only (get-multiplier-by-cycle-or-default (token principal) (token-id uint) (target-cycle uint))\n  (match (get-pair-details token token-id)\n    pair-details \n\t\t(if (and (>= target-cycle (get start-cycle pair-details)) (<= target-cycle (get end-cycle pair-details))) \n\t\t\t(get multiplier-in-fixed pair-details) \n\t\t\tu0)\n    u0))\n(define-read-only (get-multiplier-in-fixed-or-default (token principal) (token-id uint))\n  (match (get-pair-details token token-id)\n    pair-details (get multiplier-in-fixed pair-details)\n    u0))\n(define-read-only (get-start-cycle-or-default (token principal) (token-id uint))\n  (match (get-pair-details token token-id)\n    pair-details (get start-cycle pair-details)\n    MAX_UINT))\n(define-read-only (get-end-cycle-or-default (token principal) (token-id uint))\n  (match (get-pair-details token token-id)\n    pair-details (get end-cycle pair-details)\n    MAX_UINT))\n(define-public (set-dual-token-or-fail (token principal) (token-id uint) (new-dual-token principal))\n  (let (\n      (pair-details (try! (get-pair-details-or-fail token token-id))))\n    (try! (is-dao-or-extension))\n    (ok (map-set approved-pair { token: token, id: token-id } (merge pair-details { dual-token: new-dual-token })))))\n(define-public (set-multiplier-in-fixed (token principal) (token-id uint) (new-multiplier-in-fixed uint))\n  (let (\n      (pair-details (try! (get-pair-details-or-fail token token-id))))\n    (try! (is-dao-or-extension))\n    (ok (map-set approved-pair { token: token, id: token-id } (merge pair-details { multiplier-in-fixed: new-multiplier-in-fixed })))))\n(define-public (set-start-cycle (token principal) (token-id uint) (new-start-cycle uint))\n  (let (\n      (pair-details (try! (get-pair-details-or-fail token token-id))))\n    (try! (is-dao-or-extension))\n    (ok (map-set approved-pair { token: token, id: token-id } (merge pair-details { start-cycle: new-start-cycle })))))\n(define-public (set-end-cycle (token principal) (token-id uint) (new-end-cycle uint))\n  (let (\n      (pair-details (try! (get-pair-details-or-fail token token-id))))\n    (try! (is-dao-or-extension))\n    (ok (map-set approved-pair { token: token, id: token-id } (merge pair-details { end-cycle: new-end-cycle })))))\n(define-public (add-token (token principal) (token-id uint) (dual-token principal) (multiplier-in-fixed uint) (start-cycle uint) (end-cycle uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (map-set approved-pair { token: token, id: token-id } { dual-token: dual-token, multiplier-in-fixed: multiplier-in-fixed, start-cycle: start-cycle, end-cycle: end-cycle }))))\n(define-public (claim-staking-reward (token-trait <sft-trait>) (token-id uint) (dual-token-trait <ft-trait>) (target-cycle uint))\n  (let (\n      (token (contract-of token-trait))\n      (dual-token (contract-of dual-token-trait))\n      (sender tx-sender)\n      (claimed (try! (contract-call? .alex-farming claim-staking-reward token-trait token-id target-cycle)))\n      (entitled-dual (mul-down (get entitled-token claimed) (get-multiplier-by-cycle-or-default token token-id target-cycle))))\n    (try! (check-is-approved-pair token token-id dual-token))\n    (and (> entitled-dual u0) (as-contract (try! (contract-call? dual-token-trait transfer-fixed entitled-dual tx-sender sender none))))\n    (ok { to-return: (get to-return claimed), entitled-token: (get entitled-token claimed), entitled-dual: entitled-dual })))\n(define-public (claim-staking-reward-many (token <sft-trait>) (token-id uint) (dual-token <ft-trait>) (reward-cycles (list 200 uint)))\n  (ok (map \n      claim-staking-reward\n      (list \n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n        token token token token token token token token token token token token token token token token token token token token\n      ) \n      (list \n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n        token-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\ttoken-id\n      )       \n      (list \n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token\n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token\n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token\n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token\n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token\n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token\n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token\n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token\n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token\n        dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token dual-token        \n      )       \n      reward-cycles)))\n(define-private (sum-claimed (claimed-response (response (tuple (entitled-dual uint) (entitled-token uint) (to-return uint)) uint)) (sum-so-far uint))\n  (match claimed-response\n    claimed (+ sum-so-far (get to-return claimed) (get entitled-token claimed))\n    err sum-so-far))\n(define-private (mul-down (a uint) (b uint))\n    (/ (* a b) ONE_8))",
    "analysis": {
      "summary": "This contract manages dual-token staking rewards, allowing users to claim rewards based on specific multipliers and cycles.",
      "explanation": "This Clarity smart contract is designed for a staking rewards system that involves dual tokens. It uses traits to ensure compatibility with SIP-010 fungible tokens and a custom semi-fungible token trait. The contract allows setting and getting details of approved token pairs, including their multipliers and active cycles for rewards. It includes functionality for DAOs or extensions to update these details. Users can claim staking rewards for a single cycle or multiple cycles, with the contract calculating the entitled rewards based on predefined multipliers.\n\n- The contract uses `use-trait` directives to ensure compatibility with standard and semi-fungible tokens <L1-2>.\n- Constants define error codes and a fixed-point multiplier for precision in calculations <L3-6>.\n- An `approved-pair` map stores details about token pairs and their reward parameters <L7>.\n- `is-dao-or-extension` checks if the caller is authorized as a DAO or an extension <L8-9>.\n- Several `define-read-only` functions provide utilities for checking approved pairs and retrieving their details <L10-31>.\n- `define-public` functions allow authorized accounts to set details for token pairs or add new ones, ensuring only approved entities can modify state <L32-61>.\n- The `claim-staking-reward` function calculates and transfers the entitled rewards to the claimant, supporting both single and multiple claims <L62-91>.\n- Private helper functions like `mul-down` perform fixed-point arithmetic, necessary for precise reward calculations <L92>.\n\nOverall, the contract is structured to support a flexible and secure staking reward system that can be managed by authorized entities and accessed by users for claiming their rewards.",
      "tags": [
        "DeFi",
        "staking",
        "rewards",
        "fungible-token",
        "semi-fungible-token",
        "DAO"
      ]
    }
  },
  {
    "rank": 57,
    "contract": "SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.marketplace-v4",
    "calls": 587,
    "source": "(use-trait tradables-trait .tradable-trait.tradables-trait)\n\n(define-data-var minimum-commission uint u100) ;; minimum commission 1% by default\n(define-data-var minimum-listing-price uint u1000000) ;; minimum listing price 1 STX\n\n(define-data-var listings-frozen bool false) ;; turn off the ability to list additional NFTs\n(define-data-var purchases-frozen bool false) ;; turn off the ability to purchase NFTs\n(define-data-var unlistings-frozen bool false) ;; turn off the ability to unlist NFTs\n\n(define-map on-sale\n  {tradables: principal, tradable-id: uint}\n  {price: uint, commission: uint, owner: principal, royalty-address: principal, royalty-percent: uint}\n)\n\n(define-map verified-contracts\n  {tradables: principal}\n  {royalty-address: principal, royalty-percent: uint}\n)\n\n(define-constant contract-owner tx-sender)\n(define-constant err-payment-failed u1)\n(define-constant err-transfer-failed u2)\n(define-constant err-not-allowed u3)\n(define-constant err-duplicate-entry u4)\n(define-constant err-tradable-not-found u5)\n(define-constant err-commission-or-price-too-low u6)\n(define-constant err-listings-frozen u7)\n(define-constant err-commission-payment-failed u8)\n(define-constant err-royalty-payment-failed u9)\n(define-constant err-contract-not-authorized u10)\n\n(define-read-only (get-listing (tradables <tradables-trait>) (tradable-id uint))\n  (match (map-get? on-sale {tradables: (contract-of tradables), tradable-id: tradable-id})\n    nft-data \n    (ok nft-data)\n    (err err-tradable-not-found)\n  )\n)\n\n(define-read-only (get-royalty-amount (contract principal))\n  (match (map-get? verified-contracts {tradables: contract})\n    royalty-data\n    (get royalty-percent royalty-data)\n    u0)\n)\n\n(define-private (get-royalty (contract principal))\n  (match (map-get? verified-contracts {tradables: contract})\n    royalty-data\n    royalty-data\n    {royalty-address: contract-owner, royalty-percent: u0})\n)\n \n(define-private (get-owner (tradables <tradables-trait>) (tradable-id uint))\n  (contract-call? tradables get-owner tradable-id)\n)\n\n(define-private (transfer-tradable-to-escrow (tradables <tradables-trait>) (tradable-id uint))\n  (begin\n    (contract-call? tradables transfer tradable-id tx-sender (as-contract tx-sender))\n  )\n)\n\n(define-private (transfer-tradable-from-escrow (tradables <tradables-trait>) (tradable-id uint))\n  (let ((owner tx-sender))\n    (begin\n      (as-contract (contract-call? tradables transfer tradable-id (as-contract tx-sender) owner))\n    )\n  )\n)\n\n(define-private (return-tradable-from-escrow (tradables <tradables-trait>) (tradable-id uint))\n  (match (map-get? on-sale {tradables: (contract-of tradables), tradable-id: tradable-id})\n    nft-data\n    (let ((owner tx-sender))\n      (begin\n        (as-contract (contract-call? tradables transfer tradable-id (as-contract tx-sender) (get owner nft-data)))\n      )\n    )\n    (err err-tradable-not-found)\n  )\n)\n\n(define-public (list-asset (tradables <tradables-trait>) (tradable-id uint) (price uint) (commission uint))\n  (begin\n    (asserts! (is-eq false (var-get listings-frozen)) (err err-listings-frozen))\n    (match (map-get? verified-contracts { tradables: (contract-of tradables) })\n      contract-name\n      (let ((tradable-owner (unwrap! (unwrap-panic (get-owner tradables tradable-id)) (err err-tradable-not-found)))\n           (royalty (get-royalty (contract-of tradables))))\n       (if (and (>= commission (var-get minimum-commission)) (>= price (var-get minimum-listing-price)))\n        (if (is-eq tradable-owner tx-sender)\n         (if (map-insert on-sale {tradables: (contract-of tradables), tradable-id: tradable-id}\n              {price: price, commission: commission, owner: tradable-owner, royalty-address: (get royalty-address royalty), royalty-percent: (get royalty-percent royalty)})\n          (begin\n           (match (transfer-tradable-to-escrow tradables tradable-id)\n            success (begin\n                (ok true))\n            error (begin (print error) (err err-transfer-failed))))\n          (err err-duplicate-entry)\n         )\n         (err err-not-allowed)\n        )\n        (err err-commission-or-price-too-low)\n       )\n      )\n      (err err-contract-not-authorized)\n    )\n  )\n)\n\n(define-public (unlist-asset (tradables <tradables-trait>) (tradable-id uint))\n  (begin\n    (asserts! (is-eq false (var-get unlistings-frozen)) (err err-listings-frozen))\n    (match (map-get? on-sale {tradables: (contract-of tradables), tradable-id: tradable-id})\n      nft-data \n      (if (is-eq (get owner nft-data) tx-sender)\n          (match (transfer-tradable-from-escrow tradables tradable-id)\n             success (begin\n                       (map-delete on-sale {tradables: (contract-of tradables), tradable-id: tradable-id})\n                       (ok true))\n             error (begin (print error) (err err-transfer-failed)))\n          (err err-not-allowed)\n      )\n      (err err-tradable-not-found)\n    )\n  )\n)\n\n;; tx sender has to send the required amount\n;; tx sender receives NFT\n;; owner gets paid out the amount minus commission\n;; stxnft address gets paid out commission\n(define-public (purchase-asset (tradables <tradables-trait>) (tradable-id uint))\n  (begin\n    (asserts! (is-eq false (var-get purchases-frozen)) (err err-listings-frozen))\n    (match (map-get? on-sale {tradables: (contract-of tradables), tradable-id: tradable-id})\n      nft-data \n      (let ((price (get price nft-data)) \n            (commission-amount (/ (* price (get commission nft-data)) u10000)) \n            (royalty-amount (/ (* price (get royalty-percent nft-data)) u10000)) \n            (to-owner-amount (- (- price commission-amount) royalty-amount))) \n        ;; first send the amount to the owner\n        (match (stx-transfer? to-owner-amount tx-sender (get owner nft-data))\n          owner-success ;; sending money to owner succeeded\n          (match (stx-transfer? commission-amount tx-sender contract-owner)\n            commission-success ;; sending commission to contract owner succeeded\n              (if (> royalty-amount u0)\n                (match (stx-transfer? royalty-amount tx-sender (get royalty-address nft-data))\n                  royalty-success ;; sending royalty to artist succeeded\n                  (match (transfer-tradable-from-escrow tradables tradable-id)\n                    transfer-success (begin \n                      (map-delete on-sale {tradables: (contract-of tradables), tradable-id: tradable-id})\n                      (ok true) ;; sending NFT to buyer succeeded\n                    )\n                    error (err err-transfer-failed)\n                  )\n                  error (err err-royalty-payment-failed)\n                )\n                (match (transfer-tradable-from-escrow tradables tradable-id)\n                  transfer-success (begin \n                    (map-delete on-sale {tradables: (contract-of tradables), tradable-id: tradable-id})\n                    (ok true) ;; sending NFT to buyer succeeded\n                  )\n                  error (err err-transfer-failed)\n                )\n             )\n            error (err err-commission-payment-failed)\n          )\n          error (err err-payment-failed)\n        )\n      )\n      (err err-tradable-not-found)\n    )\n  )\n)\n\n(define-public (admin-unlist-asset (tradables <tradables-trait>) (tradable-id uint))\n  (match (map-get? on-sale {tradables: (contract-of tradables), tradable-id: tradable-id})\n    nft-data \n    (if (is-eq contract-owner tx-sender)\n        (match (return-tradable-from-escrow tradables tradable-id)\n           success (begin\n                     (map-delete on-sale {tradables: (contract-of tradables), tradable-id: tradable-id})\n                     (ok true))\n           error (begin (print error) (err err-transfer-failed)))\n        (err err-not-allowed)\n    )\n    (err err-tradable-not-found)\n  )\n)\n\n(define-public (set-minimum-commission (commission uint))\n  (begin\n    (asserts! (is-eq tx-sender contract-owner) (err err-not-allowed))\n    (ok (var-set minimum-commission commission))\n  )\n)\n\n(define-public (add-contract (contract principal))\n  (begin\n    (asserts! (is-eq tx-sender contract-owner) (err err-not-allowed))\n    (ok (map-set verified-contracts {tradables: contract} {royalty-address: contract-owner, royalty-percent: u0}))\n  )\n)\n\n(define-public (remove-contract (contract principal))\n  (begin\n    (asserts! (is-eq tx-sender contract-owner) (err err-not-allowed))\n    (ok (map-delete verified-contracts {tradables: contract}))\n  )\n)\n\n(define-public (set-royalty (contract principal) (address principal) (percent uint))\n  (begin\n    (asserts! (is-eq tx-sender contract-owner) (err err-not-allowed))\n    (ok (map-set verified-contracts {tradables: contract} {royalty-address: address, royalty-percent: percent}))\n  )\n)\n\n(define-public (set-minimum-listing-price (price uint))\n  (begin\n    (asserts! (is-eq tx-sender contract-owner) (err err-not-allowed))\n    (ok (var-set minimum-listing-price price))\n  )\n)\n\n(define-public (set-listings-frozen (frozen bool))\n  (begin\n    (asserts! (is-eq tx-sender contract-owner) (err err-not-allowed))\n    (ok (var-set listings-frozen frozen))\n  )\n)\n\n(define-public (set-unlistings-frozen (frozen bool))\n  (begin\n    (asserts! (is-eq tx-sender contract-owner) (err err-not-allowed))\n    (ok (var-set unlistings-frozen frozen))\n  )\n)\n\n(define-public (set-purchases-frozen (frozen bool))\n  (begin\n    (asserts! (is-eq tx-sender contract-owner) (err err-not-allowed))\n    (ok (var-set purchases-frozen frozen))\n  )\n)\n\n;; all projects on marketplace v3\n(try! (add-contract 'SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.free-punks-v0))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.funky-donuts))\n(try! (add-contract 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.future-of-money))\n(try! (add-contract 'SP1QK1AZ24R132C0D84EEQ8Y2JDHARDR58R72E1ZW.boomboxes-cycle-18))\n(try! (add-contract 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.cyber-angels))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.stacks-punks-v3))\n(try! (add-contract 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.megapont-ape-club-nft))\n(try! (add-contract 'SP2BE8TZATXEVPGZ8HAFZYE5GKZ02X0YDKAN7ZTGW.arties))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.bitcoin-pizza))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-satoshi-knights))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-homagic))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.blocks))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.stacks-mandala))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.testing-liquidity))\n(try! (add-contract 'SPQZF23W7SEYBFG5JQ496NMY0G7379SRYEDREMSV.Candy))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-bitcoin-kittens))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.belles-witches))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.citadels))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.stacks-pops))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.stacculents))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.pox-monks))\n(try! (add-contract 'SP1SCEXE6PMGPAC6B4N5P2MDKX8V4GF9QDE1FNNGJ.miami-degens))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-genesis))\n(try! (add-contract 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.miami-vice))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-stacks-dragons))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.satoshis-team))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-stacks-foxes-community))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-matryoshka-dolls))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-bitcoin-tulips))\n(try! (add-contract 'SPASZ0VJQTS22YR4HCCAGR05GGRF9V8TCM219YQ8.tiles))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.anime-girls))\n(try! (add-contract 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.bulls))\n(try! (add-contract 'SP3QSAJQ4EA8WXEDSRRKMZZ29NH91VZ6C5X88FGZQ.thisisnumberone-v2))\n(try! (add-contract 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.zebras))\n(try! (add-contract 'SP2Z2BST4Z2RFSDTF7GJ4D07VXCFRBRTR1JPCCE7J.picasso-magic-1))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-animal-stacks))\n(try! (add-contract 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.fruits))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.spacewhales))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.deruptars))\n(try! (add-contract 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.stacks-army))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-blurred-museum))\n(try! (add-contract 'SP2Z2BST4Z2RFSDTF7GJ4D07VXCFRBRTR1JPCCE7J.anime-boys))\n(try! (add-contract 'SP497E7RX3233ATBS2AB9G4WTHB63X5PBSP5VGAQ.boomboxes-cycle-12))\n(try! (add-contract 'SP497E7RX3233ATBS2AB9G4WTHB63X5PBSP5VGAQ.boomboxes-cycle-14))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-sadoughshis-bitcoin-pizza))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-snowball-rabbits))\n(try! (add-contract 'SP2Z2BST4Z2RFSDTF7GJ4D07VXCFRBRTR1JPCCE7J.dreamcatchers))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.bitcoin-birds))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.phases-of-satoshi))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-vampire-slayers))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.roads))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-fruitmen))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.hexstx))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.mandelbrots-v1))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.crypto-graffiti))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-cyborg))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.cybernetic-souls))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.byte-fighters))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.mother-of-satoshi))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.metaraffes))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-vague-art-paintings))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.mother-satoshi-2))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-english-hat-club))\n(try! (add-contract 'SP3QSAJQ4EA8WXEDSRRKMZZ29NH91VZ6C5X88FGZQ.ruma-v1))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.mandelbrots))\n(try! (add-contract 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-shroomies))\n(try! (add-contract 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.rangoli))\n(try! (add-contract 'SP2Z2BST4Z2RFSDTF7GJ4D07VXCFRBRTR1JPCCE7J.picasso-magic-2))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.zombie-wabbits))\n(try! (add-contract 'SP2507VNQZC9VBXM7X7KB4SF4QJDJRSWHG4V39WPY.stacks-roots))\n(try! (add-contract 'SP1QK1AZ24R132C0D84EEQ8Y2JDHARDR58R72E1ZW.boomboxes-cycle-16))\n(try! (add-contract 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.blue-ridge-biker))\n(try! (add-contract 'SP497E7RX3233ATBS2AB9G4WTHB63X5PBSP5VGAQ.boom-nfts))\n\n;; stxnft-launched projects\n(try! (set-royalty 'SPQZF23W7SEYBFG5JQ496NMY0G7379SRYEDREMSV.Candy 'SPQZF23W7SEYBFG5JQ496NMY0G7379SRYEDREMSV u500))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.metaraffes 'SPP930EBFW6DVDRZ2Y84660J2R28T0HBB8S1ST5C u250))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.fruits 'SPG34S51QV6YTZQGVRPZY9323MY4BTCFAFP1HR25 u250))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.rangoli 'SP1W1KE3GGR07YB576P8KMA83TTKWPV8K9DJX01H1 u250))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.anime-girls 'SP2CC8YR1SV8VT1H3RBZJFBD2V8HA36S9C7JZKP2B u250))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.cybernetic-souls 'SPVVB6WRVE757VKEB2T0X5ZY4DMFJAX248XXQHHW u250))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.stacculents 'SP2FGW8E8455NA55FGC42MNA6XDPWJYQFGSXYWV2F u500))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.stacks-army 'SP3QYTYDMFBMBE398NB0770HJM65TAHRE86PD1KSS u250))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.cyber-angels 'SP21XYG67H6T2W91J0EXG4THR7S1G49S4RN9QDJXM u250))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.bitcoin-pizza 'SP3DADFZ5M352BV2XZY1RSPV307QH0JPKKEQMFAP3 u200))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.mother-satoshi-2 'SP225F26PGZ86QX8GN11Z5S8YS6A6V66EY0W64V51 u1000))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.straw-collection 'SP18BFREGEWVGNRG40MFA9Z9N3H2QQH0Q7TMC085Q u250))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.saints 'SP2F2KH0RVX6GF1Y9FWMMSR9RHG0TW3NN72D724NX u250))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.future-of-money 'SP3TYAQVV9378DDA1HF118CH6521NRCY7YBCWAX6G u500))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.zebras 'SP8Q0MG7K00RBZ6NPGA8J1EVMT093QDJNE8W9QNP u250))\n(try! (set-royalty 'SP2Z2BST4Z2RFSDTF7GJ4D07VXCFRBRTR1JPCCE7J.dreamcatchers 'SP1W1KE3GGR07YB576P8KMA83TTKWPV8K9DJX01H1 u250))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.bulls 'SPEGDNNSRF6NPBF2YS6X6C8ZCC6FZQARN494NQP3 u1000))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.roads 'SP3S5Z0VT3KT4YG10MPPY9PJY33YAFPRYVVBC0W9G u250))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.owls 'SP3QZ7WMFGJ9HASJKG64SREM1YYT7BYF3YD2SCTPS u250))\n(try! (set-royalty 'SP2Z2BST4Z2RFSDTF7GJ4D07VXCFRBRTR1JPCCE7J.anime-boys 'SP1M6T0C8EQTQM60RGS9WJFJGYFGFZJ2KC0W3ZWC4 u250))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.miami-vice 'SP225F26PGZ86QX8GN11Z5S8YS6A6V66EY0W64V51 u1000))\n(try! (set-royalty 'SP2Z2BST4Z2RFSDTF7GJ4D07VXCFRBRTR1JPCCE7J.picasso-magic-1 'SP1B6FGZWBJK2WJHJP76C2E4AW3HA4BVAR5DGK074 u1000))\n(try! (set-royalty 'SP2Z2BST4Z2RFSDTF7GJ4D07VXCFRBRTR1JPCCE7J.picasso-magic-2 'SP1B6FGZWBJK2WJHJP76C2E4AW3HA4BVAR5DGK074 u1000))\n(try! (set-royalty 'SP2Z2BST4Z2RFSDTF7GJ4D07VXCFRBRTR1JPCCE7J.spooky-staccs 'SP2FGW8E8455NA55FGC42MNA6XDPWJYQFGSXYWV2F u900))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.ueberkatzen 'SP21R1S8QBZKW9VGKHEECVN6AJKDC8PCS50X34BXN u250))\n(try! (set-royalty 'SP207ESW7AKHTPRYAAD9QP8Q1TE1F57D2S8RGPJCC.cyber-stx 'SPVVB6WRVE757VKEB2T0X5ZY4DMFJAX248XXQHHW u250))\n(try! (set-royalty 'SP2BE8TZATXEVPGZ8HAFZYE5GKZ02X0YDKAN7ZTGW.arties 'SPPB55WCQ53904NCG71XF8YNG8D86JAJJEF6B1BV u750))\n(try! (set-royalty 'SP2507VNQZC9VBXM7X7KB4SF4QJDJRSWHG4V39WPY.stacks-roots 'SP2507VNQZC9VBXM7X7KB4SF4QJDJRSWHG4V39WPY u250))\n(try! (set-royalty 'SPASZ0VJQTS22YR4HCCAGR05GGRF9V8TCM219YQ8.tiles 'SP8890TMA8MV7BS7REBX65JZ74HVPZ2ZWK0MR51D u100))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.mother-of-satoshi 'SP225F26PGZ86QX8GN11Z5S8YS6A6V66EY0W64V51 u1000))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.spacewhales 'SP19H1D5DV317DR2196ADZNN4P83H9KP5GA1PPEW5 u250))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.satoshis-team 'SP3BJSVA9E8MJAKK3ZNAGZKG91KY82G6299DY1YBW u400))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.hexstx 'SP2H4C1ACECDQ9R78AARQM3KGRMBRSGA4GJ455GWD u100))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.testing-liquidity 'SP3EYC57DC1K6NNNCPKSFJWHYG8F5MRX3X1Q1AJJ u100))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.mandelbrots-v1 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C u250))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.pox-monks 'SP11HD7QYN65VPZVRS1MM710ZHMKSFZDHVP1XZHW6 u250))\n(try! (set-royalty 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.crypto-graffiti 'SP1B6FGZWBJK2WJHJP76C2E4AW3HA4BVAR5DGK074 u1000))\n\n;; stacksart-launched\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.phases-of-satoshi 'SPBFZ5MRGDMEKWNQTJ57W2PA2GC0765ZFC5BY0KP u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.blue-ridge-biker 'SPTQQE9SEV82CZ3DWCV5AY8ZSX3HK3GK7FTAZNV8 u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.stacks-pops 'SP1WGVYWSZJM1EKH1TYB2BH3W4ZPEJBMW1N2B9FG0 u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.bitcoin-birds 'SP2K9XEKEG7BE5BTYWZDAXJ8QAZBJ2TQZJJY3MV90 u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.belles-witches 'SP2S7AE08KCDQQ7S7JF4W6FH0GZ9920ENC3ET9ATP u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.byte-fighters 'SP228WEAEMYX21RW0TT5T38THPNDYPPGGVW2RP570 u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.blocks 'SP3ZMEFW7VH796ZQAH1JMAJT4WC4VPEZZFB6W5CAD u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.stx-youth 'SP2V5BGR60147M8NGV0NV71Q6FDNFMC4E5S78224X u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.stx-jokers 'SP2C1BVR38WHJK1RDACXDD6A4SSP10X01SVNC8EBX u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.virtual-tulips 'SP2EMYH0XQWJ1GZ036JCS9CA9S97KCN6W8A6RDSFB u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.funky-donuts 'SP3HCNR789SGMN18Y4SYBXBP38NB1BPRFVA9P010M u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.zombie-wabbits 'SP10W359VJZG7JWEXKVQH1ESFSGCTCST83VVWAC0S u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.stacks-mandala 'SP2C1BVR38WHJK1RDACXDD6A4SSP10X01SVNC8EBX u500))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.citadels 'SP3M7YP0F9V0F57VPCHJ0EF5CYNA3BT5R7K761KT1 u500))\n\n;; byzantion-launched\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-snowball-rabbits 'SP33QYJHG988R7XD10B5MPKG7NCWQJ77ETKMA2HK4 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-storm 'SP1GR33848GSTMFR955Z77DAB835XYE9FZG19Y7NX u250))\n(try! (set-royalty 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.megapont-ape-club-nft 'SP39E0V32MC31C5XMZEN1TQ3B0PW2RQSJB8TKQEV9 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-nakamoto-guardians 'SP35FG6SHERAY92DN14BBE42BFNFBVEHTN9DCG7EE u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-bitcutties 'SP3PJBFHVSKYP33ZAEKQW8GQXWJYZ53S7AT0KYD4W u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-bitcoin-pixel-world-v1 'SP27BDVSXB2GY8RS13JJFQ9ZJ0YA8AQV9SBQY86MZ u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-vampire-slayers 'SP1W1KE3GGR07YB576P8KMA83TTKWPV8K9DJX01H1 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-cyborg 'SP2TKGQ8V47CKXN3P2AZBT0K93FMD69KJTPW4B54K u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-vague-art-paintings 'SP225F26PGZ86QX8GN11Z5S8YS6A6V66EY0W64V51 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-homagic 'SP14YEEA2S46F5EE11G6Z7PJFDW5JAZFG86BACFXB u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-sadoughshis-bitcoin-pizza 'SP16H55N12MTAQMVWVN8WSBVQTSKMV7WRNVANA1CN u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-fruitmen 'SPA6FR2P1TJ9C5KDSXDXY30HHRXSFKNKCDWWCDN6 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-shroomies 'SP1AGWGJQZSZBJ5YA8KKPSXZ8M8RMGQB859WP3ACK u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-satoshi-knights 'SPMFK2FBQC79WS2087HT8SD2TTD54YEHFGWCYK5J u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-bitcoin-kittens 'SP23TJ0675AWVKPZQKMEQ37S0WQEKQZTCFTY6Q1BS u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-the-himalayan-trinity 'SP1HYPJ0P6VQ02AAFZFSME4KCYGWM590A82Z4YK1P u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-blurred-museum 'SP2BXYAER68S4ZJWA6VTY2E9CNXD6B0GJGMPPZ5Z1 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-bitcoin-tulips 'SP21JJ0KVPTGAA1PD8RG1QR0ZSCFX39Q86T5NNFCY u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-stacks-foxes-community 'SP1W1KE3GGR07YB576P8KMA83TTKWPV8K9DJX01H1 u250))\n(try! (set-royalty 'SPJW1XE278YMCEYMXB8ZFGJMH8ZVAAEDP2S2PJYG.bitcoin-birds 'SP2K9XEKEG7BE5BTYWZDAXJ8QAZBJ2TQZJJY3MV90 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-animal-stacks 'SP3H8JBZH62417NRMMFTKVN7HTE6R93R906VNDJA6 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-stacks-dragons 'SPCRS5E657H7FBXNHNM24GKJDDEN69MB303DFAX1 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-english-hat-club 'SP16H55N12MTAQMVWVN8WSBVQTSKMV7WRNVANA1CN u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-matryoshka-dolls 'SP1W1KE3GGR07YB576P8KMA83TTKWPV8K9DJX01H1 u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.byzantion-genesis 'SP1J26MGNB0TEH4J6G2TVR5TKABDEWHW88SRE5QVQ u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.deruptars 'SP2BZ2YP68CABE7D32HE6308P6C7GMYN2ECJM8A7P u250))\n(try! (set-royalty 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C.mandelbrots-v1 'SP2KAF9RF86PVX3NEE27DFV1CQX0T4WGR41X3S45C u250))\n\n",
    "analysis": {
      "summary": "This contract facilitates a marketplace for trading NFTs on the Stacks blockchain, including listing, purchasing, and unlisting assets with support for royalties.",
      "explanation": "This Clarity smart contract is designed to create a marketplace for NFTs on the Stacks blockchain. It allows users to list NFTs for sale, purchase them, and unlist them. The contract includes features like setting minimum commission and listing price, freezing listings, purchases, and unlistings, and handling royalties. Key functionalities include:\n\n- **Listing NFTs for Sale**: Users can list their NFTs for sale with specified prices and commissions. The contract checks if the listing meets the minimum requirements and if the NFT is authorized by checking against a map of verified contracts.\n\n- **Purchasing NFTs**: Buyers can purchase listed NFTs. The contract calculates the commission and royalty amounts, transfers the sale amount to the seller, the commission to the contract owner, and the royalty to the specified address. It then transfers the NFT from escrow to the buyer.\n\n- **Unlisting NFTs**: Sellers can unlist their NFTs if they decide not to sell. The contract ensures that only the NFT owner or the contract admin can unlist an NFT.\n\n- **Admin Functions**: The contract owner can add or remove contracts from the verified list, adjust the minimum commission and listing price, and freeze or unfreeze listings, purchases, and unlistings.\n\n- **Royalty Management**: The contract supports setting and paying out royalties for NFT sales, allowing creators to earn from secondary sales.\n\nThe contract utilizes several Clarity features, including traits, maps, data variables, and contract calls. It demonstrates how to interact with external contracts, manage state, and enforce business logic in a decentralized marketplace.",
      "tags": [
        "NFT",
        "marketplace",
        "royalties",
        "trading"
      ]
    }
  },
  {
    "rank": 58,
    "contract": "SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-vaults-operations-v1-2",
    "calls": 578,
    "source": ";; Vaults Operations \n;; User operations on vaults (create, update, close)\n;;\n\n(use-trait oracle-trait .arkadiko-oracle-trait-v1.oracle-trait)\n(use-trait ft-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait vaults-tokens-trait .arkadiko-vaults-tokens-trait-v1-1.vaults-tokens-trait)\n(use-trait vaults-data-trait .arkadiko-vaults-data-trait-v1-1.vaults-data-trait)\n(use-trait vaults-sorted-trait .arkadiko-vaults-sorted-trait-v1-1.vaults-sorted-trait)\n(use-trait vaults-pool-active-trait .arkadiko-vaults-pool-active-trait-v1-1.vaults-pool-active-trait)\n(use-trait vaults-helpers-trait .arkadiko-vaults-helpers-trait-v1-1.vaults-helpers-trait)\n\n;; ---------------------------------------------------------\n;; Constants\n;; ---------------------------------------------------------\n\n(define-constant ERR_NOT_AUTHORIZED u930401)\n(define-constant ERR_WRONG_TRAIT u930402)\n(define-constant ERR_SHUTDOWN u930501)\n(define-constant ERR_WRONG_STATUS u930001)\n(define-constant ERR_UNKNOWN_TOKEN u930002)\n(define-constant ERR_INVALID_RATIO u930003)\n(define-constant ERR_MAX_DEBT_REACHED u930004)\n(define-constant ERR_MIN_DEBT u930005)\n(define-constant ERR_MAX_MINT_FEE u930006)\n\n(define-constant STATUS_ACTIVE u101)\n(define-constant STATUS_CLOSED_BY_OWNER u102)\n\n;; ---------------------------------------------------------\n;; Variables\n;; ---------------------------------------------------------\n\n(define-data-var shutdown-activated bool false)\n(define-data-var mint-fee uint u0)\n\n;; ---------------------------------------------------------\n;; Getters\n;; ---------------------------------------------------------\n\n(define-read-only (get-shutdown-activated) \n  (var-get shutdown-activated)\n)\n\n(define-read-only (get-mint-fee) \n  (var-get mint-fee)\n)\n\n;; ---------------------------------------------------------\n;; User actions\n;; ---------------------------------------------------------\n\n;; Open a new vault\n;; Need hint to know where to insert vault in sorted list\n(define-public (open-vault \n  (vaults-tokens <vaults-tokens-trait>)\n  (vaults-data <vaults-data-trait>)\n  (vaults-sorted <vaults-sorted-trait>)\n  (vaults-pool-active <vaults-pool-active-trait>)\n  (vaults-helpers <vaults-helpers-trait>)\n  (oracle <oracle-trait>) \n  (token <ft-trait>) \n  (collateral uint) \n  (debt uint) \n  (prev-owner-hint (optional principal)) \n  (max-mint-fee uint)\n)\n  (let (\n    (owner tx-sender)\n    (nicr (/ (* collateral u100000000) debt))\n    (collateral-info (unwrap! (contract-call? vaults-tokens get-token (contract-of token)) (err ERR_UNKNOWN_TOKEN)))\n    (vault (unwrap-panic (contract-call? vaults-data get-vault owner (contract-of token))))\n    (total-debt (unwrap-panic (contract-call? vaults-data get-total-debt (contract-of token))))\n    (coll-to-debt (try! (contract-call? vaults-helpers get-collateral-to-debt vaults-tokens vaults-data oracle owner (contract-of token) collateral debt)))\n    (minting-fee (/ (* debt (get-mint-fee)) u10000))\n  )\n    (asserts! (is-eq (contract-of vaults-tokens) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-tokens\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-data) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-data\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-sorted) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-sorted\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-pool-active) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-pool-active\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-helpers) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-helpers\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of oracle) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"oracle\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (not (var-get shutdown-activated)) (err ERR_SHUTDOWN))\n    (asserts! (not (is-eq (get status vault) STATUS_ACTIVE)) (err ERR_WRONG_STATUS))\n    (asserts! (get valid coll-to-debt) (err ERR_INVALID_RATIO))\n    (asserts! (<= (+ total-debt debt) (get max-debt collateral-info)) (err ERR_MAX_DEBT_REACHED))\n    (asserts! (>= debt (get vault-min-debt collateral-info)) (err ERR_MIN_DEBT))\n    (asserts! (>= max-mint-fee (get-mint-fee)) (err ERR_MAX_MINT_FEE))\n\n    ;; Save vault data\n    (try! (as-contract (contract-call? vaults-data set-vault owner (contract-of token) STATUS_ACTIVE collateral debt)))\n    (try! (as-contract (contract-call? vaults-sorted insert owner (contract-of token) nicr prev-owner-hint)))\n\n    ;; Deposit collateral\n    (try! (contract-call? vaults-pool-active deposit token owner collateral))\n\n    ;; Mint USDA\n    (try! (as-contract (contract-call? .arkadiko-dao mint-token .usda-token (- debt minting-fee) owner)))\n\n    (ok true)\n  )\n)\n\n;; Update vault\n;; Can change collateral and/or debt\n;; Need hint to know where to insert vault in sorted list\n(define-public (update-vault \n  (vaults-tokens <vaults-tokens-trait>)\n  (vaults-data <vaults-data-trait>)\n  (vaults-sorted <vaults-sorted-trait>)\n  (vaults-pool-active <vaults-pool-active-trait>)\n  (vaults-helpers <vaults-helpers-trait>)\n  (oracle <oracle-trait>) \n  (token <ft-trait>) \n  (collateral uint) \n  (debt uint) \n  (prev-owner-hint (optional principal)) \n  (max-mint-fee uint)\n)\n  (let (\n    (owner tx-sender)\n    (stability-fee (try! (contract-call? vaults-helpers get-stability-fee vaults-tokens vaults-data owner (contract-of token))))\n    (new-debt (+ debt stability-fee))\n\n    (nicr (/ (* collateral u100000000) new-debt))\n    (collateral-info (unwrap! (contract-call? vaults-tokens get-token (contract-of token)) (err ERR_UNKNOWN_TOKEN)))\n    (vault (unwrap-panic (contract-call? vaults-data get-vault owner (contract-of token))))\n    (total-debt (unwrap-panic (contract-call? vaults-data get-total-debt (contract-of token))))\n    (coll-to-debt (try! (contract-call? vaults-helpers get-collateral-to-debt vaults-tokens vaults-data oracle owner (contract-of token) collateral new-debt)))\n  )\n    (asserts! (is-eq (contract-of vaults-tokens) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-tokens\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-data) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-data\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-sorted) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-sorted\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-pool-active) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-pool-active\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-helpers) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-helpers\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of oracle) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"oracle\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (not (var-get shutdown-activated)) (err ERR_SHUTDOWN))\n    (asserts! (is-eq (get status vault) STATUS_ACTIVE) (err ERR_WRONG_STATUS))\n    (asserts! (get valid coll-to-debt) (err ERR_INVALID_RATIO))\n    (if (> debt (get debt vault))\n      (asserts! (<= (+ (- total-debt (get debt vault)) debt) (get max-debt collateral-info)) (err ERR_MAX_DEBT_REACHED))\n      false\n    )\n    (asserts! (>= new-debt (get vault-min-debt collateral-info)) (err ERR_MIN_DEBT))\n    (asserts! (>= max-mint-fee (get-mint-fee)) (err ERR_MAX_MINT_FEE))\n\n    ;; Update vault data\n    (try! (as-contract (contract-call? vaults-data set-vault owner (contract-of token) STATUS_ACTIVE collateral new-debt)))\n    (try! (as-contract (contract-call? vaults-sorted reinsert owner (contract-of token) nicr prev-owner-hint)))\n\n    ;; Mint or burn USDA\n    (if (is-eq debt (get debt vault))\n      false\n      (if (> debt (get debt vault))\n        (let (\n          (minting-fee (/ (* (- debt (get debt vault)) (get-mint-fee)) u10000))\n        )\n          (try! (as-contract (contract-call? .arkadiko-dao mint-token .usda-token (- debt (get debt vault) minting-fee) owner)))\n        )\n        (try! (as-contract (contract-call? .arkadiko-dao burn-token .usda-token (- (get debt vault) debt) owner)))\n      )\n    )\n\n    ;; Deposit or withdraw collateral\n    (if (is-eq collateral (get collateral vault))\n      false\n      (if (> collateral (get collateral vault))\n        (try! (contract-call? vaults-pool-active deposit token owner (- collateral (get collateral vault))))\n        (try! (as-contract (contract-call? vaults-pool-active withdraw token owner (- (get collateral vault) collateral))))\n      )\n    )\n\n    ;; Get stability fees\n    (if (> stability-fee u0)\n      (try! (as-contract (contract-call? .arkadiko-dao mint-token .usda-token stability-fee .arkadiko-vaults-pool-fees-v1-1)))\n      false\n    )\n\n    (ok true)\n  )\n)\n\n;; Close vault\n(define-public (close-vault \n  (vaults-tokens <vaults-tokens-trait>) \n  (vaults-data <vaults-data-trait>) \n  (vaults-sorted <vaults-sorted-trait>)\n  (vaults-pool-active <vaults-pool-active-trait>)\n  (vaults-helpers <vaults-helpers-trait>)\n  (token <ft-trait>)\n)\n  (let (\n    (owner tx-sender)\n    (vault (unwrap-panic (contract-call? vaults-data get-vault owner (contract-of token))))\n    (stability-fee (try! (contract-call? vaults-helpers get-stability-fee vaults-tokens vaults-data owner (contract-of token))))\n  )\n    (asserts! (is-eq (contract-of vaults-tokens) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-tokens\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-data) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-data\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-sorted) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-sorted\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-pool-active) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-pool-active\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (is-eq (contract-of vaults-helpers) (unwrap-panic (contract-call? .arkadiko-dao get-qualified-name-by-name \"vaults-helpers\"))) (err ERR_WRONG_TRAIT))\n    (asserts! (not (var-get shutdown-activated)) (err ERR_SHUTDOWN))\n    (asserts! (is-eq (get status vault) STATUS_ACTIVE) (err ERR_WRONG_STATUS))\n\n    ;; Update vault data\n    (try! (as-contract (contract-call? vaults-data set-vault owner (contract-of token) STATUS_CLOSED_BY_OWNER u0 u0)))\n    (try! (as-contract (contract-call? vaults-sorted remove owner (contract-of token))))\n\n    ;; Burn all debt\n    (try! (as-contract (contract-call? .arkadiko-dao burn-token .usda-token (get debt vault) owner)))\n\n    ;; Get stability fees\n    (if (> stability-fee u0)\n      (try! (contract-call? .usda-token transfer stability-fee tx-sender .arkadiko-vaults-pool-fees-v1-1 none))\n      false\n    )\n\n    ;; Withdraw collateral\n    (try! (as-contract (contract-call? vaults-pool-active withdraw token owner (get collateral vault))))\n\n    (ok true)\n  )\n)\n\n;; ---------------------------------------------------------\n;; Admin\n;; ---------------------------------------------------------\n\n(define-public (set-shutdown-activated (activated bool))\n  (begin\n    (asserts! (is-eq contract-caller (contract-call? .arkadiko-dao get-dao-owner)) (err ERR_NOT_AUTHORIZED))\n\n    (var-set shutdown-activated activated)\n\n    (ok true)\n  )\n)\n\n(define-public (set-mint-fee (fee uint))\n  (begin\n    (asserts! (is-eq contract-caller (contract-call? .arkadiko-dao get-dao-owner)) (err ERR_NOT_AUTHORIZED))\n\n    (var-set mint-fee fee)\n\n    (ok true)\n  )\n)\n",
    "analysis": {
      "summary": "This contract manages user operations on vaults, including creating, updating, and closing vaults, as well as handling mint fees and shutdown activation.",
      "explanation": "The contract uses multiple traits from the Arkadiko protocol to interact with vaults, tokens, and oracle data. It defines constants for error codes and vault statuses, and variables for global states like shutdown activation and mint fee. The contract provides functions for users to open, update, and close their vaults, adjusting collateral and debt while ensuring compliance with the protocol's rules. It includes admin functions to toggle the shutdown state and set mint fees, restricted to the DAO owner.\n\n- Constants (<L10-18>): Define error codes and vault statuses for use throughout the contract.\n- Variables (<L22-23>): Global states for shutdown activation and mint fee.\n- Getters (<L27-34>): Functions to read the global states.\n- User Actions:\n  - open-vault (<L38-77>): Allows users to create a new vault with specified collateral and debt, ensuring all protocol conditions are met.\n  - update-vault (<L79-141>): Enables users to adjust their vault's collateral and/or debt, recalculating and ensuring compliance with protocol rules.\n  - close-vault (<L143-173>): Lets users close their vault, withdrawing collateral and paying off debt, including any stability fees.\n- Admin (<L177-194>): Functions for the DAO owner to toggle the shutdown state and adjust the mint fee, affecting how new vaults are created and managed.",
      "tags": [
        "DeFi",
        "vaults",
        "collateral-management",
        "protocol"
      ]
    }
  },
  {
    "rank": 59,
    "contract": "SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router",
    "calls": 576,
    "source": ";;; UniswapV2Router02.sol\n\n(use-trait ft-trait .dao-traits-v4.sip010-ft-trait)\n(use-trait ft-plus-trait .dao-traits-v4.ft-plus-trait)\n(use-trait share-fee-to-trait .dao-traits-v4.share-fee-to-trait)\n\n(define-constant err-router-preconditions  (err u200))\n(define-constant err-router-postconditions (err u201))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; add-liquidity\n(define-read-only\n  (add-liquidity-calc\n    (id           uint)\n    (amt0-desired uint)\n    (amt1-desired uint)\n    (amt0-min     uint)\n    (amt1-min     uint))\n  (let ((pool (contract-call? .univ2-core do-get-pool id))\n        (r0   (get reserve0 pool))\n        (r1   (get reserve1 pool)))\n    (if (and (is-eq r0 u0) (is-eq r1 u0))\n        (ok {amt0: amt0-desired, amt1: amt1-desired})\n        (let ((amt1-optimal (try! (contract-call? .univ2-library quote amt0-desired r0 r1)))\n              (amt0-optimal (try! (contract-call? .univ2-library quote amt1-desired r1 r0))) )\n            ;; Note we do not use optimal if > desired.\n            (if (<= amt1-optimal amt1-desired)\n                (begin\n                  (asserts! (>= amt1-optimal amt1-min) err-router-preconditions)\n                  (ok {amt0: amt0-desired, amt1: amt1-optimal}))\n                (begin\n                  (asserts!\n                    (and\n                      (<= amt0-optimal amt0-desired)\n                      (>= amt0-optimal amt0-min))\n                    err-router-preconditions)\n                  (ok {amt0: amt0-optimal, amt1: amt1-desired})) )) )))\n\n(define-public\n  (add-liquidity\n    (id uint)\n    (token0       <ft-trait>)\n    (token1       <ft-trait>)\n    (lp-token     <ft-plus-trait>)\n    (amt0-desired uint)\n    (amt1-desired uint)\n    (amt0-min     uint)\n    (amt1-min     uint))\n\n  (let ((amts (try! (add-liquidity-calc\n                id amt0-desired amt1-desired amt0-min amt1-min))))\n\n    (asserts!\n     (and (<= amt0-min amt0-desired)\n          (<= amt1-min amt1-desired)\n          (>= amt0-min u0)\n          (>= amt1-min u0)\n          (>= amt0-desired u0)\n          (>= amt1-desired u0))\n     err-router-preconditions)\n\n    (contract-call? .univ2-core mint\n      id\n      token0\n      token1\n      lp-token\n      (get amt0 amts)\n      (get amt1 amts)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; remove-liquidity\n(define-public\n  (remove-liquidity\n    (id        uint)\n    (token0    <ft-trait>)\n    (token1    <ft-trait>)\n    (lp-token  <ft-plus-trait>)\n    (liquidity uint)\n    (amt0-min  uint)\n    (amt1-min  uint))\n\n  (let ((event (try! (contract-call? .univ2-core burn\n                  id token0 token1 lp-token liquidity))))\n\n    (asserts!\n      (and (>= (get amt0 event) amt0-min)\n           (>= (get amt1 event) amt1-min))\n      err-router-postconditions)\n\n    (ok event) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; swap\n(define-public\n  (swap-exact-tokens-for-tokens\n    (id             uint)\n    (token0         <ft-trait>)\n    (token1         <ft-trait>)\n    (token-in       <ft-trait>)\n    (token-out      <ft-trait>)\n    (share-fee-to   <share-fee-to-trait>)\n    (amt-in      uint)\n    (amt-out-min uint))\n\n  (let ((pool      (contract-call? .univ2-core do-get-pool id))\n        (is-token0 (is-eq (contract-of token0) (contract-of token-in)))\n        (amt-out   (try! (contract-call? .univ2-library get-amount-out\n          amt-in\n          (if is-token0 (get reserve0 pool) (get reserve1 pool))\n          (if is-token0 (get reserve1 pool) (get reserve0 pool))\n          (get swap-fee pool) )))\n       (event      (try! (contract-call? .univ2-core swap\n          id\n          token-in\n          token-out\n          share-fee-to\n          amt-in\n          amt-out))) )\n\n    (asserts!\n     (and (is-eq (get token0 pool) (contract-of token0))\n          (is-eq (get token1 pool) (contract-of token1))\n          (> amt-in      u0)\n          (> amt-out-min u0) )\n     err-router-preconditions)\n\n    (asserts!\n      (and (>= (get amt-out event) amt-out-min))\n      err-router-postconditions)\n\n    (ok event) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public\n  (swap-tokens-for-exact-tokens\n    (id           uint)\n    (token0       <ft-trait>)\n    (token1       <ft-trait>)\n    (token-in     <ft-trait>)\n    (token-out    <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n    (amt-in-max   uint)\n    (amt-out      uint))\n\n  (let ((pool      (contract-call? .univ2-core do-get-pool id))\n        (is-token0 (is-eq (contract-of token0) (contract-of token-in)))\n        (amt-in    (try! (contract-call? .univ2-library get-amount-in\n          amt-out\n          (if is-token0 (get reserve0 pool) (get reserve1 pool))\n          (if is-token0 (get reserve1 pool) (get reserve0 pool))\n          (get swap-fee pool) )))\n        (event     (try! (contract-call? .univ2-core swap\n          id\n          token-in\n          token-out\n          share-fee-to\n          amt-in\n          amt-out))) )\n\n  (asserts!\n   (and (is-eq (get token0 pool) (contract-of token0))\n        (is-eq (get token1 pool) (contract-of token1))\n        (> amt-in-max u0)\n        (> amt-out    u0) )\n   err-router-preconditions)\n\n  (asserts!\n    (and (<= (get amt-in event) amt-in-max))\n    err-router-postconditions)\n\n  (ok event) ))\n\n;;; eof",
    "analysis": {
      "summary": "This contract is a simplified Clarity version of a Uniswap-like decentralized exchange router, facilitating token swaps, liquidity addition, and removal.",
      "explanation": "The contract defines operations for adding liquidity to a pool, removing liquidity, and swapping tokens, closely resembling the functionality of Uniswap's Router contract in the Ethereum ecosystem. It uses external contracts for core operations (e.g., `univ2-core` for pool interactions and `univ2-library` for price calculations) and adheres to SIP010 for fungible tokens and an extended trait for liquidity provider tokens ('ft-plus-trait') and fee sharing ('share-fee-to-trait') mechanisms.\n\n- **add-liquidity-calc** <L8-25>: A read-only function that calculates the optimal amount of tokens to add to a liquidity pool based on desired amounts and reserves in the pool. It uses the 'quote' function from a library contract to find the optimal amount of one token given the other token's amount and the pool's reserves.\n\n- **add-liquidity** <L27-44>: A public function that allows users to add liquidity to a pool. It first calculates the optimal amounts using `add-liquidity-calc`, then asserts preconditions for the amounts, and finally calls the core contract to mint liquidity provider tokens.\n\n- **remove-liquidity** <L46-61>: Enables liquidity providers to remove their liquidity from a pool. It calls the core contract to burn the liquidity provider tokens and returns the underlying assets, asserting that the amounts received are not less than the minimum specified.\n\n- **swap-exact-tokens-for-tokens** <L63-88> and **swap-tokens-for-exact-tokens** <L90-115>: These functions facilitate token swaps, either specifying the exact amount of input tokens or the exact amount of output tokens, respectively. They calculate the required input or output amount using the 'get-amount-out' or 'get-amount-in' functions from the library contract, perform the swap in the core contract, and assert preconditions and postconditions related to the swap amounts.\n\nThe contract uses Clarity's traits and contract-calls to interact with external contracts, asserts for validating conditions, and structured data for managing inputs and outputs. It's a foundational piece for building decentralized finance (DeFi) applications on the Stacks blockchain.",
      "tags": [
        "DeFi",
        "DEX",
        "liquidity-pool",
        "token-swap",
        "Clarity"
      ]
    }
  },
  {
    "rank": 60,
    "contract": "SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2",
    "calls": 570,
    "source": "(impl-trait .extension-trait.extension-trait)\n(impl-trait .proposal-trait.proposal-trait)\n(use-trait ft-trait .trait-sip-010.sip-010-trait)\n(define-constant ERR-NOT-AUTHORIZED (err u1000))\n(define-constant ERR-CANNOT-STAKE (err u10016))\n(define-map blocklist principal bool)\n(define-read-only (is-dao-or-extension)\n    (ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) ERR-NOT-AUTHORIZED)))\n(define-read-only (is-blocklisted-or-default (sender principal))\n\t(default-to false (map-get? blocklist sender)))\n(define-read-only (get-reward-cycle-length)\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-reward-cycle-length))\n(define-read-only (get-apower-multiplier-in-fixed-or-default)\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-apower-multiplier-in-fixed-or-default 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token))\n(define-read-only (get-staking-stats-at-cycle (reward-cycle uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-staking-stats-at-cycle 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token reward-cycle))\n(define-read-only (get-staking-stats-at-cycle-or-default (reward-cycle uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-staking-stats-at-cycle-or-default 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token reward-cycle))\n(define-read-only (get-user-id (user principal))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-user-id 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token user))\n(define-read-only (get-user (user-id uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-user 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token user-id))\n(define-read-only (get-registered-users-nonce)\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-registered-users-nonce 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token))\n(define-read-only (get-registered-users-nonce-or-default)\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-registered-users-nonce-or-default 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token))\n(define-read-only (get-staker-at-cycle (reward-cycle uint) (user-id uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-staker-at-cycle 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token reward-cycle user-id))\n(define-read-only (get-staker-at-cycle-or-default (reward-cycle uint) (user-id uint))\n\t(contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-staker-at-cycle-or-default 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token reward-cycle user-id))\n(define-read-only (get-reward-cycle (burn-height uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-reward-cycle 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token burn-height))\n(define-read-only (staking-active-at-cycle (reward-cycle uint))\n\t(contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool staking-active-at-cycle 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token reward-cycle))\n(define-read-only (get-first-stacks-block-in-reward-cycle (reward-cycle uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-first-stacks-block-in-reward-cycle 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token reward-cycle))\n(define-read-only (get-staking-reward (user-id uint) (target-cycle uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-staking-reward 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token user-id target-cycle))\n(define-read-only (get-token-halving-cycle)\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-token-halving-cycle))\n(define-read-only (get-coinbase-thresholds)\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-coinbase-thresholds))\n(define-read-only (get-coinbase-amount-or-default (reward-cycle uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-coinbase-amount-or-default 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token reward-cycle))\n(define-read-only (get-staker-at-cycle-or-default-by-tx-sender (reward-cycle uint))\n  (get-staker-at-cycle-or-default reward-cycle (default-to u0 (get-user-id tx-sender))))\n(define-read-only (get-staking-reward-by-tx-sender (target-cycle uint))\n  (get-staking-reward (default-to u0 (get-user-id tx-sender)) target-cycle))\n(define-read-only (get-staking-stats-coinbase (reward-cycle uint))\n  { staking-stats: (get-staking-stats-at-cycle-or-default reward-cycle), coinbase-amount: (get-coinbase-amount-or-default reward-cycle) })\n(define-read-only (get-staked-many (target-cycles (list 1000 uint)))\n  (map get-staker-at-cycle-or-default-by-tx-sender target-cycles))\n(define-read-only (get-staking-rewards-many (target-cycles (list 1000 uint)))\n  (map get-staking-reward-by-tx-sender target-cycles))\n(define-public (stake-tokens (amount-token uint) (lock-period uint))\n  (let (\n\t\t\t(sender tx-sender))\n\t\t(asserts! (not (is-blocklisted-or-default sender)) ERR-NOT-AUTHORIZED)\n\t\t(asserts! (> amount-token u0) ERR-CANNOT-STAKE)\t\t\t\n\t\t(as-contract (try! (contract-call? .token-alex burn-fixed amount-token sender)))\n\t\t(as-contract (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token mint-fixed amount-token sender)))\n    (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool stake-tokens 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token amount-token lock-period)))\n(define-public (claim-staking-reward (target-cycle uint))\n  (let (\n\t\t\t(sender tx-sender)\n\t\t\t(claimed (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool claim-staking-reward 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token target-cycle)))\n\t\t\t(total-claimed (+ (get to-return claimed) (get entitled-token claimed))))\n\t\t\t(asserts! (not (is-blocklisted-or-default sender)) ERR-NOT-AUTHORIZED)\n\t\t\t(and (> total-claimed u0) (as-contract (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token burn-fixed total-claimed sender))))\n\t\t\t(and (> total-claimed u0) (as-contract (try! (contract-call? .token-alex mint-fixed total-claimed sender))))\n\t\t\t(ok claimed)))\n(define-public (claim-staking-reward-many (target-cycles (list 1000 uint)))\n  (ok (map claim-staking-reward target-cycles)))\n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true))\n(define-public (execute (sender principal))\n\t(begin \n\t\t(try! (contract-call? .executor-dao set-extensions (list { extension: .alex-staking, enabled: false } )))\n\t\t(try! (contract-call? .executor-dao set-extensions (list { extension: .alex-staking-v2, enabled: true } )))\n\t\t(ok true)))\n(define-public (set-blocklist-many (blocked-many (list 1000 { sender: principal, blocked: bool })))\n\t(begin \n\t\t(try! (is-dao-or-extension))\n\t\t(ok (map set-blocklist blocked-many))))\n(define-public (set-reward-cycle-length (new-reward-cycle-length uint))\n  (begin\n    (try! (is-dao-or-extension))\n\t\t(as-contract (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool set-reward-cycle-length new-reward-cycle-length))))\n(define-public (set-apower-multiplier-in-fixed (new-apower-multiplier-in-fixed uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (as-contract (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool set-apower-multiplier-in-fixed 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token new-apower-multiplier-in-fixed))))\n(define-public (set-token-halving-cycle (new-token-halving-cycle uint))\n  (begin\n    (try! (is-dao-or-extension))\n\t\t(as-contract (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool set-token-halving-cycle new-token-halving-cycle))))\n(define-public (set-coinbase-amount (coinbase-1 uint) (coinbase-2 uint) (coinbase-3 uint) (coinbase-4 uint) (coinbase-5 uint))\n  (begin\n    (try! (is-dao-or-extension))\n    (as-contract (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool set-coinbase-amount 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token coinbase-1 coinbase-2 coinbase-3 coinbase-4 coinbase-5))))\n(define-private (set-blocklist (blocked { sender: principal, blocked: bool }))\n\t(begin\n\t\t(print { object: \"alex-staking\", action: \"set-blocklist\", payload: blocked }) \n\t\t(ok (map-set blocklist (get sender blocked) (get blocked blocked)))))",
    "analysis": {
      "summary": "This contract manages staking, rewards, and governance interactions for a specific token on the Stacks blockchain, with features for blocklisting, staking, claiming rewards, and administrative functions controlled by a DAO.",
      "explanation": "This Clarity smart contract is designed for staking tokens, managing staking rewards, and performing administrative tasks governed by a DAO. It implements traits for extension and proposal, interacts with a fungible token (FT) trait for token operations, and defines constants for error handling. The contract includes mechanisms to check if a caller is authorized by the DAO or is an approved extension, manage a blocklist of principals, and interact with an external contract for staking mechanics and reward calculations. Key functionalities include staking tokens with a lock period, claiming staking rewards, and administrative tasks such as updating staking parameters and managing the blocklist, which are restricted to the DAO or its extensions. The contract leverages external calls to a reserve pool contract for detailed staking and reward logic, demonstrating a modular approach to contract design on the Stacks blockchain.",
      "tags": [
        "staking",
        "governance",
        "DAO",
        "rewards",
        "blocklist"
      ]
    }
  },
  {
    "rank": 61,
    "contract": "SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.multihop",
    "calls": 568,
    "source": ";; Title: Multi-hop Router\n;; Version: 1.0.0\n;; Description: \n;;   Router contract for executing multi-hop swaps across liquidity pools \n;;   that implement the execute/quote interface.\n\n;; Use Traits\n(use-trait pool-trait .dexterity-traits-v0.liquidity-pool-trait)\n\n;; @desc Execute swap through a single pool\n(define-private (execute-swap \n    (amount uint) \n    (hop {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let ((pool (get pool hop)))\n    (contract-call? pool execute amount (get opcode hop))))\n  \n;; --- Core Functions ---\n\n;; @desc Execute single swap through one pool\n(define-public (swap-1 \n    (amount uint) \n    (hop-1 {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let ((result (try! (execute-swap amount hop-1))))\n    (ok (list result))))\n\n;; @desc Execute two-hop swap through two pools\n(define-public (swap-2\n    (amount uint)\n    (hop-1 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-2 {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let (\n    (result-1 (try! (execute-swap amount hop-1)))\n    (result-2 (try! (execute-swap (get dy result-1) hop-2))))\n    (ok (list result-1 result-2))))\n\n;; @desc Execute three-hop swap through three pools\n(define-public (swap-3\n    (amount uint)\n    (hop-1 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-2 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-3 {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let (\n    (result-1 (try! (execute-swap amount hop-1)))\n    (result-2 (try! (execute-swap (get dy result-1) hop-2)))\n    (result-3 (try! (execute-swap (get dy result-2) hop-3))))\n    (ok (list result-1 result-2 result-3))))\n\n;; @desc Execute four-hop swap\n(define-public (swap-4\n    (amount uint)\n    (hop-1 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-2 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-3 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-4 {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let (\n    (result-1 (try! (execute-swap amount hop-1)))\n    (result-2 (try! (execute-swap (get dy result-1) hop-2)))\n    (result-3 (try! (execute-swap (get dy result-2) hop-3)))\n    (result-4 (try! (execute-swap (get dy result-3) hop-4))))\n    (ok (list result-1 result-2 result-3 result-4))))\n\n;; @desc Execute five-hop swap\n(define-public (swap-5\n    (amount uint)\n    (hop-1 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-2 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-3 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-4 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-5 {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let (\n    (result-1 (try! (execute-swap amount hop-1)))\n    (result-2 (try! (execute-swap (get dy result-1) hop-2)))\n    (result-3 (try! (execute-swap (get dy result-2) hop-3)))\n    (result-4 (try! (execute-swap (get dy result-3) hop-4)))\n    (result-5 (try! (execute-swap (get dy result-4) hop-5))))\n    (ok (list result-1 result-2 result-3 result-4 result-5))))\n\n;; @desc Execute six-hop swap\n(define-public (swap-6\n    (amount uint)\n    (hop-1 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-2 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-3 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-4 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-5 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-6 {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let (\n    (result-1 (try! (execute-swap amount hop-1)))\n    (result-2 (try! (execute-swap (get dy result-1) hop-2)))\n    (result-3 (try! (execute-swap (get dy result-2) hop-3)))\n    (result-4 (try! (execute-swap (get dy result-3) hop-4)))\n    (result-5 (try! (execute-swap (get dy result-4) hop-5)))\n    (result-6 (try! (execute-swap (get dy result-5) hop-6))))\n    (ok (list result-1 result-2 result-3 result-4 result-5 result-6))))\n\n;; @desc Execute seven-hop swap\n(define-public (swap-7\n    (amount uint)\n    (hop-1 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-2 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-3 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-4 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-5 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-6 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-7 {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let (\n    (result-1 (try! (execute-swap amount hop-1)))\n    (result-2 (try! (execute-swap (get dy result-1) hop-2)))\n    (result-3 (try! (execute-swap (get dy result-2) hop-3)))\n    (result-4 (try! (execute-swap (get dy result-3) hop-4)))\n    (result-5 (try! (execute-swap (get dy result-4) hop-5)))\n    (result-6 (try! (execute-swap (get dy result-5) hop-6)))\n    (result-7 (try! (execute-swap (get dy result-6) hop-7))))\n    (ok (list result-1 result-2 result-3 result-4 result-5 result-6 result-7))))\n\n;; @desc Execute eight-hop swap\n(define-public (swap-8\n    (amount uint)\n    (hop-1 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-2 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-3 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-4 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-5 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-6 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-7 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-8 {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let (\n    (result-1 (try! (execute-swap amount hop-1)))\n    (result-2 (try! (execute-swap (get dy result-1) hop-2)))\n    (result-3 (try! (execute-swap (get dy result-2) hop-3)))\n    (result-4 (try! (execute-swap (get dy result-3) hop-4)))\n    (result-5 (try! (execute-swap (get dy result-4) hop-5)))\n    (result-6 (try! (execute-swap (get dy result-5) hop-6)))\n    (result-7 (try! (execute-swap (get dy result-6) hop-7)))\n    (result-8 (try! (execute-swap (get dy result-7) hop-8))))\n    (ok (list result-1 result-2 result-3 result-4 result-5 result-6 result-7 result-8))))\n\n;; @desc Execute nine-hop swap\n(define-public (swap-9\n    (amount uint)\n    (hop-1 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-2 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-3 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-4 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-5 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-6 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-7 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-8 {pool: <pool-trait>, opcode: (optional (buff 16))})\n    (hop-9 {pool: <pool-trait>, opcode: (optional (buff 16))}))\n  (let (\n    (result-1 (try! (execute-swap amount hop-1)))\n    (result-2 (try! (execute-swap (get dy result-1) hop-2)))\n    (result-3 (try! (execute-swap (get dy result-2) hop-3)))\n    (result-4 (try! (execute-swap (get dy result-3) hop-4)))\n    (result-5 (try! (execute-swap (get dy result-4) hop-5)))\n    (result-6 (try! (execute-swap (get dy result-5) hop-6)))\n    (result-7 (try! (execute-swap (get dy result-6) hop-7)))\n    (result-8 (try! (execute-swap (get dy result-7) hop-8)))\n    (result-9 (try! (execute-swap (get dy result-8) hop-9))))\n    (ok (list result-1 result-2 result-3 result-4 result-5 result-6 result-7 result-8 result-9))))",
    "analysis": {
      "summary": "This contract facilitates multi-hop swaps across various liquidity pools on the Stacks blockchain, supporting up to nine sequential swaps in a single transaction.",
      "explanation": "The contract defines a series of public functions (`swap-1` through `swap-9`) that enable users to execute swaps through one to nine liquidity pools in sequence. Each swap function takes an initial amount and a series of 'hops', where each hop specifies a liquidity pool (conforming to a predefined trait) and an optional opcode. The core of the contract is the `execute-swap` private function, which performs the actual swap operation by calling the `execute` function of the specified pool contract, passing along the amount and opcode. The results of each swap are passed as the input amount to the next hop in the sequence. The contract uses the `try!` macro to attempt these operations, halting execution and rolling back the transaction if any swap fails. This design allows for flexible, multi-step token swaps across a network of interoperable liquidity pools, potentially enabling more efficient trading paths and better rates for users.\n\n- The `use-trait` statement <L4> imports a trait definition for liquidity pools, ensuring that any pool referenced in a swap operation adheres to a standard interface.\n- The `execute-swap` function <L7-11> abstracts the contract call to a pool's `execute` method, facilitating code reuse across the multiple swap functions.\n- Each public function (`swap-1` through `swap-9`) <L14-90> is designed to handle a specific number of hops, incrementally increasing the complexity and potential use cases. These functions demonstrate the contract's scalability in handling multi-hop swaps, with each function building upon the pattern established by `execute-swap`.\n- The pattern of extracting the result of one swap and passing it as the input to the next <L34-36> is a key feature, enabling the chaining of swaps. This is critical for executing multi-hop swaps where the output of one operation directly influences the next.\n- The contract's reliance on the `try!` macro for error handling <L33, L52, L71, etc.> ensures that any failure in a sequence of swaps results in a transaction rollback, preserving the atomicity of operations and safeguarding user funds.",
      "tags": [
        "DeFi",
        "multi-hop-swap",
        "liquidity-pool",
        "protocol",
        "trading"
      ]
    }
  },
  {
    "rank": 62,
    "contract": "SM3KNVZS30WM7F89SXKVVFY4SN9RMPZZ9FX929N0V.lqstx-mint-endpoint-v2-01",
    "calls": 568,
    "source": "\n;; SPDX-License-Identifier: BUSL-1.1\n\n;;\n;; lqstx-mint-endpoint-v1-02\n;;\n\n(use-trait strategy-trait 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.strategy-trait.strategy-trait)\n\n;; __IF_MAINNET__\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n;; (use-trait sip-010-trait .sip-010-trait.sip-010-trait)\n;; __ENDIF__\n\n(define-constant err-unauthorised (err u3000))\n(define-constant err-paused (err u7001))\n(define-constant err-request-pending (err u7006))\n(define-constant err-request-finalized-or-revoked (err u7007))\n(define-constant err-not-whitelisted (err u7008))\n\n(define-constant PENDING 0x00)\n(define-constant FINALIZED 0x01)\n(define-constant REVOKED 0x02)\n\n(define-constant max-uint u340282366920938463463374607431768211455)\n\n(define-data-var paused bool true)\n(define-data-var mint-delay uint u432) ;; mint available 3 day after cycle starts\n\n;; __IF_MAINNET__\n(define-data-var request-cutoff uint u300) ;; request must be made 300 blocks before prepare stage starts\n(define-constant pox-info (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-pox-info)))\n(define-constant activation-burn-block (get first-burnchain-block-height pox-info))\n(define-constant reward-cycle-length (get reward-cycle-length pox-info))\n(define-constant prepare-cycle-length (get prepare-cycle-length pox-info))\n;; (define-data-var request-cutoff uint u10)\n;; (define-constant activation-burn-block u0)\n;; (define-constant reward-cycle-length u200)\n;; (define-constant prepare-cycle-length u10)\n;; __ENDIF__\n\n(define-data-var use-whitelist bool false)\n(define-map whitelisted principal bool)\n\n;; read-only calls\n\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lisa-dao) (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lisa-dao is-extension contract-caller)) err-unauthorised)))\n\n(define-read-only (is-paused)\n    (var-get paused))\n\n(define-read-only (is-not-paused-or-fail)\n    (ok (asserts! (not (is-paused)) err-paused)))\n\n(define-read-only (get-mint-request-or-fail (request-id uint))\n    (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry get-mint-request-or-fail request-id))\n\n(define-read-only (get-burn-request-or-fail (request-id uint))\n    (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry get-burn-request-or-fail request-id))\n\n(define-read-only (get-mint-requests-pending-or-default (user principal))\n    (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry get-mint-requests-pending-or-default user))\n\n(define-read-only (get-burn-requests-pending-or-default (user principal))\n    (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry get-burn-requests-pending-or-default user))\n\n(define-read-only (get-mint-requests-pending-amount)\n    (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry get-mint-requests-pending-amount))\n\n(define-read-only (get-mint-request-or-fail-many (request-ids (list 1000 uint)))\n    (ok (map get-mint-request-or-fail request-ids)))\n\n(define-read-only (get-burn-request-or-fail-many (request-ids (list 1000 uint)))\n    (ok (map get-burn-request-or-fail request-ids)))\n\n(define-read-only (get-owner-mint-nft (id uint))\n    (contract-call? 'SM3KNVZS30WM7F89SXKVVFY4SN9RMPZZ9FX929N0V.li-stx-mint-nft get-owner id))\n\n(define-read-only (get-owner-burn-nft (id uint))\n    (contract-call? 'SM3KNVZS30WM7F89SXKVVFY4SN9RMPZZ9FX929N0V.li-stx-burn-nft get-owner id))\n\n(define-read-only (validate-mint-request (request-id uint))\n    (let (\n            (request-details (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry get-mint-request-or-fail request-id)))\n            (recipient (unwrap! (get-owner-mint-nft request-id) err-request-finalized-or-revoked)))\n        (asserts! (>= burn-block-height (+ (get-first-burn-block-in-reward-cycle (+ (get requested-at request-details) u1)) (var-get mint-delay))) err-request-pending)\n        (ok recipient)))\n\n;; @dev it favours smaller amounts as we do not allow partial burn\n(define-read-only (validate-burn-request (request-id uint))\n    (let (\n            (request-details (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry get-burn-request-or-fail request-id)))\n            (recipient (unwrap! (get-owner-burn-nft request-id) err-request-finalized-or-revoked))\n            (vaulted-amount (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-vlqstx get-shares-to-tokens (get wrapped-amount request-details))))\n        (asserts! (>= (stx-get-balance 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-vault) vaulted-amount) err-request-pending)\n        (ok { vaulted-amount: vaulted-amount, recipient: recipient })))\n\n;; @dev get-reward-cycle measures end to end\n(define-read-only (get-reward-cycle (burn-block uint))\n    (/ (- burn-block activation-burn-block) reward-cycle-length))\n\n(define-read-only (get-first-burn-block-in-reward-cycle (reward-cycle uint))\n    (+ activation-burn-block (* reward-cycle-length reward-cycle)))\n\n;; @dev get-request-cycle measures request-cutoff to request-cutoff\n(define-read-only (get-request-cycle (burn-block uint))\n    (/ (- (+ burn-block prepare-cycle-length (var-get request-cutoff)) activation-burn-block) reward-cycle-length))\n\n(define-read-only (get-first-burn-block-in-request-cycle (reward-cycle uint))\n    (- (+ activation-burn-block (* reward-cycle-length reward-cycle)) prepare-cycle-length (var-get request-cutoff)))\n\n(define-read-only (get-mint-delay)\n    (var-get mint-delay))\n\n(define-read-only (get-request-cutoff)\n    (var-get request-cutoff))\n\n(define-read-only (is-whitelisted-or-mint-for-all (user principal))\n    (or (not (var-get use-whitelist)) (default-to false (map-get? whitelisted user))))\n\n(define-read-only (get-total-stx)\n    (let (\n            (available-stx (stx-get-balance 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-vault))\n            ;; __IF_MAINNET__\n            (deployed-stx (unwrap-panic (contract-call? .public-pools-strategy-v2 get-amount-in-strategy)))\n            ;; (deployed-stx (unwrap-panic (contract-call? .mock-strategy get-amount-in-strategy)))\n            ;; __ENDIF__\n            (pending-stx (get-mint-requests-pending-amount)))\n    (- (+ available-stx deployed-stx) pending-stx)))\n\n;; public calls\n\n(define-public (rebase)\n\t(let ((total-stx (get-total-stx)))\n\t\t(try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-lqstx set-reserve total-stx))\n\t\t(ok total-stx)))    \n\n;; @dev the requestor stx is held by the contract until mint can be finalized.\n(define-public (request-mint (amount uint))\n    (let (            \n            (sender tx-sender)\n            (rebase-first (try! (rebase)))\n            (cycle (get-request-cycle burn-block-height))\n            (request-details { requested-by: sender, amount: amount, requested-at: cycle, status: PENDING })\n            (request-id (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-mint-request u0 request-details))))\n        (try! (is-not-paused-or-fail))\n        (asserts! (is-whitelisted-or-mint-for-all sender) err-not-whitelisted)\n        (try! (stx-transfer? amount sender 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-vault))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-mint-requests-pending-amount (+ (get-mint-requests-pending-amount) amount)))\n        (unwrap! (contract-call? 'SM3KNVZS30WM7F89SXKVVFY4SN9RMPZZ9FX929N0V.li-stx-mint-nft mint request-id amount sender) (err (+ u999900 request-id)))\n        (try! (rebase))\n        (print { type: \"mint-request\", id: request-id, details: request-details })\n        (ok request-id)))\n\n(define-public (revoke-mint (request-id uint))\n    (let (\n            (rebase-first (try! (rebase)))\n            (request-details (try! (get-mint-request-or-fail request-id)))\n            (recipient (unwrap! (unwrap-panic (get-owner-mint-nft request-id)) err-request-finalized-or-revoked)))\n        (try! (is-not-paused-or-fail))\n        (asserts! (is-eq tx-sender recipient) err-unauthorised)\n        (asserts! (is-eq PENDING (get status request-details)) err-request-finalized-or-revoked)\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-vault proxy-call 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.stx-transfer-proxy (unwrap-panic (to-consensus-buff? { ustx: (get amount request-details), recipient: recipient }))))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-mint-request request-id (merge request-details { status: REVOKED })))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-mint-requests-pending-amount (- (get-mint-requests-pending-amount) (get amount request-details))))\n        (try! (contract-call? 'SM3KNVZS30WM7F89SXKVVFY4SN9RMPZZ9FX929N0V.li-stx-mint-nft burn request-id))\n        (try! (rebase))\n        (ok true)))\n\n(define-public (request-burn (amount uint))\n    (let (\n            (sender tx-sender)\n            (rebase-first (try! (rebase)))\n            (cycle (get-request-cycle burn-block-height))\n            (vlqstx-amount (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-vlqstx get-tokens-to-shares amount))\n            (request-details { requested-by: sender, amount: amount, wrapped-amount: vlqstx-amount, requested-at: cycle, status: PENDING })\n            (request-id (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-burn-request u0 request-details))))\n        (try! (is-not-paused-or-fail))\n        (print { type: \"burn-request\", id: request-id, details: request-details })\n        (if (>= (stx-get-balance 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-vault) amount)\n            (begin\n                (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-lqstx dao-burn amount sender))\n                (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-vault proxy-call 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.stx-transfer-proxy (unwrap-panic (to-consensus-buff? { ustx: amount, recipient: sender }))))\n                (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-burn-request request-id (merge request-details { status: FINALIZED })))\n                (try! (rebase))\n                (ok {request-id: request-id, status: FINALIZED })\n            )\n            (begin\n                (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-vlqstx mint amount sender))\n                (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-vlqstx transfer vlqstx-amount sender 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry none))            \n                (try! (contract-call? 'SM3KNVZS30WM7F89SXKVVFY4SN9RMPZZ9FX929N0V.li-stx-burn-nft mint request-id amount sender))\n                (try! (rebase))\n                (ok { request-id: request-id, status: PENDING })))))\n\n(define-public (revoke-burn (request-id uint))\n    (let (\n            (rebase-first (try! (rebase)))\n            (request-details (try! (get-burn-request-or-fail request-id)))\n            (recipient (unwrap! (unwrap-panic (get-owner-burn-nft request-id)) err-request-finalized-or-revoked))\n            (lqstx-amount (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-vlqstx get-shares-to-tokens (get wrapped-amount request-details))))\n        (try! (is-not-paused-or-fail))\n        (asserts! (is-eq PENDING (get status request-details)) err-request-finalized-or-revoked)\n        (asserts! (is-eq tx-sender recipient) err-unauthorised)\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry transfer (get wrapped-amount request-details) recipient 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-vlqstx))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-vlqstx burn (get wrapped-amount request-details) recipient))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-burn-request request-id (merge request-details { status: REVOKED })))\n        (try! (contract-call? 'SM3KNVZS30WM7F89SXKVVFY4SN9RMPZZ9FX929N0V.li-stx-burn-nft burn request-id))\n        (try! (rebase))\n        (ok true)))\n\n(define-public (finalize-mint (request-id uint))\n    (let (\n            (rebase-first (try! (rebase)))\n            (request-details (try! (get-mint-request-or-fail request-id)))\n            (recipient (unwrap! (unwrap-panic (get-owner-mint-nft request-id)) err-request-finalized-or-revoked)))\n        (try! (validate-mint-request request-id))\n        (try! (is-not-paused-or-fail))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-lqstx dao-mint (get amount request-details) recipient))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-mint-request request-id (merge request-details { status: FINALIZED })))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-mint-requests-pending-amount (- (get-mint-requests-pending-amount) (get amount request-details))))\n        (try! (contract-call? 'SM3KNVZS30WM7F89SXKVVFY4SN9RMPZZ9FX929N0V.li-stx-mint-nft burn request-id))\n        (try! (rebase))\n        (ok true)))\n\n(define-public (finalize-mint-many (request-ids (list 1000 uint)))\n    (ok (map finalize-mint request-ids)))\n\n(define-public (finalize-burn (request-id uint))\n    (let (            \n            (rebase-first (try! (rebase)))\n            (request-details (try! (get-burn-request-or-fail request-id)))\n            (transfer-vlqstx (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry transfer (get wrapped-amount request-details) (as-contract tx-sender) 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-vlqstx)))\n            (recipient (unwrap! (unwrap-panic (get-owner-burn-nft request-id)) err-request-finalized-or-revoked))\n            (validation-data (try! (validate-burn-request request-id))))\n        (try! (is-not-paused-or-fail))        \n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-vlqstx burn (get wrapped-amount request-details) (as-contract tx-sender)))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.token-lqstx dao-burn (get vaulted-amount validation-data) (as-contract tx-sender)))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-vault proxy-call 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.stx-transfer-proxy (unwrap-panic (to-consensus-buff? { ustx: (get vaulted-amount validation-data), recipient: recipient }))))\n        (try! (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lqstx-mint-registry set-burn-request request-id (merge request-details { status: FINALIZED })))\n        (try! (contract-call? 'SM3KNVZS30WM7F89SXKVVFY4SN9RMPZZ9FX929N0V.li-stx-burn-nft burn request-id))\n        (try! (rebase))\n        (ok true)))\n\n(define-public (finalize-burn-many (request-ids (list 1000 uint)))\n    (ok (map finalize-burn request-ids)))\n\n;; governance calls\n\n(define-public (set-use-whitelist (new-use bool))\n    (begin\n        (try! (is-dao-or-extension))\n        (ok (var-set use-whitelist new-use))))\n\n(define-public (set-whitelisted (user principal) (new-whitelisted bool))\n    (begin\n        (try! (is-dao-or-extension))\n        (set-whitelisted-private user new-whitelisted)))\n\n(define-public (set-whitelisted-many (users (list 1000 principal)) (new-whitelisteds (list 1000 bool)))\n    (begin\n        (try! (is-dao-or-extension))\n        (fold check-err (map set-whitelisted-private users new-whitelisteds) (ok true))))\n\n(define-public (set-paused (new-paused bool))\n    (begin\n        (try! (is-dao-or-extension))\n        (ok (var-set paused new-paused))))\n\n(define-public (set-mint-delay (new-delay uint))\n    (begin\n        (try! (is-dao-or-extension))\n        (ok (var-set mint-delay new-delay))))\n\n(define-public (set-request-cutoff (new-cutoff uint))\n    (begin\n        (try! (is-dao-or-extension))\n        (ok (var-set request-cutoff new-cutoff))))\n\n;; privileged calls\n\n;; private calls\n\n(define-private (sum-strategy-amounts (strategy <strategy-trait>) (accumulator (response uint uint)))\n\t(ok (+ (try! (contract-call? strategy get-amount-in-strategy)) (try! accumulator)))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n    (match prior\n        ok-value result\n        err-value (err err-value)))\n\n(define-private (pop (target (list 1000 uint)) (idx uint))\n    (match (slice? target (+ idx u1) (len target))\n        some-value (unwrap-panic (as-max-len? (concat (unwrap-panic (slice? target u0 idx)) some-value) u1000))\n        (unwrap-panic (slice? target u0 idx))))\n\n(define-private (set-whitelisted-private (user principal) (new-whitelisted bool))\n    (ok (map-set whitelisted user new-whitelisted)))\n\n",
    "analysis": {
      "summary": "This Clarity smart contract facilitates minting and burning requests for a token, managing these requests through a registry, and includes governance features for pausing operations and managing a whitelist.",
      "explanation": "The contract is designed to work with a minting and burning system for a specific token on the Stacks blockchain. It interfaces with other contracts for detailed operations like minting NFTs, transferring STX, and more. Key functionalities include creating, revoking, and finalizing mint and burn requests, with checks for authorization, pausing, and whitelisting. It also allows governance actions like toggling the use of a whitelist, modifying the whitelist, and setting operational parameters like mint delay and request cutoff. The contract uses the SIP-010 trait for fungible tokens and a strategy trait for interacting with external contracts or strategies. It manages state through variables like `paused`, `mint-delay`, and `whitelist`, and maps for tracking whitelisted addresses. The contract includes read-only functions for checking conditions like pause status, whitelisting, and calculating reward cycles based on block height, which are crucial for timing the mint and burn operations correctly.",
      "tags": [
        "minting",
        "burning",
        "governance",
        "whitelist",
        "token",
        "DeFi"
      ]
    }
  },
  {
    "rank": 63,
    "contract": "SP1PW804599BZ46B4A0FYH86ED26XPJA7SFYNK1XS.play",
    "calls": 544,
    "source": ";; ---------------------------------------------------------\n;; PLAY - SIP-10 Fungible Token Contract\n;; ---------------------------------------------------------\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n(define-fungible-token play)\n\n;; ---------------------------------------------------------\n;; Constants/Variables\n;; ---------------------------------------------------------\n(define-data-var token-uri (optional (string-utf8 256)) none)\n(define-data-var contract-owner principal tx-sender)\n\n;; ---------------------------------------------------------\n;; Errors\n;; ---------------------------------------------------------\n(define-constant ERR_UNAUTHORIZED (err u100))\n\n;; ---------------------------------------------------------\n;; SIP-10 Functions\n;; ---------------------------------------------------------\n(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (or (is-eq tx-sender sender) (is-eq contract-caller sender)) ERR_UNAUTHORIZED)\n        (try! (ft-transfer? play amount sender recipient))\n        (match memo to-print (print to-print) 0x)\n        (ok true)\n    )\n)\n\n(define-read-only (get-balance (owner principal))\n    (ok (ft-get-balance play owner))\n)\n\n(define-read-only (get-name)\n    (ok \"Play\")\n)\n\n(define-read-only (get-symbol)\n    (ok \"PLAY\")\n)\n\n(define-read-only (get-decimals)\n    (ok u6)\n)\n\n(define-read-only (get-total-supply)\n    (ok (ft-get-supply play))\n)\n\n(define-read-only (get-token-uri)\n        (ok (var-get token-uri))\n)\n\n;; ---------------------------------------------------------\n;; Privileged Functions\n;; ---------------------------------------------------------\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (if (is-eq tx-sender (var-get contract-owner))\n        (ok (var-set token-uri (some value)))\n        (err ERR_UNAUTHORIZED)\n    )\n)\n\n(define-public (set-contract-owner (new-owner principal))\n    (if (is-eq tx-sender (var-get contract-owner))\n        (ok (var-set contract-owner new-owner))\n        (err ERR_UNAUTHORIZED)\n    )\n)\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 1000 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n    (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n    (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n    (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n    (let ((transferOk (try! (transfer amount tx-sender to memo))))\n        (ok transferOk)\n    )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n    (try! (ft-mint? play u10000000000000000 tx-sender))\n)",
    "analysis": {
      "summary": "This contract implements a SIP-10 compliant fungible token named 'Play' with additional features like setting a token URI and transferring ownership.",
      "explanation": "This Clarity smart contract defines a fungible token named 'Play' following the SIP-010 Fungible Token Standard for the Stacks blockchain. It includes standard token functionalities such as transfer, balance checks, and metadata retrieval, as well as privileged operations like updating the token's URI and changing the contract owner. Key implementation details are as follows:\n\n- <L2> Implements the SIP-010 trait, ensuring compatibility with the standard fungible token interface.\n- <L4> Declares the 'play' fungible token using Clarity's native fungible token support.\n- <L7-8> Initializes optional token URI and sets the contract's initial owner to the transaction sender.\n- <L11> Defines a custom error for unauthorized actions.\n- <L14-23> Implements the 'transfer' function with an additional check to allow transfers initiated by either the sender or the contract caller, and optionally logs a memo.\n- <L25-43> Includes read-only functions for retrieving token metadata and supply, adhering to SIP-010 requirements.\n- <L46-54> Allows the contract owner to update the token's URI and transfer ownership, enforcing access control through transaction sender verification.\n- <L57-75> Provides a 'send-many' utility function enabling batch transfers with optional memos, demonstrating advanced use of Clarity's data structures and control flow.\n- <L78> Mints an initial supply of tokens to the transaction sender, showcasing token generation outside of a specific function.\n\nOverall, the contract leverages Clarity's capabilities for creating secure, transparent, and standard-compliant digital assets on the Stacks blockchain.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "DeFi",
        "protocol"
      ]
    }
  },
  {
    "rank": 64,
    "contract": "SPBKM76FM8T8DEAQ11C9CF9WJKTSMKE140M0VXFM.capy-stxcity-dex",
    "calls": 531,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u21000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u30000000000)\n(define-constant VIRTUAL_STX_VALUE u6000000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u600000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP359XMJYWRDY24H7VDYJWKPAGHN75V8M0W1NBF3P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SPBKM76FM8T8DEAQ11C9CF9WJKTSMKE140M0VXFM.capy-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u20907079646017)\n    (var-set stx-balance u26666667)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX.",
      "explanation": "This Clarity smart contract facilitates token trading on the Stacks blockchain using a bonding curve, a mathematical curve that determines the price of a token based on its supply. The contract allows users to buy or sell tokens in exchange for STX, the native cryptocurrency of the Stacks blockchain. The contract is designed to be decentralized, with no ownership privileges, ensuring that it operates autonomously.\n\n- The contract uses the SIP-010 trait for fungible tokens to ensure compatibility with the standard token interface on Stacks (<L1>).\n- Error constants are defined for handling various error states (<L4-11>).\n- Constants are set for the token supply, DEX address, and various parameters related to the bonding curve and fees (<L13-24>).\n- Tradable state, virtual STX amount, token and STX balances, and percentages for burning and deployer fees are managed through data variables (<L27-32>).\n- The `buy` function allows users to purchase tokens with STX, adjusting the token and STX balances according to the bonding curve, and applying fees (<L34-81>). If the STX balance reaches a target amount, the contract triggers a distribution mechanism, sending tokens and STX to specified addresses and adjusting the contract state (<L69-81>).\n- The `sell` function enables users to sell tokens back to the DEX in exchange for STX, with fees applied (<L83-117>).\n- `get-buyable-tokens` and `get-sellable-stx` are read-only functions that calculate the amount of tokens or STX that can be bought or sold based on the current state of the contract and the bonding curve (<L119-147>, <L149-176>).\n- The contract initializes with predefined values for the tradable state, virtual STX amount, token and STX balances, and percentages for burning and deployer fees (<L178-186>).\n\nOverall, this contract introduces a decentralized mechanism for trading tokens against STX, leveraging a bonding curve to dynamically adjust prices based on supply and demand.",
      "tags": [
        "DeFi",
        "DEX",
        "bonding-curve",
        "trading",
        "protocol"
      ]
    }
  },
  {
    "rank": 65,
    "contract": "SP2X2Z28NXZVJFCJPBR9Q3NBVYBK3GPX8PXA3R83C.odin-tkn",
    "calls": 515,
    "source": "\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-fungible-token odin)\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://token-metadat.s3.eu-central-1.amazonaws.com/asset.json\"))\n(define-constant contract-creator tx-sender)\n\n\n;; SIP-010 Standard\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender) ERR-UNAUTHORIZED)\n        (ft-transfer? odin amount from to)\n    )\n)\n\n(define-read-only (get-name)\n    (ok \"Odin\")\n)\n\n(define-read-only (get-symbol)\n    (ok \"ODIN\")\n)\n\n(define-read-only (get-decimals)\n    (ok u6)\n)\n\n(define-read-only (get-balance (user principal))\n    (ok (ft-get-balance odin user)\n    )\n)\n\n(define-read-only (get-total-supply)\n    (ok (ft-get-supply odin)\n    )\n)\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (begin\n        (asserts! (is-eq tx-sender contract-creator) ERR-UNAUTHORIZED)\n        (var-set token-uri (some value))\n        (ok (print {\n              notification: \"token-metadata-update\",\n              payload: {\n                contract-id: (as-contract tx-sender),\n                token-class: \"ft\"\n              }\n            })\n        )\n    )\n)\n\n(define-read-only (get-token-uri)\n    (ok (var-get token-uri)\n    )\n)\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n\n(begin\n  (try! (ft-mint? odin u21000000000000000 contract-creator))\n)",
    "analysis": {
      "summary": "This contract implements a fungible token named Odin, adhering to the SIP-010 standard for Stacks fungible tokens, with additional features like setting a token URI and a bulk transfer function.",
      "explanation": "The contract starts by implementing the SIP-010 trait, ensuring compatibility with the Stacks blockchain's standard for fungible tokens. It defines a custom error for unauthorized actions and declares the Odin token with `define-fungible-token`. A token URI variable is set for metadata, and the contract creator is stored as a constant for access control purposes.\n\nThe `transfer` function <L11-15> allows token holders to transfer Odin tokens to another account, enforcing that only the token owner can initiate the transfer. The `get-name`, `get-symbol`, `get-decimals`, `get-balance`, and `get-total-supply` functions <L17-31> provide basic token information and account balances, adhering to the SIP-010 standard.\n\nThe `set-token-uri` function <L33-41> enables the contract creator to update the token's metadata URI, with an event log for tracking. The `get-token-uri` function <L43-45> allows querying the current metadata URI.\n\nUtility functions for bulk transfers are defined at the end <L47-67>. The `send-many` function enables sending Odin tokens to multiple recipients in a single transaction, leveraging Clarity's `fold` and `map` functions for iterating over the recipients list. The `check-err`, `send-token`, and `send-token-with-memo` functions assist in this process, ensuring each transfer is attempted and errors are handled appropriately.\n\nThe contract concludes with an initial minting of Odin tokens to the contract creator <L69-71>, setting the initial supply.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "metadata",
        "bulk-transfer"
      ]
    }
  },
  {
    "rank": 66,
    "contract": "SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.uwu-oracle-v1-1-3",
    "calls": 513,
    "source": ";; UWU ORACLE CONTRACT Version 1.1.3\n;; UWU PROTOCOL Version 1.1.0\n\n;; This file is part of UWU PROTOCOL.\n\n;; UWU PROTOCOL is free software: you can redistribute it and/or\n;; modify it under the terms of the GNU General Public License as\n;; published by the Free Software Foundation, either version 3 of the\n;; License, or (at your option) any later version.\n\n;; UWU PROTOCOL is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n;; GNU General Public License for more details.\n\n;; You should have received a copy of the GNU General Public License\n;; along with UWU PROTOCOL. If not, see <http://www.gnu.org/licenses/>.\n\n(define-public (send-to-proxy)\n  (let (\n    (oracle (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-oracle-v2-3 fetch-price \"STX\")))\n  )\n    (contract-call? .uwu-oracle-proxy-v1-1-0 update-stx-price (get last-price oracle))\n  )\n)",
    "analysis": {
      "summary": "This contract fetches the STX price from the Arkadiko oracle and updates it in the UWU oracle proxy.",
      "explanation": "The contract is designed to interact with the Arkadiko oracle to retrieve the current price of STX and then update this price in the UWU oracle proxy. It consists of a single public function `send-to-proxy`.\n\n- <L1-22> These lines are comments, providing the version information of the UWU Oracle Contract and the UWU Protocol, along with licensing information under the GNU General Public License version 3.\n\n- <L23> The `send-to-proxy` function is defined as public, meaning it can be called by any user or contract.\n\n- <L24-29> Inside the function, a `let` block is used to define a local variable `oracle`. The `unwrap-panic` function is called to ensure that the operation does not fail silently; if the `contract-call?` to fetch the price from `arkadiko-oracle-v2-3` fails, the transaction will abort. The `contract-call?` function is used to interact with the Arkadiko oracle contract, specifically to call its `fetch-price` function with the argument \"STX\", which returns the current price of STX.\n\n- <L30> The fetched price is then passed to the `.uwu-oracle-proxy-v1-1-0` contract by calling its `update-stx-price` function, using the `last-price` field from the `oracle` variable as the argument. This updates the STX price in the UWU oracle proxy.\n\nThis contract serves as a bridge between the Arkadiko oracle and the UWU oracle proxy, ensuring that the UWU protocol can access the latest STX price information.",
      "tags": [
        "oracle",
        "protocol",
        "price-feed",
        "interoperability"
      ]
    }
  },
  {
    "rank": 67,
    "contract": "SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.auto-alex-v3-endpoint-v2-02",
    "calls": 507,
    "source": ";; SPDX-License-Identifier: BUSL-1.1\n\n;; -- autoALEX creation/staking/redemption\n\n;; constants\n;;\n(define-constant err-unauthorised (err u1000))\n(define-constant err-invalid-liquidity (err u2003))\n(define-constant err-not-activated (err u2043))\n(define-constant err-paused (err u2046))\n(define-constant err-staking-not-available (err u10015))\n(define-constant err-reward-cycle-not-completed (err u10017))\n(define-constant err-claim-and-stake (err u10018))\n(define-constant err-no-redeem-revoke (err u10019))\n(define-constant err-request-finalized-or-revoked (err u10020))\n(define-constant err-end-cycle-v2 (err u10022))\n\n(define-constant ONE_8 u100000000)\n(define-constant REWARD-CYCLE-INDEXES (list u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31 u32))\n\n(define-constant PENDING 0x00)\n(define-constant FINALIZED 0x01)\n(define-constant REVOKED 0x02)\n\n;; data maps and vars\n;;\n\n(define-data-var create-paused bool true)\n(define-data-var redeem-paused bool true)\n\n(define-constant max-cycles u32)\n\n(define-constant end-value-v2 u109484431)\n\n;; read-only calls\n\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lisa-dao) (contract-call? 'SM26NBC8SFHNW4P1Y4DFH27974P56WN86C92HPEHH.lisa-dao is-extension contract-caller)) err-unauthorised)))\n\n(define-read-only (get-start-cycle)\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry get-start-cycle))\n\n(define-read-only (is-cycle-staked (reward-cycle uint))\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry is-cycle-staked reward-cycle))\n\n(define-read-only (get-shares-to-tokens-per-cycle-or-default (reward-cycle uint))\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry get-shares-to-tokens-per-cycle-or-default reward-cycle))\n\n(define-read-only (get-redeem-shares-per-cycle-or-default (reward-cycle uint))\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry get-redeem-shares-per-cycle-or-default reward-cycle))\n\n(define-read-only (get-redeem-request-or-fail (request-id uint))\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry get-redeem-request-or-fail request-id))\n\n(define-read-only (is-create-paused)\n  (var-get create-paused))\n\n(define-read-only (is-redeem-paused)\n  (var-get redeem-paused))\n\n;; @desc get the next capital base of the vault\n;; @desc next-base = principal to be staked at the next cycle\n;; @desc           + principal to be claimed at the next cycle and staked for the following cycle\n;; @desc           + reward to be claimed at the next cycle and staked for the following cycle\n;; @desc           + balance of ALEX in the contract\n;; @desc           + intrinsic of autoALEXv2 in the contract\n(define-read-only (get-next-base)\n  (let (\n      (current-cycle (unwrap! (get-reward-cycle block-height) err-staking-not-available))\n      (auto-alex-v2-bal (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.auto-alex-v2 get-balance 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3))))\n    (asserts! (or (is-eq current-cycle (get-start-cycle)) (is-cycle-staked (- current-cycle u1))) err-claim-and-stake)\n    (ok\n      (+\n        (get amount-staked (as-contract (get-staker-at-cycle (+ current-cycle u1))))\n        (get to-return (as-contract (get-staker-at-cycle current-cycle)))\n        (as-contract (get-staking-reward current-cycle))\n        (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex get-balance 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3))\n        (if (is-eq auto-alex-v2-bal u0) u0 (mul-down auto-alex-v2-bal end-value-v2))))))\n\n;; @desc get the intrinsic value of auto-alex-v3\n;; @desc intrinsic = next capital base of the vault / total supply of auto-alex-v3\n(define-read-only (get-intrinsic)\n  (get-shares-to-tokens ONE_8))\n\n(define-read-only (get-reward-cycle (burn-height uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.alex-reserve-pool get-reward-cycle 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token burn-height))\n\n(define-read-only (get-staking-reward (reward-cycle uint))\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2 get-staking-reward (get-user-id) reward-cycle))\n\n(define-read-only (get-staker-at-cycle (reward-cycle uint))\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2 get-staker-at-cycle-or-default reward-cycle (get-user-id)))\n\n;; governance calls\n\n(define-public (pause-create (pause bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set create-paused pause))))\n\n(define-public (pause-redeem (pause bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set redeem-paused pause))))\n\n;; public functions\n;;\n\n(define-public (rebase)\n  (let (\n      (current-cycle (unwrap! (get-reward-cycle block-height) err-staking-not-available))\n      (start-cycle (get-start-cycle))\n      (check-start-cycle (asserts! (<= start-cycle current-cycle) err-not-activated)))\n    (and (> current-cycle start-cycle) (not (is-cycle-staked (- current-cycle u1))) (try! (claim-and-stake (- current-cycle u1))))\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 set-reserve (try! (get-next-base)))))    \n    (ok current-cycle)))\n\n;; claims alex for the reward-cycles and mint auto-alex-v3\n(define-public (claim-and-mint (reward-cycles (list 200 uint)))\n  (let (\n      (claimed (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2 claim-staking-reward-many reward-cycles))))\n    (try! (add-to-position (try! (fold sum-claimed claimed (ok u0)))))\n    (ok claimed)))\n\n;; @desc add to position\n;; @desc transfers dx to vault, stake them for 32 cycles and mints auto-alex-v3, the number of which is determined as % of total supply / next base\n;; @param dx the number of $ALEX in 8-digit fixed point notation\n(define-public (add-to-position (dx uint))\n  (let (\n      (current-cycle (try! (rebase)))\n      (sender tx-sender))\n    (asserts! (> dx u0) err-invalid-liquidity)\n    (asserts! (not (is-create-paused)) err-paused)\n    (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex transfer dx sender 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 none))\n    (try! (fold stake-tokens-iter REWARD-CYCLE-INDEXES (ok { current-cycle: current-cycle, remaining: dx })))\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 mint dx sender)))\n    (print { notification: \"position-added\", payload: { new-supply: dx, sender: sender } })\n    (try! (rebase))\n\t\t(ok true)))\n\n(define-public (upgrade (dx uint))\n  (let (\n      (end-cycle-v2 (get-end-cycle-v2))\n      (current-cycle (try! (rebase)))\n      (intrinsic-dx (mul-down dx end-value-v2))\n      (sender tx-sender))\n    (asserts! (> intrinsic-dx u0) err-invalid-liquidity)\n    (asserts! (not (is-create-paused)) err-paused)\n    (asserts! (< end-cycle-v2 (+ current-cycle max-cycles)) err-end-cycle-v2) ;; auto-alex-v2 is not configured correctly\n    (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.auto-alex-v2 transfer dx sender 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 none))\n    (and (< end-cycle-v2 current-cycle) (begin (as-contract (try! (reduce-position-v2))) true))\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 mint intrinsic-dx sender)))\n    (print { notification: \"upgrade-position-added\", payload: { new-supply: intrinsic-dx, sender: sender } })\n    (try! (rebase))\n\t\t(ok true)))\n\n(define-public (request-redeem (amount uint))\n  (let (\n      (current-cycle (try! (rebase)))\n      (redeem-cycle (+ current-cycle max-cycles))\n      (request-details { requested-by: tx-sender, amount: amount, redeem-cycle: redeem-cycle, status: PENDING })\n\t\t\t(request-id (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry set-redeem-request u0 request-details)))))\n    (asserts! (not (is-redeem-paused)) err-paused)\n    (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 transfer amount tx-sender 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 none))\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry set-redeem-shares-per-cycle redeem-cycle (+ (get-redeem-shares-per-cycle-or-default redeem-cycle) amount))))\n    (print { notification: \"redeem-request\", payload: request-details })\n    (try! (rebase))\n\t\t(ok request-id)))\n\n(define-public (finalize-redeem (request-id uint))\n  (let (\n      (request-details (try! (get-redeem-request-or-fail request-id)))\n      (redeem-cycle (get redeem-cycle request-details))\n      (check-claim-and-stake (and (not (is-cycle-staked redeem-cycle)) (try! (claim-and-stake redeem-cycle))))\n      (current-cycle (try! (rebase)))\n      (prev-shares-to-tokens (get-shares-to-tokens-per-cycle-or-default (- redeem-cycle u1)))\n      (base-shares-to-tokens (get-shares-to-tokens-per-cycle-or-default (- redeem-cycle u32)))\n      (tokens (div-down (mul-down prev-shares-to-tokens (get amount request-details)) base-shares-to-tokens))\n      (updated-request-details (merge request-details { status: FINALIZED })))\n    (asserts! (not (is-redeem-paused)) err-paused)\n    (asserts! (is-eq PENDING (get status request-details)) err-request-finalized-or-revoked)\n\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex transfer tokens tx-sender (get requested-by request-details) none)))\n    (print { notification: \"finalize-redeem\", payload: updated-request-details })\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry set-redeem-request request-id updated-request-details)))\n    (try! (rebase))\n\t\t(ok true)))\n\n(define-public (revoke-redeem (request-id uint))\n  (let (\n      (request-details (try! (get-redeem-request-or-fail request-id)))\n      (current-cycle (try! (rebase)))\n      (redeem-cycle (get redeem-cycle request-details))\n      (check-cycle (asserts! (> redeem-cycle current-cycle) err-no-redeem-revoke))\n      (prev-shares-to-tokens (get-shares-to-tokens-per-cycle-or-default (- current-cycle u1)))\n      (base-shares-to-tokens (get-shares-to-tokens-per-cycle-or-default (- redeem-cycle u33)))\n      (tokens (div-down (mul-down prev-shares-to-tokens (get amount request-details)) base-shares-to-tokens))\n      (updated-request-details (merge request-details { status: REVOKED })))\n    (asserts! (is-eq tx-sender (get requested-by request-details)) err-unauthorised)\n    (asserts! (is-eq PENDING (get status request-details)) err-request-finalized-or-revoked)\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 transfer-token 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 tokens (get requested-by request-details))))\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry set-redeem-shares-per-cycle redeem-cycle (- (get-redeem-shares-per-cycle-or-default redeem-cycle) (get amount request-details)))))\n    (print { notification: \"revoke-redeem\", payload: updated-request-details })\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry set-redeem-request request-id updated-request-details)))\n    (try! (rebase))\n\t\t(ok true)))\n\n;; private functions\n;;\n\n;; @desc triggers external event that claims all that's available and stake for another 32 cycles\n;; @param reward-cycle the target cycle to claim (and stake for current cycle + 32 cycles). reward-cycle must be < current cycle.\n(define-private (claim-and-stake (reward-cycle uint))\n  (let (\n      (current-cycle (unwrap! (get-reward-cycle block-height) err-staking-not-available))\n      (end-cycle-v2 (get-end-cycle-v2))\n      ;; claim all that's available to claim for the reward-cycle\n      (claimed (as-contract (try! (claim-staking-reward reward-cycle))))\n      (claimed-v2 (if (< end-cycle-v2 current-cycle) (as-contract (try! (reduce-position-v2))) (begin (try! (claim-and-stake-v2 reward-cycle)) u0)))\n      (tokens (+ (get to-return claimed) (get entitled-token claimed) claimed-v2))      \n      (redeeming (if (is-eq (get-redeem-shares-per-cycle-or-default reward-cycle) u0) u0\n        (div-down (mul-down (get-shares-to-tokens-per-cycle-or-default (- reward-cycle u1)) (get-redeem-shares-per-cycle-or-default reward-cycle)) (get-shares-to-tokens-per-cycle-or-default (- reward-cycle u33))))))\n    (asserts! (> current-cycle reward-cycle) err-reward-cycle-not-completed)\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry set-staked-cycle reward-cycle true)))\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 set-reserve (try! (get-next-base)))))\n    (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3-registry set-shares-to-tokens-per-cycle reward-cycle (get-shares-to-tokens ONE_8))))                            \n    (and (> (min tokens redeeming) u0) (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 burn (min tokens redeeming) 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3))))\n    (and (> (min tokens redeeming) u0) (as-contract (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 transfer-token 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex (min tokens redeeming) tx-sender))))    \n    (try! (fold stake-tokens-iter REWARD-CYCLE-INDEXES (ok { current-cycle: current-cycle, remaining: (- tokens (min tokens redeeming)) })))\n    (print { notification: \"claim-and-stake\", payload: { redeeming: redeeming, tokens: tokens }})\n    (ok true)))\n\n(define-private (sum-claimed (claimed-response (response (tuple (entitled-token uint) (to-return uint)) uint)) (prior (response uint uint)))\n  (match prior\n    ok-value (match claimed-response claimed (ok (+ ok-value (get to-return claimed) (get entitled-token claimed))) err (err err))\n    err-value (err err-value)))\n\n(define-private (stake-tokens-iter (cycles-to-stake uint) (previous-response (response { current-cycle: uint, remaining: uint } uint)))\n  (match previous-response\n    ok-value\n    (let (\n      (reward-cycle (+ (get current-cycle ok-value) cycles-to-stake))\n      (redeeming (if (is-eq (get-redeem-shares-per-cycle-or-default reward-cycle) u0) u0\n        (div-down (get-shares-to-tokens (get-redeem-shares-per-cycle-or-default reward-cycle)) (get-shares-to-tokens-per-cycle-or-default (- reward-cycle u33)))))\n      (returning (+ (get to-return (get-staker-at-cycle reward-cycle)) (get-staking-reward reward-cycle)))\n      (staking (if (is-eq cycles-to-stake max-cycles)\n        (get remaining ok-value)\n        (if (> returning redeeming)\n          u0\n          (if (> (get remaining ok-value) (- redeeming returning))\n            (- redeeming returning)\n            (get remaining ok-value))))))\n      (and (> staking u0) (as-contract (try! (stake-tokens staking cycles-to-stake))))\n      (ok { current-cycle: (get current-cycle ok-value), remaining: (- (get remaining ok-value) staking) }))\n    err-value previous-response))\n\n(define-private (get-user-id)\n  (default-to u0 (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2 get-user-id 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3)))\n\n(define-private (stake-tokens (amount-tokens uint) (lock-period uint))\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 stake-tokens amount-tokens lock-period))\n\n(define-private (claim-staking-reward (reward-cycle uint))\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 claim-staking-reward reward-cycle))\n\n(define-private (reduce-position-v2)\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 reduce-position-v2))\n\n(define-private (get-shares-to-tokens (dx uint))\n  (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3 get-shares-to-tokens dx))\n\n(define-private (claim-and-stake-v2 (reward-cycle uint))\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.auto-alex-v2 claim-and-stake reward-cycle))\n\n(define-private (get-end-cycle-v2)\n  (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.auto-alex-v2 get-end-cycle))\n\n(define-private (mul-down (a uint) (b uint))\n    (/ (* a b) ONE_8))\n\n(define-private (div-down (a uint) (b uint))\n  (if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n\n(define-private (max (a uint) (b uint)) (if (> a b) a b))\n(define-private (min (a uint) (b uint)) (if (< a b) a b))\n\n",
    "analysis": {
      "summary": "This contract facilitates the creation, staking, and redemption of autoALEX tokens, including governance functions to pause these activities.",
      "explanation": "The contract is designed for managing autoALEX tokens, allowing users to stake, mint, and redeem these tokens under certain conditions. It integrates with other contracts for token management and staking rewards, and includes governance features to pause creation and redemption processes.\n\n- Constants like `err-unauthorised` and `ONE_8` are defined for error handling and calculations <L5-14>.\n- Data variables `create-paused` and `redeem-paused` are used to control the flow of the contract operations based on governance decisions <L20-21>.\n- Read-only functions provide utilities for checking permissions, retrieving cycle information, and calculating shares and tokens <L25-82>.\n- Governance functions `pause-create` and `pause-redeem` allow authorized addresses to pause creation and redemption functionalities <L84-94>.\n- The `rebase`, `claim-and-mint`, `add-to-position`, `upgrade`, `request-redeem`, `finalize-redeem`, and `revoke-redeem` are public functions that handle the core functionality of staking, minting, upgrading, and redeeming autoALEX tokens <L96-269>.\n- Private functions support the public API by performing calculations, interacting with other contracts for rewards and staking, and managing internal state <L271-349>.\n\nEach function is carefully designed to interact with the broader ecosystem of contracts within the Stacks blockchain, ensuring that token management is consistent with the rules defined by the autoALEX protocol. Error handling is thorough, with specific error codes for different failure states. The contract also emphasizes security and governance, with checks to ensure that only authorized users can pause critical functionalities.",
      "tags": [
        "DeFi",
        "staking",
        "governance",
        "token-management"
      ]
    }
  },
  {
    "rank": 68,
    "contract": "SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.cross-peg-in-endpoint-v2-04",
    "calls": 494,
    "source": ";; SPDX-License-Identifier: BUSL-1.1\n\n(impl-trait 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.extension-trait.extension-trait)\n(impl-trait 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.proposal-trait.proposal-trait)\n\n(use-trait ft-trait 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.trait-sip-010.sip-010-trait)\n\n(define-constant ERR-NOT-AUTHORIZED (err u1000))\n(define-constant ERR-TOKEN-NOT-AUTHORIZED (err u1001))\n(define-constant ERR-DUPLICATE-SIGNATURE (err u1009))\n(define-constant ERR-ORDER-HASH-MISMATCH (err u1010))\n(define-constant ERR-INVALID-SIGNATURE (err u1011))\n(define-constant ERR-UKNOWN-RELAYER (err u1012))\n(define-constant ERR-REQUIRED-VALIDATORS (err u1013))\n(define-constant ERR-ORDER-ALREADY-SENT (err u1014))\n(define-constant ERR-PAUSED (err u1015))\n(define-constant ERR-INVALID-VALIDATOR (err u1016))\n(define-constant ERR-INVALID-INPUT (err u1020))\n(define-constant ERR-NOT-IN-WHITELIST (err u1021))\n(define-constant ERR-INVALID-TOKEN (err u1022))\n(define-constant ERR-SLIPPAGE (err u1023))\n\n(define-constant MAX_UINT u340282366920938463463374607431768211455)\n(define-constant ONE_8 u100000000)\n\n(define-constant structured-data-prefix 0x534950303138)\n;; const domainHash = structuredDataHash(\n;;   tupleCV({\n;;     name: stringAsciiCV('XLink Bridge'),\n;;     version: stringAsciiCV('0.0.2'),\n;;     'chain-id': uintCV(new StacksMainnet().chainId) | uintCV(new StacksMocknet().chainId),\n;;   }),\n;; );\n(define-constant message-domain-main 0x89a7c46bfde2bbffaf08240dd538c0da498e3645d938655e214bd9d67437747a) ;;mainnet\n(define-constant message-domain-test 0xe104d090220bc57abaadbad4b9349d344954fe4de833e73df2013d5236a2b9ec) ;; testnet\n\n(define-data-var is-paused bool true)\n\n(define-data-var use-whitelist bool false)\n(define-map whitelisted-users principal bool)\n\n;; public calls\n\n;; read-only calls\n\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao) (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao is-extension contract-caller)) ERR-NOT-AUTHORIZED)))\n\n(define-read-only (message-domain)\n  (if (is-eq chain-id u1) message-domain-main message-domain-test))\n\n(define-read-only (get-use-whitelist)\n  (var-get use-whitelist))\n\n(define-read-only (is-whitelisted (user principal))\n  (default-to false (map-get? whitelisted-users user)))\n\n(define-read-only (get-paused)\n  (var-get is-paused))\n\n(define-read-only (is-approved-relayer-or-default (relayer principal))\n  (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 is-approved-relayer-or-default relayer))\n\n(define-read-only (get-validator-or-fail (validator principal))\n  (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 get-validator-or-fail validator))\n\n(define-read-only (get-required-validators)\n  (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 get-required-validators))\n\n(define-read-only (get-approved-chain-or-fail (src-chain-id uint))\n  (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 get-approved-chain-or-fail src-chain-id))\n\n(define-read-only (get-token-reserve-or-default (pair { token: principal, chain-id: uint }))\n  (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 get-token-reserve-or-default pair))\n\n(define-read-only (get-min-fee-or-default (pair { token: principal, chain-id: uint }))\n  (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 get-min-fee-or-default pair))\n\n(define-read-only (get-approved-pair-or-fail (pair { token: principal, chain-id: uint }))\n  (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 get-approved-pair-or-fail pair))\n\n(define-read-only (is-order-sent-or-default (order-hash (buff 32)))\n  (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 is-order-sent-or-default order-hash))\n\n(define-read-only (is-order-validated-by-or-default (order-hash (buff 32)) (validator principal))\n  (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 is-order-validated-by-or-default order-hash validator))\n\n;; salt should be tx hash of the source chain\n(define-read-only (create-cross-order (order { from: (buff 128), to: (buff 128), token-in: principal, token-out: principal, amount-in-fixed: uint, src-chain-id: uint, dest-chain-id: (optional uint), salt: (buff 256) } ))\n  (ok (unwrap! (to-consensus-buff? order) ERR-INVALID-INPUT)))\n\n(define-read-only (decode-cross-order (order-buff (buff 128)))\n  (ok (unwrap! (from-consensus-buff? { from: (buff 128), to: (buff 128), token-in: principal, token-out: principal, amount-in-fixed: uint, src-chain-id: uint, dest-chain-id: (optional uint), salt: (buff 256) } order-buff) ERR-INVALID-INPUT)))\n\n(define-read-only (hash-cross-order (order { from: (buff 128), to: (buff 128), token-in: principal, token-out: principal, amount-in-fixed: uint, src-chain-id: uint, dest-chain-id: (optional uint), salt: (buff 256) } ))\n\t(ok (sha256 (try! (create-cross-order order)))))\n\n(define-read-only (validate-cross-order (order { from: (buff 128), to: (buff 128), token-in: principal, token-out: principal, amount-in-fixed: uint, src-chain-id: uint, dest-chain-id: (optional uint), salt: (buff 256) }) (token-in-trait <ft-trait>) (token-out-trait <ft-trait>))\n  (let (\n      (base-token-in (match (contract-call? .cross-router-v2-03 get-approved-wrapped-or-fail (get token-in order)) ok-value ok-value err-value (get token-in order)))\n      (base-token-out (match (contract-call? .cross-router-v2-03 get-approved-wrapped-or-fail (get token-out order)) ok-value ok-value err-value (get token-out order))))\n    (try! (check-trait token-out-trait (get token-out order)))\n    (try! (check-trait token-in-trait (get token-in order)))\n    (asserts! (is-eq base-token-in base-token-out) ERR-INVALID-TOKEN)    \n    (contract-call? .cross-router-v2-03 validate-route (get amount-in-fixed order) (list (get token-out order)) (list ) (get token-out order) none { address: (get to order), chain-id: (get dest-chain-id order) })))\n\n;; governance calls\n\n(define-public (set-paused (paused bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set is-paused paused))))\n\n(define-public (apply-whitelist (new-use-whitelist bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set use-whitelist new-use-whitelist))))\n\n(define-public (whitelist (user principal) (whitelisted bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (map-set whitelisted-users user whitelisted))))\n\n(define-public (whitelist-many (users (list 2000 principal)) (whitelisted (list 2000 bool)))\n  (ok (map whitelist users whitelisted)))\n\n(define-public (execute (sender principal))\n\t(begin\t\t\n\t\t(try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao set-extensions (list\n\t\t\t{ extension: 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-peg-in-endpoint-v2-01, enabled: false }\n      { extension: 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-peg-in-endpoint-v2-02, enabled: false }\n      { extension: .cross-peg-in-endpoint-v2-03, enabled: true })))\n    (ok true)))\n\n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true))\n\n;; privileged calls\n\n(define-public (transfer-to-cross\n    (order { from: (buff 128), to: (buff 128), token-in: principal, token-out: principal, amount-in-fixed: uint, src-chain-id: uint, dest-chain-id: (optional uint), salt: (buff 256) })    \n    (token-in-trait <ft-trait>) (token-out-trait <ft-trait>)\n    (signature-packs (list 100 { signer: principal, order-hash: (buff 32), signature: (buff 65)})))\n    (let (\n        (order-hash (try! (hash-cross-order order)))\n        (common-data (try! (transfer-common order-hash (get token-in order) (get src-chain-id order) signature-packs)))\n        (token-details (get token-details common-data))\n        (print-msg (merge order { object: \"cross-bridge-endpoint\", action: \"transfer-to-cross\" })))\n      (if (get burnable token-details) \n        (as-contract (try! (contract-call? token-in-trait mint-fixed (get amount-in-fixed order) tx-sender)))\n        (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 transfer-fixed token-in-trait (get amount-in-fixed order) tx-sender))))\n      (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 add-token-reserve { token: (get token-in order), chain-id: (get src-chain-id order) } (get amount-in-fixed order))))\n      (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 set-order-sent order-hash true)))\n      (match (validate-cross-order order token-in-trait token-out-trait)\n        ok-value\n        (begin\n          (print (merge print-msg { success: true }))\n          (as-contract (contract-call? .cross-router-v2-03 route (get amount-in-fixed order) (list token-out-trait) (list ) token-out-trait none { address: (get to order), chain-id: (get dest-chain-id order) })))\n        err-value\n        (begin\n          (print (merge print-msg { success: false, err: err-value }))          \n          (as-contract (refund (get amount-in-fixed order) (get from order) token-in-trait (get src-chain-id order)))))))\n\n;; internal functions\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value)))\n\n(define-private (check-trait (token-trait <ft-trait>) (token principal))\n  (ok (asserts! (is-eq (contract-of token-trait) token) ERR-INVALID-TOKEN)))\n  \n(define-private (transfer-common (order-hash (buff 32)) (token principal) (src-chain-id uint) (signature-packs (list 100 { signer: principal, order-hash: (buff 32), signature: (buff 65)})))\n  (let (\n      (token-details (try! (get-approved-pair-or-fail { token: token, chain-id: src-chain-id })))\n      (chain-details (try! (get-approved-chain-or-fail src-chain-id))))\n    (asserts! (not (get-paused)) ERR-PAUSED)\n    (asserts! (is-approved-relayer-or-default tx-sender) ERR-UKNOWN-RELAYER)\n    (asserts! (>= (len signature-packs) (get-required-validators)) ERR-REQUIRED-VALIDATORS)\n    (asserts! (not (is-order-sent-or-default order-hash)) ERR-ORDER-ALREADY-SENT)\n    (try! (fold validate-signature-iter signature-packs (ok { order-hash: order-hash, src-chain-id: src-chain-id })))\n    (ok { token-details: token-details, chain-details: chain-details })))\n\n(define-private (validate-order (order-hash (buff 32)) (src-chain-id uint) (signature-pack { signer: principal, order-hash: (buff 32), signature: (buff 65)}))\n  (let (\n      (validator (try! (get-validator-or-fail (get signer signature-pack)))))\n    (asserts! (not (is-order-validated-by-or-default order-hash (get signer signature-pack))) ERR-DUPLICATE-SIGNATURE)\n    (asserts! (is-eq order-hash (get order-hash signature-pack)) ERR-ORDER-HASH-MISMATCH)\n    (asserts! (is-eq src-chain-id (get chain-id validator)) ERR-INVALID-VALIDATOR)\n    (asserts! (is-eq (secp256k1-recover? (sha256 (concat structured-data-prefix (concat (message-domain) order-hash))) (get signature signature-pack)) (ok (get pubkey validator))) ERR-INVALID-SIGNATURE)\n    (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 set-order-validated-by { order-hash: order-hash, validator: (get signer signature-pack) } true)))\n    (ok { order-hash: order-hash, src-chain-id: src-chain-id })))\n\n(define-private (validate-signature-iter (signature-pack { signer: principal, order-hash: (buff 32), signature: (buff 65)}) (previous-response (response { order-hash: (buff 32), src-chain-id: uint } uint)))\n  (match previous-response prev-ok (validate-order (get order-hash prev-ok) (get src-chain-id prev-ok) signature-pack) prev-err previous-response))\n\n(define-private (refund (amount uint) (from (buff 128)) (token-trait <ft-trait>) (the-chain-id uint))\n  (let (\n\t\t  (pair-details { token: (contract-of token-trait), chain-id: the-chain-id })\n\t\t  (token-details (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 get-approved-pair-or-fail pair-details)))\n\t\t  (no-fee { approved: (get approved token-details), burnable: (get burnable token-details), min-amount: (get min-amount token-details), max-amount: (get max-amount token-details), fee: u0, min-fee: u0 }))\n    (ok (and (> amount u0) (begin\n\t\t  (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 set-approved-pair pair-details no-fee))\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-peg-out-endpoint-v2-01 transfer-to-unwrap token-trait amount the-chain-id from))\t\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-bridge-registry-v2-01 set-approved-pair pair-details (merge no-fee { fee: (get fee token-details), min-fee: (get min-fee token-details) })))\n      true)))))\n\n(define-private (mul-down (a uint) (b uint))\n  (/ (* a b) ONE_8))\n\n(define-private (div-down (a uint) (b uint))\n  (if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n\n(define-private (max (a uint) (b uint))\n  (if (<= a b) b a))\n",
    "analysis": {
      "summary": "This contract facilitates cross-chain token transfers by managing orders, validating them, and interacting with a registry for token and chain information.",
      "explanation": "This Clarity smart contract is designed for cross-chain token transfers, integrating with external traits and registries to validate and execute orders. It supports pausing/unpausing the contract, whitelisting users, and executing cross-chain transfers with validation steps for orders and signatures.\n\n- The contract implements two external traits for extension and proposal functionalities and uses another trait for fungible tokens (FTs) <L1-3>.\n- It defines a series of error codes for various failure states <L5-18>.\n- Constants like `MAX_UINT` and domain hashes for different networks are defined <L19-24>.\n- State variables include a pause toggle and a whitelist toggle, along with a map for whitelisted users <L26-29>.\n- Several read-only functions provide checks and information retrieval, such as checking if a caller is a DAO or an extension, getting message domains based on the chain ID, and verifying if a user is whitelisted <L31-76>.\n- The contract includes functions to create, decode, hash, and validate cross-orders. These functions interact with external contracts to verify token traits, validate routes, and ensure orders meet specified criteria <L78-85>.\n- Governance functions allow toggling the paused state, applying whitelists, and managing whitelisted users <L87-101>.\n- The `transfer-to-cross` function is a key public method that executes the cross-chain transfer, involving multiple validation steps, token reserve adjustments, and potentially refunding the order amount if validations fail <L103-132>.\n- Private functions handle error checking, trait checking, common transfer validations, signature validations, and refunds. These functions are essential for maintaining contract integrity and ensuring only valid and authorized operations are performed <L134-187>.\n- Utility functions for mathematical operations and comparisons are also included <L189-201>.\n\nOverall, this contract serves as a bridge endpoint, coordinating with a registry and router to facilitate secure and validated cross-chain transfers of tokens.",
      "tags": [
        "cross-chain",
        "token-transfer",
        "governance",
        "whitelist"
      ]
    }
  },
  {
    "rank": 69,
    "contract": "SP1QMFV1W1T3CX70W6V95VWGSBJA3WFMVZRABE1FN.univ2-router",
    "calls": 493,
    "source": "(define-constant A tx-sender)\n\n(define-public (swap-x-for-y (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\ta0 u0)))\n\t\t(a1 (unwrap-panic (element-at b0 u1)))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta1 u1)))\n\t\t(a2 (get amt-out b1))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (swap-y-for-x (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta0 u1)))\n\t\t(a1 (get amt-out b0))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\ta1 u0)))\n\t\t(a2 (unwrap-panic (element-at b1 u0)))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (add-to-position (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta0 u1)))\n\t\t(a1 (get amt-out b0))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi\n\t\t\tu100000000 (* a1 u100) none)))\n\t\t(a2 (/ (get dx b1) u100))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (reduce-position (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi\n\t\t\tu100000000 (* a0 u100) none)))\n\t\t(a1 (/ (get dy b0) u100))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta1 u1)))\n\t\t(a2 (get amt-out b1))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))",
    "analysis": {
      "summary": "This contract facilitates token swaps and position adjustments on the Stacks blockchain, interacting with multiple DeFi protocols.",
      "explanation": "The contract contains functions to swap tokens and adjust liquidity positions across different DeFi protocols on the Stacks blockchain. Each function ensures that only a predefined address (A) can call them, transferring STX or tokens as specified.\n\n- <L1> A constant A is defined as the tx-sender, restricting contract interactions to this address.\n\n- <L3-30> `swap-x-for-y` swaps tokens by calling external contracts (`arkadiko-swap-v2-1` and `univ2-router`), ensuring the output is greater than the input.\n\n- <L32-59> `swap-y-for-x` performs a similar swap in the opposite direction, using the same external contracts.\n\n- <L61-88> `add-to-position` increases liquidity in a pool, calling `univ2-router` and an AMM pool contract, requiring the output to exceed the input.\n\n- <L90-117> `reduce-position` decreases liquidity, swapping tokens in reverse order and ensuring the final output is greater than the input.\n\nEach function uses `asserts!` to check conditions, `try!` and `unwrap-panic` for error handling, and `contract-call?` for interacting with external contracts. The use of `as-contract` and `tx-sender` is crucial for executing transactions as the contract itself or validating the caller's address.",
      "tags": [
        "DeFi",
        "token-swap",
        "liquidity-management",
        "protocol-interaction"
      ]
    }
  },
  {
    "rank": 70,
    "contract": "SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.cross-peg-out-endpoint-v2-01",
    "calls": 474,
    "source": "(impl-trait .extension-trait.extension-trait)\n(use-trait ft-trait .trait-sip-010.sip-010-trait)\n(define-constant ERR-NOT-AUTHORIZED (err u1000))\n(define-constant ERR-PAUSED (err u1015))\n(define-constant ERR-USER-NOT-WHITELISTED (err u1016))\n(define-constant ERR-AMOUNT-LESS-THAN-MIN-FEE (err u1017))\n(define-constant ERR-INVALID-AMOUNT (err u1019))\n(define-constant MAX_UINT u340282366920938463463374607431768211455)\n(define-constant ONE_8 u100000000)\n(define-data-var is-paused bool true)\n(define-data-var use-whitelist bool false)\n(define-map whitelisted-users principal bool)\n(define-public (transfer-to-unwrap (token-trait <ft-trait>) (amount-in-fixed uint) (dest-chain-id uint) (settle-address (buff 256)))\n  (let (\n      (sender tx-sender)\n      (token (contract-of token-trait))\n      (validation-data (try! (validate-transfer-to-unwrap sender token amount-in-fixed dest-chain-id)))\n      (chain-details (get chain-details validation-data))\n      (token-details (get token-details validation-data))\n      (fee (max (mul-down amount-in-fixed (get fee token-details)) (get-min-fee-or-default { token: token, chain-id: dest-chain-id })))\n      (net-amount (- amount-in-fixed fee)))\n    (if (get burnable token-details)\n      (begin\n        (as-contract (try! (contract-call? token-trait burn-fixed net-amount sender)))\n        (and (> fee u0) (try! (contract-call? token-trait transfer-fixed fee sender .cross-bridge-registry-v2-01 none))))\n      (try! (contract-call? token-trait transfer-fixed amount-in-fixed sender .cross-bridge-registry-v2-01 none)))\n    (as-contract (try! (contract-call? .cross-bridge-registry-v2-01 add-accrued-fee token fee)))\n    (as-contract (try! (contract-call? .cross-bridge-registry-v2-01 remove-token-reserve { token: token, chain-id: dest-chain-id } amount-in-fixed)))\n    (print { object: \"cross-bridge-endpoint\", action: \"transfer-to-unwrap\", user: sender, chain: (get name chain-details), dest-chain-id: dest-chain-id, net-amount: net-amount, fee-amount: fee, settle-address: settle-address, token: token })\n    (ok true)))\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) ERR-NOT-AUTHORIZED)))\n(define-read-only (validate-transfer-to-unwrap (sender principal) (token principal) (amount-in-fixed uint) (dest-chain-id uint))\n  (let (\n      (chain-details (try! (get-approved-chain-or-fail dest-chain-id)))\n      (token-details (try! (get-approved-pair-or-fail { token: token, chain-id: dest-chain-id }))))\n    (asserts! (not (get-paused)) ERR-PAUSED)\n    (asserts! (or (not (get-use-whitelist)) (is-whitelisted sender)) ERR-USER-NOT-WHITELISTED)\n    (asserts! (and (>= amount-in-fixed (get min-amount token-details)) (<= amount-in-fixed (get max-amount token-details)) (<= amount-in-fixed (get-token-reserve-or-default { token: token, chain-id: dest-chain-id }))) ERR-INVALID-AMOUNT)\n    (asserts! (> amount-in-fixed (get-min-fee-or-default { token: token, chain-id: dest-chain-id })) ERR-AMOUNT-LESS-THAN-MIN-FEE)\n    (ok { amount: amount-in-fixed, chain-details: chain-details, token: token, token-details: token-details })))\n(define-read-only (get-use-whitelist)\n  (var-get use-whitelist))\n(define-read-only (is-whitelisted (user principal))\n  (default-to false (map-get? whitelisted-users user)))\n(define-read-only (get-paused)\n  (var-get is-paused))\n(define-read-only (get-approved-chain-or-fail (dest-chain-id uint))\n  (contract-call? .cross-bridge-registry-v2-01 get-approved-chain-or-fail dest-chain-id))\n(define-read-only (get-token-reserve-or-default (pair { token: principal, chain-id: uint }))\n  (contract-call? .cross-bridge-registry-v2-01 get-token-reserve-or-default pair))\n(define-read-only (get-min-fee-or-default (pair { token: principal, chain-id: uint }))\n  (contract-call? .cross-bridge-registry-v2-01 get-min-fee-or-default pair))\n(define-read-only (get-approved-pair-or-fail (pair { token: principal, chain-id: uint }))\n  (contract-call? .cross-bridge-registry-v2-01 get-approved-pair-or-fail pair))\n(define-public (set-paused (paused bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set is-paused paused))))\n(define-public (apply-whitelist (new-use-whitelist bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set use-whitelist new-use-whitelist))))\n(define-public (whitelist (user principal) (whitelisted bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (map-set whitelisted-users user whitelisted))))\n(define-public (whitelist-many (users (list 2000 principal)) (whitelisted (list 2000 bool)))\n  (ok (map whitelist users whitelisted)))\n(define-private (mul-down (a uint) (b uint))\n  (/ (* a b) ONE_8))\n(define-private (div-down (a uint) (b uint))\n  (if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n(define-private (max (a uint) (b uint))\n  (if (<= a b) b a))\n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true))",
    "analysis": {
      "summary": "This contract facilitates cross-chain token transfers, allowing tokens to be 'unwrapped' on a destination chain. It includes functionality for fee calculation, whitelisting users, and pausing/unpausing the contract.",
      "explanation": "The contract implements a cross-chain transfer system where tokens can be sent from the Stacks blockchain to another chain. Key functionalities include transferring tokens with fee deductions, managing a whitelist of users who can perform transfers, and toggling the contract's active state.\n\n- The `transfer-to-unwrap` function <L20-36> is the core of this contract, allowing users to transfer tokens to another blockchain. It calculates fees, checks if the token is burnable, and performs the transfer, adjusting for fees. It also logs the transfer details.\n- Error constants <L4-8> define various error states, such as unauthorized access or invalid amounts.\n- Data variables `is-paused` and `use-whitelist` <L9-10> control the contract's operational state and whether a whitelist is used.\n- The `whitelisted-users` map <L11> tracks which users are allowed to perform transfers.\n- `validate-transfer-to-unwrap` <L38-49> checks for paused state, whitelist status, and amount validity before allowing a transfer.\n- Whitelist management functions (`apply-whitelist`, `whitelist`, `whitelist-many`) <L59-71> allow the contract administrator to manage who can perform transfers.\n- Utility functions `mul-down`, `div-down`, and `max` <L73-81> are used for fee calculations and comparisons.\n- The contract interacts with an external contract `.cross-bridge-registry-v2-01` <L50-56> to get chain and token details, ensuring transfers are made to approved destinations with valid tokens.\n\nThis contract is designed with security and flexibility in mind, using checks to ensure operations are authorized and conditions are met before proceeding with potentially irreversible actions.",
      "tags": [
        "cross-chain",
        "token-transfer",
        "whitelist",
        "fee-management",
        "pausable"
      ]
    }
  },
  {
    "rank": 71,
    "contract": "SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k",
    "calls": 469,
    "source": "\n(impl-trait .stackswap-swap-trait-v1c.stackswap-swap)\n\n(use-trait sip-010-token .sip-010-v1a.sip-010-trait)\n(use-trait liquidity-token .liquidity-token-trait-v4c.liquidity-token-trait)\n\n(define-constant ERR_NOT_OWNER (err u4161))\n(define-constant ERR_INVALID_ROUTER (err u4162))\n(define-constant ERR_PAIR_ALREADY_EXISTS (err u4163))\n(define-constant ERR_TOO_MUCH_SLIPPAGE (err u4165))\n(define-constant ERR_VALUE_OUT_OF_RANGE (err u4168))\n(define-constant ERR_NO_FEE_X (err u4169))\n(define-constant ERR_NO_FEE_Y (err u4170))\n(define-constant ERR_NOT_FEE_TO_ADDRESS (err u4171))\n(define-constant ERR_SAFE_TRANSFER_AMOUNT (err u4174))\n(define-constant ERR_SAFE_BURN_AMOUNT (err u4175))\n(define-constant ERR_SAFE_MINT_AMOUNT (err u4176))\n(define-constant ERR_DAO_ACCESS (err u4177))\n(define-constant ERR_MAP_GET (err u4178))\n\n(define-constant FEE_1 u997)\n(define-constant FEE_2 u1000)\n(define-constant FEE_3 u5)\n(define-constant FEE_4 u10000)\n\n(define-map pairs-map\n  uint\n  {\n    token-x: principal,\n    token-y: principal,\n    liquidity-token: principal\n  }\n)\n\n(define-map pairs-token-map\n  principal\n  bool\n)\n\n(define-map pairs-data-map\n  {\n    token-x: principal,\n    token-y: principal,\n  }\n  {\n    liquidity-token: principal,\n    pair-id: uint\n  }\n)\n\n(define-data-var pair-count uint u0)\n\n\n(define-read-only (get-pair-details (token-x principal) (token-y principal))\n  (unwrap-panic (map-get? pairs-data-map { token-x: token-x, token-y: token-y }))\n)\n\n(define-read-only (get-pair-contracts (pair-id uint))\n  (unwrap-panic (map-get? pairs-map pair-id))\n)\n\n(define-read-only (get-pair-count)\n  (ok (var-get pair-count))\n)\n\n(define-private (safe-burn (lp <liquidity-token>) (user principal) (amount uint))\n  (let (\n      (start-amount-user (try! (contract-call? lp get-balance user)))\n      (transfer-result (try! (contract-call? lp burn user amount)))\n      (end-amount-user (try! (contract-call? lp get-balance user)))\n    )\n    (asserts! (is-eq amount (- start-amount-user end-amount-user)) ERR_SAFE_BURN_AMOUNT)\n    (ok true)\n  )\n)\n\n(define-private (safe-mint (lp <liquidity-token>) (user principal) (amount uint))\n  (let (\n      (start-amount-user (try! (contract-call? lp get-balance user)))\n      (transfer-result (try! (contract-call? lp mint user amount)))\n      (end-amount-user (try! (contract-call? lp get-balance user)))\n    )\n    (asserts! (is-eq amount (- end-amount-user start-amount-user)) ERR_SAFE_MINT_AMOUNT)\n    (ok true)\n  )\n)\n\n(define-private (safe-transfer (x-to-lp bool) (y-to-lp bool) (dx uint) (dy uint) (token-x-trait <sip-010-token>) (token-y-trait <sip-010-token>) (token-liquidity-trait <liquidity-token>))\n    (let \n      (\n        (start-amount-x-lp (try! (contract-call? token-x-trait get-balance (contract-of token-liquidity-trait))))\n        (start-amount-x-user (try! (contract-call? token-x-trait get-balance tx-sender)))\n        (start-amount-y-lp (try! (contract-call? token-y-trait get-balance (contract-of token-liquidity-trait))))\n        (start-amount-y-user (try! (contract-call? token-y-trait get-balance tx-sender)))\n        (transfer-x-result \n          (if x-to-lp\n            (try! (contract-call? token-x-trait transfer dx tx-sender (contract-of token-liquidity-trait) none))\n            (try! (contract-call? token-liquidity-trait transfer-token dx token-x-trait tx-sender))\n          )\n        )\n        (transfer-y-result \n          (if y-to-lp\n            (try! (contract-call? token-y-trait transfer dy tx-sender (contract-of token-liquidity-trait) none))\n            (try! (contract-call? token-liquidity-trait transfer-token dy token-y-trait tx-sender))\n          )\n        )\n        (end-amount-x-lp (try! (contract-call? token-x-trait get-balance (contract-of token-liquidity-trait))))\n        (end-amount-x-user (try! (contract-call? token-x-trait get-balance tx-sender)))\n        (end-amount-y-lp (try! (contract-call? token-y-trait get-balance (contract-of token-liquidity-trait))))\n        (end-amount-y-user (try! (contract-call? token-y-trait get-balance tx-sender)))\n      )\n        (if x-to-lp\n          (begin\n            (asserts! (is-eq dx (- end-amount-x-lp start-amount-x-lp)) ERR_SAFE_TRANSFER_AMOUNT)\n            (asserts! (is-eq dx (- start-amount-x-user end-amount-x-user)) ERR_SAFE_TRANSFER_AMOUNT)\n          )\n          (begin\n            (asserts! (is-eq dx (- end-amount-x-user start-amount-x-user)) ERR_SAFE_TRANSFER_AMOUNT)\n            (asserts! (is-eq dx (- start-amount-x-lp end-amount-x-lp)) ERR_SAFE_TRANSFER_AMOUNT)\n          )\n        )\n        (if y-to-lp\n          (begin\n            (asserts! (is-eq dy (- end-amount-y-lp start-amount-y-lp)) ERR_SAFE_TRANSFER_AMOUNT)\n            (asserts! (is-eq dy (- start-amount-y-user end-amount-y-user)) ERR_SAFE_TRANSFER_AMOUNT)\n          )\n          (begin\n            (asserts! (is-eq dy (- end-amount-y-user start-amount-y-user)) ERR_SAFE_TRANSFER_AMOUNT)\n            (asserts! (is-eq dy (- start-amount-y-lp end-amount-y-lp)) ERR_SAFE_TRANSFER_AMOUNT)\n          )\n        )\n      (ok true)\n    )\n)\n\n(define-public (create-pair (token-x-trait <sip-010-token>) (token-y-trait <sip-010-token>) (token-liquidity-trait <liquidity-token>) (pair-name (string-ascii 32)) (x uint) (y uint))\n  (let\n    (\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (token-liquidity (contract-of token-liquidity-trait))\n      (pair-id (+ (var-get pair-count) u1))\n      (pair-data {\n        shares-total: u0,\n        balance-x: u0,\n        balance-y: u0,\n        fee-balance-x: u0,\n        fee-balance-y: u0,\n        fee-to-address: (contract-call? .stackswap-dao-v5k get-payout-address),\n        liquidity-token: (contract-of token-liquidity-trait),\n        name: pair-name,\n      })\n    )\n    (asserts!\n      (and\n        (is-none (map-get? pairs-data-map { token-x: token-x, token-y: token-y }))\n        (is-none (map-get? pairs-data-map { token-x: token-y, token-y: token-x }))\n        (is-none (map-get? pairs-token-map token-liquidity))\n      )\n      ERR_PAIR_ALREADY_EXISTS\n    )\n    (asserts! (is-eq contract-caller (unwrap-panic (contract-call? .stackswap-dao-v5k get-qualified-name-by-name \"one-step-mint\"))) ERR_DAO_ACCESS)\n    (try! (contract-call? token-liquidity-trait initialize-swap token-x token-y))\n    (try! (contract-call? token-liquidity-trait set-lp-data pair-data token-x token-y))\n\n    (map-set pairs-data-map { token-x: token-x, token-y: token-y } {liquidity-token: (contract-of token-liquidity-trait), pair-id: pair-id})\n    (map-set pairs-token-map token-liquidity true)\n    (map-set pairs-map pair-id { token-x: token-x, token-y: token-y, liquidity-token: (contract-of token-liquidity-trait)})\n    (var-set pair-count pair-id)\n\n    (try! (add-to-position token-x-trait token-y-trait token-liquidity-trait x y))\n    (print { object: \"pair\", action: \"created\", data: pair-data })\n    (ok true)\n  )\n)\n\n(define-public (add-to-position (token-x-trait <sip-010-token>) (token-y-trait <sip-010-token>) (token-liquidity-trait <liquidity-token>) (x uint) (y uint) )\n  (let\n    (\n      (pair (try! (contract-call? token-liquidity-trait get-lp-data) ))\n      (balance-x (get balance-x pair))\n      (balance-y (get balance-y pair))\n      (new-shares\n        (if (is-eq (get shares-total pair) u0)\n          (sqrti (* x y))\n          (/ (* x (get shares-total pair)) balance-x)\n        )\n      )\n      (new-y\n        (if (is-eq (get shares-total pair) u0)\n          y\n          (/ (* x balance-y) balance-x)\n        )\n      )\n      (pair-updated (merge pair {\n        shares-total: (+ new-shares (get shares-total pair)),\n        balance-x: (+ balance-x x),\n        balance-y: (+ balance-y new-y)\n      }))\n    )\n\n    (asserts! (or (contract-call? .stackswap-security-list-v1a is-secure-router-or-user contract-caller) (is-eq contract-caller (unwrap-panic (contract-call? .stackswap-dao-v5k get-qualified-name-by-name \"one-step-mint\")))) ERR_INVALID_ROUTER)\n\n    (try! (safe-transfer true true x new-y token-x-trait token-y-trait token-liquidity-trait))\n\n    (try! (contract-call? token-liquidity-trait set-lp-data pair-updated (contract-of token-x-trait) (contract-of token-y-trait)))\n    (try! (safe-mint token-liquidity-trait tx-sender new-shares))\n    (print { object: \"pair\", action: \"liquidity-added\", data: pair-updated })\n    (ok true)\n  )\n)\n\n(define-public (reduce-position (token-x-trait <sip-010-token>) (token-y-trait <sip-010-token>) (token-liquidity-trait <liquidity-token>) (percent uint))\n  (let\n    (\n      (valid (asserts! (<= percent u100) ERR_VALUE_OUT_OF_RANGE))\n      (pair (try! (contract-call? token-liquidity-trait get-lp-data)))\n      (balance-x (get balance-x pair))\n      (balance-y (get balance-y pair))\n      (shares (try! (contract-call? token-liquidity-trait get-balance tx-sender)))\n      (shares-total (get shares-total pair))\n      (withdrawal (/ (* shares percent) u100))\n      (withdrawal-x (/ (* withdrawal balance-x) shares-total))\n      (withdrawal-y (/ (* withdrawal balance-y) shares-total))\n      (pair-updated\n        (merge pair\n          {\n            shares-total: (- shares-total withdrawal),\n            balance-x: (- (get balance-x pair) withdrawal-x),\n            balance-y: (- (get balance-y pair) withdrawal-y)\n          }\n        )\n      )\n    )\n\n    (asserts! (contract-call? .stackswap-security-list-v1a is-secure-router-or-user contract-caller) ERR_INVALID_ROUTER)\n    (try! (contract-call? token-liquidity-trait set-lp-data pair-updated (contract-of token-x-trait) (contract-of token-y-trait)))\n\n    (try! (safe-transfer false false withdrawal-x withdrawal-y token-x-trait token-y-trait token-liquidity-trait))\n\n    (try! (safe-burn token-liquidity-trait tx-sender withdrawal))\n\n    (print { object: \"pair\", action: \"liquidity-removed\", data: pair-updated })\n    (ok (list withdrawal-x withdrawal-y))\n  )\n)\n\n\n(define-public (swap-x-for-y (token-x-trait <sip-010-token>) (token-y-trait <sip-010-token>) (token-liquidity-trait <liquidity-token>) (dx uint) (min-dy uint))\n  (let\n    (\n      (pair (try! (contract-call? token-liquidity-trait get-lp-data)))\n      (balance-x (get balance-x pair))\n      (balance-y (get balance-y pair))\n      (dy (/ (* FEE_1 balance-y dx) (+ (* FEE_2 balance-x) (* FEE_1 dx)))) \n      (fee (/ (* FEE_3 dx) FEE_4))\n      (pair-updated\n        (merge pair\n          {\n            balance-x: (+ (get balance-x pair) (- dx fee)),\n            balance-y: (- (get balance-y pair) dy),\n            fee-balance-x: (+ fee (get fee-balance-x pair))\n          }\n        )\n      )\n    )\n    (asserts! (contract-call? .stackswap-security-list-v1a is-secure-router-or-user contract-caller) ERR_INVALID_ROUTER)\n\n    (try! (contract-call? token-liquidity-trait set-lp-data pair-updated (contract-of token-x-trait) (contract-of token-y-trait)))\n    (print { object: \"pair\", action: \"swap-x-for-y\", data: pair-updated })\n\n    (asserts! (< min-dy dy) ERR_TOO_MUCH_SLIPPAGE)\n    (try! (safe-transfer true false dx dy token-x-trait token-y-trait token-liquidity-trait))\n\n    (ok (list dx dy))\n  )\n)\n\n(define-public (swap-y-for-x (token-x-trait <sip-010-token>) (token-y-trait <sip-010-token>) (token-liquidity-trait <liquidity-token>) (dy uint) (min-dx uint))\n  (let (\n        (pair (try! (contract-call? token-liquidity-trait get-lp-data)))\n        (balance-x (get balance-x pair))\n        (balance-y (get balance-y pair))\n        (dx (/ (* FEE_1 balance-x dy) (+ (* FEE_2 balance-y) (* FEE_1 dy)))) \n        (fee (/ (* FEE_3 dy) FEE_4))\n        (pair-updated (merge pair\n          {\n            balance-x: (- (get balance-x pair) dx),\n            balance-y: (+ (get balance-y pair) (- dy fee)),\n            fee-balance-y: (+ fee (get fee-balance-y pair))\n          }\n        )\n      )\n    )\n    (asserts! (contract-call? .stackswap-security-list-v1a is-secure-router-or-user contract-caller) ERR_INVALID_ROUTER)\n\n    (try! (contract-call? token-liquidity-trait set-lp-data pair-updated (contract-of token-x-trait) (contract-of token-y-trait)))\n    (print { object: \"pair\", action: \"swap-y-for-x\", data: pair-updated })\n\n    (asserts! (< min-dx dx) ERR_TOO_MUCH_SLIPPAGE)\n\n    (try! (safe-transfer false true dx dy token-x-trait token-y-trait token-liquidity-trait))\n\n    (ok (list dx dy))\n  )\n)\n\n(define-public (set-fee-to-address (token-liquidity-trait <liquidity-token>) (address principal))\n  (begin\n    (asserts! (is-eq contract-caller (contract-call? .stackswap-dao-v5k get-dao-owner)) ERR_NOT_OWNER)\n    (try! (contract-call? token-liquidity-trait set-fee-to-address address))\n    (ok true)\n  )\n)\n\n(define-public (collect-fees (token-x-trait <sip-010-token>) (token-y-trait <sip-010-token>) (token-liquidity-trait <liquidity-token>))\n  (let\n    (\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (pair (try! (contract-call? token-liquidity-trait get-lp-data)))\n      (address (get fee-to-address pair))\n      (fee-x (get fee-balance-x pair))\n      (fee-y (get fee-balance-y pair))\n    )\n    (print {fee-x: fee-x})\n    (print {fee-y: fee-y})\n    (asserts! (> fee-x u0) ERR_NO_FEE_X)\n    (asserts! (> fee-y u0) ERR_NO_FEE_Y)\n    (asserts! (is-eq contract-caller address) ERR_NOT_FEE_TO_ADDRESS)\n\n    (try! (safe-transfer false false fee-x fee-y token-x-trait token-y-trait token-liquidity-trait))\n\n    (try! (contract-call? token-liquidity-trait set-lp-data (merge pair {\n        fee-balance-x: u0,\n        fee-balance-y: u0,}) token-x token-y))\n    (ok (list fee-x fee-y))\n  )\n)\n\n(define-public (fix-or-add-pair (token-x-trait <sip-010-token>) (token-y-trait <sip-010-token>) (token-liquidity-trait <liquidity-token>))\n  (let\n    (\n      (contract-owner-check (asserts! (is-eq contract-caller (contract-call? .stackswap-dao-v5k get-dao-owner)) ERR_NOT_OWNER))\n      (token-x (contract-of token-x-trait))\n      (token-y (contract-of token-y-trait))\n      (token-liquidity (contract-of token-liquidity-trait))\n      (x-to-y (is-some (map-get? pairs-data-map { token-x: token-x, token-y: token-y })))\n      (y-to-x (is-some (map-get? pairs-data-map { token-x: token-y, token-y: token-x })))\n    )\n    (if x-to-y \n      (let\n        (\n            (pair-id (unwrap! (get pair-id (map-get? pairs-data-map { token-x: token-x, token-y: token-y })) ERR_MAP_GET))\n        )\n        (map-set pairs-data-map { token-x: token-x, token-y: token-y } {liquidity-token: token-liquidity, pair-id: pair-id})\n        (map-set pairs-token-map token-liquidity true)\n        (map-set pairs-map pair-id { token-x: token-x, token-y: token-y, liquidity-token: token-liquidity})\n        (ok pair-id)\n      )\n      (if y-to-x\n        (let\n          (\n            (pair-id (unwrap! (get pair-id (map-get? pairs-data-map { token-x: token-y, token-y: token-x })) ERR_MAP_GET))\n          )\n          (map-delete pairs-data-map { token-x: token-y, token-y: token-x })\n          (map-set pairs-data-map { token-x: token-x, token-y: token-y } {liquidity-token: token-liquidity, pair-id: pair-id})\n          (map-set pairs-token-map token-liquidity true)\n          (map-set pairs-map pair-id { token-x: token-x, token-y: token-y, liquidity-token: token-liquidity})\n          (ok pair-id)\n\n        )\n        (let\n          (\n            (pair-id (+ (var-get pair-count) u1))\n          )\n          (map-set pairs-data-map { token-x: token-x, token-y: token-y } {liquidity-token: token-liquidity, pair-id: pair-id})\n          (map-set pairs-token-map token-liquidity true)\n          (map-set pairs-map pair-id { token-x: token-x, token-y: token-y, liquidity-token: token-liquidity})\n          (var-set pair-count pair-id)\n          (ok pair-id)\n        )\n      )\n    )\n  )\n)\n\n",
    "analysis": {
      "summary": "This contract facilitates the creation and management of liquidity pairs, allowing for token swaps, liquidity provision, and fee collection within a decentralized exchange environment on the Stacks blockchain.",
      "explanation": "The contract implements a decentralized exchange (DEX) functionality, specifically for creating liquidity pairs, adding/removing liquidity, swapping tokens, and collecting fees. It uses the SIP-010 standard for fungible tokens and a custom liquidity token trait for managing liquidity tokens.\n\n- The contract starts by implementing the necessary traits for interoperability with other contracts and defining error codes for various failure states <L1-3>.\n- Constants for fee calculation are defined, indicating the fee rates and other constants used throughout the contract <L5-8>.\n- Three maps are defined for storing pairs, token presence in pairs, and additional pair data <L10-22>.\n- A data variable `pair-count` is used to keep track of the total number of pairs created <L24>.\n- `get-pair-details`, `get-pair-contracts`, and `get-pair-count` are read-only functions that provide information about pairs and the total count <L26-34>.\n- `safe-burn`, `safe-mint`, and `safe-transfer` are private functions ensuring secure token operations, validating the correct amount of tokens are burned, minted, or transferred <L36-76>.\n- `create-pair` allows creating a new liquidity pair if it doesn't already exist, initializing it with specified tokens and amounts, and setting up the liquidity token contract <L78-114>.\n- `add-to-position` and `reduce-position` enable liquidity providers to add or remove liquidity from a pair, adjusting their share of the pool accordingly <L116-166>.\n- `swap-x-for-y` and `swap-y-for-x` facilitate token swaps between the two tokens in a liquidity pair, applying fees and ensuring minimum received tokens constraints are met <L168-227>.\n- `set-fee-to-address` allows changing the address to which trading fees are sent <L229-234>.\n- `collect-fees` enables the fee-to address to collect accumulated trading fees from swaps <L236-258>.\n- `fix-or-add-pair` is used to correct or add liquidity pairs in case of issues or updates needed for the DEX operation <L260-307>.\n\nEach function is carefully designed to interact with the Stacks blockchain and other smart contracts, ensuring secure and efficient DEX operations.",
      "tags": [
        "DEX",
        "liquidity-pool",
        "token-swap",
        "fee-management",
        "Stacks"
      ]
    }
  },
  {
    "rank": 72,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.router-stx-ststx-bitflow-alex-v-1-2",
    "calls": 461,
    "source": ";; router-stx-ststx-bitflow-alex-v-1-2\n\n(use-trait a-ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n\n(define-constant ERR_NOT_AUTHORIZED (err u1001))\n(define-constant ERR_INVALID_AMOUNT (err u1002))\n(define-constant ERR_INVALID_PRINCIPAL (err u1003))\n(define-constant ERR_ALREADY_ADMIN (err u2001))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u2002))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u2003))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u2004))\n(define-constant ERR_SWAP_STATUS (err u4001))\n(define-constant ERR_MINIMUM_RECEIVED (err u4002))\n(define-constant ERR_SWAP_A (err u5001))\n(define-constant ERR_SWAP_B (err u5002))\n(define-constant ERR_SCALED_AMOUNT_A (err u6001))\n(define-constant ERR_QUOTE_A (err u7001))\n(define-constant ERR_QUOTE_B (err u7002))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var swap-status bool true)\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller-in-list (index-of admins-list tx-sender))\n    (admin-to-remove-in-list (index-of admins-list admin))\n    (caller tx-sender)\n  )\n    (asserts! (is-some caller-in-list) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some admin-to-remove-in-list) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removeable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (set-swap-status (status bool))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (var-set swap-status status)\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (get-quote-a\n    (amount uint)\n    (token-x <a-ft-trait>) (token-y <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (quote-a (unwrap! (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper\n                           (contract-of token-x) (contract-of token-y)\n                           factor\n                           amount) ERR_QUOTE_A))\n    (scaled-amount (unwrap! (scale-alex-amount quote-a token-y) ERR_SCALED_AMOUNT_A))\n    (quote-b (unwrap! (contract-call?\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 get-dy\n                           'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                           scaled-amount) ERR_QUOTE_B))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-b\n    (amount uint)\n    (token-x <a-ft-trait>) (token-y <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (quote-a (unwrap! (contract-call?\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 get-dx\n                           'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                           amount) ERR_QUOTE_A))\n    (scaled-amount (unwrap! (scale-bitflow-amount quote-a token-x) ERR_SCALED_AMOUNT_A))    \n    (quote-b (unwrap! (contract-call?\n                           'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper\n                           (contract-of token-x) (contract-of token-y)\n                           factor\n                           scaled-amount) ERR_QUOTE_B))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (token-x-trait <a-ft-trait>) (token-y-trait <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (swap-a (unwrap! (alex-sa amount token-x-trait token-y-trait factor) ERR_SWAP_A))\n    (scaled-amount (unwrap! (scale-alex-amount swap-a token-y-trait) ERR_SCALED_AMOUNT_A))  \n    (swap-b (unwrap! (bitflow-sa scaled-amount) ERR_SWAP_B))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          bitflow-data: {\n            b-swap: swap-b\n          },\n          alex-data: {\n            a-tokens: {\n              a: (contract-of token-x-trait),\n              b: (contract-of token-y-trait)\n            },\n            a-factors: {\n              a: factor\n            },\n            a-swap: swap-a\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (token-x-trait <a-ft-trait>) (token-y-trait <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (swap-a (unwrap! (bitflow-sb amount) ERR_SWAP_A))\n    (scaled-amount (unwrap! (scale-bitflow-amount swap-a token-x-trait) ERR_SCALED_AMOUNT_A))\n    (swap-b (unwrap! (alex-sa scaled-amount token-x-trait token-y-trait factor) ERR_SWAP_B))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-b\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          bitflow-data: {\n            b-swap: swap-a\n          },\n          alex-data: {\n            a-tokens: {\n              a: (contract-of token-x-trait),\n              b: (contract-of token-y-trait)\n            },\n            a-factors: {\n              a: factor\n            },\n            a-swap: swap-b\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-private (bitflow-sa (amount uint))\n  (let (\n    (swap-a (try! (contract-call?\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 swap-x-for-y\n                  'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                  amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (bitflow-sb (amount uint))\n  (let (\n    (swap-a (try! (contract-call?\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 swap-y-for-x\n                  'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                  amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (alex-sa\n    (amount uint)\n    (a-token <a-ft-trait>) (b-token <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper\n                  a-token b-token\n                  factor\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (scale-bitflow-amount (amount uint) (a-token <a-ft-trait>))\n  (let (\n    (b-decimals u6)\n    (a-decimals (unwrap-panic (contract-call? a-token get-decimals)))\n    (scaled-amount\n      (if (is-eq b-decimals a-decimals)\n        amount\n        (if (> b-decimals a-decimals)\n          (/ amount (pow u10 (- b-decimals a-decimals)))\n          (* amount (pow u10 (- a-decimals b-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n(define-private (scale-alex-amount (amount uint) (a-token <a-ft-trait>))\n  (let (\n    (a-decimals (unwrap-panic (contract-call? a-token get-decimals)))\n    (b-decimals u6)\n    (scaled-amount\n      (if (is-eq a-decimals b-decimals)\n        amount\n        (if (> a-decimals b-decimals)\n          (/ amount (pow u10 (- a-decimals b-decimals)))\n          (* amount (pow u10 (- b-decimals a-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n(define-private (admin-not-removeable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)",
    "analysis": {
      "summary": "This contract facilitates the management of administrators and the swapping of tokens through a specific routing mechanism, integrating with external AMM pools and stableswap contracts.",
      "explanation": "The contract defines a set of error codes for various failure states, a constant for the contract deployer, and variables for managing administrators and swap status. It includes functions for adding and removing administrators, toggling the swap status, and calculating quotes and executing swaps between tokens using external contracts.\n\n- <L3-17> Error codes are defined for handling failures.\n- <L19> Sets the contract deployer as a constant for reference.\n- <L21-23> Data variables for administrators and the swap status are defined.\n- <L25-29> Read-only functions provide access to contract state.\n- <L31-44> `add-admin` allows adding new administrators if the caller is already an admin and the list isn't full.\n- <L46-64> `remove-admin` enables removing an administrator, ensuring the deployer cannot be removed and the caller is an admin.\n- <L66-76> `set-swap-status` toggles the ability to perform swaps, restricted to administrators.\n- <L78-98> `get-quote-a` and <L100-120> `get-quote-b` calculate token swap quotes by interacting with external contracts, adjusting for token decimals.\n- <L122-153> `swap-helper-a` and <L155-186> `swap-helper-b` execute token swaps through a two-step process involving external contracts, ensuring minimum received amounts and swap status.\n- <L188-200> and <L202-214> Private functions `bitflow-sa` and `bitflow-sb` interact with a stableswap contract for swapping.\n- <L216-229> `alex-sa` performs a swap using an external AMM pool contract.\n- <L231-253> and <L255-277> Scaling functions adjust token amounts based on decimal differences between tokens.",
      "tags": [
        "admin-management",
        "token-swap",
        "DeFi",
        "AMM",
        "stableswap"
      ]
    }
  },
  {
    "rank": 73,
    "contract": "SP351ZJK9F5AWZJEEZGZ7NZKSRKA65EWFRR48V9KS.ALL",
    "calls": 447,
    "source": ";; All meme tokens are generated out of air\n;; STX10 meme tokens are converted by STX\n;; All about meme tokens should be free and fair \n;; \n;; Airdrop condition: \n;; 1. From block 143500-137822, total 86166 addresses have sent transactions\n;; 2. Total 2592 addresses have interacted with SP1BMZTS416A3VTMN0SYTRMEJSCHW75RRAKXWF4DZ.inscription and SP1BMZTS416A3VTMN0SYTRMEJSCHW75RRAKXWF4DZ.stacks-inscription\n;; For addresses in 1, each get 85% * 21000000000000 / 86166 = 207158275 $ALL\n;; For addresses in 2, each get 15% * 21000000000000 / 2592 = 1215277777 $ALL\n;; No reservations\n\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n(define-fungible-token ALL)\n\n(define-read-only (get-balance (address principal))\n  (ok (ft-get-balance ALL address)))\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply ALL)))\n\n(define-read-only (get-name)\n  (ok \"Son Of STX10\"))\n\n(define-read-only (get-symbol)\n  (ok \"ALL\"))\n\n(define-read-only (get-decimals)\n  (ok u0))\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n  (ok (asserts! (and (is-eq from tx-sender) (is-eq memo (print memo)) (try! (ft-transfer? ALL amount from to))) (err u101))))\n\n(define-read-only (get-token-uri)\n  (ok (some u\"ipfs://ipfs/bafkreicmojux3laa6w6obd4lxwq6jojceezmlhevt2knqyrihf7lpko6gy\")))\n\n(define-public (burn (count uint))\n    (ft-burn? ALL count tx-sender))\n\n(define-private (s (receiver { to: principal, amount: uint }))\n  (is-err (ft-transfer? ALL (get amount receiver) tx-sender (get to receiver))))\n\n(define-public (send_many (recipients (list 5000 { to: principal, amount: uint })))\n  (ok (asserts! (is-eq (len (filter s recipients)) u0) (err u102))))\n\n(ft-mint? ALL u21000000000000 tx-sender)",
    "analysis": {
      "summary": "This contract implements a fungible token named 'Son Of STX10' with symbol 'ALL', featuring basic token functionalities and a unique airdrop mechanism based on historical blockchain interactions.",
      "explanation": "The contract begins by implementing the SIP-010 standard for fungible tokens, ensuring compatibility with the broader Stacks ecosystem. It defines a fungible token named 'ALL' and provides standard functions for querying balance, total supply, token name, symbol, and decimals. Additionally, it includes functions for transferring tokens, burning tokens, and a special 'send_many' function for batch processing transfers. Notably, the contract specifies an initial minting event to the contract deployer's address, distributing a predefined total supply of tokens. The contract's uniqueness lies in its background context, aiming to distribute tokens based on past blockchain interactions, though the direct implementation of this airdrop logic is not contained within the contract's code. Instead, the contract focuses on the token's operational aspects, leaving the airdrop distribution methodology to be potentially managed off-chain or through another contract mechanism. Key implementation details include:\n\n- The `define-fungible-token` macro <L3> creates the 'ALL' token.\n- `get-balance`, `get-total-supply`, `get-name`, `get-symbol`, and `get-decimals` <L5-19> are standard read-only functions returning respective token information.\n- `transfer` <L21-23> allows token holders to transfer their tokens to another address, including a memo. It uses `asserts!` to ensure the sender is the transaction initiator and the transfer is successful, else it returns an error.\n- `get-token-uri` <L25> provides a URI for token metadata, adhering to the SIP-010 standard.\n- `burn` <L27> enables token holders to reduce the token's total supply by destroying a portion of their holdings.\n- `s` <L29-31> is a private helper function used in `send_many` to attempt transferring tokens and returns a boolean indicating success or failure.\n- `send_many` <L33-35> allows batch processing of transfers, a feature particularly useful for airdrops or mass payouts. It uses a filter to apply `s` to each recipient in the provided list, asserting that all transfers must succeed.\n- The contract concludes with an initial minting event <L37>, distributing the entire token supply to the contract deployer. This action is executed as part of the contract's deployment process.\n\nOverall, the contract is designed for simplicity and efficiency, leveraging Clarity's capabilities to implement a fungible token with additional features tailored for specific distribution strategies.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "airdrop",
        "token-distribution",
        "Clarity"
      ]
    }
  },
  {
    "rank": 74,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-velar-stx-distributor",
    "calls": 433,
    "source": ";;; Distributor: receive and distribute rewards.\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(impl-trait .farming-receive-trait.farming-receive-trait)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; errors\n(define-constant err-check-owner               (err u801))\n(define-constant err-receive-preconditions     (err u802))\n(define-constant err-distribute-preconditions  (err u803))\n(define-constant err-distribute-postconditions (err u804))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; constants\n(define-constant REWARD-TOKEN .velar-token)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; auth\n(define-data-var owner principal tx-sender)\n(define-read-only (get-owner) (var-get owner))\n(define-private (check-owner)\n  (ok (asserts! (is-eq tx-sender (get-owner)) err-check-owner)))\n(define-public (set-owner (new-owner principal))\n  (begin\n   (try! (check-owner))\n   (ok (var-set owner new-owner)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; accounting\n(define-map revenue uint uint) ;;epoch -> cumulative token rewards\n\n(define-read-only (get-revenue-at (epoch uint))\n  (default-to u0 (map-get? revenue epoch) ))\n\n;; Called by operator.\n;; MUST ALWAYS BE ACCOMPANIED BY A CORRECT TRANSFER!\n;; Could also store balance and compare to previous but that adds code.\n(define-data-var balance uint u0)\n\n(define-read-only (get-balance)\n  (var-get balance))\n\n(define-private (sync (new-balance uint))\n  (var-set balance new-balance))\n\n(define-public\n  (receive\n   (token <ft-trait>)\n   (amt   uint)\n   (from  principal))\n\n  (let ((epoch (contract-call? .farming-velar-stx-core current-epoch))\n        (r     (get-revenue-at epoch))\n        (bal   (unwrap-panic\n                (contract-call?\n                 token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n     (and\n      (is-eq (contract-of token) REWARD-TOKEN)\n    ;;(> amt u0)\n      (is-eq from (get-owner))\n      (>= bal (+ (get-balance) amt))\n      )\n      err-receive-preconditions)\n\n    (try! (check-owner))\n    (sync bal)\n    ;; (var-set balance (+ (var-get balance) amt))\n    (ok (map-set revenue epoch (+ r amt)) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; claims\n(define-map claims\n  {user: principal, epoch: uint}\n  uint) ;;block number claimed at\n\n(define-private\n  (do-claim\n   (user principal)\n   (epoch uint))\n  (map-set claims\n           {user: user, epoch: epoch}\n           block-height))\n\n(define-read-only\n  (has-claimed-epoch\n   (user principal)\n   (epoch uint))\n  (is-some (map-get? claims {user: user, epoch: epoch})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; low level API\n(define-private\n  (do-distribute\n   (user  principal)\n   (token <ft-trait>)\n   (amt   uint))\n\n  (let ((protocol (as-contract tx-sender)))\n    (ok (if (> amt u0)\n        (try!\n         (as-contract\n          (contract-call?\n           token transfer amt protocol user none)))\n        true)) ))\n\n(define-read-only\n  (calc-distribute\n   (share {staked: uint, total: uint})\n   (amt   uint))\n\n  (if (> (get total share) u0)\n      (/ (* amt (get staked share)) (get total share))\n      u0) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epoch\n(define-private\n  (distribute-epoch\n   (user   principal)\n   (token  <ft-trait>)\n   (epoch  uint))\n\n  (let ((reward (unwrap-panic (get-reward user epoch))))\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (not (has-claimed-epoch user epoch))\n    ;;(< epoch (current-epoch)) checked by get-share-at\n      (is-eq (contract-of token) REWARD-TOKEN)\n      )\n     err-distribute-preconditions)\n\n    ;; Update global state\n    (try! (do-distribute user token (get amt reward)))\n\n    ;; Update local state\n    (do-claim user epoch)\n\n    ;; Postconditions\n\n    (ok true)) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epochs\n(define-private\n  (distribute-epochs-step\n   (epoch uint)\n   (args  {user: principal, token: <ft-trait>}))\n\n  (let ((res_\n         (unwrap-panic\n          (distribute-epoch\n           (get user args)\n           (get token args)\n           epoch)) ))\n    args))\n\n(define-public\n  (distribute-epochs\n   (user   principal)\n   (token  <ft-trait>)\n   (epochs (list 10 uint))) ;;XXX: MAX-EPOCHS\n\n  (let ((args {user : user,\n               token: token})\n        (res_ (fold distribute-epochs-step epochs args))\n        (bal (unwrap-panic (contract-call? token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n      (is-eq (contract-of token) REWARD-TOKEN)\n      err-distribute-preconditions)\n\n    ;; Update local state\n    (sync bal)\n\n    ;; Return\n    (let ((event\n           {op    : \"distribute-epochs\",\n            user  : user,\n            epochs: epochs\n            }))\n      (print event)\n      (ok event) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; compute reward epoch list\n\n;; Returns epochs starting at `start-epoch' for which `user' has\n;; non-zero rewards.\n;; Pagination via GENESIS-EPOCH and `end-epoch'.\n(define-read-only\n  (get-reward\n   (user principal)\n   (epoch uint))\n\n  (let ((share   (try! (contract-call? .farming-velar-stx-core get-share-at user epoch)))\n        (rev     (get-revenue-at epoch))\n        (calc    (calc-distribute share rev))\n        (claimed (default-to u0 (map-get? claims {user: user, epoch: epoch})))\n        (amt     (if (is-eq claimed u0) calc u0)))\n    (ok {share  : share,\n         rev    : rev,\n         calc   : calc,\n         claimed: claimed,\n         amt    : amt})))\n\n(define-read-only\n  (get-rewards-step\n   (epoch uint)\n   (state {user: principal,\n           acc : (list 10 ;;XXX: MAX-EPOCHS\n                       {epoch : uint,\n                        reward: uint}) }) )\n\n  (let ((reward (unwrap-panic\n                 (get-reward (get user state)\n                             epoch)))\n        (amt    (get amt reward)))\n\n    {user: (get user state),\n     acc : (if (> amt u0)\n               (unwrap-panic\n                (as-max-len?\n                 (append (get acc state) {epoch: epoch, reward: amt}) ;;FIXME: reward?\n                 u10))\n               (get acc state))\n     }))\n\n(define-read-only\n  (get-rewards\n   (user        principal)\n   (start-epoch uint))\n\n  (let ((end-epoch     (+ start-epoch MAX-EPOCHS)) ;;next\n        (epochs_       (mkepochs start-epoch))\n        (reward-epochs (fold get-rewards-step epochs_ {user: user, acc: (list)})))\n\n    {reward-epochs: (get acc reward-epochs),\n     end-epoch    : end-epoch} ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; epochs\n(define-constant OFFSETS (list u0 u1 u2 u3 u4 u5 u6 u7 u8 u9))\n(define-constant MAX-EPOCHS (len OFFSETS)) ;;10\n\n(define-private\n  (epochs-step\n   (i_    uint)\n   (state {epoch: uint, current: uint, acc: (list 10 uint)})) ;; XXX: MAX-EPOCHS\n  {epoch: (+ (get epoch state) u1),\n   current: (get current state),\n   acc  : (if (>= (get epoch state) (get current state))\n              (get acc state)\n              (unwrap-panic\n               (as-max-len?\n                (append (get acc state) (get epoch state))\n                u10)))\n   })\n\n(define-read-only (mkepochs (start-epoch uint))\n  (let ((current (contract-call? .farming-velar-stx-core current-epoch))\n        (state0  {epoch: start-epoch, current: current, acc: (list)})\n        (state   (fold epochs-step OFFSETS state0)))\n    (get acc state)))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract is designed to receive, track, and distribute reward tokens to users based on their participation in a farming operation.",
      "explanation": "The contract implements functionality to manage reward distribution for a farming protocol. It tracks rewards per epoch, handles claims, and ensures only the owner can distribute rewards. Key functionalities include receiving tokens, syncing balance, claiming rewards, and distributing rewards across epochs.\n\n- **Use of Traits (<L1>)**: It uses the SIP-010 trait for fungible tokens to interact with reward tokens and a custom trait for receiving tokens.\n- **Error Codes (<L6-9>)**: Defines constants for various error conditions.\n- **Owner Management (<L14-24>)**: Sets and retrieves the contract owner, ensuring sensitive actions are protected.\n- **Accounting (<L27-44>)**: Tracks revenue per epoch and overall balance. The `receive` function (<L46-64>) updates these based on incoming tokens.\n- **Claims Management (<L66-79>)**: Users claim rewards for specific epochs, recorded to prevent double claiming.\n- **Distribution Logic (<L81-133>)**: Includes low-level API for reward distribution and higher-level functions to distribute rewards for multiple epochs.\n- **Reward Calculation (<L135-173>)**: Calculates rewards based on user share and total revenue, considering whether rewards have been claimed.\n- **Epoch Management (<L175-209>)**: Generates lists of epochs for which rewards are calculated, facilitating pagination in reward queries.\n\nEach function is carefully designed to ensure that rewards are distributed fairly and transparently, with checks in place to prevent unauthorized access and manipulation.",
      "tags": [
        "DeFi",
        "rewards-distribution",
        "farming",
        "fungible-token"
      ]
    }
  },
  {
    "rank": 75,
    "contract": "SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH.not-punk",
    "calls": 426,
    "source": ";; NOT Punk\n;; contractType: public\n\n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-non-fungible-token NOT-Punk uint)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant ERR-NO-MORE-NFTS u100)\n(define-constant ERR-NOT-ENOUGH-PASSES u101)\n(define-constant ERR-PUBLIC-SALE-DISABLED u102)\n(define-constant ERR-CONTRACT-INITIALIZED u103)\n(define-constant ERR-NOT-AUTHORIZED u104)\n(define-constant ERR-INVALID-USER u105)\n(define-constant ERR-LISTING u106)\n(define-constant ERR-WRONG-COMMISSION u107)\n(define-constant ERR-NOT-FOUND u108)\n(define-constant ERR-PAUSED u109)\n(define-constant ERR-MINT-LIMIT u110)\n(define-constant ERR-METADATA-FROZEN u111)\n(define-constant ERR-AIRDROP-CALLED u112)\n(define-constant ERR-NO-MORE-MINTS u113)\n(define-constant ERR-INVALID-PERCENTAGE u114)\n\n;; Internal variables\n(define-data-var mint-limit uint u5235)\n(define-data-var last-id uint u1)\n(define-data-var total-price uint u4000000)\n(define-data-var total-spoint-price uint u420000000)\n(define-data-var artist-address principal 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH)\n(define-data-var partner-address principal 'SM776ZBWZXXJRH8GV0PPRMSM550D553B334A1VKN)\n(define-data-var collab-address principal 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH.notpunk-collab-vault)\n(define-data-var ipfs-root (string-ascii 80) \"ipfs://ipfs/QmUudJPjm1KV2e59fjrTpxn6Lv6L2wdqxFDaS48we6pBDR/\")\n(define-data-var mint-paused bool true)\n(define-data-var premint-enabled bool false)\n(define-data-var sale-enabled bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var airdrop-called bool false)\n(define-data-var mint-cap uint u2600)\n(define-data-var spoint-mint-cap uint u2500)\n(define-data-var stx-mints uint u0)\n(define-data-var spoint-mints uint u0)\n(define-map mints-per-user principal uint)\n(define-map mint-passes principal uint)\n\n;; Mint in STX\n(define-public (claim) (mint (list true)))\n\n(define-public (claim-two) (mint (list true true)))\n\n(define-public (claim-three) (mint (list true true true)))\n\n(define-public (claim-four) (mint (list true true true true)))\n\n(define-public (claim-five) (mint (list true true true true true)))\n\n(define-public (claim-six) (mint (list true true true true true true)))\n\n(define-public (claim-seven) (mint (list true true true true true true true)))\n\n(define-public (claim-eight) (mint (list true true true true true true true true)))\n\n(define-public (claim-nine) (mint (list true true true true true true true true true)))\n\n(define-public (claim-ten) (mint (list true true true true true true true true true true)))\n\n(define-public (claim-fifteen) (mint (list true true true true true true true true true true true true true true true)))\n\n(define-public (claim-twenty) (mint (list true true true true true true true true true true true true true true true true true true true true)))\n\n(define-public (claim-twentyfive) (mint (list true true true true true true true true true true true true true true true true true true true true true true true true true)))\n\n;; Mint in SPoint\n(define-public (spoints-claim (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id (list true)))\n\n(define-public (spoints-claim-two (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id  (list true true)))\n\n(define-public (spoints-claim-three (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id  (list true true true)))\n\n(define-public (spoints-claim-four (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id  (list true true true true)))\n\n(define-public (spoints-claim-five (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id  (list true true true true true)))\n\n(define-public (spoints-claim-six (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id  (list true true true true true true)))\n\n(define-public (spoints-claim-seven (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id  (list true true true true true true true)))\n\n(define-public (spoints-claim-eight (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id  (list true true true true true true true true)))\n\n(define-public (spoints-claim-nine (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id  (list true true true true true true true true true)))\n\n(define-public (spoints-claim-ten (spaghettipunk-club-id uint)) (spoint-mint spaghettipunk-club-id  (list true true true true true true true true true true)))\n\n;; Mintpass Minting\n(define-private (mint (orders (list 25 bool)))\n  (let \n    (\n      (passes (get-passes tx-sender))\n    )\n    (if (var-get premint-enabled)\n      (begin\n        (asserts! (>= passes (len orders)) (err ERR-NOT-ENOUGH-PASSES))\n        (map-set mint-passes tx-sender (- passes (len orders)))\n        (mint-many orders)\n      )\n      (begin\n        (asserts! (var-get sale-enabled) (err ERR-PUBLIC-SALE-DISABLED))\n        (mint-many orders)\n      )\n    )))\n\n(define-private (spoint-mint (spaghettipunk-club-id uint) (orders (list 10 bool)))\n  (let \n    (\n      (last-nft-id (var-get last-id))\n      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))\n      (id-reached (fold mint-many-iter orders last-nft-id))\n      (price (* (var-get total-spoint-price) (- id-reached last-nft-id)))\n      (current-balance (get-balance tx-sender))\n      (user-mints (get-mints tx-sender))\n      (total-spoint-mints (get-spoint-mints))\n      (capped (> (var-get spoint-mint-cap) u0))\n      (passes (get-passes tx-sender))\n    )\n    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))\n    (asserts! (or (not capped) (>= (var-get spoint-mint-cap) (+ (len orders) total-spoint-mints))) (err ERR-NO-MORE-MINTS))\n    (asserts! (or (var-get premint-enabled) (var-get sale-enabled)) (err ERR-PUBLIC-SALE-DISABLED))\n    (map-set mints-per-user tx-sender (+ (len orders) user-mints))\n    (var-set spoint-mints (+ (len orders) total-spoint-mints))\n    (var-set last-id id-reached)\n    (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n    (unwrap-panic (contract-call? 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV.spoints spend spaghettipunk-club-id price))\n    (ok id-reached)\n))\n\n(define-private (mint-many (orders (list 25 bool )))  \n  (let \n    (\n      (last-nft-id (var-get last-id))\n      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))\n      (id-reached (fold mint-many-iter orders last-nft-id))\n      (price (* (var-get total-price) (- id-reached last-nft-id)))\n      (current-balance (get-balance tx-sender))\n      (capped (> (var-get mint-cap) u0))\n      (user-mints (get-mints tx-sender))\n      (total-stx-mints (get-stx-mints))\n    )\n    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))\n    (asserts! (or (not capped) (>= (var-get mint-cap) (+ (len orders) total-stx-mints))) (err ERR-NO-MORE-MINTS))\n    (map-set mints-per-user tx-sender (+ (len orders) user-mints))\n    (var-set stx-mints (+ (len orders) total-stx-mints))\n    (if  (is-eq (var-get total-price) u0000000)\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n      )\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n        (try! (stx-transfer? price tx-sender (var-get partner-address)))\n      )    \n    )\n    (ok id-reached)))\n\n(define-private (mint-many-iter (ignore bool) (next-id uint))\n  (if (<= next-id (var-get mint-limit))\n    (begin\n      (unwrap! (nft-mint? NOT-Punk next-id tx-sender) next-id)\n      (+ next-id u1)    \n    )\n    next-id))\n\n(define-public (set-artist-address (address principal))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set artist-address address))))\n\n(define-public (set-partner-address (address principal))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get partner-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set partner-address address))))\n\n(define-public (set-price (price uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender (var-get partner-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set total-price price))))\n\n(define-public (set-spoint-price (price uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set total-spoint-price price))))\n\n(define-public (toggle-pause)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set mint-paused (not (var-get mint-paused))))))\n\n(define-public (set-mint-limit (limit uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))\n    (ok (var-set mint-limit limit))))\n\n(define-public (burn (token-id uint))\n  (begin \n    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))\n    (nft-burn? NOT-Punk token-id tx-sender)))\n\n(define-private (is-owner (token-id uint) (user principal))\n    (is-eq user (unwrap! (nft-get-owner? NOT-Punk token-id) false)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))\n    (print { notification: \"token-metadata-update\", payload: { token-class: \"nft\", contract-id: (as-contract tx-sender) }})\n    (var-set ipfs-root new-base-uri)\n    (ok true)))\n\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Non-custodial SIP-009 transfer function\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))\n    (trnsfr id sender recipient)))\n\n;; Read-only functions\n(define-read-only (get-owner (token-id uint))\n  (ok (nft-get-owner? NOT-Punk token-id)))\n\n(define-read-only (get-last-token-id)\n  (ok (- (var-get last-id) u1)))\n\n(define-read-only (get-token-uri (token-id uint))\n  (ok (some (concat (concat (var-get ipfs-root) \"{id}\") \".json\"))))\n\n(define-read-only (get-paused)\n  (ok (var-get mint-paused)))\n\n(define-read-only (get-price)\n  (ok (var-get total-price)))\n\n(define-read-only (get-artist-address)\n  (ok (var-get artist-address)))\n\n(define-read-only (get-partner-address)\n  (ok (var-get partner-address)))\n\n(define-read-only (get-mints (caller principal))\n  (default-to u0 (map-get? mints-per-user caller)))\n\n(define-read-only (get-mint-limit)\n  (ok (var-get mint-limit)))\n\n(define-read-only (get-mint-cap)\n  (ok (var-get mint-cap)))\n\n(define-read-only (get-stx-mints)\n  (var-get stx-mints))\n\n(define-read-only (get-spoint-mint-cap)\n  (ok (var-get spoint-mint-cap)))\n\n(define-read-only (get-spoint-mints)\n  (var-get spoint-mints))\n\n(define-data-var license-uri (string-ascii 80) \"\")\n(define-data-var license-name (string-ascii 40) \"\")\n\n(define-read-only (get-license-uri)\n  (ok (var-get license-uri)))\n  \n(define-read-only (get-license-name)\n  (ok (var-get license-name)))\n  \n(define-public (set-license-uri (uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-uri uri))))\n    \n(define-public (set-license-name (name (string-ascii 40)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-name name))))\n\n(define-public (set-mint-cap (new-cap uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set mint-cap new-cap))))\n\n(define-public (set-spoint-mint-cap (new-cap uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set spoint-mint-cap new-cap))))\n\n;; Non-custodial marketplace extras\n(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)\n\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal, royalty: uint})\n\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? NOT-Punk id sender recipient)\n    success\n      (let\n        ((sender-balance (get-balance sender))\n        (recipient-balance (get-balance recipient)))\n          (map-set token-count\n            sender\n            (- sender-balance u1))\n          (map-set token-count\n            recipient\n            (+ recipient-balance u1))\n          (ok success))\n    error (err error)))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? NOT-Punk id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? NOT-Punk id) (err ERR-NOT-FOUND)))\n      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))\n      (price (get price listing))\n      (royalty (get royalty listing)))\n    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (pay-royalty price royalty))\n    (try! (contract-call? comm-trait pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))\n    \n(define-data-var royalty-percent uint u500)\n\n(define-read-only (get-royalty-percent)\n  (ok (var-get royalty-percent)))\n\n(define-public (set-royalty-percent (royalty uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))\n    (ok (var-set royalty-percent royalty))))\n\n(define-private (pay-royalty (price uint) (royalty uint))\n  (let (\n    (royalty-amount (/ (* price royalty) u10000))\n  )\n  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))) (not (is-eq tx-sender (var-get partner-address)))) \n    (try! (stx-transfer? royalty-amount tx-sender (var-get collab-address)))\n    (print false)\n  )\n  (ok true)))\n\n;; Extra functionality required for mintpass\n(define-public (toggle-sale-state)\n  (let \n    (\n      (sale (not (var-get sale-enabled)))\n    )\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set premint-enabled false)\n    (var-set sale-enabled sale)\n    (print { sale: sale })\n    (ok true)))\n\n(define-public (enable-premint)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set premint-enabled true))))\n\n(define-public (disable-premint)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set premint-enabled false))))\n\n(define-public (set-passes (address principal) (passes uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (map-set mint-passes address passes))))\n\n(define-read-only (get-passes (caller principal))\n  (default-to u0 (map-get? mint-passes caller)))\n\n(define-read-only (get-premint-enabled)\n  (ok (var-get premint-enabled)))\n\n(define-read-only (get-sale-enabled)\n  (ok (var-get sale-enabled)))  \n\n;; Airdrop\n(define-public (admin-airdrop)\n  (let\n    (\n      (last-nft-id (var-get last-id))\n    )\n    (begin\n        (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender (var-get partner-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n        (asserts! (is-eq false (var-get airdrop-called)) (err ERR-AIRDROP-CALLED))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u0) 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK))\n        (map-set token-count 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK (+ (get-balance 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u1) 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK))\n        (map-set token-count 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK (+ (get-balance 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u2) 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK))\n        (map-set token-count 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK (+ (get-balance 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u3) 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK))\n        (map-set token-count 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK (+ (get-balance 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u4) 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK))\n        (map-set token-count 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK (+ (get-balance 'SP2H3TTG3MQK9CEF59S7VQ86H4FX9CH596ZXSE2EK) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u5) 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99))\n        (map-set token-count 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99 (+ (get-balance 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u6) 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99))\n        (map-set token-count 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99 (+ (get-balance 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u7) 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99))\n        (map-set token-count 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99 (+ (get-balance 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u8) 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99))\n        (map-set token-count 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99 (+ (get-balance 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u9) 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99))\n        (map-set token-count 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99 (+ (get-balance 'SP3Y5WK0G9GMXS4YRNW9SSVEET0WFJM37X2SBEW99) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u10) 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV))\n        (map-set token-count 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV (+ (get-balance 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u11) 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV))\n        (map-set token-count 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV (+ (get-balance 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u12) 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV))\n        (map-set token-count 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV (+ (get-balance 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u13) 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV))\n        (map-set token-count 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV (+ (get-balance 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u14) 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV))\n        (map-set token-count 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV (+ (get-balance 'SP217FZ8AZYTGPKMERWZ6FYRAK4ZZ6YHMJ7XQXGEV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u15) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u16) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u17) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u18) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u19) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u20) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u21) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u22) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u23) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u24) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u25) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u26) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u27) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u28) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u29) 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH))\n        (map-set token-count 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH (+ (get-balance 'SP1C2K603TGWJGKPT2Z3WWHA0ARM66D352385TTWH) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u30) 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV))\n        (map-set token-count 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV (+ (get-balance 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u31) 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV))\n        (map-set token-count 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV (+ (get-balance 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u32) 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV))\n        (map-set token-count 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV (+ (get-balance 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u33) 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV))\n        (map-set token-count 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV (+ (get-balance 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u34) 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV))\n        (map-set token-count 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV (+ (get-balance 'SP2SKMAR9WMD9DBJHC4XTQXPZCDNV1258PSJTRGTV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u35) 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N))\n        (map-set token-count 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N (+ (get-balance 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u36) 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N))\n        (map-set token-count 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N (+ (get-balance 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u37) 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N))\n        (map-set token-count 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N (+ (get-balance 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u38) 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N))\n        (map-set token-count 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N (+ (get-balance 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u39) 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N))\n        (map-set token-count 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N (+ (get-balance 'SPAHTV25EDZPSFPSH3DGKN0ANRSDMEHYFVA1CS3N) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u40) 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1))\n        (map-set token-count 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1 (+ (get-balance 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u41) 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1))\n        (map-set token-count 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1 (+ (get-balance 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u42) 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1))\n        (map-set token-count 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1 (+ (get-balance 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u43) 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1))\n        (map-set token-count 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1 (+ (get-balance 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u44) 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1))\n        (map-set token-count 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1 (+ (get-balance 'SP2N2XAZDKGRK5E2ARKT96D6971W7FEPK1SM6KNJ1) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u45) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u46) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u47) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u48) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u49) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u50) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u51) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u52) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u53) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u54) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u55) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u56) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u57) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u58) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u59) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u60) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u61) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u62) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u63) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u64) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u65) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u66) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u67) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u68) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u69) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u70) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u71) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u72) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u73) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u74) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u75) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u76) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u77) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u78) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u79) 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7))\n        (map-set token-count 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7 (+ (get-balance 'SP2SG44Z50PZX7703T02R2NN1RED69E8TPQNBDE7) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u80) 'SPSC35NSP4BMQNYDAFQBEGV13ZP4YBS41WASJ0E2))\n        (map-set token-count 'SPSC35NSP4BMQNYDAFQBEGV13ZP4YBS41WASJ0E2 (+ (get-balance 'SPSC35NSP4BMQNYDAFQBEGV13ZP4YBS41WASJ0E2) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u81) 'SP1GM28D4X7M6P516BE6QGNVHYDNB4F5SC48VK5BM))\n        (map-set token-count 'SP1GM28D4X7M6P516BE6QGNVHYDNB4F5SC48VK5BM (+ (get-balance 'SP1GM28D4X7M6P516BE6QGNVHYDNB4F5SC48VK5BM) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u82) 'SP1NPDHF9CQ8B9Q045CCQS1MR9M9SGJ5TT6WFFCD2))\n        (map-set token-count 'SP1NPDHF9CQ8B9Q045CCQS1MR9M9SGJ5TT6WFFCD2 (+ (get-balance 'SP1NPDHF9CQ8B9Q045CCQS1MR9M9SGJ5TT6WFFCD2) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u83) 'SP3DHAND5K2WR8PEJN5F7P7B8YH3MJ1HQ3FX7M85Z))\n        (map-set token-count 'SP3DHAND5K2WR8PEJN5F7P7B8YH3MJ1HQ3FX7M85Z (+ (get-balance 'SP3DHAND5K2WR8PEJN5F7P7B8YH3MJ1HQ3FX7M85Z) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u84) 'SP29D6YMDNAKN1P045T6Z817RTE1AC0JAA99WAX2B))\n        (map-set token-count 'SP29D6YMDNAKN1P045T6Z817RTE1AC0JAA99WAX2B (+ (get-balance 'SP29D6YMDNAKN1P045T6Z817RTE1AC0JAA99WAX2B) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u85) 'SP2KZ24AM4X9HGTG8314MS4VSY1CVAFH0G1KBZZ1D))\n        (map-set token-count 'SP2KZ24AM4X9HGTG8314MS4VSY1CVAFH0G1KBZZ1D (+ (get-balance 'SP2KZ24AM4X9HGTG8314MS4VSY1CVAFH0G1KBZZ1D) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u86) 'SP1VX8DRY6F3R1N8NV0EGQAVK16S2JJ6C5WWD5PGS))\n        (map-set token-count 'SP1VX8DRY6F3R1N8NV0EGQAVK16S2JJ6C5WWD5PGS (+ (get-balance 'SP1VX8DRY6F3R1N8NV0EGQAVK16S2JJ6C5WWD5PGS) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u87) 'SP2Y7BAT6DE5JTQZZ7KTR3XHHBQJ7AQMNQFGKVRMW))\n        (map-set token-count 'SP2Y7BAT6DE5JTQZZ7KTR3XHHBQJ7AQMNQFGKVRMW (+ (get-balance 'SP2Y7BAT6DE5JTQZZ7KTR3XHHBQJ7AQMNQFGKVRMW) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u88) 'SP31YB1E2VCAGW2DKGGNH82ZEYCF7V3P7CZ61N89P))\n        (map-set token-count 'SP31YB1E2VCAGW2DKGGNH82ZEYCF7V3P7CZ61N89P (+ (get-balance 'SP31YB1E2VCAGW2DKGGNH82ZEYCF7V3P7CZ61N89P) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u89) 'SP1S538TKS1HVKKA111X54FCR9DV7YGD069EDTF1F))\n        (map-set token-count 'SP1S538TKS1HVKKA111X54FCR9DV7YGD069EDTF1F (+ (get-balance 'SP1S538TKS1HVKKA111X54FCR9DV7YGD069EDTF1F) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u90) 'SP3QG9M0AXTS3X7ZYHXMK6F8VXCQJCBKF31AEK10B))\n        (map-set token-count 'SP3QG9M0AXTS3X7ZYHXMK6F8VXCQJCBKF31AEK10B (+ (get-balance 'SP3QG9M0AXTS3X7ZYHXMK6F8VXCQJCBKF31AEK10B) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u91) 'SP1BQZ7QBWMRCYYFB51F5SGH2NJJ33R3BJQA71AQ0))\n        (map-set token-count 'SP1BQZ7QBWMRCYYFB51F5SGH2NJJ33R3BJQA71AQ0 (+ (get-balance 'SP1BQZ7QBWMRCYYFB51F5SGH2NJJ33R3BJQA71AQ0) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u92) 'SPWKDKPZ3QDPQGDADWJ3EWPAP14CB1N1HDQ897W5))\n        (map-set token-count 'SPWKDKPZ3QDPQGDADWJ3EWPAP14CB1N1HDQ897W5 (+ (get-balance 'SPWKDKPZ3QDPQGDADWJ3EWPAP14CB1N1HDQ897W5) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u93) 'SPMQAMQP7SD25HRENNHHRK38PY5M2AE6SWVZVY56))\n        (map-set token-count 'SPMQAMQP7SD25HRENNHHRK38PY5M2AE6SWVZVY56 (+ (get-balance 'SPMQAMQP7SD25HRENNHHRK38PY5M2AE6SWVZVY56) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u94) 'SPQ91KHXB3F7K6VGW4ZVQST0G824SDBGZWE9PVGD))\n        (map-set token-count 'SPQ91KHXB3F7K6VGW4ZVQST0G824SDBGZWE9PVGD (+ (get-balance 'SPQ91KHXB3F7K6VGW4ZVQST0G824SDBGZWE9PVGD) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u95) 'SP2DRM5DKDJX6ECFJH9XDT66DZV8FK2H1A27JZHCA))\n        (map-set token-count 'SP2DRM5DKDJX6ECFJH9XDT66DZV8FK2H1A27JZHCA (+ (get-balance 'SP2DRM5DKDJX6ECFJH9XDT66DZV8FK2H1A27JZHCA) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u96) 'SPQE3J7XMMK0DN0BWJZHGE6B05VDYQRXRMDV734D))\n        (map-set token-count 'SPQE3J7XMMK0DN0BWJZHGE6B05VDYQRXRMDV734D (+ (get-balance 'SPQE3J7XMMK0DN0BWJZHGE6B05VDYQRXRMDV734D) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u97) 'SP30MSY8NECE4SJJRQ5NVFZA58HF9Y93XX6E15WMG))\n        (map-set token-count 'SP30MSY8NECE4SJJRQ5NVFZA58HF9Y93XX6E15WMG (+ (get-balance 'SP30MSY8NECE4SJJRQ5NVFZA58HF9Y93XX6E15WMG) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u98) 'SP3AJC728JY0Y43E8RT6K4VDWPT265RDMXJ8M0VH0))\n        (map-set token-count 'SP3AJC728JY0Y43E8RT6K4VDWPT265RDMXJ8M0VH0 (+ (get-balance 'SP3AJC728JY0Y43E8RT6K4VDWPT265RDMXJ8M0VH0) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u99) 'SP2TDTJNXZF30CQ8CY7ZQ757P2CKGWY3Y2M4TPQ6M))\n        (map-set token-count 'SP2TDTJNXZF30CQ8CY7ZQ757P2CKGWY3Y2M4TPQ6M (+ (get-balance 'SP2TDTJNXZF30CQ8CY7ZQ757P2CKGWY3Y2M4TPQ6M) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u100) 'SP3G9PTDQ03M7DM10HJXAAJWKFY0GED64690PH2RS))\n        (map-set token-count 'SP3G9PTDQ03M7DM10HJXAAJWKFY0GED64690PH2RS (+ (get-balance 'SP3G9PTDQ03M7DM10HJXAAJWKFY0GED64690PH2RS) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u101) 'SP3NYA0QV0QF333437ZERVRH9T0XQ24JM81K36YC4))\n        (map-set token-count 'SP3NYA0QV0QF333437ZERVRH9T0XQ24JM81K36YC4 (+ (get-balance 'SP3NYA0QV0QF333437ZERVRH9T0XQ24JM81K36YC4) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u102) 'SP1PKNSX4PYJXHFM6X3KVHEAJNVAWBVZ9QKC9AEXY))\n        (map-set token-count 'SP1PKNSX4PYJXHFM6X3KVHEAJNVAWBVZ9QKC9AEXY (+ (get-balance 'SP1PKNSX4PYJXHFM6X3KVHEAJNVAWBVZ9QKC9AEXY) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u103) 'SP2Z7EPPAQGCVSTSKG13DT6YRN8X21HVD83Y5YH1N))\n        (map-set token-count 'SP2Z7EPPAQGCVSTSKG13DT6YRN8X21HVD83Y5YH1N (+ (get-balance 'SP2Z7EPPAQGCVSTSKG13DT6YRN8X21HVD83Y5YH1N) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u104) 'SP1HFY2NV2C666NY5XA47YTSMJ9YY4DRKY3QJ77G))\n        (map-set token-count 'SP1HFY2NV2C666NY5XA47YTSMJ9YY4DRKY3QJ77G (+ (get-balance 'SP1HFY2NV2C666NY5XA47YTSMJ9YY4DRKY3QJ77G) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u105) 'SPREYG1GJN3EY6Z34Q7VHZW8Q1GQZANHX5RVJPRP))\n        (map-set token-count 'SPREYG1GJN3EY6Z34Q7VHZW8Q1GQZANHX5RVJPRP (+ (get-balance 'SPREYG1GJN3EY6Z34Q7VHZW8Q1GQZANHX5RVJPRP) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u106) 'SP2VPJJ3FD93Y3D9D51X014DXKYRD1TBNBSWDP7EN))\n        (map-set token-count 'SP2VPJJ3FD93Y3D9D51X014DXKYRD1TBNBSWDP7EN (+ (get-balance 'SP2VPJJ3FD93Y3D9D51X014DXKYRD1TBNBSWDP7EN) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u107) 'SPFXE6VH4FKZKSH0Z9TDR53M8E8THHKDNAT9T5K9))\n        (map-set token-count 'SPFXE6VH4FKZKSH0Z9TDR53M8E8THHKDNAT9T5K9 (+ (get-balance 'SPFXE6VH4FKZKSH0Z9TDR53M8E8THHKDNAT9T5K9) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u108) 'SP3TMFCYCY8ET90R9B5VWQGVDJA6M8MJVPTN9GGP2))\n        (map-set token-count 'SP3TMFCYCY8ET90R9B5VWQGVDJA6M8MJVPTN9GGP2 (+ (get-balance 'SP3TMFCYCY8ET90R9B5VWQGVDJA6M8MJVPTN9GGP2) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u109) 'SP6AQ29G5VQZ6GMA78433EY6BMZRW875NDM0WP1K))\n        (map-set token-count 'SP6AQ29G5VQZ6GMA78433EY6BMZRW875NDM0WP1K (+ (get-balance 'SP6AQ29G5VQZ6GMA78433EY6BMZRW875NDM0WP1K) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u110) 'SPSZX89GRJ10XQ6ZPF3ZDHZR5A1HTTV929E4CNJA))\n        (map-set token-count 'SPSZX89GRJ10XQ6ZPF3ZDHZR5A1HTTV929E4CNJA (+ (get-balance 'SPSZX89GRJ10XQ6ZPF3ZDHZR5A1HTTV929E4CNJA) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u111) 'SP2AFS93R0SNHCHHFCH9X9CJTPSHFD1PNM75F6AWD))\n        (map-set token-count 'SP2AFS93R0SNHCHHFCH9X9CJTPSHFD1PNM75F6AWD (+ (get-balance 'SP2AFS93R0SNHCHHFCH9X9CJTPSHFD1PNM75F6AWD) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u112) 'SP3NJ34KE66TG9RK6BRHF2VK4HHGEM09F2XBAVXPC))\n        (map-set token-count 'SP3NJ34KE66TG9RK6BRHF2VK4HHGEM09F2XBAVXPC (+ (get-balance 'SP3NJ34KE66TG9RK6BRHF2VK4HHGEM09F2XBAVXPC) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u113) 'SP3QGW69T7Q2BBB6RCCXGN6MCJCH10N0958W3GZ9Z))\n        (map-set token-count 'SP3QGW69T7Q2BBB6RCCXGN6MCJCH10N0958W3GZ9Z (+ (get-balance 'SP3QGW69T7Q2BBB6RCCXGN6MCJCH10N0958W3GZ9Z) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u114) 'SP2RTE7F21N6GQ6BBZR7JGGRWAT0T5Q3Z9ZHB9KRS))\n        (map-set token-count 'SP2RTE7F21N6GQ6BBZR7JGGRWAT0T5Q3Z9ZHB9KRS (+ (get-balance 'SP2RTE7F21N6GQ6BBZR7JGGRWAT0T5Q3Z9ZHB9KRS) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u115) 'SP3SPMCB0T82REEBE0HHQ1B80QT7G07T2K92DAECV))\n        (map-set token-count 'SP3SPMCB0T82REEBE0HHQ1B80QT7G07T2K92DAECV (+ (get-balance 'SP3SPMCB0T82REEBE0HHQ1B80QT7G07T2K92DAECV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u116) 'SPMS4E9RQ4GCGG68R6D15PKV01TYNCBPYZG1ZMFE))\n        (map-set token-count 'SPMS4E9RQ4GCGG68R6D15PKV01TYNCBPYZG1ZMFE (+ (get-balance 'SPMS4E9RQ4GCGG68R6D15PKV01TYNCBPYZG1ZMFE) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u117) 'SPMS4E9RQ4GCGG68R6D15PKV01TYNCBPYZG1ZMFE))\n        (map-set token-count 'SPMS4E9RQ4GCGG68R6D15PKV01TYNCBPYZG1ZMFE (+ (get-balance 'SPMS4E9RQ4GCGG68R6D15PKV01TYNCBPYZG1ZMFE) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u118) 'SPMS4E9RQ4GCGG68R6D15PKV01TYNCBPYZG1ZMFE))\n        (map-set token-count 'SPMS4E9RQ4GCGG68R6D15PKV01TYNCBPYZG1ZMFE (+ (get-balance 'SPMS4E9RQ4GCGG68R6D15PKV01TYNCBPYZG1ZMFE) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u119) 'SP224YKZ55F25SBYVR8HZXQ7G89CC8WYKAGMZHQ0A))\n        (map-set token-count 'SP224YKZ55F25SBYVR8HZXQ7G89CC8WYKAGMZHQ0A (+ (get-balance 'SP224YKZ55F25SBYVR8HZXQ7G89CC8WYKAGMZHQ0A) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u120) 'SP224YKZ55F25SBYVR8HZXQ7G89CC8WYKAGMZHQ0A))\n        (map-set token-count 'SP224YKZ55F25SBYVR8HZXQ7G89CC8WYKAGMZHQ0A (+ (get-balance 'SP224YKZ55F25SBYVR8HZXQ7G89CC8WYKAGMZHQ0A) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u121) 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ))\n        (map-set token-count 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ (+ (get-balance 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u122) 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ))\n        (map-set token-count 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ (+ (get-balance 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u123) 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ))\n        (map-set token-count 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ (+ (get-balance 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u124) 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ))\n        (map-set token-count 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ (+ (get-balance 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u125) 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ))\n        (map-set token-count 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ (+ (get-balance 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u126) 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ))\n        (map-set token-count 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ (+ (get-balance 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u127) 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ))\n        (map-set token-count 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ (+ (get-balance 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u128) 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ))\n        (map-set token-count 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ (+ (get-balance 'SP38GBVK5HEJ0MBH4CRJ9HQEW86HX0H9AP1HZ3SVZ) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u129) 'SP1EMXT9RET8W5TXQ325BG3TJ6X15NXV5GKEGVQE6))\n        (map-set token-count 'SP1EMXT9RET8W5TXQ325BG3TJ6X15NXV5GKEGVQE6 (+ (get-balance 'SP1EMXT9RET8W5TXQ325BG3TJ6X15NXV5GKEGVQE6) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u130) 'SP1EMXT9RET8W5TXQ325BG3TJ6X15NXV5GKEGVQE6))\n        (map-set token-count 'SP1EMXT9RET8W5TXQ325BG3TJ6X15NXV5GKEGVQE6 (+ (get-balance 'SP1EMXT9RET8W5TXQ325BG3TJ6X15NXV5GKEGVQE6) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u131) 'SP1EMXT9RET8W5TXQ325BG3TJ6X15NXV5GKEGVQE6))\n        (map-set token-count 'SP1EMXT9RET8W5TXQ325BG3TJ6X15NXV5GKEGVQE6 (+ (get-balance 'SP1EMXT9RET8W5TXQ325BG3TJ6X15NXV5GKEGVQE6) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u132) 'SP1NZH0KGYCMRYZVQ0SZ7SS60DR1XD5KJE5Y9HQQX))\n        (map-set token-count 'SP1NZH0KGYCMRYZVQ0SZ7SS60DR1XD5KJE5Y9HQQX (+ (get-balance 'SP1NZH0KGYCMRYZVQ0SZ7SS60DR1XD5KJE5Y9HQQX) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u133) 'SP3N0TH3N7BDG4WBSYV6FE2ASSAPEGWK47EEWD9TV))\n        (map-set token-count 'SP3N0TH3N7BDG4WBSYV6FE2ASSAPEGWK47EEWD9TV (+ (get-balance 'SP3N0TH3N7BDG4WBSYV6FE2ASSAPEGWK47EEWD9TV) u1))\n        (try! (nft-mint? NOT-Punk (+ last-nft-id u134) 'SPN4Y5QPGQA8882ZXW90ADC2DHYXMSTN8VAR8C3X))\n        (map-set token-count 'SPN4Y5QPGQA8882ZXW90ADC2DHYXMSTN8VAR8C3X (+ (get-balance 'SPN4Y5QPGQA8882ZXW90ADC2DHYXMSTN8VAR8C3X) u1))     \n        (var-set last-id (+ last-nft-id u135))\n        (var-set airdrop-called true)\n        (ok true))))",
    "analysis": {
      "summary": "This smart contract is designed to manage the minting, ownership, and transfer of a non-fungible token (NFT) collection named NOT-Punk on the Stacks blockchain. It includes features for minting NFTs using STX or SPoint, airdropping NFTs, setting various administrative parameters, and managing NFT metadata.",
      "explanation": "The contract implements the NFT trait from another contract and defines a new NFT called NOT-Punk. It sets up various constants and variables for managing the contract state, including mint limits, pricing, and addresses for artists and partners. The contract provides multiple public functions for minting NFTs in batches, using either STX or a custom token called SPoint. It also includes functions for administrative tasks such as setting prices, toggling the sale state, and managing metadata. Additionally, the contract supports airdropping NFTs to specific addresses and includes a marketplace functionality with listing, buying, and transferring NFTs while handling commissions and royalties. The contract is designed with a focus on flexibility in minting and sales strategies, as well as supporting secondary market transactions.",
      "tags": [
        "NFT",
        "minting",
        "marketplace",
        "metadata-management",
        "airdrop"
      ]
    }
  },
  {
    "rank": 76,
    "contract": "SP39JCPYF3XTGS663GSY41G9VX04XRBM0KQ2ZZQ14.balancer-v11-1",
    "calls": 416,
    "source": "\n(define-constant ONE_6 u1000000)\n(define-constant ONE_8 u100000000)\n(define-constant ERR-NO-PR (err u400))\n\n(define-read-only (six-to-eight (n uint))\n    (/ (* n ONE_8) ONE_6)\n)\n\n(define-public (balancer1_i (in uint) (mrc uint))\n    (begin \n        (try! (contract-call? \n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper \n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 \n            'SP2SF8P7AKN8NYHD57T96C51RRV9M0GKRN02BNHD2.token-wflat  \n            u100000000 (six-to-eight in) none))\n        (let \n            (\n                (bb (stx-get-balance tx-sender))\n            )            \n            (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.path-apply_v1_2_0 apply  \n                (list {a: \"v\", b: 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-v1_0_0-0003, c: u21000003, d: 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx, e: 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity, f: false}) \n                (unwrap-panic (contract-call? 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity get-balance tx-sender))\n                (some 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity) \n                (some 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx )\n                none\n                none\n                none\n                (some 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to) \n                (some 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-v1_0_0-0003) \n                none\n                none\n                none \n                (some 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-v1_0_0-0003) \n                none\n                none\n                none\n                none\n                none\n                none\n                none\n                none\n                none\n                none\n                none\n            ))\n            (let \n                (\n                    (ba (stx-get-balance tx-sender))\n                    (rc (- ba bb))\n                )\n                (asserts! (>= rc mrc) ERR-NO-PR)\n                (ok (list bb ba))\n            ) \n        )\n    )\n)\n\n(define-public (balancer1 (dd uint) (mr uint) (ta uint))\n    (let (\n            (r (list \n                (balancer1_i dd mr)\n            ))\n        )\n        (and (> (stx-get-balance tx-sender) ta) (try! (stx-transfer? (- (stx-get-balance tx-sender) ta) tx-sender 'SP39JCPYF3XTGS663GSY41G9VX04XRBM0KQ2ZZQ14)))\n        (ok r)\n    )\n)\n\n(define-public (balancer2_i (in uint) (mout uint))\n    (begin\n        (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.path-apply_v1_2_0 apply  \n                (list {a: \"v\", b: 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-v1_0_0-0003, c: u21000003, d: 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx, e: 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity, f: true}) \n                in\n                (some 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx) \n                (some 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity) \n                none\n                none\n                none\n                (some 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to)\n                (some 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-v1_0_0-0003) \n                none\n                none\n                none \n                (some 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-v1_0_0-0003)\n                none\n                none\n                none\n                none\n                none\n                none\n                none\n                none\n                none\n                none\n                none\n            ))\n        (let\n            (\n                (bb (stx-get-balance tx-sender))\n            )\n            (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper \n                'SP2SF8P7AKN8NYHD57T96C51RRV9M0GKRN02BNHD2.token-wflat \n                'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2   \n                u100000000 \n                (six-to-eight (unwrap-panic (contract-call? 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity get-balance tx-sender)))\n                none\n            ))\n            (let \n                (\n                    (ba (stx-get-balance tx-sender))\n                    (rc (- ba bb))\n                )\n                (asserts! (>= rc mout) (err u400))\n                (ok (list bb ba))\n            ) \n        )\n    )\n)\n\n(define-public (balancer2 (dd uint) (mr uint) (ta uint))\n    (let (\n            (r (list \n                (balancer2_i dd mr)\n            ))\n        )\n        (and (> (stx-get-balance tx-sender) ta) (try! (stx-transfer? (- (stx-get-balance tx-sender) ta) tx-sender 'SP39JCPYF3XTGS663GSY41G9VX04XRBM0KQ2ZZQ14)))\n        (ok r)\n    )\n)\n\n(define-public (balancer (dd uint) (mr uint) (ta uint))\n    (let (\n            (r (list \n                (balancer1_i dd mr)\n                (balancer2_i dd mr)\n            ))\n        )\n        (and (> (stx-get-balance tx-sender) ta) (try! (stx-transfer? (- (stx-get-balance tx-sender) ta) tx-sender 'SP39JCPYF3XTGS663GSY41G9VX04XRBM0KQ2ZZQ14)))\n        (ok r)\n    )\n)",
    "analysis": {
      "summary": "This contract facilitates complex token swaps and balance checks on the Stacks blockchain, utilizing external contracts for swap operations and balance verifications.",
      "explanation": "The contract defines constants for unit conversion and an error code, and contains functions for converting token amounts, performing token swaps, and checking balance changes post-swap. It interacts with external contracts for swapping tokens and checking balances.\n\n- Constants <L1-3> define unit conversion rates and a standard error code for failed preconditions.\n- Function `six-to-eight` <L5-7> converts a uint amount from 6 decimal places to 8 decimal places, using the defined constants.\n- `balancer1_i` <L9-45> performs a token swap operation using an external AMM pool contract and checks if the balance change meets a minimum required change (mrc), returning the initial and final balances.\n- `balancer1` <L47-55> is a public interface to `balancer1_i`, ensuring the sender has a sufficient balance before proceeding with the swap and balance transfer.\n- Similarly, `balancer2_i` <L57-93> and `balancer2` <L95-103> provide functionality for another swap scenario, utilizing different tokens and external contracts.\n- `balancer` <L105-113> combines the operations of `balancer1_i` and `balancer2_i`, offering a single interface for performing both swap operations in sequence.\n\nEach `balancer` function uses `try!` for calling external contracts, which means the transaction will abort if any of those calls fail. The `asserts!` statement ensures that the balance change post-swap meets or exceeds a specified minimum, using the custom error code if not.",
      "tags": [
        "DeFi",
        "token-swap",
        "balance-check",
        "external-contract-interaction"
      ]
    }
  },
  {
    "rank": 77,
    "contract": "SP11Z0M9SXMXM2BGQHDPT0B9Z03TDE56WFSF6EEX8.gm-stxcity-dex",
    "calls": 414,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u88888888000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u5000000000)\n(define-constant VIRTUAL_STX_VALUE u1000000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u100000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP11Z0M9SXMXM2BGQHDPT0B9Z03TDE56WFSF6EEX8.gm-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u84979816443594)\n    (var-set stx-balance u46000000)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX, with automatic fee distribution and token burn upon reaching target STX amount.",
      "explanation": "The contract uses a bonding curve to facilitate token trades, adjusting prices based on supply and demand. It's designed to work with a specific token, defined by 'allow-token'. Trades are enabled or disabled through a toggle. The contract collects fees on trades, burns a percentage of tokens to benefit remaining holders, and distributes STX to predefined wallets upon reaching a target STX amount. Key functions include 'buy' and 'sell', allowing users to trade STX for tokens and vice versa, with fees applied. The contract also provides functions to estimate trade outcomes ('get-buyable-tokens' and 'get-sellable-stx'). It initializes with predefined balances and percentages for fees and burns, and automatically transitions to a non-tradable state upon reaching the STX target, distributing assets accordingly.\n\n- The contract uses the SIP-010 trait for token standards <L1>.\n- Error constants are defined for various failure modes <L3-10>.\n- Constants define the token supply, DEX address, and various parameters for the bonding curve and fees <L12-24>.\n- Tradable status, balances, and percentages for burns and fees are stored in data variables <L26-31>.\n- The 'buy' function <L33-75> allows users to purchase tokens with STX, applying a fee, and adjusting balances. It checks if trading is enabled, if the STX amount is positive, and if the token is authorized. It calculates the number of tokens purchasable with the given STX amount after fees, updates balances, and transfers tokens and STX accordingly. If the STX target is reached, it triggers distribution and burning mechanisms.\n- The 'sell' function <L77-111> enables users to sell tokens in exchange for STX, with a similar fee and balance adjustment mechanism. It ensures that the DEX has enough STX to complete the trade.\n- 'get-buyable-tokens' <L113-138> and 'get-sellable-stx' <L140-164> are read-only functions that estimate trade outcomes based on current balances and the provided amount of STX or tokens.\n- The contract initializes with set values for virtual STX, token balance, STX balance, and toggles trading as enabled <L166-172>.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "protocol",
        "trading",
        "STX",
        "token"
      ]
    }
  },
  {
    "rank": 78,
    "contract": "SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.marketplace-bid-v6",
    "calls": 407,
    "source": "(use-trait nft-trait .biddable-nft-trait.biddable-nft)\n\n;; bids map\n;; if nft-id is `none`, the bid is a collection bid\n;;    and can be accepted by anyone holding a token from\n;;    that collection.\n\n(define-map bids\n  uint\n  { \n    collection: principal, \n    nft-id: (optional uint), \n    bid-amount: uint, \n    buyer: principal, \n    seller: (optional principal), \n    expiration-block: uint, \n    action-event-index: uint \n  }\n)\n\n(define-constant contract-address (as-contract tx-sender))\n(define-constant contract-owner tx-sender)\n(define-constant err-contract-not-authorized u101)\n(define-constant err-placing-bids-disabled u102)\n(define-constant err-accepting-bids-disabled u103)\n(define-constant err-withdrawing-bids-disabled u104)\n(define-constant err-user-not-authorized u105)\n(define-constant err-no-bid-found u106)\n(define-constant err-bid-expired u107)\n(define-constant err-wrong-collection u108)\n(define-constant err-wrong-nft-id u109)\n(define-constant err-royalty-issue u110)\n\n(define-data-var placing-bids-enabled bool true)\n(define-data-var accepting-bids-enabled bool true)\n(define-data-var withdrawing-bids-enabled bool true)\n(define-data-var commission uint u200)\n(define-data-var id uint u0)\n\n(define-public (place-bid (collection <nft-trait>) (nft-id (optional uint)) (amount uint) (expiration uint) (memo (optional (string-ascii 256))))\n  (let ((block block-height)\n        (next-bid-id (var-get id))\n        (nft-owner \n          (if (is-some nft-id) \n            (get-owner collection (unwrap-panic nft-id))\n            none)\n        ) \n        (nft {collection: (contract-of collection), nft-id: nft-id, bid-amount: amount, buyer: tx-sender, seller: nft-owner, expiration-block: (+ expiration block), action-event-index: u0}))\n    (asserts! (var-get placing-bids-enabled) \n              (err err-placing-bids-disabled))\n\n    (try! (stx-transfer? amount tx-sender contract-address))\n    (map-set bids next-bid-id nft)\n    (var-set id (+ next-bid-id u1))\n\n    (print { \n      action: \"place-bid\",\n      payload: {\n        bid_id: next-bid-id,\n        action_event_index: (get action-event-index nft),\n        collection_id: collection,\n        ;; asset_id: asset-id',\n        token_id: nft-id,\n        bidder_address: tx-sender,\n        seller_address: nft-owner,\n        bid_amount: amount, \n        expiration_block: (get expiration-block nft),\n        memo: memo\n      }\n    })\n\n    (ok next-bid-id)\n  )\n)\n\n(define-public (withdraw-bid (bid-id uint))\n  (let ((previous-bid (get-bid bid-id))\n        (previous-bidder (get buyer previous-bid))\n        (previous-bid-action-event-index (get action-event-index previous-bid))\n        (previous-bid-amount (get bid-amount previous-bid)))\n    (asserts! (var-get withdrawing-bids-enabled) \n              (err err-withdrawing-bids-disabled))\n    (asserts! (> previous-bid-amount u0) (err err-no-bid-found))\n    (asserts! (or (is-eq previous-bidder tx-sender) (is-eq contract-owner tx-sender))\n              (err err-user-not-authorized))\n\n    (map-delete bids bid-id)\n\n    (print {\n      action: \"withdraw-bid\",\n      payload: {\n        bid_id: bid-id,\n        action_event_index: (+ u1 previous-bid-action-event-index),\n        collection_id: (get collection previous-bid),\n        token_id: (get nft-id previous-bid),\n        bidder_address: previous-bidder,\n        seller_address: (get seller previous-bid),\n        bid_amount: previous-bid-amount,\n        expiration_block: (get expiration-block previous-bid) \n      }\n    })\n\n    (as-contract (stx-transfer? previous-bid-amount contract-address previous-bidder))\n  )\n)\n\n(define-public (accept-bid (bid-id uint) (collection <nft-trait>) (nft-id uint))\n  (let ((bid (get-bid bid-id))\n        (bid-nft-id (get nft-id bid))\n        (bid-collection (get collection bid))\n        (bidder (get buyer bid))\n        (bid-amount (get bid-amount bid))\n        (bid-action-event-index (get action-event-index bid))\n        (expiration-block (get expiration-block bid))\n        (nft-owner (unwrap! (get-owner collection nft-id) (err err-user-not-authorized)))\n        (royalty-percent (unwrap! (get-royalty-amount collection) (err err-royalty-issue)))\n        (royalty-address (unwrap! (get-royalty-address collection) (err err-royalty-issue)))\n        (commission-amount (/ (* bid-amount (var-get commission)) u10000))\n        (royalty-amount (/ (* bid-amount royalty-percent) u10000))\n        (to-owner-amount (- (- bid-amount commission-amount) royalty-amount))\n        (block block-height))\n    (asserts! (var-get accepting-bids-enabled) \n              (err err-accepting-bids-disabled))\n    (asserts! (> bid-amount u0) (err err-no-bid-found))\n    (asserts! (is-eq (contract-of collection) bid-collection) (err err-wrong-collection))\n    (asserts! (or \n                (is-none bid-nft-id) \n                (and (is-some bid-nft-id) (is-eq (unwrap-panic bid-nft-id) nft-id))) \n              (err err-wrong-nft-id))\n    (asserts! (is-eq tx-sender nft-owner) (err err-user-not-authorized))\n    (asserts! (> expiration-block block) (err err-bid-expired))\n\n    (map-delete bids bid-id)\n    (try! (contract-call? collection transfer nft-id tx-sender bidder))\n    (and (> to-owner-amount u0)\n        (try! (as-contract (stx-transfer? to-owner-amount contract-address nft-owner))))\n    (and (> commission-amount u0)\n        (try! (as-contract (stx-transfer? commission-amount contract-address contract-owner))))\n    (and (> royalty-amount u0)\n        (try! (as-contract (stx-transfer? royalty-amount contract-address royalty-address))))\n\n    (print { \n      action: \"accept-bid\",\n      payload: {\n        bid_id: bid-id,\n        action_event_index: (+ u1 bid-action-event-index),\n        collection_id: collection,\n        token_id: nft-id,\n        bidder_address: bidder,\n        seller_address: nft-owner,\n        bid_amount: bid-amount, \n        expiration_block: expiration-block,\n        royalty: {\n          recipient_address: royalty-address,\n          percent: royalty-percent\n        }\n      }\n    })\n\n    (ok true)\n  )\n)\n\n(define-public (change-bid-amount-and-expiration (bid-id uint) (new-amount uint) (new-expiration uint))\n  (let ((bid (get-bid bid-id))\n        (bidder (get buyer bid))\n        (bid-amount (get bid-amount bid))\n        (bid-collection (get collection bid))\n        (bid-nft-id (get nft-id bid))\n        (bid-action-event-index (get action-event-index bid))\n        (seller (get seller bid))\n        (block block-height)\n        (new-bid (merge bid {bid-amount: new-amount, expiration-block: (+ new-expiration block), action-event-index: (+ u1 bid-action-event-index)})))\n    (asserts! (var-get accepting-bids-enabled) \n              (err err-accepting-bids-disabled))\n    (asserts! (> bid-amount u0) (err err-no-bid-found))\n    (asserts! (is-eq tx-sender bidder) (err err-user-not-authorized))\n\n    (if (is-eq bid-amount new-amount)\n      true\n      (if (< new-amount bid-amount)\n        (try! (as-contract (stx-transfer? (- bid-amount new-amount) contract-address bidder)))\n        (try! (stx-transfer? (- new-amount bid-amount) tx-sender contract-address))\n      )\n    )\n\n    (map-set bids bid-id new-bid)\n\n    (print { \n      action: \"change-bid-amount-and-expiration\",\n      payload: {\n        bid_id: bid-id,\n        action_event_index: (get action-event-index new-bid), \n        collection_id: bid-collection,\n        ;; asset_id: asset-id',\n        token_id: bid-nft-id,\n        bidder_address: bidder,\n        seller_address: seller,\n        bid_amount: (get bid-amount new-bid), \n        expiration_block: (get expiration-block new-bid),\n      }\n    })\n\n    (ok true)\n  )\n)\n\n(define-public (set-placing-bids-enabled (enabled bool))\n    (begin\n        (asserts! (is-eq tx-sender contract-owner) (err err-user-not-authorized))\n        (ok (var-set placing-bids-enabled enabled))\n    )\n)\n\n(define-public (set-accepting-bids-enabled (enabled bool))\n    (begin\n        (asserts! (is-eq tx-sender contract-owner) (err err-user-not-authorized))\n        (ok (var-set accepting-bids-enabled enabled))\n    )\n)\n\n(define-public (set-withdrawing-bids-enabled (enabled bool))\n    (begin\n        (asserts! (is-eq tx-sender contract-owner) (err err-user-not-authorized))\n        (ok (var-set withdrawing-bids-enabled enabled))\n    )\n)\n\n(define-read-only (get-bid (bid-id uint))\n  (default-to\n    {collection: tx-sender, nft-id: none, buyer: contract-owner, seller: none, bid-amount: u0, expiration-block: block-height, action-event-index: u0}\n    (map-get? bids bid-id)\n  )\n)\n\n(define-private (get-owner (nft <nft-trait>) (nft-id uint))\n  (unwrap-panic (contract-call? nft get-owner nft-id))\n)\n\n(define-private (get-royalty-amount (collection <nft-trait>))\n  (contract-call? collection get-royalty-percent)\n)\n\n(define-private (get-royalty-address (collection <nft-trait>))\n  (contract-call? collection get-artist-address)\n)",
    "analysis": {
      "summary": "This smart contract enables users to place, withdraw, and accept bids on NFTs, including handling royalties and commissions.",
      "explanation": "The contract interacts with NFTs by allowing users to place bids on individual NFTs or collections, withdraw their bids, and for NFT owners to accept bids. It uses a map to store bid information, including the bidder, amount, and the NFT or collection targeted. The contract ensures that only authorized actions can occur by checking if the user is allowed to withdraw or accept bids and if the bid placement is enabled. It also calculates and handles the transfer of funds, including commissions and royalties, upon the acceptance of a bid.\n\n- The `bids` map (<L7-15>) stores all bid information, uniquely identified by a bid ID. It includes details like the collection, NFT ID, bid amount, buyer, seller, expiration block, and an action event index.\n- Constants defined (<L17-21>) include the contract address, contract owner, and error codes for various unauthorized or invalid actions.\n- `placing-bids-enabled`, `accepting-bids-enabled`, and `withdrawing-bids-enabled` (<L23-25>) are data variables that control whether users can place, accept, or withdraw bids. These can be toggled by the contract owner.\n- The `place-bid` function (<L27-54>) allows users to place a bid on an NFT or collection, transferring the bid amount to the contract for escrow. It updates the `bids` map with the new bid details.\n- `withdraw-bid` (<L56-80>) enables the bidder or contract owner to withdraw a bid, deleting it from the `bids` map and refunding the bid amount.\n- `accept-bid` (<L82-117>) allows the NFT owner to accept a bid, transferring the NFT to the bidder and handling the distribution of the bid amount, including any commissions and royalties.\n- `change-bid-amount-and-expiration` (<L119-153>) lets a bidder update the bid amount and expiration block of their bid, with appropriate fund transfers handled based on whether the new amount is higher or lower.\n- The `set-` functions (<L155-175>) allow the contract owner to enable or disable the placing, accepting, and withdrawing of bids.\n- `get-bid` (<L177-183>) is a read-only function that retrieves bid details by ID, providing default values if the bid doesn't exist.\n- `get-owner`, `get-royalty-amount`, and `get-royalty-address` (<L185-195>) are private functions that interact with the NFT contract to retrieve ownership and royalty information.",
      "tags": [
        "NFT",
        "bidding",
        "royalties",
        "commission",
        "escrow"
      ]
    }
  },
  {
    "rank": 79,
    "contract": "SP3J9CZ0HNRZX7S5YBAFPT3SJ4KP1PBSRVP3TQAT7.world-peace-stacks-balls",
    "calls": 405,
    "source": ";; world-peace-stacks-balls\n;; contractType: public\n\n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-non-fungible-token world-peace-stacks-balls uint)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant COMM u1000)\n(define-constant COMM-ADDR 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S)\n\n(define-constant ERR-NO-MORE-NFTS u100)\n(define-constant ERR-NOT-ENOUGH-PASSES u101)\n(define-constant ERR-PUBLIC-SALE-DISABLED u102)\n(define-constant ERR-CONTRACT-INITIALIZED u103)\n(define-constant ERR-NOT-AUTHORIZED u104)\n(define-constant ERR-INVALID-USER u105)\n(define-constant ERR-LISTING u106)\n(define-constant ERR-WRONG-COMMISSION u107)\n(define-constant ERR-NOT-FOUND u108)\n(define-constant ERR-PAUSED u109)\n(define-constant ERR-MINT-LIMIT u110)\n(define-constant ERR-METADATA-FROZEN u111)\n(define-constant ERR-AIRDROP-CALLED u112)\n(define-constant ERR-NO-MORE-MINTS u113)\n(define-constant ERR-INVALID-PERCENTAGE u114)\n\n;; Internal variables\n(define-data-var mint-limit uint u1000)\n(define-data-var last-id uint u1)\n(define-data-var total-price uint u0)\n(define-data-var artist-address principal 'SP3J9CZ0HNRZX7S5YBAFPT3SJ4KP1PBSRVP3TQAT7)\n(define-data-var ipfs-root (string-ascii 80) \"ipfs://ipfs/Qmcjtda73Wr3z4WH9awKAGkqEW3F7ktRcYwkTXCczBjwHR/json/\")\n(define-data-var mint-paused bool false)\n(define-data-var premint-enabled bool false)\n(define-data-var sale-enabled bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var airdrop-called bool false)\n(define-data-var mint-cap uint u1)\n\n(define-map mints-per-user principal uint)\n(define-map mint-passes principal uint)\n\n(define-public (claim) \n  (mint (list true)))\n\n;; Default Minting\n(define-private (mint (orders (list 25 bool)))\n  (mint-many orders))\n\n(define-private (mint-many (orders (list 25 bool )))  \n  (let \n    (\n      (last-nft-id (var-get last-id))\n      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))\n      (art-addr (var-get artist-address))\n      (id-reached (fold mint-many-iter orders last-nft-id))\n      (price (* (var-get total-price) (- id-reached last-nft-id)))\n      (total-commission (/ (* price COMM) u10000))\n      (current-balance (get-balance tx-sender))\n      (total-artist (- price total-commission))\n      (capped (> (var-get mint-cap) u0))\n      (user-mints (get-mints tx-sender))\n    )\n    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))\n    (asserts! (or (not capped) (is-eq tx-sender DEPLOYER) (is-eq tx-sender art-addr) (>= (var-get mint-cap) (+ (len orders) user-mints))) (err ERR-NO-MORE-MINTS))\n    (map-set mints-per-user tx-sender (+ (len orders) user-mints))\n    (if (or (is-eq tx-sender art-addr) (is-eq tx-sender DEPLOYER) (is-eq (var-get total-price) u0000000))\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n      )\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n        (try! (stx-transfer? total-artist tx-sender (var-get artist-address)))\n        (try! (stx-transfer? total-commission tx-sender COMM-ADDR))\n      )    \n    )\n    (ok id-reached)))\n\n(define-private (mint-many-iter (ignore bool) (next-id uint))\n  (if (<= next-id (var-get mint-limit))\n    (begin\n      (unwrap! (nft-mint? world-peace-stacks-balls next-id tx-sender) next-id)\n      (+ next-id u1)    \n    )\n    next-id))\n\n(define-public (set-artist-address (address principal))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set artist-address address))))\n\n(define-public (set-price (price uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set total-price price))))\n\n(define-public (toggle-pause)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set mint-paused (not (var-get mint-paused))))))\n\n(define-public (set-mint-limit (limit uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))\n    (ok (var-set mint-limit limit))))\n\n(define-public (burn (token-id uint))\n  (begin \n    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))\n    (nft-burn? world-peace-stacks-balls token-id tx-sender)))\n\n(define-private (is-owner (token-id uint) (user principal))\n    (is-eq user (unwrap! (nft-get-owner? world-peace-stacks-balls token-id) false)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))\n    (print { notification: \"token-metadata-update\", payload: { token-class: \"nft\", contract-id: (as-contract tx-sender) }})\n    (var-set ipfs-root new-base-uri)\n    (ok true)))\n\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Non-custodial SIP-009 transfer function\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))\n    (trnsfr id sender recipient)))\n\n;; read-only functions\n(define-read-only (get-owner (token-id uint))\n  (ok (nft-get-owner? world-peace-stacks-balls token-id)))\n\n(define-read-only (get-last-token-id)\n  (ok (- (var-get last-id) u1)))\n\n(define-read-only (get-token-uri (token-id uint))\n  (ok (some (concat (concat (var-get ipfs-root) \"{id}\") \".json\"))))\n\n(define-read-only (get-paused)\n  (ok (var-get mint-paused)))\n\n(define-read-only (get-price)\n  (ok (var-get total-price)))\n\n(define-read-only (get-artist-address)\n  (ok (var-get artist-address)))\n\n(define-read-only (get-mints (caller principal))\n  (default-to u0 (map-get? mints-per-user caller)))\n\n(define-read-only (get-mint-limit)\n  (ok (var-get mint-limit)))\n\n(define-data-var license-uri (string-ascii 80) \"https://arweave.net/zmc1WTspIhFyVY82bwfAIcIExLFH5lUcHHUN0wXg4W8/3\")\n(define-data-var license-name (string-ascii 40) \"COMMERCIAL-NO-HATE\")\n\n(define-read-only (get-license-uri)\n  (ok (var-get license-uri)))\n  \n(define-read-only (get-license-name)\n  (ok (var-get license-name)))\n  \n(define-public (set-license-uri (uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-uri uri))))\n    \n(define-public (set-license-name (name (string-ascii 40)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-name name))))\n\n;; Non-custodial marketplace extras\n(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)\n\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal, royalty: uint})\n\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? world-peace-stacks-balls id sender recipient)\n    success\n      (let\n        ((sender-balance (get-balance sender))\n        (recipient-balance (get-balance recipient)))\n          (map-set token-count\n            sender\n            (- sender-balance u1))\n          (map-set token-count\n            recipient\n            (+ recipient-balance u1))\n          (ok success))\n    error (err error)))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? world-peace-stacks-balls id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? world-peace-stacks-balls id) (err ERR-NOT-FOUND)))\n      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))\n      (price (get price listing))\n      (royalty (get royalty listing)))\n    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (pay-royalty price royalty))\n    (try! (contract-call? comm-trait pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))\n    \n(define-data-var royalty-percent uint u500)\n\n(define-read-only (get-royalty-percent)\n  (ok (var-get royalty-percent)))\n\n(define-public (set-royalty-percent (royalty uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))\n    (ok (var-set royalty-percent royalty))))\n\n(define-private (pay-royalty (price uint) (royalty uint))\n  (let (\n    (royalty-amount (/ (* price royalty) u10000))\n  )\n  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))))\n    (try! (stx-transfer? royalty-amount tx-sender (var-get artist-address)))\n    (print false)\n  )\n  (ok true)))\n  \n\n",
    "analysis": {
      "summary": "This contract manages an NFT collection, allowing minting, burning, setting metadata, and facilitating non-custodial sales with royalty and commission support.",
      "explanation": "The contract implements an NFT collection with extended functionality for minting, burning, pausing minting, adjusting minting parameters, and handling metadata. It also includes features for listing NFTs on a non-custodial marketplace with royalty and commission settings. Key functionalities include:\n- NFT minting with a limit and pause capability. Minting can be done in batches, with checks for minting limits and the ability to pause minting.\n- Ownership management allows the artist or deployer to update critical information such as the artist address, mint price, and mint limit.\n- Metadata management with the ability to freeze metadata to prevent further changes.\n- Marketplace functionality includes listing NFTs for sale, unlisting, and buying, with support for royalty payments to the original artist and commission payments through a specified trait.\n- The contract uses several data variables and maps to keep track of state, including mint limits, total price, artist address, and metadata URIs.\n- It also defines several errors for handling common issues like unauthorized access, minting limits reached, and incorrect commission settings.\n- The contract is designed to be compliant with SIP-009 (Standard Trait Definition for Non-Fungible Tokens) for Stacks NFTs, ensuring compatibility with Stacks standards and tools.",
      "tags": [
        "NFT",
        "marketplace",
        "metadata-management",
        "royalties",
        "commission"
      ]
    }
  },
  {
    "rank": 80,
    "contract": "SP3CMTKSJQDEPDA735FWTZS517AMHQ13WTQM4CT1A.amm-swap-pool-v1-1",
    "calls": 383,
    "source": ";; hello-world contract\n\n(define-constant sender 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)\n(define-constant recipient 'SP3CMTKSJQDEPDA735FWTZS517AMHQ13WTQM4CT1A)\n\n(define-constant ERR-NOT-AUTHORIZED u401)\n(define-constant ERR-ALL-MINTED u101)\n(define-constant ERR-COOLDOWN u102)\n\n(define-constant CONTRACT-OWNER tx-sender)\n\n;; two\n(define-public (borrow (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-welsh-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-welsh-wstx-alex-amm (* b1 u100))))\n  )\n    (begin\n      (asserts! (> b2 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (mint (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-welsh-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-welsh-wstx-arkadiko (/ b1 u100))))\n  )\n    (begin\n      (asserts! (> (* b2 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-x-for-y (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-alex-wstx-alex-amm b1)))\n  )\n    (begin\n      (asserts! (> b2 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-y-for-x (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-alex-wstx-alex-fixed b1)))\n  )\n    (begin\n      (asserts! (> b2 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-x-for-z (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-alex-amm b1)))\n  )\n    (begin\n      (asserts! (> b2 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-z-for-x (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-arkadiko b1)))\n  )\n    (begin\n      (asserts! (> (* b2 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-y-for-z (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-alex-fixed b1)))\n  )\n    (begin\n      (asserts! (> b2 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-z-for-y (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-arkadiko b1)))\n  )\n    (begin\n      (asserts! (> (* b2 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-helper (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-alex-fixed b1)))\n  )\n    (begin\n      (asserts! (> b2 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-helper-a (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-alex-amm b1)))\n  )\n    (begin\n      (asserts! (> b2 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n;;three\n\n(define-public (swap-helper-b (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-alex-usda-alex-simple b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko (/ b2 u100))))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (swap-helper-c (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-alex-alex-simple (* b1 u100))))\n    (b3 (unwrap-panic (swap-alex-wstx-alex-fixed b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (add-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-alex-usda-alex-simple b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko (/ b2 u100))))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (reduce-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-alex-alex-simple (* b1 u100))))\n    (b3 (unwrap-panic (swap-alex-wstx-alex-amm b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (swap-helper-to-amm (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-alex-diko-alex-amm b1)))\n    (b3 (unwrap-panic (swap-diko-wstx-arkadiko (/ b2 u100))))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (swap-helper-from-amm (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-diko-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-diko-alex-alex-amm (* b1 u100))))\n    (b3 (unwrap-panic (swap-alex-wstx-alex-fixed b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (add-to-position (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-alex-diko-alex-amm b1)))\n    (b3 (unwrap-panic (swap-diko-wstx-arkadiko (/ b2 u100))))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (reduce-position (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-diko-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-diko-alex-alex-amm (* b1 u100))))\n    (b3 (unwrap-panic (swap-alex-wstx-alex-amm b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (deposit (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-usda-arkadiko b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> b3 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (burn (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-xbtc-arkadiko b1)))\n    (b3 (unwrap-panic (swap-xbtc-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> b3 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (create-pool (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-usda-arkadiko b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (allow-deposit (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-xbtc-arkadiko b1)))\n    (b3 (unwrap-panic (swap-xbtc-wstx-alex-amm b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (claim (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-usda-arkadiko b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (claim-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-xbtc-arkadiko b1)))\n    (b3 (unwrap-panic (swap-xbtc-wstx-alex-fixed b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (withdraw-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-diko-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-diko-usda-arkadiko b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> b3 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (deposit-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-diko-arkadiko b1)))\n    (b3 (unwrap-panic (swap-diko-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> b3 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n\n\n;; Arkadiko\n(define-public (swap-wstx-usda-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-diko-usda-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-diko-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-wstx-diko-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-diko-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-wstx-xbtc-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-xbtc-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-xbtc-usda-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-xbtc-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-wstx-welsh-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-welsh-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n;;Alex\n;;fixed\n(define-public (swap-wstx-xbtc-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u50000000 u50000000 dx (some u0)))))\n  (ok (get dy r)))\n)\n\n(define-public (swap-xbtc-wstx-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u50000000 u50000000 dx (some u0)))))\n  (ok (get dx r)))\n)\n\n(define-public (swap-wstx-alex-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u50000000 u50000000 dx (some u0)))))\n  (ok (get dy r)))\n)\n\n(define-public (swap-alex-wstx-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u50000000 u50000000 dx (some u0)))))\n  (ok (get dx r)))\n)\n\n(define-public (swap-wstx-xusd-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u50000000 u50000000 dx (some u0)))))\n  (ok (get dy r)))\n)\n\n(define-public (swap-xusd-wstx-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u50000000 u50000000 dx (some u0)))))\n  (ok (get dx r)))\n)\n\n;;simple\n(define-public (swap-alex-usda-alex-simple (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.simple-weight-pool-alex swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda dx (some u0)))))\n  (ok (get dy r)))\n)\n\n(define-public (swap-usda-alex-alex-simple (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.simple-weight-pool-alex swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda dx (some u0)))))\n  (ok (get dx r)))\n)\n\n;;AMM Swap Pool\n(define-public (swap-wstx-welsh-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-welsh-wstx-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 dx (some u0)))))\n  (ok r))\n)\n\n\n;;AMM Swap Pool-v1-1\n(define-public (swap-wstx-alex-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-alex-wstx-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-wstx-xbtc-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-xbtc-wstx-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-wstx-susdt-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-susdt-wstx-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-alex-diko-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-diko-alex-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-susdt-xusd-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u5000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-xusd-susdt-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt u5000000 dx (some u0)))))\n  (ok r))\n)",
    "analysis": {
      "summary": "This contract facilitates various token swaps, liquidity operations, and position management on the Stacks blockchain, utilizing the Arkadiko and Alex protocols.",
      "explanation": "This Clarity smart contract is designed to interact with the Arkadiko and Alex decentralized finance protocols on the Stacks blockchain. It provides users with a suite of functions to swap tokens, add or reduce liquidity, and manage positions within these ecosystems. The contract includes constants for error codes, predefined addresses, and the contract owner. It defines multiple public functions for swapping tokens, managing liquidity, and adjusting positions, each leveraging the `unwrap-panic` function to call external contracts and handle token exchanges. The contract's structure is modular, with each function dedicated to a specific type of operation, such as swapping tokens between different pairs or adding/removing liquidity. Error handling is implemented through `asserts!` checks, ensuring operations are authorized and meet specific conditions. External contract calls are made to Arkadiko and Alex protocols, indicating this contract acts as an intermediary for facilitating DeFi operations on Stacks.",
      "tags": [
        "DeFi",
        "token-swap",
        "liquidity-management",
        "Stacks",
        "Arkadiko",
        "Alex"
      ]
    }
  },
  {
    "rank": 81,
    "contract": "SP14J806BWEPQAXVA0G6RYZN7GNA126B7JFRRYTEM.world-peace-stacks-stxcity",
    "calls": 361,
    "source": "\n;; @title Bonding Curve Token by STX.CITY\n;; @version 2.0\n;; @hash wNYDipoqKhtiDoNUR90qpg:yLSzI59YmGvjsW6W4DOD2A:HwgcxR0ythaCwoPfzc1f7bxoAuGB05Lfv5x4FJpgKFXd8lyvI2o04gtJMGkzxf-uPn6E0NDdHz5fFfCgiY8dtSay-rFYK-8ZQhwpt3i2n3Q\n\n;; Errors \n(define-constant ERR-UNAUTHORIZED u401)\n(define-constant ERR-NOT-OWNER u402)\n(define-constant ERR-INVALID-PARAMETERS u403)\n(define-constant ERR-NOT-ENOUGH-FUND u101)\n\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Constants\n(define-constant MAXSUPPLY u2147483647000000)\n\n;; Variables\n(define-fungible-token WPS MAXSUPPLY)\n(define-data-var contract-owner principal tx-sender) \n\n\n\n;; SIP-10 Functions\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender) (err ERR-UNAUTHORIZED))\n        (ft-transfer? WPS amount from to)\n    )\n)\n\n\n;; DEFINE METADATA\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://pdakhjpwkuwtadzmpnjm.supabase.co/storage/v1/object/public/uri/uTZERPwP-world-peace-stacks-0-decimals.json\"))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (begin\n        (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))\n        (var-set token-uri (some value))\n        (ok (print {\n              notification: \"token-metadata-update\",\n              payload: {\n                contract-id: (as-contract tx-sender),\n                token-class: \"ft\"\n              }\n            })\n        )\n    )\n)\n\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance WPS owner))\n)\n(define-read-only (get-name)\n  (ok \"World Peace Stacks\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"WPS\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply WPS))\n)\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri))\n)\n\n;; transfer ownership\n(define-public (transfer-ownership (new-owner principal))\n  (begin\n    ;; Checks if the sender is the current owner\n    (if (is-eq tx-sender (var-get contract-owner))\n      (begin\n        ;; Sets the new owner\n        (var-set contract-owner new-owner)\n        ;; Returns success message\n        (ok \"Ownership transferred successfully\"))\n      ;; Error if the sender is not the owner\n      (err ERR-NOT-OWNER)))\n)\n\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n(define-private (send-stx (recipient principal) (amount uint))\n  (begin\n    (try! (stx-transfer? amount tx-sender recipient))\n    (ok true) \n  )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n    (try! (send-stx 'SP11WRT9TPPKP5492X3VE81CM1T74MD13SPFT527D u1000000))\n    (try! (ft-mint? WPS u2126008810742601 'SP14J806BWEPQAXVA0G6RYZN7GNA126B7JFRRYTEM.world-peace-stacks-stxcity-dex))\n    (try! (ft-mint? WPS u21474836257399 'SP14J806BWEPQAXVA0G6RYZN7GNA126B7JFRRYTEM))\n    \n    (try! (send-stx 'SP14J806BWEPQAXVA0G6RYZN7GNA126B7JFRRYTEM.world-peace-stacks-stxcity-dex u4040404))\n    (try! (send-stx 'SP1WTA0YBPC5R6GDMPPJCEDEA6Z2ZEPNMQ4C39W6M u2020202))\n \n)\n",
    "analysis": {
      "summary": "This contract implements a fungible token (WPS) with a fixed maximum supply, including transfer, minting, and metadata management functionalities, following the SIP-010 Fungible Token Standard for the Stacks blockchain.",
      "explanation": "The contract defines a fungible token named 'World Peace Stacks' (WPS) with a maximum supply limit. It includes standard SIP-010 functions for token transfer and querying token details, along with custom functions for managing token metadata, transferring contract ownership, and batch token transfers. Key implementation details include:\n\n- **Constants and Variables** (<L5-9>): Defines error codes, the maximum token supply, the WPS token, and the contract owner variable.\n\n- **SIP-010 Implementation** (<L12-49>): Implements required SIP-010 functions such as `transfer`, `get-balance`, `get-name`, `get-symbol`, `get-decimals`, and `get-total-supply`. The `transfer` function (<L12-16>) includes an authorization check to ensure only the sender can transfer their tokens.\n\n- **Metadata Management** (<L19-30>): Allows the contract owner to update the token's metadata URI. This is crucial for off-chain token information.\n\n- **Ownership Transfer** (<L49-59>): Provides a mechanism for transferring contract ownership, ensuring only the current owner can execute this action.\n\n- **Utility Functions** (<L62-90>): Includes a `send-many` function for batch processing token transfers, leveraging private helper functions to handle individual transfers and error checking.\n\n- **Minting Process** (<L93-99>): The contract mints tokens to specific addresses and sends STX to others upon deployment. This is a one-time operation executed as the contract is deployed, indicating an initial distribution of tokens and STX.\n\nOverall, the contract is designed to manage a fungible token with basic functionalities for transfer, minting, and metadata management, adhering to the SIP-010 standard. It includes additional features like ownership transfer and batch sending for enhanced usability.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "metadata-management",
        "ownership-transfer",
        "batch-transfer"
      ]
    }
  },
  {
    "rank": 82,
    "contract": "SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token",
    "calls": 357,
    "source": "(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n(impl-trait .arkadiko-dao-token-trait-v1.dao-token-trait)\n\n;; Defines the Arkadiko Governance Token according to the SIP010 Standard\n(define-fungible-token diko)\n\n(define-data-var token-uri (string-utf8 256) u\"\")\n(define-data-var contract-owner principal tx-sender)\n\n;; errors\n(define-constant ERR-NOT-AUTHORIZED u1401)\n\n(define-public (set-contract-owner (owner principal))\n  (begin\n    (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-NOT-AUTHORIZED))\n\n    (ok (var-set contract-owner owner))\n  )\n)\n\n;; ---------------------------------------------------------\n;; SIP-10 Functions\n;; ---------------------------------------------------------\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply diko))\n)\n\n(define-read-only (get-name)\n  (ok \"Arkadiko Token\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"DIKO\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-balance (account principal))\n  (ok (ft-get-balance diko account))\n)\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if (is-eq tx-sender (var-get contract-owner))\n    (ok (var-set token-uri value))\n    (err ERR-NOT-AUTHORIZED)\n  )\n)\n\n(define-read-only (get-token-uri)\n  (ok (some (var-get token-uri)))\n)\n\n(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n\n    (match (ft-transfer? diko amount sender recipient)\n      response (begin\n        (print memo)\n        (ok response)\n      )\n      error (err error)\n    )\n  )\n)\n\n;; ---------------------------------------------------------\n;; DAO token trait\n;; ---------------------------------------------------------\n\n;; Mint method for DAO\n(define-public (mint-for-dao (amount uint) (recipient principal))\n  (begin\n    (asserts! (is-eq contract-caller .arkadiko-dao) (err ERR-NOT-AUTHORIZED))\n    (ft-mint? diko amount recipient)\n  )\n)\n\n;; Burn method for DAO\n(define-public (burn-for-dao (amount uint) (sender principal))\n  (begin\n    (asserts! (is-eq contract-caller .arkadiko-dao) (err ERR-NOT-AUTHORIZED))\n    (ft-burn? diko amount sender)\n  )\n)\n\n;; Burn external\n(define-public (burn (amount uint) (sender principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n    (ft-burn? diko amount sender)\n  )\n)\n",
    "analysis": {
      "summary": "This contract defines the Arkadiko Governance Token (DIKO) as a fungible token following the SIP010 standard, with additional features for DAO governance.",
      "explanation": "The contract implements the SIP010 standard for fungible tokens, allowing for token creation, transfer, and balance queries, and integrates with the Arkadiko DAO through specific minting and burning functions. Key components include:\n\n- **Token Definition** (<L3>): The `define-fungible-token` statement initializes the DIKO token.\n\n- **Variable Definitions** (<L5-6>): Two data variables are declared: `token-uri`, a string representing the token's metadata URI, and `contract-owner`, a principal representing the owner of the contract, initially set to the transaction sender.\n\n- **Error Definition** (<L9>): A constant for an 'unauthorized' error is defined, used across various functions to enforce permissions.\n\n- **Ownership Management** (<L11-17>): Allows the contract owner to transfer ownership to another principal, enforcing that only the current owner can perform this action.\n\n- **SIP-010 Implementation** (<L21-47>): Implements required SIP-010 interface functions for fungible tokens, including `get-total-supply`, `get-name`, `get-symbol`, `get-decimals`, and `get-balance`. These functions enable basic interactions with the DIKO token, such as querying its total supply and the balance of specific accounts.\n\n- **Token URI Management** (<L49-57>): Provides a mechanism for setting and retrieving the token's metadata URI, restricted to the contract owner.\n\n- **Transfer Function** (<L59-73>): Implements a transfer function that allows token holders to transfer their tokens to others, including an optional memo field. It ensures that only the sender can initiate a transfer of their tokens.\n\n- **DAO-Specific Functions** (<L76-98>): Includes `mint-for-dao` and `burn-for-dao` functions, allowing the Arkadiko DAO to mint new tokens or burn existing tokens, respectively. These functions are protected to ensure that only the Arkadiko DAO can call them. There's also a `burn` function for users to burn their tokens.\n\nEach function includes checks to ensure that actions are authorized, either by matching the transaction sender to the expected principal or by ensuring the caller is the Arkadiko DAO for DAO-specific operations.",
      "tags": [
        "fungible-token",
        "SIP010",
        "DAO",
        "governance",
        "DeFi"
      ]
    }
  },
  {
    "rank": 83,
    "contract": "SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.router-xyk-stableswap-v-1-1",
    "calls": 354,
    "source": "\n;; router-xyk-stableswap-v-1-1\n\n;; Use all required traits\n(use-trait xyk-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait xyk-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-trait-v-1-2.xyk-pool-trait)\n(use-trait stableswap-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait stableswap-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-pool-trait-v-1-2.stableswap-pool-trait)\n\n;; Error constants\n(define-constant ERR_NOT_AUTHORIZED (err u6001))\n(define-constant ERR_INVALID_AMOUNT (err u6002))\n(define-constant ERR_INVALID_PRINCIPAL (err u6003))\n(define-constant ERR_ALREADY_ADMIN (err u6004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u6005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u6006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u6007))\n(define-constant ERR_SWAP_STATUS (err u6008))\n(define-constant ERR_MINIMUM_RECEIVED (err u6009))\n\n;; Contract deployer address\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n;; Admins list and helper var used to remove admins\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n;; Data var used to enable or disable quotes and swaps\n(define-data-var swap-status bool true)\n\n;; Get admins list\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n;; Get admin helper var\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n;; Get swap status\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n;; Add an admin to the admins list\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      ;; Assert caller is an existing admin and new admin is not in admins-list\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n\n      ;; Add admin to list with max length of 5\n      (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n\n      ;; Print add admin data and return true\n      (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n      (ok true)\n    )\n  )\n)\n\n;; Remove an admin from the admins list\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      ;; Assert caller is an existing admin and admin to remove is in admins-list\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n\n      ;; Assert contract deployer cannot be removed\n      (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n\n      ;; Set admin-helper to admin to remove and filter admins-list to remove admin\n      (var-set admin-helper admin)\n      (var-set admins (filter admin-not-removable admins-list))\n\n      ;; Print remove admin data and return true\n      (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n      (ok true)\n    )\n  )\n)\n\n;; Enable or disable quotes and swaps\n(define-public (set-swap-status (status bool))\n  (let (\n    (caller tx-sender)\n  )\n    (begin\n      ;; Assert caller is an admin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n\n      ;; Set swap-status to status\n      (var-set swap-status status)\n\n      ;; Print function data and return true\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n;; Get quote for swap-helper-a\n(define-public (get-quote-a\n    (amount uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    \n    ;; Get quotes for each swap\n    (quote-a (try! (if (is-eq swaps-reversed false)\n                       (xyk-quote-a amount xyk-tokens xyk-pools)\n                       (stableswap-quote-a amount stableswap-tokens stableswap-pools))))\n    (quote-b (try! (if (is-eq swaps-reversed false)\n                       (stableswap-quote-a quote-a stableswap-tokens stableswap-pools)\n                       (xyk-quote-a quote-a xyk-tokens xyk-pools))))\n  )\n    ;; Return number of tokens the caller would receive\n    (ok quote-b)\n  )\n)\n\n;; Perform swap via XYK Core and Stableswap Core\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap\n    (swap-a (if (is-eq swaps-reversed false)\n                (try! (xyk-swap-a amount xyk-tokens xyk-pools))\n                (try! (stableswap-swap-a amount stableswap-tokens stableswap-pools))))\n    (swap-b (if (is-eq swaps-reversed false)\n                (try! (stableswap-swap-a swap-a stableswap-tokens stableswap-pools))\n                (try! (xyk-swap-a swap-a xyk-tokens xyk-pools))))\n  )\n    (begin\n      ;; Assert that swap-b is greater than or equal to min-received\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n      ;; Print swap data and return number of tokens the caller received\n      (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          },\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n;; Helper function for removing an admin\n(define-private (admin-not-removable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)\n\n;; Check if token path for swap via XYK Core is reversed relative to the pool's tokens\n(define-private (is-xyk-path-reversed\n    (token-in <xyk-ft-trait>) (token-out <xyk-ft-trait>)\n    (pool-contract <xyk-pool-trait>)\n  )\n  (let (\n    (pool-data (unwrap-panic (contract-call? pool-contract get-pool)))\n  )\n    (not\n      (and\n        (is-eq (contract-of token-in) (get x-token pool-data))\n        (is-eq (contract-of token-out) (get y-token pool-data))\n      )\n    )\n  )\n)\n\n;; Check if token path for swap via Stableswap Core is reversed relative to the pool's tokens\n(define-private (is-stableswap-path-reversed\n    (token-in <stableswap-ft-trait>) (token-out <stableswap-ft-trait>)\n    (pool-contract <stableswap-pool-trait>)\n  )\n  (let (\n    (pool-data (unwrap-panic (contract-call? pool-contract get-pool)))\n  )\n    (not\n      (and\n        (is-eq (contract-of token-in) (get x-token pool-data))\n        (is-eq (contract-of token-out) (get y-token pool-data))\n      )\n    )\n  )\n)\n\n;; Get swap quote via XYK Core using two tokens\n(define-private (xyk-quote-a\n    (amount uint)\n    (tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    ;; Determine if token path is reversed\n    (is-reversed (is-xyk-path-reversed (get a tokens) (get b tokens) (get a pools)))\n\n    ;; Get quote based on path direction\n    (quote-result (if (is-eq is-reversed false)\n                      (try! (contract-call?\n                            'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 get-dy\n                            (get a pools)\n                            (get a tokens) (get b tokens)\n                            amount))\n                      (try! (contract-call?\n                            'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 get-dx\n                            (get a pools)\n                            (get b tokens) (get a tokens)\n                            amount))))\n  )\n    (ok quote-result)\n  )\n)\n\n;; Get swap quote via Stableswap Core using two tokens\n(define-private (stableswap-quote-a\n    (amount uint)\n    (tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    ;; Determine if token path is reversed\n    (is-reversed (is-stableswap-path-reversed (get a tokens) (get b tokens) (get a pools)))\n\n    ;; Get quote based on path direction\n    (quote-result (if (is-eq is-reversed false)\n                      (try! (contract-call?\n                            'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 get-dy\n                            (get a pools)\n                            (get a tokens) (get b tokens)\n                            amount))\n                      (try! (contract-call?\n                            'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 get-dx\n                            (get a pools)\n                            (get b tokens) (get a tokens)\n                            amount))))\n  )\n    (ok quote-result)\n  )\n)\n\n;; Perform swap via XYK Core using two tokens\n(define-private (xyk-swap-a\n    (amount uint)\n    (tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    ;; Determine if token path is reversed\n    (is-reversed (is-xyk-path-reversed (get a tokens) (get b tokens) (get a pools)))\n\n    ;; Perform swap based on path direction\n    (swap-result (if (is-eq is-reversed false)\n                     (try! (contract-call?\n                           'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 swap-x-for-y\n                           (get a pools)\n                           (get a tokens) (get b tokens)\n                           amount u1))\n                     (try! (contract-call?\n                           'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 swap-y-for-x\n                           (get a pools)\n                           (get b tokens) (get a tokens)\n                           amount u1))))\n  )\n    (ok swap-result)\n  )\n)\n\n;; Perform swap via Stableswap Core using two tokens\n(define-private (stableswap-swap-a\n    (amount uint)\n    (tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    ;; Determine if token path is reversed\n    (is-reversed (is-stableswap-path-reversed (get a tokens) (get b tokens) (get a pools)))\n\n    ;; Perform swap based on path direction\n    (swap-result (if (is-eq is-reversed false)\n                     (try! (contract-call?\n                           'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 swap-x-for-y\n                           (get a pools)\n                           (get a tokens) (get b tokens)\n                           amount u1))\n                     (try! (contract-call?\n                           'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 swap-y-for-x\n                           (get a pools)\n                           (get b tokens) (get a tokens)\n                           amount u1))))\n  )\n    (ok swap-result)\n  )\n)",
    "analysis": {
      "summary": "This contract facilitates token swaps between XYK and Stableswap pools, managing administrators and swap status.",
      "explanation": "This Clarity smart contract is designed to integrate with both XYK and Stableswap liquidity pool models on the Stacks blockchain, offering functionalities to swap tokens, manage administrators, and control the swap status. It utilizes external contracts for token and pool traits, ensuring compatibility with SIP-010 fungible tokens and specific pool contracts. Key functionalities include adding/removing administrators, enabling/disabling swaps, and calculating/performing token swaps with support for both XYK and Stableswap mechanisms. The contract ensures only authorized administrators can modify critical settings and performs swaps based on the current swap status and the specified minimum amount to be received by the user, thus safeguarding against unauthorized access and unfavorable swap rates.",
      "tags": [
        "DeFi",
        "XYK",
        "Stableswap",
        "Token Swap",
        "Liquidity Pool",
        "Governance"
      ]
    }
  },
  {
    "rank": 84,
    "contract": "SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.nakapack-nft",
    "calls": 354,
    "source": "(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)\n\n(define-non-fungible-token Nakapack uint)\n\n(define-constant CONTRACT-OWNER tx-sender)\n(define-constant ERR-SOLD-OUT (err u300))\n(define-constant ERR-WRONG-COMMISSION (err u301))\n(define-constant ERR-NOT-AUTHORIZED (err u401))\n(define-constant ERR-NOT-FOUND (err u404))\n(define-constant ERR-LISTING (err u406))\n\n(define-data-var base-uri (string-ascii 80) \"ipfs:://QmXi7zSHKfeFThsWQ1wCjTr5SxEC7ciw5YuKkzcTQQWKcG/{id}.json\")\n(define-data-var contract-uri (string-ascii 80) \"ipfs://QmVoP3jWvULQBWhoixXi85XwiwMogMB1vzcBbQvRTQRQ1H\")\n(define-data-var last-id uint u0)\n(define-data-var max-supply uint u5000)\n(define-data-var minter-address principal 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.nakapack-nft-minter)\n\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal})\n\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n    (begin\n        (asserts! (is-eq tx-sender sender) ERR-NOT-AUTHORIZED)\n        (asserts! (is-none (map-get? market id)) ERR-LISTING)\n        (try! (trnsfr id sender recipient))\n        (ok true)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n    (begin\n        (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n        (var-set base-uri new-base-uri)\n        (ok true)))\n\n(define-public (set-contract-uri (new-contract-uri (string-ascii 80)))\n    (begin\n        (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n        (var-set contract-uri new-contract-uri)\n        (ok true)))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm <commission-trait>))\n    (let ((listing  {price: price, commission: (contract-of comm)}))\n        (asserts! (is-sender-owner id) ERR-NOT-AUTHORIZED)\n        (map-set market id listing)\n        (print (merge listing {action: \"list-in-ustx\", id: id}))\n        (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n    (begin\n        (asserts! (is-sender-owner id) ERR-NOT-AUTHORIZED)\n        (map-delete market id)\n        (print {action: \"unlist-in-ustx\", id: id})\n        (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm <commission-trait>))\n    (let ((owner (unwrap! (nft-get-owner? Nakapack id) ERR-NOT-FOUND))\n        (listing (unwrap! (map-get? market id) ERR-LISTING))\n        (price (get price listing)))\n    (asserts! (is-eq (contract-of comm) (get commission listing)) ERR-WRONG-COMMISSION)\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (contract-call? comm pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {action: \"buy-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (set-minter-address (new-minter-address principal))\n    (begin\n        (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n        (var-set minter-address new-minter-address)\n        (ok true)))\n\n(define-public (set-max-supply (new-max-supply uint))\n    (begin\n        (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n        (var-set max-supply new-max-supply)\n        (ok true)))\n\n(define-public (mint (new-owner principal))\n    (let ((next-id (+ u1 (var-get last-id))))\n        (asserts! (called-from-mint) ERR-NOT-AUTHORIZED)\n        (asserts! (< (var-get last-id) (var-get max-supply)) ERR-SOLD-OUT)\n        (match (nft-mint? Nakapack next-id new-owner)\n            success\n                (let\n                    ((current-balance (get-balance new-owner)))\n                    (begin\n                        (var-set last-id next-id)\n                        (map-set token-count new-owner (+ current-balance u1))\n                (ok true)))\n            error (err (* error u10000)))))\n\n(define-read-only (get-balance (account principal))\n    (default-to u0\n        (map-get? token-count account)))\n\n(define-read-only (get-owner (id uint))\n    (ok (nft-get-owner? Nakapack id)))\n\n(define-read-only (get-last-token-id)\n    (ok (var-get last-id)))\n\n(define-read-only (get-token-uri (id uint))\n    (ok (some (var-get base-uri))))\n\n(define-read-only (get-contract-uri)\n    (ok (var-get contract-uri)))\n\n(define-read-only (get-listing-in-ustx (id uint))\n    (map-get? market id))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n    (match (nft-transfer? Nakapack id sender recipient)\n    success\n          (let\n            ((sender-balance (get-balance sender))\n            (recipient-balance (get-balance recipient)))\n              (map-set token-count\n                    sender\n                    (- sender-balance u1))\n              (map-set token-count\n                    recipient\n                    (+ recipient-balance u1))\n              (ok success))\n        error (err error)))\n\n(define-private (is-sender-owner (id uint))\n    (let ((owner (unwrap! (nft-get-owner? Nakapack id) false)))\n        (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-private (called-from-mint)\n    (is-eq (var-get minter-address) contract-caller))\n",
    "analysis": {
      "summary": "This contract manages a limited edition NFT collection called Nakapack, facilitates NFT transfers, listings for sale, and purchases with commissions.",
      "explanation": "The contract implements a non-fungible token (NFT) named Nakapack, with a maximum supply of 5000 units. It allows the contract owner to update base and contract URIs, set a minter address, and adjust the maximum supply. Users can transfer NFTs, list them for sale with a specified price and commission, unlist, and buy them using STX tokens. The contract enforces ownership checks for transfers and listings, and integrates with a commission system for sales.\n\n- The contract uses two external traits for NFTs and commissions, ensuring interoperability with other contracts that implement these traits <L1-2>.\n- NFTs are defined with a unique identifier (uint) <L4>.\n- Several constants and data variables are defined for contract management, including URIs and the last minted NFT ID <L6-14>.\n- The `token-count` and `market` maps track each principal's NFT count and listed NFTs for sale, respectively <L16-17>.\n- The `transfer` function allows NFT owners to transfer their NFTs, ensuring the item is not listed for sale <L19-25>.\n- The `set-base-uri` and `set-contract-uri` functions enable the contract owner to update metadata URIs <L27-35>.\n- `list-in-ustx` and `unlist-in-ustx` manage NFT listings in the market map, with `list-in-ustx` also specifying a commission principal <L37-53>.\n- The `buy-in-ustx` function handles NFT purchases, transferring STX to the seller, paying the commission, and transferring the NFT to the buyer <L55-70>.\n- `set-minter-address` and `set-max-supply` allow the contract owner to update the minter address and the maximum supply of NFTs <L72-80>.\n- The `mint` function mints a new NFT to a specified owner if called by the minter address and the supply limit has not been reached <L82-96>.\n- Read-only functions provide information about NFT ownership, balances, and listings <L98-119>.\n- Private functions `trnsfr`, `is-sender-owner`, and `called-from-mint` support the main functionalities by handling NFT transfers and checking permissions <L121-148>.",
      "tags": [
        "NFT",
        "marketplace",
        "commission",
        "Clarity"
      ]
    }
  },
  {
    "rank": 85,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.router-stableswap-xyk-v-1-2",
    "calls": 352,
    "source": ";; router-stableswap-xyk-v-1-2\n(use-trait stableswap-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait stableswap-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-pool-trait-v-1-2.stableswap-pool-trait)\n(use-trait xyk-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait xyk-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-trait-v-1-1.xyk-pool-trait)\n(define-constant ERR_NOT_AUTHORIZED (err u6001))\n(define-constant ERR_INVALID_AMOUNT (err u6002))\n(define-constant ERR_INVALID_PRINCIPAL (err u6003))\n(define-constant ERR_ALREADY_ADMIN (err u6004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u6005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u6006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u6007))\n(define-constant ERR_SWAP_STATUS (err u6008))\n(define-constant ERR_MINIMUM_RECEIVED (err u6009))\n(define-constant ERR_SWAP_A (err u6010))\n(define-constant ERR_SWAP_B (err u6011))\n(define-constant ERR_QUOTE_A (err u6012))\n(define-constant ERR_QUOTE_B (err u6013))\n(define-constant CONTRACT_DEPLOYER tx-sender)\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n(define-data-var swap-status bool true)\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n(define-public (set-swap-status (status bool))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (var-set swap-status status)\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n(define-public (get-quote-a\n    (amount uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (quote-a (if (is-eq swaps-reversed false)\n                 (unwrap! (stableswap-qa amount stableswap-tokens stableswap-pools) ERR_QUOTE_A)\n                 (unwrap! (xyk-qa amount xyk-tokens xyk-pools) ERR_QUOTE_A)))\n    (quote-b (if (is-eq swaps-reversed false)\n                 (unwrap! (xyk-qa quote-a xyk-tokens xyk-pools) ERR_QUOTE_B)\n                 (unwrap! (stableswap-qa quote-a stableswap-tokens stableswap-pools) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (stableswap-tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (stableswap-pools (tuple (a <stableswap-pool-trait>)))\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    (swap-a (if (is-eq swaps-reversed false)\n                (unwrap! (stableswap-sa amount stableswap-tokens stableswap-pools) ERR_SWAP_A)\n                (unwrap! (xyk-sa amount xyk-tokens xyk-pools) ERR_SWAP_A)))\n    (swap-b (if (is-eq swaps-reversed false)\n                (unwrap! (xyk-sa swap-a xyk-tokens xyk-pools) ERR_SWAP_B)\n                (unwrap! (stableswap-sa swap-a stableswap-tokens stableswap-pools) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          stableswap-data: {\n            stableswap-tokens: stableswap-tokens,\n            stableswap-pools: stableswap-pools,\n            stableswap-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n(define-private (admin-not-removable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)\n(define-private (is-stableswap-path-reversed\n    (token-in <stableswap-ft-trait>) (token-out <stableswap-ft-trait>)\n    (pool-contract <stableswap-pool-trait>)\n  )\n  (let (\n    (pool-data (unwrap-panic (contract-call? pool-contract get-pool)))\n  )\n    (not (and (is-eq (contract-of token-in) (get x-token pool-data)) (is-eq (contract-of token-out) (get y-token pool-data))))\n  )\n)\n(define-private (is-xyk-path-reversed\n    (token-in <xyk-ft-trait>) (token-out <xyk-ft-trait>)\n    (pool-contract <xyk-pool-trait>)\n  )\n  (let (\n    (pool-data (unwrap-panic (contract-call? pool-contract get-pool)))\n  )\n    (not (and (is-eq (contract-of token-in) (get x-token pool-data)) (is-eq (contract-of token-out) (get y-token pool-data))))\n  )\n)\n(define-private (stableswap-qa\n    (amount uint)\n    (tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    (is-reversed (is-stableswap-path-reversed (get a tokens) (get b tokens) (get a pools)))\n    (quote-a (if (is-eq is-reversed false)\n                 (try! (contract-call?\n                 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 get-dy\n                 (get a pools)\n                 (get a tokens) (get b tokens)\n                 amount))\n                 (try! (contract-call?\n                 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 get-dx\n                 (get a pools)\n                 (get b tokens) (get a tokens)\n                 amount))))\n  )\n    (ok quote-a)\n  )\n)\n(define-private (xyk-qa\n    (amount uint)\n    (tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    (pool-contract (get a pools))\n    (is-reversed (is-xyk-path-reversed (get a tokens) (get b tokens) (get a pools)))\n    (quote-a (if (is-eq is-reversed false)\n                 (try! (contract-call?\n                 pool-contract get-dy\n                 amount))\n                 (try! (contract-call?\n                 pool-contract get-dx\n                 amount))))\n  )\n    (ok quote-a)\n  )\n)\n(define-private (stableswap-sa\n    (amount uint)\n    (tokens (tuple (a <stableswap-ft-trait>) (b <stableswap-ft-trait>)))\n    (pools (tuple (a <stableswap-pool-trait>)))\n  )\n  (let (\n    (is-reversed (is-stableswap-path-reversed (get a tokens) (get b tokens) (get a pools)))\n    (swap-a (if (is-eq is-reversed false)\n                (try! (contract-call?\n                      'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 swap-x-for-y\n                      (get a pools)\n                      (get a tokens) (get b tokens)\n                      amount u1))\n                (try! (contract-call?\n                      'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.stableswap-core-v-1-2 swap-y-for-x\n                      (get a pools)\n                      (get b tokens) (get a tokens)\n                      amount u1))))\n  )\n    (ok swap-a)\n  )\n)\n(define-private (xyk-sa\n    (amount uint)\n    (tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    (is-reversed (is-xyk-path-reversed (get a tokens) (get b tokens) (get a pools)))\n    (swap-a (if (is-eq is-reversed false)\n                (try! (contract-call?\n                      'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y\n                      (get a pools)\n                      (get a tokens) (get b tokens)\n                      amount u1))\n                (try! (contract-call?\n                      'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x\n                      (get a pools)\n                      (get b tokens) (get a tokens)\n                      amount u1))))\n  )\n    (ok swap-a)\n  )\n)",
    "analysis": {
      "summary": "This contract facilitates token swaps using both stableswap and XYK pool mechanisms, with admin controls for managing swap status and admin list.",
      "explanation": "The contract integrates two types of decentralized exchange mechanisms: stableswap and XYK, allowing users to swap tokens through either mechanism based on the configuration. It includes administrative functions to manage the list of admins and the status of swaps.\n\n- The `use-trait` directives at the beginning (<L1-4>) import external contracts/trait definitions, enabling this contract to interact with stableswap and XYK pools and tokens.\n- `define-constant` lines (<L5-14>) define error codes for various failure states, improving readability and error handling.\n- `CONTRACT_DEPLOYER`, `admins`, and `admin-helper` (<L15-17>) are defined for administrative purposes, setting initial values for the deployer and admin list.\n- `get-admins`, `get-admin-helper`, and `get-swap-status` (<L18-26>) are read-only functions that return the current state of admin list, admin helper, and swap status respectively.\n- `add-admin` and `remove-admin` (<L27-52>) allow adding or removing admins from the admin list, with checks to ensure only current admins can make changes and certain conditions are met.\n- `set-swap-status` (<L53-61>) enables admins to enable or disable the swapping functionality.\n- `get-quote-a` and `swap-helper-a` (<L62-104>) are the core functions for swapping tokens. They check the swap status, validate amounts, determine the swap path (stableswap or XYK, and direct or reversed), execute the swap, and return the result. These functions use private helper functions to determine the path and execute swaps on the respective platforms.\n- Private functions `admin-not-removable`, `is-stableswap-path-reversed`, `is-xyk-path-reversed`, `stableswap-qa`, `xyk-qa`, `stableswap-sa`, and `xyk-sa` (<L105-166>) are utility functions supporting the main functionality, including path determination, quote calculation, and token swapping logic.",
      "tags": [
        "DeFi",
        "stableswap",
        "XYK",
        "token-swap",
        "admin-control"
      ]
    }
  },
  {
    "rank": 86,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v200",
    "calls": 351,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait oabc2f5b3982b0123 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o318649a6b009833d 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait oeb241b403e5527bf 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (oc9bd3483422ecf0d (o5183708558b845a4 <oabc2f5b3982b0123>) (o5fea83bcb8e0304e <oabc2f5b3982b0123>) (o26a22f288488cc6a <oeb241b403e5527bf>) (oc53901217b812f93 <o318649a6b009833d>) (o977b01773ea33d9d uint)) (let ((o9808b37ac42bb57f (try! (as-contract (contract-call? o26a22f288488cc6a swap o5183708558b845a4 o5fea83bcb8e0304e oc53901217b812f93 o977b01773ea33d9d u1))))) (ok (get amt-out o9808b37ac42bb57f)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53)))) (asserts! (> o24ee854d6599d6a5 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o24ee854d6599d6a5 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o24ee854d6599d6a5))))) (define-public (swap-helper-b (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-c (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-e (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-f (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-g (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-i (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-j (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-k (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-l (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-m (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-n (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-p (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-q (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-r (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-s (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-t (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-u (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-w (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-x (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-y (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-z (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115)))))",
    "analysis": {
      "summary": "This contract facilitates complex token swaps using various liquidity pools and protocols on the Stacks blockchain.",
      "explanation": "The contract defines a series of public functions (swap-helper-a to swap-helper-z) designed to interact with different liquidity pools and swap protocols by leveraging traits from multiple contracts. Each swap-helper function performs a specific swap operation, allowing users to swap tokens across various platforms. The contract uses the `asserts!` statement to ensure that only a specific sender can initiate swaps, enhancing security. It calculates transaction fees and swap amounts using complex calculations and interactions with external contracts. The contract's design allows for flexibility in adding more swap-helper functions to accommodate new liquidity pools or swap protocols.",
      "tags": [
        "DeFi",
        "swap",
        "liquidity-pool",
        "token",
        "protocol"
      ]
    }
  },
  {
    "rank": 87,
    "contract": "SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.curve-pool-v1_0_0_ststx-0001",
    "calls": 347,
    "source": ";; stx-ststx\n;; er * stx = 1 ststx\n;; er eg 1.045\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; traits\n(use-trait ft-trait       'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait lp-token-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-lp-token-trait_v1_0_0.curve-lp-token-trait)\n(use-trait fees-trait     'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-fees-trait_v1_0_0.curve-fees-trait)\n(use-trait proxy-trait    .curve-proxy-trait_ststx.curve-proxy-trait)\n\n(impl-trait .curve-pool-trait_ststx.curve-pool-trait)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; errors\n(define-constant err-init-preconditions   (err u101))\n(define-constant err-init-postconditions  (err u102))\n(define-constant err-mint-preconditions   (err u103))\n(define-constant err-mint-postconditions  (err u104))\n(define-constant err-burn-preconditions   (err u105))\n(define-constant err-burn-postconditions  (err u106))\n(define-constant err-swap-preconditions   (err u107))\n(define-constant err-swap-postconditions  (err u108))\n(define-constant err-auth                 (err u109))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; storage\n(define-data-var initialized bool false)\n(define-constant owner tx-sender)\n\n(define-data-var pool\n  {\n  symbol            : (string-ascii 32),\n  token0            : principal,\n  token1            : principal,\n  lp-token          : principal,\n  fees              : principal,\n  A                 : uint,\n  reserve0          : uint,\n  reserve1          : uint,\n  block-height      : uint,\n  burn-block-height : uint,\n  }\n  {\n  symbol            : \"\",\n  token0            : tx-sender, ;;arbitrary\n  token1            : tx-sender,\n  lp-token          : tx-sender,\n  fees              : tx-sender,\n  A                 : u85,\n  reserve0          : u0,\n  reserve1          : u0,\n  block-height      : stacks-block-height,\n  burn-block-height : burn-block-height,\n  })\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; read\n(define-read-only (get-pool)    (ok (var-get pool)))\n(define-read-only (do-get-pool) (var-get pool))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; write\n(define-private\n  (update-reserves\n    (r0 uint)\n    (r1 uint))\n  (let ((pool_ (do-get-pool)))\n    (ok (var-set pool (merge pool_ {\n      reserve0         : r0,\n      reserve1         : r1,\n      block-height     : stacks-block-height,\n      burn-block-height: burn-block-height,\n      })) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; ctors\n(define-private\n  (make-pool\n    (token0   <ft-trait>)\n    (token1   <ft-trait>)\n    (lp-token <lp-token-trait>)\n    (fees     <fees-trait>)\n    (A        uint)\n    (symbol   (string-ascii 32))\n    )\n  {\n    symbol           : symbol,\n    token0           : (contract-of token0),\n    token1           : (contract-of token1),\n    lp-token         : (contract-of lp-token),\n    fees             : (contract-of fees),\n    A                : A,\n    reserve0         : u0,\n    reserve1         : u0,\n    block-height     : stacks-block-height,\n    burn-block-height: burn-block-height,\n  })\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; init\n(define-public\n  (init\n    (token0   <ft-trait>)\n    (token1   <ft-trait>)\n    (lp-token <lp-token-trait>)\n    (fees     <fees-trait>)\n    (A         uint)\n    (symbol   (string-ascii 32))\n    )\n\n  (let ((t0    (contract-of token0))\n        (t1    (contract-of token1))\n        (lp    (contract-of lp-token))\n        (pool_ (make-pool token0 token1 lp-token fees A symbol)))\n\n    ;; Pre-conditions\n    (asserts!\n      (and (not (is-eq t0 t1))\n           (is-eq contract-caller owner)\n           (not (var-get initialized))\n      )\n      err-init-preconditions)\n\n    ;; Update global state\n\n    ;; Update local state\n    (var-set pool pool_)\n    (var-set initialized true)\n\n    ;; Post-conditions\n\n    ;; Return\n    (let ((event\n          {op  : \"init\",\n           user: tx-sender,\n           pool: pool_}))\n      (print event)\n      (ok pool_)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; mint\n;;;\n;;; in mint, all values are expressed as stx\n\n;; we want nice, human interpretable numbers for `liquidity' so we\n;; special case mint to move the pool to a balanced part of the curve\n;; where D ~ x+y and liquidity ~ value share of D\n(define-public\n  (initial-mint\n    (token0   <ft-trait>)\n    (token1   <ft-trait>)\n    (lp-token <lp-token-trait>)\n    (proxy    <proxy-trait>)\n    (amt0     uint)\n  ;;(amt1     uint)\n    )\n\n  (let ((pool_        (do-get-pool))\n        (user         tx-sender)\n        (protocol     (as-contract tx-sender))\n\n        (total-supply (try! (contract-call? lp-token get-total-supply)))\n        (r0           (get reserve0 pool_))\n        (r1           (get reserve1 pool_))\n\n        ;; provide N*R stx and N ststx\n        (ratio        (try! (get-ratio proxy)))\n      ;;(amt0         (mult-ratio amt1 ratio))\n        (amt1         (div-ratio amt0 ratio))\n\n        ;; liq tokens can now be read as:\n        ;; TS  : total pool value expressed in stx\n        ;; L   : value contribution in terms of stx (given er at mint time)\n        ;; L/TS: value share\n        ;;(as long as we are in the flat part of the curve)\n        (pv           (* u2 amt0))\n\n        (liquidity\n         (try! (contract-call?\n                'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-math_v1_0_0\n                mint\n                u0 amt0 u0 amt0 ;;XXX: amt0 is stx value of amt1 by construction\n                total-supply (get A pool_))))\n        )\n\n    ;; Pre-conditions\n    (asserts!\n      (and (is-eq (get lp-token pool_) (contract-of lp-token))\n           (is-eq (get token0   pool_) (contract-of token0))\n           (is-eq (get token1   pool_) (contract-of token1))\n           (and (> amt0 u0) (> amt1 u0))\n           (> liquidity u0)\n           ;; first mint\n           (is-eq r0 u0)\n           (is-eq r1 u0)\n           ;; nice numbers (TODO: modulo rounding errors?)\n           (is-eq liquidity pv)\n           )\n      err-mint-preconditions)\n\n    ;; Update global state\n    (try! (contract-call? token0 transfer amt0 user protocol none))\n    (try! (contract-call? token1 transfer amt1 user protocol none))\n    (try! (as-contract (contract-call? lp-token mint liquidity user)))\n\n    ;; Update local state\n    (unwrap-panic (update-reserves (+ r0 amt0) (+ r1 amt1)))\n\n    ;; Post-conditions\n    (asserts!\n     (and\n      ;; Guard against overflow in burn.\n      (>= (* (+ total-supply liquidity) (+ r0 amt0)) u0)\n      (>= (* (+ total-supply liquidity) (+ r1 amt1)) u0)\n      )\n     err-mint-postconditions)\n\n    ;; Return\n    (let ((event\n           {op          : \"mint\",\n            user        : user,\n            pool        : pool_,\n            amt0        : amt0,\n            amt1        : amt1,\n            liquidity   : liquidity,\n            total-supply: total-supply\n            }))\n      (print event)\n      (ok event)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; after the initial mint, single sided mints only to simplify calculations\n(define-public\n  (mint\n    (token0   <ft-trait>)\n    (token1   <ft-trait>)\n    (lp-token <lp-token-trait>)\n    (proxy    <proxy-trait>)\n    (amt0_    uint)\n    (amt1_    uint))\n\n  (let ((pool_        (do-get-pool))\n        (user         tx-sender)\n        (protocol     (as-contract tx-sender))\n\n        (total-supply (try! (contract-call? lp-token get-total-supply)))\n        (r0           (get reserve0 pool_))\n        (r1           (get reserve1 pool_))\n\n        (res0              (try! (contract-call? .curve-fees-v1_0_0_ststx-0001 calc-fees amt0_)))\n        (amt0              (get amt-in-adjusted  res0))\n        (amt0-fee-lps      (get amt-fee-lps      res0))\n        (amt0-fee-protocol (get amt-fee-protocol res0))\n        (amt0-fee          (+ amt0-fee-lps amt0-fee-protocol))\n\n        (res1              (try! (contract-call? .curve-fees-v1_0_0_ststx-0001 calc-fees amt1_)))\n        (amt1              (get amt-in-adjusted  res1))\n        (amt1-fee-lps      (get amt-fee-lps      res1))\n        (amt1-fee-protocol (get amt-fee-protocol res1))\n        (amt1-fee          (+ amt1-fee-lps amt1-fee-protocol))\n\n        (ratio        (try! (get-ratio proxy)))\n        ;; (x            (div-ratio r0   ratio))\n        ;; (dx           (div-ratio amt0 ratio))\n        (y            (mult-ratio r1   ratio))\n        (dy           (mult-ratio amt1 ratio))\n\n        (liquidity\n         (if (is-eq amt1 u0)\n             ;; provide stx\n             (try! (contract-call?\n                    'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-math_v1_0_0\n                    mint\n                    r0 amt0 y u1\n                    ;; x dx r1 u1\n                    total-supply (get A pool_)))\n             ;; provide ststx -> virtualize\n             (try! (contract-call?\n                    'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-math_v1_0_0\n                    mint\n                    r0 u1 y dy\n                    ;; x u1 r1 amt1\n                    total-supply (get A pool_))) ))\n        )\n\n    ;; Pre-conditions\n    (asserts!\n      (and (is-eq (get lp-token pool_) (contract-of lp-token))\n           (is-eq (get token0   pool_) (contract-of token0))\n           (is-eq (get token1   pool_) (contract-of token1))\n           (or (>     amt0 u0) (>     amt1 u0))\n           (or (is-eq amt0 u0) (is-eq amt1 u0))\n           (> liquidity u0) )\n      err-mint-preconditions)\n\n    ;; Update global state\n    (if (> amt0 u0) (try! (contract-call? token0 transfer amt0_ user protocol none)) true)\n    (if (> amt1 u0) (try! (contract-call? token1 transfer amt1_ user protocol none)) true)\n    (try! (as-contract (contract-call? lp-token mint liquidity user)))\n\n    (if (> amt0-fee u0)\n         (try! (as-contract (contract-call? token0 transfer\n                                            amt0-fee\n                                            protocol\n                                            .curve-fees-v1_0_0_ststx-0001\n                                            none)))\n      true)\n\n    (if (> amt1-fee u0)\n         (try! (as-contract (contract-call? token1 transfer\n                                            amt1-fee\n                                            protocol\n                                            .curve-fees-v1_0_0_ststx-0001\n                                            none)))\n      true)\n\n    ;; Update local state\n    (unwrap-panic (update-reserves (+ r0 amt0) (+ r1 amt1)))\n\n    ;; Post-conditions\n    (asserts!\n     (and\n      ;; Guard against overflow in burn.\n      (>= (* (+ total-supply liquidity) (+ r0 amt0)) u0)\n      (>= (* (+ total-supply liquidity) (+ r1 amt1)) u0)\n      )\n     err-mint-postconditions)\n\n    ;; Return\n    (let ((event\n           {op          : \"mint\",\n            user        : user,\n            pool        : pool_,\n            amt0        : amt0_,\n            amt1        : amt1_,\n            liquidity   : liquidity,\n            total-supply: total-supply,\n            }))\n      (print (merge event {\n        amt0-fee    : amt0-fee,\n        amt1-fee    : amt1-fee,\n      }))\n      (ok event)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; burn\n(define-public\n  (burn\n    (token0    <ft-trait>)\n    (token1    <ft-trait>)\n    (lp-token  <lp-token-trait>)\n    (liquidity uint))\n\n  (let ((pool_        (do-get-pool))\n        (user         tx-sender)\n        (protocol     (as-contract tx-sender))\n\n        (total-supply (try! (contract-call? lp-token get-total-supply)))\n        (r0           (get reserve0 pool_))\n        (r1           (get reserve1 pool_))\n\n        (res          (contract-call?\n                       'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-math_v1_0_0\n                       burn\n                       r0 r1 total-supply liquidity))\n        (amt0         (get dx res))\n        (amt1         (get dy res))\n        )\n\n    ;; Pre-conditions\n    (asserts!\n      (and (is-eq (get lp-token pool_) (contract-of lp-token))\n           (is-eq (get token0   pool_) (contract-of token0))\n           (is-eq (get token1   pool_) (contract-of token1))\n           (> liquidity u0)\n           (or (> amt0 u0)\n               (> amt1 u0))\n           )\n      err-burn-preconditions)\n\n    ;; Update global state\n    (if (> amt0 u0) (try! (as-contract (contract-call? token0 transfer amt0 protocol user none))) true)\n    (if (> amt1 u0) (try! (as-contract (contract-call? token1 transfer amt1 protocol user none))) true)\n    (try! (as-contract (contract-call? lp-token burn liquidity user)))\n\n    ;; Update local state\n    (unwrap-panic (update-reserves (- r0 amt0) (- r1 amt1)))\n\n    ;; Post-conditions\n\n    ;; Return\n    (let ((event\n          {op          : \"burn\",\n           user        : user,\n           pool        : pool_,\n           liquidity   : liquidity,\n           amt0        : amt0,\n           amt1        : amt1,\n           total-supply: total-supply\n           }))\n      (print event)\n      (ok event)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; swap\n(define-constant MAX-SWAP-SIZE {num: u1000, den: u10000}) ;; 10%\n\n(define-read-only\n (check-max-swap-size\n  (amt     uint)\n  (reserve uint) )\n (<= amt\n     (/ (* reserve (get num MAX-SWAP-SIZE))\n        (get den MAX-SWAP-SIZE))\n     ) )\n\n(define-public\n  (swap\n   (token-in        <ft-trait>)\n   (token-out       <ft-trait>)\n   (fees            <fees-trait>)\n   (proxy           <proxy-trait>)\n   (amt-in          uint)\n   (amt-out-desired uint))\n\n  (let ((pool_     (var-get pool))\n        (user      tx-sender)\n        (protocol  (as-contract tx-sender))\n\n        (t0        (get token0 pool_))\n        (t1        (get token1 pool_))\n        (is-token0 (is-eq (contract-of token-in) t0))\n\n        (r0        (get reserve0 pool_))\n        (r1        (get reserve1 pool_))\n\n        (res              (try! (contract-call? fees calc-fees amt-in)))\n        (amt-in-adjusted  (get amt-in-adjusted  res))\n        (amt-fee-lps      (get amt-fee-lps      res))\n        (amt-fee-protocol (get amt-fee-protocol res))\n\n        (t0_ (if is-token0 token-in token-out))\n        (t1_ (if is-token0 token-out token-in))\n\n        (ratio     (try! (get-ratio proxy)))\n        (x         (div-ratio r0 ratio))\n        (dx        (div-ratio amt-in-adjusted ratio))\n        (y         (mult-ratio r1 ratio))\n        (dy        (mult-ratio amt-in-adjusted ratio))\n\n        (amt-out\n         (if is-token0\n             (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-math_v1_0_0 find-dx\n                                           r1 x dx\n                                           u0 (get A pool_)))\n             (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-math_v1_0_0 find-dx\n                                           r0 y dy\n                                           u0 (get A pool_)))))\n\n        (bals (if is-token0\n                  {bal0: (+ r0 amt-in-adjusted amt-fee-lps),\n                   bal1: (- r1 amt-out)}\n                  {bal0: (- r0 amt-out),\n                   bal1: (+ r1 amt-in-adjusted amt-fee-lps)}))\n        )\n\n    (asserts!\n     (and\n      (or (is-eq (contract-of token-in) t0)\n          (is-eq (contract-of token-in) t1))\n      (or (is-eq (contract-of token-out) t0)\n          (is-eq (contract-of token-out) t1))\n      (not (is-eq (contract-of token-in) (contract-of token-out)))\n\n      (is-eq (contract-of fees) (get fees pool_))\n\n      (>  amt-in          u0)\n      (>  amt-out-desired u0)\n      (>  amt-in-adjusted u0)\n      (>= amt-out         amt-out-desired)\n\n      (check-max-swap-size amt-in (if is-token0 r0 r1))\n\n      )\n     err-swap-preconditions)\n\n    ;; Update global state\n    (try! (contract-call? token-in transfer amt-in user protocol none))\n    (try! (as-contract (contract-call? token-out transfer amt-out protocol user none)))\n\n    (if (> amt-fee-protocol u0)\n        (try! (as-contract (contract-call? token-in transfer\n                                          amt-fee-protocol\n                                          protocol\n                                          (contract-of fees)\n                                          none)))\n        true)\n\n    ;; Update local state\n    (unwrap-panic (update-reserves (get bal0 bals) (get bal1 bals)))\n\n    ;; Post-conditions\n    ;; (asserts!\n    ;;  (if is-token0\n    ;;      (and\n    ;;       (>= (contract-call? token-in  get-balance protocol) (get bal0 bals))\n    ;;       (>= (contract-call? token-out get-balance protocol) (get bal1 bals)))\n    ;;      (and\n    ;;       (>= (contract-call? token-out get-balance protocol) (get bal0 bals))\n    ;;       (>= (contract-call? token-in  get-balance protocol) (get bal1 bals)))\n    ;;      )\n    ;;  err-swap-postconditions)\n\n    ;; Return\n    (let ((event\n           {op              : \"swap\",\n            user            : user,\n            pool            : pool_ ,\n            amt-in          : amt-in,\n            amt-out-desired : amt-out-desired,\n            amt-out         : amt-out,\n            amt-in-adjusted : amt-in-adjusted,\n            amt-fee-lps     : amt-fee-lps,\n            amt-fee-protocol: amt-fee-protocol,\n           }))\n      ;; (print event)\n      (ok event) )\n    ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; get-ratio\n(define-data-var proxy-owner principal tx-sender)\n(define-read-only (get-proxy-owner) (var-get proxy-owner))\n(define-private (check-proxy-owner)\n  (ok (asserts! (is-eq contract-caller (get-proxy-owner)) err-auth)))\n(define-public\n (set-proxy-owner (new-owner principal))\n (begin\n  (try! (check-proxy-owner))\n  (ok (var-set proxy-owner new-owner)) ))\n\n(define-data-var PROXY principal .curve-proxy-v1_0_0_ststx-0001)\n(define-public\n (set-proxy (new-proxy principal))\n (begin\n  (try! (check-proxy-owner))\n  (ok (var-set PROXY new-proxy)) ))\n\n\n(define-public (get-ratio (proxy <proxy-trait>))\n (begin\n  (asserts! (is-eq (contract-of proxy) (var-get PROXY)) err-auth)\n  (contract-call? proxy get-ratio)))\n\n(define-read-only\n (mult-ratio\n  (n uint)\n  (r uint))\n (/ (* n r) u1000000))\n\n(define-read-only\n (div-ratio\n  (n uint)\n  (r uint))\n (/ (* n u1000000) r))\n\n\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract implements a liquidity pool for a decentralized exchange, supporting token swaps, liquidity provision (minting), and liquidity removal (burning) with fee handling.",
      "explanation": "This Clarity smart contract defines a liquidity pool for a decentralized exchange on the Stacks blockchain. It allows users to swap tokens, add liquidity to the pool (minting LP tokens), and remove liquidity from the pool (burning LP tokens). The contract includes mechanisms for fee calculation and distribution, and it uses external contracts for token standards and mathematical operations. Key features include initialization of the pool with two tokens, minting with initial and single-sided liquidity provision, burning to remove liquidity, and swapping tokens with fee adjustments. The contract uses traits to interact with other contracts, ensuring they adhere to expected interfaces, and it maintains internal state to track the pool's reserves and other critical parameters. Errors and storage variables are clearly defined, and the contract includes read-only functions for data retrieval and private functions for internal state updates.",
      "tags": [
        "DeFi",
        "liquidity-pool",
        "swap",
        "mint",
        "burn",
        "fee"
      ]
    }
  },
  {
    "rank": 88,
    "contract": "SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.marketplace-bid-v5",
    "calls": 343,
    "source": "(use-trait nft-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n;; bids map\n;; if nft-id is `none`, the bid is a collection bid\n;;    and can be accepted by anyone holding a token from\n;;    that collection.\n\n(define-map bids\n  uint\n  { \n    collection: principal, \n    nft-id: (optional uint), \n    bid-amount: uint, \n    buyer: principal, \n    seller: (optional principal), \n    expiration-block: uint, \n    action-event-index: uint \n  }\n)\n\n(define-constant contract-address (as-contract tx-sender))\n(define-constant contract-owner tx-sender)\n(define-constant err-contract-not-authorized u101)\n(define-constant err-placing-bids-disabled u102)\n(define-constant err-accepting-bids-disabled u103)\n(define-constant err-withdrawing-bids-disabled u104)\n(define-constant err-user-not-authorized u105)\n(define-constant err-no-bid-found u106)\n(define-constant err-bid-expired u107)\n(define-constant err-wrong-collection u108)\n(define-constant err-wrong-nft-id u109)\n\n(define-data-var placing-bids-enabled bool true)\n(define-data-var accepting-bids-enabled bool true)\n(define-data-var withdrawing-bids-enabled bool true)\n(define-data-var commission uint u200)\n(define-data-var id uint u0)\n\n(define-public (place-bid (collection <nft-trait>) (nft-id (optional uint)) (amount uint) (expiration uint) (memo (optional (string-ascii 256))))\n  (let ((block block-height)\n        (next-bid-id (var-get id))\n        (nft-owner \n          (if (is-some nft-id) \n            (get-owner collection (unwrap-panic nft-id))\n            none)\n        ) \n        (nft {collection: (contract-of collection), nft-id: nft-id, bid-amount: amount, buyer: tx-sender, seller: nft-owner, expiration-block: (+ expiration block), action-event-index: u0}))\n    (asserts! (var-get placing-bids-enabled) \n              (err err-placing-bids-disabled))\n    (asserts! (contract-call? .nft-oracle-v2 is-trusted (contract-of collection))\n              (err err-contract-not-authorized))\n\n    (try! (stx-transfer? amount tx-sender contract-address))\n    (map-set bids next-bid-id nft)\n    (var-set id (+ next-bid-id u1))\n\n    (print { \n      action: \"place-bid\",\n      payload: {\n        bid_id: next-bid-id,\n        action_event_index: (get action-event-index nft),\n        collection_id: collection,\n        ;; asset_id: asset-id',\n        token_id: nft-id,\n        bidder_address: tx-sender,\n        seller_address: nft-owner,\n        bid_amount: amount, \n        expiration_block: (get expiration-block nft),\n        memo: memo\n      }\n    })\n\n    (ok next-bid-id)\n  )\n)\n\n(define-public (withdraw-bid (bid-id uint))\n  (let ((previous-bid (get-bid bid-id))\n        (previous-bidder (get buyer previous-bid))\n        (previous-bid-action-event-index (get action-event-index previous-bid))\n        (previous-bid-amount (get bid-amount previous-bid)))\n    (asserts! (var-get withdrawing-bids-enabled) \n              (err err-withdrawing-bids-disabled))\n    (asserts! (> previous-bid-amount u0) (err err-no-bid-found))\n    (asserts! (or (is-eq previous-bidder tx-sender) (is-eq contract-owner tx-sender))\n              (err err-user-not-authorized))\n\n    (map-delete bids bid-id)\n\n    (print {\n      action: \"withdraw-bid\",\n      payload: {\n        bid_id: bid-id,\n        action_event_index: (+ u1 previous-bid-action-event-index),\n        collection_id: (get collection previous-bid),\n        token_id: (get nft-id previous-bid),\n        bidder_address: previous-bidder,\n        seller_address: (get seller previous-bid),\n        bid_amount: previous-bid-amount,\n        expiration_block: (get expiration-block previous-bid) \n      }\n    })\n\n    (as-contract (stx-transfer? previous-bid-amount contract-address previous-bidder))\n  )\n)\n\n(define-public (accept-bid (bid-id uint) (collection <nft-trait>) (nft-id uint))\n  (let ((bid (get-bid bid-id))\n        (bid-nft-id (get nft-id bid))\n        (bid-collection (get collection bid))\n        (bidder (get buyer bid))\n        (bid-amount (get bid-amount bid))\n        (bid-action-event-index (get action-event-index bid))\n        (expiration-block (get expiration-block bid))\n        (nft-owner (unwrap! (get-owner collection nft-id) (err err-user-not-authorized)))\n        (royalty (get-royalty (contract-of collection)))\n        (royalty-address (get address royalty))\n        (commission-amount (/ (* bid-amount (var-get commission)) u10000))\n        (royalty-amount (/ (* bid-amount (get percent royalty)) u10000))\n        (to-owner-amount (- (- bid-amount commission-amount) royalty-amount))\n        (block block-height))\n    (asserts! (var-get accepting-bids-enabled) \n              (err err-accepting-bids-disabled))\n    (asserts! (contract-call? .nft-oracle-v2 is-trusted (contract-of collection))\n              (err err-contract-not-authorized))\n    (asserts! (> bid-amount u0) (err err-no-bid-found))\n    (asserts! (is-eq (contract-of collection) bid-collection) (err err-wrong-collection))\n    (asserts! (or \n                (is-none bid-nft-id) \n                (and (is-some bid-nft-id) (is-eq (unwrap-panic bid-nft-id) nft-id))) \n              (err err-wrong-nft-id))\n    (asserts! (is-eq tx-sender nft-owner) (err err-user-not-authorized))\n    (asserts! (> expiration-block block) (err err-bid-expired))\n\n    (map-delete bids bid-id)\n    (try! (contract-call? collection transfer nft-id tx-sender bidder))\n    (and (> to-owner-amount u0)\n        (try! (as-contract (stx-transfer? to-owner-amount contract-address nft-owner))))\n    (and (> commission-amount u0)\n        (try! (as-contract (stx-transfer? commission-amount contract-address contract-owner))))\n    (and (> royalty-amount u0)\n        (try! (as-contract (stx-transfer? royalty-amount contract-address royalty-address))))\n\n    (print { \n      action: \"accept-bid\",\n      payload: {\n        bid_id: bid-id,\n        action_event_index: (+ u1 bid-action-event-index),\n        collection_id: collection,\n        token_id: nft-id,\n        bidder_address: bidder,\n        seller_address: nft-owner,\n        bid_amount: bid-amount, \n        expiration_block: expiration-block,\n        royalty: {\n          recipient_address: royalty-address,\n          percent: (get percent royalty),\n        }\n      }\n    })\n\n    (ok true)\n  )\n)\n\n(define-public (change-bid-amount-and-expiration (bid-id uint) (new-amount uint) (new-expiration uint))\n  (let ((bid (get-bid bid-id))\n        (bidder (get buyer bid))\n        (bid-amount (get bid-amount bid))\n        (bid-collection (get collection bid))\n        (bid-nft-id (get nft-id bid))\n        (bid-action-event-index (get action-event-index bid))\n        (seller (get seller bid))\n        (block block-height)\n        (new-bid (merge bid {bid-amount: new-amount, expiration-block: (+ new-expiration block), action-event-index: (+ u1 bid-action-event-index)})))\n    (asserts! (var-get accepting-bids-enabled) \n              (err err-accepting-bids-disabled))\n    (asserts! (> bid-amount u0) (err err-no-bid-found))\n    (asserts! (is-eq tx-sender bidder) (err err-user-not-authorized))\n\n    (if (is-eq bid-amount new-amount)\n      true\n      (if (< new-amount bid-amount)\n        (try! (as-contract (stx-transfer? (- bid-amount new-amount) contract-address bidder)))\n        (try! (stx-transfer? (- new-amount bid-amount) tx-sender contract-address))\n      )\n    )\n\n    (map-set bids bid-id new-bid)\n\n    (print { \n      action: \"change-bid-amount-and-expiration\",\n      payload: {\n        bid_id: bid-id,\n        action_event_index: (get action-event-index new-bid), \n        collection_id: bid-collection,\n        ;; asset_id: asset-id',\n        token_id: bid-nft-id,\n        bidder_address: bidder,\n        seller_address: seller,\n        bid_amount: (get bid-amount new-bid), \n        expiration_block: (get expiration-block new-bid),\n      }\n    })\n\n    (ok true)\n  )\n)\n\n(define-public (set-placing-bids-enabled (enabled bool))\n    (begin\n        (asserts! (is-eq tx-sender contract-owner) (err err-user-not-authorized))\n        (ok (var-set placing-bids-enabled enabled))\n    )\n)\n\n(define-public (set-accepting-bids-enabled (enabled bool))\n    (begin\n        (asserts! (is-eq tx-sender contract-owner) (err err-user-not-authorized))\n        (ok (var-set accepting-bids-enabled enabled))\n    )\n)\n\n(define-public (set-withdrawing-bids-enabled (enabled bool))\n    (begin\n        (asserts! (is-eq tx-sender contract-owner) (err err-user-not-authorized))\n        (ok (var-set withdrawing-bids-enabled enabled))\n    )\n)\n\n(define-read-only (get-bid (bid-id uint))\n  (default-to\n    {collection: tx-sender, nft-id: none, buyer: contract-owner, seller: none, bid-amount: u0, expiration-block: block-height, action-event-index: u0}\n    (map-get? bids bid-id)\n  )\n)\n\n(define-private (get-owner (nft <nft-trait>) (nft-id uint))\n  (unwrap-panic (contract-call? nft get-owner nft-id))\n)\n\n(define-private (get-royalty (collection principal))\n  (default-to\n    { address: contract-owner, percent: u0 }\n    (contract-call? .nft-oracle-v2 get-royalty-amount collection))\n)\n\n",
    "analysis": {
      "summary": "This contract facilitates a marketplace for NFTs, enabling users to place, withdraw, and accept bids on NFTs, including handling royalties and commissions.",
      "explanation": "The contract uses a trait to interact with NFTs, ensuring compatibility with any NFT that implements the specified trait. It maintains a map of bids, where each bid can be for a specific NFT or a collection bid. Bids include details such as the amount, buyer, seller, and expiration. The contract includes functions to place, withdraw, and accept bids, with checks for authorization, bid existence, and expiration. It also allows the contract owner to enable or disable placing, accepting, and withdrawing bids. The contract handles transferring STX for bids, including calculating and transferring commissions and royalties. Notably, it integrates with an external 'nft-oracle-v2' contract for trust checks and royalty information, demonstrating how Clarity contracts can interact with each other.",
      "tags": [
        "NFT",
        "marketplace",
        "DeFi",
        "royalties",
        "commission"
      ]
    }
  },
  {
    "rank": 89,
    "contract": "SP3SNCBK1ZH05J3SBST16ZXP2AHSPE9H645ZTRVQ6.building-blocks-stxcity-dex",
    "calls": 341,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u69000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u5000000000)\n(define-constant VIRTUAL_STX_VALUE u1000000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u100000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP359XMJYWRDY24H7VDYJWKPAGHN75V8M0W1NBF3P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP3SNCBK1ZH05J3SBST16ZXP2AHSPE9H645ZTRVQ6.building-blocks-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u66901954700589)\n    (var-set stx-balance u31360000)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX.",
      "explanation": "The contract facilitates the buying and selling of a predefined token using a bonding curve to determine prices, enhancing liquidity and price discovery. It does not grant any ownership or control to the deployer post-deployment, aligning with a decentralized ethos.\n\n- The contract imports the SIP-010 Fungible Token Trait for token interactions <L1>.\n- Error constants are defined for handling various exceptions <L4-11>.\n- Key parameters for the bonding curve and DEX operation, including token supply, target STX amount, and fee addresses, are set as constants <L13-28>.\n- Tradable status, virtual STX amount, token and STX balances, and percentages for burning and deployer rewards are maintained as data variables <L30-35>.\n- The `buy` function <L37-88> allows users to purchase tokens by sending STX to the contract, adjusting the token and STX balances according to the bonding curve. It includes a mechanism to distribute fees, burn a percentage of tokens, and transfer remaining tokens and STX to specified addresses upon reaching the STX target amount.\n- The `sell` function <L89-124> enables users to sell tokens back to the contract in exchange for STX, with fees applied and balances updated accordingly.\n- `get-buyable-tokens` <L125-150> and `get-sellable-stx` <L151-176> are read-only functions that compute the amount of tokens or STX that can be bought or sold, including fees, based on the current state of the contract's balances and the bonding curve.\n- The contract initializes with predefined balances and settings, making it immediately tradable <L178-186>.\n\nThis contract is an example of a decentralized finance (DeFi) application, specifically within the automated market maker (AMM) category, leveraging a mathematical curve to automate asset pricing.",
      "tags": [
        "DeFi",
        "DEX",
        "bonding-curve",
        "AMM",
        "protocol",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 90,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v204",
    "calls": 333,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait oabc2f5b3982b0123 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o318649a6b009833d 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait oeb241b403e5527bf 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (oc9bd3483422ecf0d (o5183708558b845a4 <oabc2f5b3982b0123>) (o5fea83bcb8e0304e <oabc2f5b3982b0123>) (o26a22f288488cc6a <oeb241b403e5527bf>) (oc53901217b812f93 <o318649a6b009833d>) (o977b01773ea33d9d uint)) (let ((o9808b37ac42bb57f (try! (as-contract (contract-call? o26a22f288488cc6a swap o5183708558b845a4 o5fea83bcb8e0304e oc53901217b812f93 o977b01773ea33d9d u1))))) (ok (get amt-out o9808b37ac42bb57f)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-b (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-c (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-e (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-f (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-g (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-i (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-j (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-k (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-l (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-m (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-n (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-p (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-q (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-r (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-s (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-t (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-u (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-w (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-x (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-y (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-z (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53)))) (asserts! (> o24ee854d6599d6a5 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o24ee854d6599d6a5 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o24ee854d6599d6a5)))))",
    "analysis": {
      "summary": "This contract provides a comprehensive suite of swap-helper functions to facilitate various token swaps on the Stacks blockchain, leveraging multiple protocols.",
      "explanation": "The contract is designed to interact with different token standards and liquidity pool contracts on the Stacks blockchain, enabling users to swap tokens across various protocols. It uses the SIP-010 trait for fungible tokens and custom traits for liquidity pools and fees. The contract defines a series of 'swap-helper' functions, each tailored to interact with specific contracts or perform distinct swap operations. These functions typically involve calculating amounts, transferring tokens, and interacting with external contracts to execute swaps. The contract ensures that only the designated sender can initiate swaps and handles errors gracefully, reverting state changes in case of failures. It also maintains a counter to track operations.",
      "tags": [
        "DeFi",
        "swap",
        "token",
        "SIP-010",
        "liquidity-pool"
      ]
    }
  },
  {
    "rank": 91,
    "contract": "SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.cyclops-liquidity-dexterity",
    "calls": 325,
    "source": ";; Cyclops Liquidity - LP Token, AMM DEX and Hold-to-Earn Engine\n;; SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.cyclops-liquidity-dexterity\n\n;; Implement SIP-010 trait\n(impl-trait 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-traits-v1.sip010-ft-trait)\n\n;; Define the LP token\n(define-fungible-token index)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant CONTRACT (as-contract tx-sender))\n(define-constant ERR_UNAUTHORIZED (err u403))\n(define-constant MAX_SWAP_FEE u250000) ;; 25%\n(define-constant PRECISION u1000000)\n(define-constant ALPHA u500000)\n\n;; Storage\n(define-data-var owner principal DEPLOYER)\n(define-data-var energy-burn-amount uint u100000000)\n(define-data-var swap-fee uint u250000) ;; Default to 25%\n(define-data-var token-uri (optional (string-utf8 256)) \n  (some u\"https://charisma.rocks/api/v0/indexes/SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.cyclops-liquidity-dexterity\"))\n(define-data-var first-start-block uint stacks-block-height)\n(define-map last-tap-block principal uint)\n\n;; Configuration functions\n(define-public (set-owner (new-owner principal))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set owner new-owner))))\n\n(define-public (set-swap-fee (new-fee uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (asserts! (<= new-fee MAX_SWAP_FEE) ERR_UNAUTHORIZED)\n    (ok (var-set swap-fee new-fee))))\n\n(define-public (set-energy-burn-amount (new-amount uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set energy-burn-amount new-amount))))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if (is-eq contract-caller (var-get owner))\n    (ok (var-set token-uri (some value))) \n    ERR_UNAUTHORIZED))\n\n;; Core AMM operations\n(define-private (calculate-output-amount (x uint) (y uint) (dx uint) (amp uint))\n  (let (\n    ;; Constant sum portion (better for similar values)\n    (sum-term (/ (* dx y) x))\n    ;; Constant product portion (better for different values)\n    (product-term (/ (* dx y) (+ x dx)))\n    ;; Weighted sum of both terms\n    (weighted-output (+ (* (- PRECISION amp) sum-term) (* amp product-term))))\n    (/ weighted-output PRECISION)))\n\n(define-public (swap (forward bool) (amt-in uint))\n  (let (\n    (sender tx-sender)\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT))))\n    ;; Calculate raw output amount first\n    (raw-out (calculate-output-amount reserve-in reserve-out amt-in ALPHA))\n    ;; Check if energy was paid and apply fees to output amount\n    (paid-energy (match (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 exhaust (var-get energy-burn-amount) sender) success true error false))\n    (amt-out (if paid-energy raw-out (/ (* raw-out (- PRECISION (var-get swap-fee))) PRECISION))))\n    ;; Execute the swap\n    (try! (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer amt-in sender CONTRACT none) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-in sender CONTRACT none)))\n    (try! (as-contract (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-out CONTRACT sender none)\n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer amt-out CONTRACT sender none))))\n    (ok {amt-in: amt-in, amt-out: amt-out})))\n\n(define-public (mint (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (if (is-eq total-supply u0) amount (/ (* amount reserve0) total-supply)))\n    (token1-amount (if (is-eq total-supply u0) amount (/ (* amount reserve1) total-supply))))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer token0-amount who CONTRACT none))\n    (try! (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token1-amount who CONTRACT none))\n    (try! (ft-mint? index amount who))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n(define-public (burn (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (/ (* amount reserve0) total-supply))\n    (token1-amount (/ (* amount reserve1) total-supply)))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (ft-burn? index amount who))\n    (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer token0-amount CONTRACT who none)))\n    (try! (as-contract (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token1-amount CONTRACT who none)))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n;; Read functions\n(define-read-only (get-owner)\n  (ok (var-get owner)))\n\n(define-read-only (get-alpha)\n  (ok ALPHA))\n\n(define-read-only (get-tokens)\n  (ok {token0: 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token, token1: 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token}))\n\n(define-read-only (get-swap-fee)\n  (ok (var-get swap-fee)))\n\n(define-read-only (get-reserves)\n  (ok {\n    token0: (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT)),\n    token1: (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))\n  }))\n\n(define-read-only (get-quote (forward bool) (amt-in uint) (apply-fee bool))\n  (let (\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT))))\n    (raw-out (calculate-output-amount reserve-in reserve-out amt-in ALPHA))\n    (output-amount (if apply-fee (/ (* raw-out (- PRECISION (var-get swap-fee))) PRECISION) raw-out)))\n    (ok output-amount)))\n\n;; SIP-010 Implementation\n(define-read-only (get-name)\n  (ok \"Cyclops Liquidity\"))\n\n(define-read-only (get-symbol)\n  (ok \"CYC\"))\n\n(define-read-only (get-decimals)\n  (ok u6))\n\n(define-read-only (get-balance (who principal))\n  (ok (ft-get-balance index who)))\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply index)))\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri)))\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender from) ERR_UNAUTHORIZED)\n    (ft-transfer? index amount from to)))\n\n;; Hold-to-Earn functions\n(define-private (get-balance-at (data { address: principal, block: uint }))\n    (let ((target-block (get block data)))\n        (if (< target-block stacks-block-height)\n            (let ((block-hash (unwrap-panic (get-stacks-block-info? id-header-hash target-block))))\n                (at-block block-hash (unwrap-panic (get-balance (get address data)))))\n                (unwrap-panic (get-balance (get address data))))))\n\n(define-private (calculate-trapezoid-areas-39 (balances (list 39 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u18)) (unwrap-panic (element-at balances u19))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u19)) (unwrap-panic (element-at balances u20))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u20)) (unwrap-panic (element-at balances u21))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u21)) (unwrap-panic (element-at balances u22))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u22)) (unwrap-panic (element-at balances u23))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u23)) (unwrap-panic (element-at balances u24))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u24)) (unwrap-panic (element-at balances u25))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u25)) (unwrap-panic (element-at balances u26))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u26)) (unwrap-panic (element-at balances u27))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u27)) (unwrap-panic (element-at balances u28))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u28)) (unwrap-panic (element-at balances u29))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u29)) (unwrap-panic (element-at balances u30))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u30)) (unwrap-panic (element-at balances u31))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u31)) (unwrap-panic (element-at balances u32))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u32)) (unwrap-panic (element-at balances u33))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u33)) (unwrap-panic (element-at balances u34))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u34)) (unwrap-panic (element-at balances u35))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u35)) (unwrap-panic (element-at balances u36))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u36)) (unwrap-panic (element-at balances u37))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u37)) (unwrap-panic (element-at balances u38))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-19 (balances (list 19 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-9 (balances (list 9 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-5 (balances (list 5 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-2 (balances (list 2 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)))\n\n(define-private (calculate-balance-integral-39 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-39 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u38))\n        (areas (calculate-trapezoid-areas-39 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-19 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-19 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u18))\n        (areas (calculate-trapezoid-areas-19 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-9 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-9 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u8))\n        (areas (calculate-trapezoid-areas-9 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-5 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-5 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u4))\n        (areas (calculate-trapezoid-areas-5 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-2 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-2 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u1))\n        (areas (calculate-trapezoid-areas-2 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral (address principal) (start-block uint) (end-block uint))\n    (let (\n        (block-difference (- end-block start-block))\n        (thresholds (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 get-thresholds))))\n        (if (>= block-difference (get threshold-39-point thresholds)) (calculate-balance-integral-39 address start-block end-block)\n        (if (>= block-difference (get threshold-19-point thresholds)) (calculate-balance-integral-19 address start-block end-block)\n        (if (>= block-difference (get threshold-9-point thresholds)) (calculate-balance-integral-9 address start-block end-block)\n        (if (>= block-difference (get threshold-5-point thresholds)) (calculate-balance-integral-5 address start-block end-block)\n        (calculate-balance-integral-2 address start-block end-block)))))))\n\n(define-read-only (get-last-tap-block (address principal))\n    (default-to (var-get first-start-block) (map-get? last-tap-block address)))\n\n(define-public (tap)\n  (let (\n    (sender tx-sender)\n    (end-block stacks-block-height)\n    (start-block (get-last-tap-block sender))\n    (balance-integral (calculate-balance-integral sender start-block end-block))\n    (incentive-score (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.aura get-incentive-score CONTRACT))\n    (circulating-supply (unwrap-panic (get-total-supply)))\n    (potential-energy (/ (* balance-integral incentive-score) circulating-supply)))\n    (map-set last-tap-block sender end-block)\n    (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 energize potential-energy sender)))\n\n(begin (mint DEPLOYER u1000000))  \n",
    "analysis": {
      "summary": "This contract implements a liquidity pool and automated market maker (AMM) for token swapping, LP token minting/burning, and a hold-to-earn mechanism based on users' LP token holdings over time.",
      "explanation": "The contract starts by implementing the SIP-010 trait for fungible tokens, indicating it follows the standard interface for Stacks fungible tokens. It defines an LP token named 'index' and sets up constants and storage variables for contract management, including the owner, swap fee, and a unique token URI. The contract includes functions to adjust these settings, ensuring only the owner can make changes. The core functionality revolves around AMM operations for token swapping, minting LP tokens in exchange for adding liquidity, and burning LP tokens to remove liquidity. The swap function calculates output amounts based on reserves and an amplification factor, optionally applying a fee if energy (a form of transaction cost) is not paid. Minting and burning functions adjust the supply of LP tokens based on the proportion of the liquidity provided or removed. The contract also includes read-only functions to get contract settings and state. A unique feature is the hold-to-earn mechanism, which calculates users' incentive scores based on their LP token holdings over time, using a trapezoidal rule for numerical integration across sampled balance points. This mechanism encourages users to hold onto their LP tokens to earn rewards. The contract concludes with an initial minting to the deployer for liquidity seeding.",
      "tags": [
        "AMM",
        "DEX",
        "LP-Token",
        "Hold-to-Earn",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 92,
    "contract": "SP2TT71CXBRDDYP2P8XMVKRFYKRGSMBWCZ6W6FDGT.notastrategy",
    "calls": 324,
    "source": "\n;;  ---------------------------------------------------------\n;; SIP-10 Fungible Token Contract | Its time to get NASTY\n;; ---------------------------------------------------------\n\n;; Errors \n(define-constant ERR-UNAUTHORIZED u401)\n(define-constant ERR-NOT-OWNER u402)\n(define-constant ERR-INVALID-PARAMETERS u403)\n(define-constant ERR-NOT-ENOUGH-FUND u101)\n\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Constants\n(define-constant MAXSUPPLY u52350000000000000)\n\n;; Variables\n(define-fungible-token NASTY MAXSUPPLY)\n(define-data-var contract-owner principal tx-sender) \n\n\n\n;; SIP-10 Functions\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender)\n            (err ERR-UNAUTHORIZED))\n        ;; Perform the token transfer\n        (ft-transfer? NASTY amount from to)\n    )\n)\n\n\n;; DEFINE METADATA\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://pdakhjpwkuwtadzmpnjm.supabase.co/storage/v1/object/public/uri/rfTrTozz-notastrategy-7-decimals.json\"))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (begin\n        (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))\n        (var-set token-uri (some value))\n        (ok (print {\n              notification: \"token-metadata-update\",\n              payload: {\n                contract-id: (as-contract tx-sender),\n                token-class: \"ft\"\n              }\n            })\n        )\n    )\n)\n\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance NASTY owner))\n)\n(define-read-only (get-name)\n  (ok \"NotaStrategy\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"NASTY\")\n)\n\n(define-read-only (get-decimals)\n  (ok u7)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply NASTY))\n)\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri))\n)\n\n;; transfer ownership\n(define-public (transfer-ownership (new-owner principal))\n  (begin\n    ;; Checks if the sender is the current owner\n    (if (is-eq tx-sender (var-get contract-owner))\n      (begin\n        ;; Sets the new owner\n        (var-set contract-owner new-owner)\n        ;; Returns success message\n        (ok \"Ownership transferred successfully\"))\n      ;; Error if the sender is not the owner\n      (err ERR-NOT-OWNER)))\n)\n\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n(define-private (send-stx (recipient principal) (amount uint))\n  (begin\n    (try! (stx-transfer? amount tx-sender recipient))\n    (ok true) \n  )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n    (try! (send-stx 'SP1FQ3DQDR5N9HJX3XC5DNKFCG4DHH48EFJQV6QH0 u5000000))\n    (try! (ft-mint? NASTY MAXSUPPLY (var-get contract-owner)))\n)\n",
    "analysis": {
      "summary": "This contract implements a SIP-10 compliant fungible token named NASTY with additional features like metadata management, ownership transfer, and batch transfers.",
      "explanation": "This Clarity smart contract defines a fungible token named NASTY with a maximum supply defined by the constant MAXSUPPLY. It implements the SIP-010 Fungible Token Standard for Stacks blockchain, ensuring compatibility with wallets and exchanges that also adhere to this standard. The contract includes functions for transferring tokens, setting and retrieving token metadata, transferring contract ownership, and sending tokens to multiple recipients in a single transaction. Notably, it includes a minting operation at contract initialization to the contract owner and a unique feature for sending STX, the native cryptocurrency of the Stacks blockchain, which is not commonly found in standard fungible token contracts.\n\n- <L5-8> define constants for error codes used throughout the contract.\n- <L10> imports the SIP-010 trait, ensuring compliance with the fungible token standard.\n- <L13> sets the maximum supply of the NASTY token.\n- <L15-16> declare the NASTY token and the contract owner variable, initializing the owner as the transaction sender upon contract deployment.\n- <L19-26> defines the `transfer` function, which checks if the `from` address matches the transaction sender to authorize the transfer, then performs the token transfer.\n- <L29-35> sets the token's metadata URI and provides a function to update it, restricted to the contract owner.\n- <L37-54> includes read-only functions to retrieve the token's balance, name, symbol, decimals, total supply, and metadata URI.\n- <L57-67> allows the current owner to transfer ownership of the contract to a new principal.\n- <L70-90> defines a `send-many` utility function for batch transferring tokens to multiple recipients, leveraging private helper functions for error handling and executing transfers.\n- <L93-98> includes a private function to send STX, showcasing an interaction with the native cryptocurrency.\n- <L101-105> mints the maximum supply of NASTY tokens to the contract owner and sends a fixed amount of STX to a specified address upon contract initialization, demonstrating an immediate action taken when the contract is deployed.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "metadata-management",
        "ownership-transfer",
        "batch-transfer",
        "STX-transfer"
      ]
    }
  },
  {
    "rank": 93,
    "contract": "SP3SMQNVWRBVWC81SRJYFV4X1ZQ7AWWJFBQJMC724.riseofthememefam",
    "calls": 320,
    "source": "\n;;  ---------------------------------------------------------\n;; SIP-10 Fungible Token Contract | Created on: stx.city/deploy\n;; ---------------------------------------------------------\n\n;; Errors \n(define-constant ERR-UNAUTHORIZED u401)\n(define-constant ERR-NOT-OWNER u402)\n(define-constant ERR-INVALID-PARAMETERS u403)\n(define-constant ERR-NOT-ENOUGH-FUND u101)\n\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Constants\n(define-constant MAXSUPPLY u21000000000000)\n\n;; Variables\n(define-fungible-token RMFAM MAXSUPPLY)\n(define-data-var contract-owner principal tx-sender) \n\n\n\n;; SIP-10 Functions\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender)\n            (err ERR-UNAUTHORIZED))\n        ;; Perform the token transfer\n        (ft-transfer? RMFAM amount from to)\n    )\n)\n\n\n;; DEFINE METADATA\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://pdakhjpwkuwtadzmpnjm.supabase.co/storage/v1/object/public/uri/sPAULAcy-riseofthememefam-6-decimals.json\"))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (begin\n        (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))\n        (var-set token-uri (some value))\n        (ok (print {\n              notification: \"token-metadata-update\",\n              payload: {\n                contract-id: (as-contract tx-sender),\n                token-class: \"ft\"\n              }\n            })\n        )\n    )\n)\n\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance RMFAM owner))\n)\n(define-read-only (get-name)\n  (ok \"RiseOfTheMemeFam\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"RMFAM\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply RMFAM))\n)\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri))\n)\n\n;; transfer ownership\n(define-public (transfer-ownership (new-owner principal))\n  (begin\n    ;; Checks if the sender is the current owner\n    (if (is-eq tx-sender (var-get contract-owner))\n      (begin\n        ;; Sets the new owner\n        (var-set contract-owner new-owner)\n        ;; Returns success message\n        (ok \"Ownership transferred successfully\"))\n      ;; Error if the sender is not the owner\n      (err ERR-NOT-OWNER)))\n)\n\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n(define-private (send-stx (recipient principal) (amount uint))\n  (begin\n    (try! (stx-transfer? amount tx-sender recipient))\n    (ok true) \n  )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n    (try! (send-stx 'SP1FQ3DQDR5N9HJX3XC5DNKFCG4DHH48EFJQV6QH0 u4000000))\n    (try! (ft-mint? RMFAM MAXSUPPLY (var-get contract-owner)))\n)\n",
    "analysis": {
      "summary": "This contract implements a SIP-010 compliant fungible token with additional features like token URI management and bulk transfers.",
      "explanation": "This Clarity smart contract defines a fungible token adhering to the SIP-010 standard for Stacks blockchain, with a fixed maximum supply and capabilities for ownership transfer, metadata management, and batch transactions. Key components include:\n\n- **Error Codes** <L3-6>: Defines constants for various error conditions such as unauthorized access or insufficient funds.\n\n- **Token Implementation** <L8>: Implements the SIP-010 trait for fungible tokens, ensuring compatibility with the standard.\n\n- **Constants and Variables** <L11-12>: Sets the maximum supply of the token and initializes the contract owner to the transaction sender.\n\n- **Token Operations**:\n  - **Transfer** <L15-22>: Allows token holders to transfer tokens, ensuring the sender is authorized.\n  - **Metadata Management** <L24-34>: Enables updating the token's URI, restricted to the contract owner.\n\n- **Read-Only Functions** <L36-54>: Provides information about the token, including balance, name, symbol, decimals, total supply, and token URI.\n\n- **Ownership Transfer** <L56-67>: Allows the current owner to transfer ownership to a new principal.\n\n- **Utility Functions**:\n  - **Bulk Transfers** <L69-88>: Facilitates sending tokens to multiple recipients in one transaction.\n  - **Private Helper Functions** <L90-108>: Support functions for error handling and executing transfers with optional memos.\n\n- **Initial Actions** <L110-114>: At contract deployment, sends STX to a specified address and mints the maximum supply of tokens to the contract owner.\n\nThis contract extends the basic fungible token functionality with practical features for real-world applications, such as metadata management and efficient batch processing of transactions.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "metadata-management",
        "bulk-transfer"
      ]
    }
  },
  {
    "rank": 94,
    "contract": "SP3PB0M970QNX9C948JN2Q4V5Z7A1X893EA4Y2VDB.amm-pool-v2-02",
    "calls": 315,
    "source": "(use-trait nma 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait) (use-trait nmb 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait nmc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (use-trait share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait) (use-trait sfttc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.share-fee-to-trait) (use-trait upt2 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait uft2 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait sspl 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (define-public (swap-helper-a (free <nma>) (palestine <nma>) (ii uint) (ll uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (lil uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper free palestine ll ii (some u1)) ) nn) lil) ) (define-public (swap-helper-b (free <nma>)  (palestine <nma>)  (l uint)  (ll uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (li uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper free palestine ll (* (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to li u1))) nn) (some l)) ) (define-public (swap-helper-g (t <nma>) (tt <nma>) (ttt <nma>) (ii uint) (ll uint) (n uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (lil uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a t tt ttt ll n ii (some u1)) ) nn) lil) ) (define-public (swap-helper-h (t <nma>) (tt <nma>) (ttt <nma>) (l uint) (ll uint) (n uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (li uint) (share-fee-to <share-fee-to-trait>) (nn uint)) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a t tt ttt ll n (* (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to li u1))) nn) (some l)) ) (define-public (joker (mm <nma>) (mmm <nma>) (ll uint) (ii uint) (min-dy uint) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (li uint) (lil uint) (share-fee-to <share-fee-to-trait>) ) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper mm mmm ll ii (some min-dy))) (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to li lil) )) (define-public (swap-helper-i (mm <nma>) (mmm <nma>) (min-dy uint) (ll uint) (jj <nmb>) (jlj <nmb>) (li uint) (uni-pool-trait <upt2>)  (univ2v2-fees <uft2>) (nn uint)) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper mm mmm ll (* (get amt-out (try! (contract-call? uni-pool-trait swap jj jlj univ2v2-fees li u1))) nn) (some min-dy)) ) (define-public (swap-helper-j (mm <nma>) (mmm <nma>) (ii uint) (ll uint) (jj <nmb>) (jlj <nmb>) (lil uint) (uni-pool-trait <upt2>) (univ2v2-fees <uft2>) (nn uint)) (contract-call? uni-pool-trait swap jj jlj univ2v2-fees (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper mm mmm ll ii (some u1))) nn) lil) ) (define-public (swap-helper-k (free <nma>) (palestine <nma>) (ii uint) (ll uint) (ill <nmb>) (j <nmb>) (lil uint) (nn uint)) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x ill j (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper free palestine ll ii (some u1)) ) nn) lil) ) (define-public (swap-helper-l (free <nma>)  (palestine <nma>)  (l uint)  (ll uint) (ill <nmb>) (j <nmb>) (li uint) (nn uint)) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper free palestine ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y ill j li u1)) u1)) nn) (some l)) ) (define-public (swap-helper-k3 (t <nma>) (tt <nma>) (ttt <nma>) (ii uint) (ll uint) (n uint) (j <nmb>) (ill <nmb>) (lil uint) (nn uint)) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x ill j (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a t tt ttt ll n ii (some u1)) ) nn) lil) ) (define-public (swap-helper-l3 (t <nma>) (tt <nma>) (ttt <nma>) (l uint) (ll uint) (n uint) (ill <nmb>) (j <nmb>) (li uint) (nn uint)) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a t tt ttt ll n (* (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y ill j li u1)) u1)) nn) (some l)) ) (define-public (swap-helper-m (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (li uint) (share-fee-to <share-fee-to-trait>) (iill <nmb>) (jji <nmb>) (lil uint) ) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x iill jji (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to li u1))) lil) ) (define-public (swap-helper-n (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (min-amt uint) (share-fee-to <share-fee-to-trait>) (iill <nmb>) (jji <nmb>) (li uint) ) (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y iill jji li u1)) u1)) min-amt) ) (define-public (m2 (jj <nmb>) (jlj <nmb>) (li uint) (uni-pool-trait <upt2>)  (univ2v2-fees <uft2>) (mm <nma>) (mmm <nma>) (min-dy uint) ) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x mmm mm (get amt-out (try! (contract-call? uni-pool-trait swap jj jlj univ2v2-fees li u1))) min-dy) ) (define-public (n2 (jj <nmb>) (jlj <nmb>) (lil uint) (uni-pool-trait <upt2>) (univ2v2-fees <uft2>) (mm <nma>) (mmm <nma>) (ii uint) ) (contract-call? uni-pool-trait swap jj jlj univ2v2-fees (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y mm mmm ii u1)) u1)) lil) ) (define-public (swap-helper-o (free <nma>) (palestine <nma>) (li uint) (ll uint) (jj <nmb>) (jlj <nmb>) (nin <sspl>) (min-amt uint) (nn uint)) (let ((sender tx-sender) (this (as-contract tx-sender)) ) (try! (stx-transfer? (/ li u100) sender this)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jlj jj nin (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper free palestine ll li (some u1)) ) nn) min-amt )) u0)) this sender)) ) ) (define-public (swap-helper-p (free <nma>) (palestine <nma>) (min-amt uint) (ll uint) (jj <nmb>) (jlj <nmb>) (nin <sspl>) (li uint) (nn uint)) (let ((sender tx-sender) (this (as-contract tx-sender)) ) (try! (stx-transfer? li sender this)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper free palestine ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj jlj nin li u1)) u1) ) nn) (some min-amt) )) u100) this sender))) ) (define-public (swap-helper-s (ill <nmb>) (j <nmb>) (li uint) (t-s <nmb>) (tt-s <nmb>) (nin <sspl>) (min-amt uint) ) (let ((sender tx-sender) (this (as-contract tx-sender)) ) (try! (stx-transfer? li sender this)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x tt-s t-s nin (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y ill j li u1)) u1)) min-amt )) u0)) this sender)) )) (define-public (swap-helper-t (ill <nmb>) (j <nmb>) (min-amt uint) (t-s <nmb>) (tt-s <nmb>) (nin <sspl>) (li uint) ) (let ((sender tx-sender) (this (as-contract tx-sender)) ) (try! (stx-transfer? li sender this)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j ill (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y t-s tt-s nin li u1)) u1)) min-amt)) u0)) this sender)) )) (define-public (swap-helper-u (free <nma>) (palestine <nma>) (ii uint) (ll uint) (jj <nmb>) (tlhi <nmb>) (jlj <nmb>) (nin <sspl>) (tlh <sspl>) (min-amt uint) (nn uint)) (let ((sender tx-sender) (this (as-contract tx-sender))) (try! (stx-transfer? (/ ii u100) sender this)) (as-contract (stx-transfer?  (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jlj tlhi tlh (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x tlhi jj nin (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper free palestine ll ii (some u1)) ) nn) u1)) u0)) min-amt)) u0)) this sender )))) (define-public (swap-helper-v (free <nma>) (palestine <nma>) (min-amt uint) (ll uint) (jj <nmb>) (tlhi <nmb>) (jlj <nmb>) (nin <sspl>) (tlh <sspl>) (ii uint) (nn uint)) (let ((sender tx-sender) (this (as-contract tx-sender)) ) (try! (stx-transfer? ii sender this)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper free palestine ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y tlhi jlj tlh (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj tlhi nin ii u1) ) u1)) u1) ) u1)) nn) (some min-amt))) u100) this sender )))) (define-public (swap-helper-w (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (li uint) (share-fee-to <share-fee-to-trait>) (jjg <nmb>) (tlhi <nmb>) (jjg <nmb>) (nin <sspl>) (tlh <sspl>) (min-amt uint) ) (let ((sender tx-sender) (this (as-contract tx-sender))) (try! (stx-transfer? li sender this)) (as-contract (stx-transfer?  (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jjg tlhi tlh (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x tlhi jjg nin (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to li u1))) u1)) u0)) min-amt)) u0)) this sender )))) (define-public (swap-helper-x (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (min-amt uint) (share-fee-to <share-fee-to-trait>) (jjg <nmb>) (tlhi <nmb>) (jjg <nmb>) (nin <sspl>) (tlh <sspl>) (li uint) ) (let ((sender tx-sender) (this (as-contract tx-sender)) ) (try! (stx-transfer? li sender this)) (as-contract (stx-transfer? (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y tlhi jjg tlh (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jjg tlhi nin li u1) ) u1)) u1) ) u1)) min-amt))) this sender )))) (define-public (swap-helper-y (ill <nmb>) (j <nmb>) (li uint) (jjg <nmb>) (tlhi <nmb>) (jjg <nmb>) (nin <sspl>) (tlh <sspl>) (min-amt uint) ) (let ((sender tx-sender) (this (as-contract tx-sender))) (try! (stx-transfer? li sender this)) (as-contract (stx-transfer?  (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jjg tlhi tlh (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x tlhi jjg nin (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y ill j li u1)) u1)) u1)) u0)) min-amt)) u0)) this sender )))) (define-public (swap-helper-z (j <nmb>) (ill <nmb>) (min-amt uint) (jjg <nmb>) (tlhi <nmb>) (jjg <nmb>) (nin <sspl>) (tlh <sspl>) (li uint) ) (let ((sender tx-sender) (this (as-contract tx-sender)) ) (try! (stx-transfer? li sender this)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x ill j (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y tlhi jjg tlh (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jjg tlhi nin li u1) ) u1)) u1) ) u1)) min-amt)) u0)) this sender )))) (define-constant owner tx-sender) (define-public (withdraw) (stx-transfer? (stx-get-balance (as-contract tx-sender)) (as-contract tx-sender) owner))",
    "analysis": {
      "summary": "This contract facilitates token swaps on the Stacks blockchain, integrating with multiple decentralized finance (DeFi) protocols to enable a variety of swap operations.",
      "explanation": "The contract uses multiple `use-trait` declarations to integrate with various SIP-010 compliant tokens and DeFi protocol traits, allowing it to interact with different liquidity pools and swap functionalities. Each `define-public` function represents a different swap helper or operation, facilitating complex swap logic, such as swapping exact tokens for tokens, leveraging different liquidity pools, and handling fees. The contract also includes functionality for withdrawing STX tokens, presumably as a fee or operational revenue.\n\n- The `swap-helper-*` functions (<L9-31>) are designed to interact with different swap functionalities, calculating amounts, handling fees, and interacting with external contracts to execute swaps.\n- The `joker` function (<L32>) seems to be a specialized swap operation, potentially with additional logic or conditions.\n- The `swap-helper-i` through `swap-helper-z` functions (<L33-59>) further extend the swap functionalities, each tailored for specific use cases or conditions, such as different fee handling or swap routes.\n- The `withdraw` function (<L60>) allows the contract owner to withdraw STX tokens from the contract, which could be used for operational expenses or as a revenue mechanism.\n\nEach function uses `contract-call?` to interact with external contracts, demonstrating the composability within the Stacks ecosystem. The contract leverages Clarity's capabilities for creating secure, interoperable DeFi applications.",
      "tags": [
        "DeFi",
        "swap",
        "SIP-010",
        "liquidity-pool",
        "fee-management"
      ]
    }
  },
  {
    "rank": 95,
    "contract": "SP1A6F9ABHQMVP92GH7T9ZBF029T1WG3SHPNMKT0D.treasury-grant-v3-claim-helper-v2",
    "calls": 313,
    "source": "(define-public (claim (token-id uint))\n\t(begin \n\t\t(try! (contract-call? 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.treasury-grant-v3 claim-alex token-id))\n\t\t(let ((claim-details (try! (contract-call? 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.treasury-grant-v3 get-claim-details-or-fail token-id))))\n\t\t\t(if (> (get max-stx-claim claim-details) u0)\n\t\t\t\t(contract-call? 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.treasury-grant-v3 claim-stx token-id)\n\t\t\t\t(ok true)))))\n",
    "analysis": {
      "summary": "This contract provides a mechanism for claiming tokens, specifically designed to interact with a treasury or grant system to claim either a specific token named 'alex' or STX tokens based on certain conditions.",
      "explanation": "The contract defines a single public function `claim` that takes a `token-id` as its argument. The function performs the following steps:\n\n1. It first attempts to claim a token named 'alex' by calling the `claim-alex` function on another contract identified by the address `SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC` and named `treasury-grant-v3` <L3>. This is done using the `contract-call?` function, which allows contracts to call functions on other contracts. The `try!` macro is used to abort the transaction if this call fails.\n\n2. Next, the function retrieves claim details by calling the `get-claim-details-or-fail` function on the same external contract <L4>. This is also wrapped in a `try!`, meaning if it fails to retrieve the details, the transaction will abort. The result is bound to the variable `claim-details`.\n\n3. It then checks if the `max-stx-claim` value retrieved from `claim-details` is greater than 0 <L5-6>. If it is, it proceeds to claim STX tokens by calling the `claim-stx` function on the `treasury-grant-v3` contract <L7>. If the `max-stx-claim` is not greater than 0, it simply returns `(ok true)`, indicating that the operation was successful but no STX tokens were claimed <L8>.\n\nThis contract is specifically designed for interaction with a predefined treasury or grant system, allowing users to claim either 'alex' tokens or STX tokens based on the conditions defined in the `treasury-grant-v3` contract. It showcases the use of `contract-call?` for inter-contract communication, `try!` for error handling, and the `if` conditional for logic flow.",
      "tags": [
        "inter-contract-communication",
        "token-claim",
        "error-handling",
        "conditional-logic"
      ]
    }
  },
  {
    "rank": 96,
    "contract": "SP3ACD3WC1XTVJ0J3T3532TN4NFABRKMSD2WBBVWV.king-stxcity",
    "calls": 300,
    "source": "\n;; @title Bonding Curve Token by STX.CITY\n;; @version 2.0\n;; @hash Fjo3R2NJwMh9h_LHwD8c1A:OoYOBpkLdws5DvfrXhZe2A:Wj9JHaZNECCwah5hKlTb-VlrRr1Bn3irpI85OnbcvLo0WBliT3Y9tm0SKfRdQ3sV8qrEETysNB_t3Z5G7Ko0fQ\n;; @targetstx 2000\n\n;; Errors \n(define-constant ERR-UNAUTHORIZED u401)\n(define-constant ERR-NOT-OWNER u402)\n(define-constant ERR-INVALID-PARAMETERS u403)\n(define-constant ERR-NOT-ENOUGH-FUND u101)\n\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Constants\n(define-constant MAXSUPPLY u10000000000000000)\n\n;; Variables\n(define-fungible-token kinq MAXSUPPLY)\n(define-data-var contract-owner principal tx-sender) \n\n\n\n;; SIP-10 Functions\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender) (err ERR-UNAUTHORIZED))\n        (ft-transfer? kinq amount from to)\n    )\n)\n\n\n;; DEFINE METADATA\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://pdakhjpwkuwtadzmpnjm.supabase.co/storage/v1/object/public/uri/PstzUIFv-king-0-decimals.json\"))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (begin\n        (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))\n        (var-set token-uri (some value))\n        (ok (print {\n              notification: \"token-metadata-update\",\n              payload: {\n                contract-id: (as-contract tx-sender),\n                token-class: \"ft\"\n              }\n            })\n        )\n    )\n)\n\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance kinq owner))\n)\n(define-read-only (get-name)\n  (ok \"KING\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"kinq\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply kinq))\n)\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri))\n)\n\n;; transfer ownership\n(define-public (transfer-ownership (new-owner principal))\n  (begin\n    ;; Checks if the sender is the current owner\n    (if (is-eq tx-sender (var-get contract-owner))\n      (begin\n        ;; Sets the new owner\n        (var-set contract-owner new-owner)\n        ;; Returns success message\n        (ok \"Ownership transferred successfully\"))\n      ;; Error if the sender is not the owner\n      (err ERR-NOT-OWNER)))\n)\n\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n(define-private (send-stx (recipient principal) (amount uint))\n  (begin\n    (try! (stx-transfer? amount tx-sender recipient))\n    (ok true) \n  )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n    (try! (send-stx 'SP11WRT9TPPKP5492X3VE81CM1T74MD13SPFT527D u1000000))\n    (try! (ft-mint? kinq u9354536950420954 'SP3ACD3WC1XTVJ0J3T3532TN4NFABRKMSD2WBBVWV.king-stxcity-dex))\n    (try! (ft-mint? kinq u645463049579046 'SP3ACD3WC1XTVJ0J3T3532TN4NFABRKMSD2WBBVWV))\n    \n    (try! (send-stx 'SP3ACD3WC1XTVJ0J3T3532TN4NFABRKMSD2WBBVWV.king-stxcity-dex u27600000))\n    (try! (send-stx 'SP1WTA0YBPC5R6GDMPPJCEDEA6Z2ZEPNMQ4C39W6M u13800000))\n \n)\n",
    "analysis": {
      "summary": "This contract implements a fungible token using a bonding curve for distribution, with additional features for ownership transfer, metadata management, and batch token transfers.",
      "explanation": "The contract defines a fungible token named 'kinq' with a maximum supply limit, adheres to the SIP-010 standard for fungible tokens on the Stacks blockchain, and includes functionality for transferring ownership, updating token metadata, and performing batch transfers. Key components include:\n\n- **Error Codes** (<L5-8>): Defines constants for various error states, enhancing contract readability and debugging.\n\n- **Token Initialization** (<L12-13>): Utilizes the `define-fungible-token` construct to create the 'kinq' token with a predefined maximum supply, and sets the initial contract owner to the transaction sender.\n\n- **SIP-010 Compliance** (<L15-23>): Implements required functions for a fungible token, such as `transfer`, ensuring compatibility with the Stacks token standard.\n\n- **Metadata Management** (<L25-35>): Allows the contract owner to update the token's metadata URI, facilitating dynamic content association with the token.\n\n- **Ownership Transfer** (<L37-47>): Provides a mechanism for transferring contract ownership, ensuring only the current owner can initiate the transfer.\n\n- **Utility Functions** (<L49-75>): Includes functions for batch processing of token transfers and STX transfers, optimizing transaction efficiency for multiple operations.\n\n- **Minting and Initial Distribution** (<L77-82>): The contract mints tokens to specific addresses and transfers STX as part of its initial setup. This section is executed once when the contract is deployed, distributing tokens and STX according to the specified logic.\n\nOverall, the contract leverages Clarity's capabilities for creating a fungible token that can be used in various decentralized applications, providing foundational operations like transfer, minting, and ownership management while ensuring compliance with established standards.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "metadata-management",
        "ownership-transfer",
        "batch-transfer"
      ]
    }
  },
  {
    "rank": 97,
    "contract": "SP14NS8MVBRHXMM96BQY0727AJ59SWPV7RMHC0NCG.pontis-bridge-v5",
    "calls": 293,
    "source": "(impl-trait .bridge-trait-v2.bridge-trait-v2)\n(impl-trait .bridge-config-trait-v1.bridge-config-trait-v1)\n\n(use-trait bridge-ft-trait .bridge-ft-trait.bridge-ft-trait)\n(use-trait bridge-nft-trait .bridge-nft-trait.bridge-nft-trait)\n\n(define-data-var btc-token principal tx-sender)\n(define-data-var btc-paused bool false)\n(define-data-var total-amount-key-utxo uint u0)\n(define-data-var current-key-utxo uint u0)\n\n(define-constant ERR-NOT-AUTHORIZED (err u100))\n(define-constant ERR-HASH-EXISTS (err u101))\n(define-constant ERR-RUNE-NOT-ACTIVE (err u102))\n(define-constant ERR-PAUSED (err u103))\n(define-constant ERR-WRONG-BTC-CONTRACT (err u104))\n(define-constant ERR-MIN-AMOUNT (err u105))\n(define-constant ERR-NO-ORDINAL-UTXO-FOUND (err u106))\n(define-constant ERR-UNWRAP-ID (err u107))\n(define-constant ERR-UNWRAP-RECIPIENT (err u108))\n(define-constant ERR-UNWRAP-TX-HASH (err u109))\n(define-constant ERR-UNWRAP-ITERATOR (err u110))\n(define-constant ERR-WRONG-ARRAY-SIZE (err u111))\n(define-constant ERR-EMPTY-ARRAY (err u112))\n(define-constant ERR-MIN-AMOUNT-UNWRAP (err u113))\n(define-constant ERR-BASE-FEE-UNWRAP (err u114))\n(define-constant ERR-UNWRAP-HASH (err u115))\n(define-constant ERR-UNWRAP-CONTRACT (err u116))\n(define-constant ERR-UNWRAP-AMOUNT (err u117))\n(define-constant ERR-REMOVING-USED-KEY-UTXO (err u118))\n(define-constant ERR-REMOVING-NOT-EXISTING-KEY (err u119))\n(define-constant ERR-UNWRAP-PRE-LAST-UTXO (err u120))\n(define-constant ERR-NO-KEY-UTXO (err u121))\n(define-constant ERR-ORDINALS-CONTRACT-NOT-ACTIVE (err u122))\n(define-constant ERR-NO-SUCH-RUNE (err u123))\n(define-constant ERR-WRONG-RUNE-CONTRACT (err u124))\n(define-constant ERR_INVALID_BURN_HASH (err u125))\n\n(define-constant ITERATOR (list\n\tu0 u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31 u32 u33 u34 u35 u36 u37 u38 u39 u40 u41 u42 u43 u44 u45 u46 u47 u48 u49 u50 u51 u52 u53 u54 u55 u56 u57 u58 u59 u60 u61 u62 u63 u64 u65 u66 u67 u68 u69 u70 u71 u72 u73 u74 u75 u76 u77 u78 u79 u80 u81 u82 u83 u84 u85 u86 u87 u88 u89 u90 u91 u92 u93 u94 u95 u96 u97 u98 u99\n\tu100 u101 u102 u103 u104 u105 u106 u107 u108 u109 u110 u111 u112 u113 u114 u115 u116 u117 u118 u119 u120 u121 u122 u123 u124 u125 u126 u127 u128 u129 u130 u131 u132 u133 u134 u135 u136 u137 u138 u139 u140 u141 u142 u143 u144 u145 u146 u147 u148 u149 u150 u151 u152 u153 u154 u155 u156 u157 u158 u159 u160 u161 u162 u163 u164 u165 u166 u167 u168 u169 u170 u171 u172 u173 u174 u175 u176 u177 u178 u179 u180 u181 u182 u183 u184 u185 u186 u187 u188 u189 u190 u191 u192 u193 u194 u195 u196 u197 u198 u199\n\tu200 u201 u202 u203 u204 u205 u206 u207 u208 u209 u210 u211 u212 u213 u214 u215 u216 u217 u218 u219 u220 u221 u222 u223 u224 u225 u226 u227 u228 u229 u230 u231 u232 u233 u234 u235 u236 u237 u238 u239 u240 u241 u242 u243 u244 u245 u246 u247 u248 u249 u250 u251 u252 u253 u254 u255 u256 u257 u258 u259 u260 u261 u262 u263 u264 u265 u266 u267 u268 u269 u270 u271 u272 u273 u274 u275 u276 u277 u278 u279 u280 u281 u282 u283 u284 u285 u286 u287 u288 u289 u290 u291 u292 u293 u294 u295 u296 u297 u298 u299\n\tu300 u301 u302 u303 u304 u305 u306 u307 u308 u309 u310 u311 u312 u313 u314 u315 u316 u317 u318 u319 u320 u321 u322 u323 u324 u325 u326 u327 u328 u329 u330 u331 u332 u333 u334 u335 u336 u337 u338 u339 u340 u341 u342 u343 u344 u345 u346 u347 u348 u349 u350 u351 u352 u353 u354 u355 u356 u357 u358 u359 u360 u361 u362 u363 u364 u365 u366 u367 u368 u369 u370 u371 u372 u373 u374 u375 u376 u377 u378 u379 u380 u381 u382 u383 u384 u385 u386 u387 u388 u389 u390 u391 u392 u393 u394 u395 u396 u397 u398 u399\n\tu400 u401 u402 u403 u404 u405 u406 u407 u408 u409 u410 u411 u412 u413 u414 u415 u416 u417 u418 u419 u420 u421 u422 u423 u424 u425 u426 u427 u428 u429 u430 u431 u432 u433 u434 u435 u436 u437 u438 u439 u440 u441 u442 u443 u444 u445 u446 u447 u448 u449 u450 u451 u452 u453 u454 u455 u456 u457 u458 u459 u460 u461 u462 u463 u464 u465 u466 u467 u468 u469 u470 u471 u472 u473 u474 u475 u476 u477 u478 u479 u480 u481 u482 u483 u484 u485 u486 u487 u488 u489 u490 u491 u492 u493 u494 u495 u496 u497 u498 u499\n\tu500 u501 u502 u503 u504 u505 u506 u507 u508 u509 u510 u511 u512 u513 u514 u515 u516 u517 u518 u519 u520 u521 u522 u523 u524 u525 u526 u527 u528 u529 u530 u531 u532 u533 u534 u535 u536 u537 u538 u539 u540 u541 u542 u543 u544 u545 u546 u547 u548 u549 u550 u551 u552 u553 u554 u555 u556 u557 u558 u559 u560 u561 u562 u563 u564 u565 u566 u567 u568 u569 u570 u571 u572 u573 u574 u575 u576 u577 u578 u579 u580 u581 u582 u583 u584 u585 u586 u587 u588 u589 u590 u591 u592 u593 u594 u595 u596 u597 u598 u599\n\tu600 u601 u602 u603 u604 u605 u606 u607 u608 u609 u610 u611 u612 u613 u614 u615 u616 u617 u618 u619 u620 u621 u622 u623 u624 u625 u626 u627 u628 u629 u630 u631 u632 u633 u634 u635 u636 u637 u638 u639 u640 u641 u642 u643 u644 u645 u646 u647 u648 u649 u650 u651 u652 u653 u654 u655 u656 u657 u658 u659 u660 u661 u662 u663 u664 u665 u666 u667 u668 u669 u670 u671 u672 u673 u674 u675 u676 u677 u678 u679 u680 u681 u682 u683 u684 u685 u686 u687 u688 u689 u690 u691 u692 u693 u694 u695 u696 u697 u698 u699\n\tu700 u701 u702 u703 u704 u705 u706 u707 u708 u709 u710 u711 u712 u713 u714 u715 u716 u717 u718 u719 u720 u721 u722 u723 u724 u725 u726 u727 u728 u729 u730 u731 u732 u733 u734 u735 u736 u737 u738 u739 u740 u741 u742 u743 u744 u745 u746 u747 u748 u749 u750 u751 u752 u753 u754 u755 u756 u757 u758 u759 u760 u761 u762 u763 u764 u765 u766 u767 u768 u769 u770 u771 u772 u773 u774 u775 u776 u777 u778 u779 u780 u781 u782 u783 u784 u785 u786 u787 u788 u789 u790 u791 u792 u793 u794 u795 u796 u797 u798 u799\n\tu800 u801 u802 u803 u804 u805 u806 u807 u808 u809 u810 u811 u812 u813 u814 u815 u816 u817 u818 u819 u820 u821 u822 u823 u824 u825 u826 u827 u828 u829 u830 u831 u832 u833 u834 u835 u836 u837 u838 u839 u840 u841 u842 u843 u844 u845 u846 u847 u848 u849 u850 u851 u852 u853 u854 u855 u856 u857 u858 u859 u860 u861 u862 u863 u864 u865 u866 u867 u868 u869 u870 u871 u872 u873 u874 u875 u876 u877 u878 u879 u880 u881 u882 u883 u884 u885 u886 u887 u888 u889 u890 u891 u892 u893 u894 u895 u896 u897 u898 u899\n\tu900 u901 u902 u903 u904 u905 u906 u907 u908 u909 u910 u911 u912 u913 u914 u915 u916 u917 u918 u919 u920 u921 u922 u923 u924 u925 u926 u927 u928 u929 u930 u931 u932 u933 u934 u935 u936 u937 u938 u939 u940 u941 u942 u943 u944 u945 u946 u947 u948 u949 u950 u951 u952 u953 u954 u955 u956 u957 u958 u959 u960 u961 u962 u963 u964 u965 u966 u967 u968 u969 u970 u971 u972 u973 u974 u975 u976 u977 u978 u979 u980 u981 u982 u983 u984 u985 u986 u987 u988 u989 u990 u991 u992 u993 u994 u995 u996 u997 u998 u999\n))\n\n(define-map rune-tokens-id-map (buff 26) principal)\n(define-map rune-tokens-active principal bool)\n(define-map ordinals-contracts principal bool)\n(define-map processed-tx-hashes (buff 36) bool)\n\n(define-map available-peg-out-key-utxo uint (buff 36))\n\n(define-private (get-iterator (size uint))\n\t(ok (unwrap! (slice? ITERATOR u0 size) ERR-UNWRAP-ITERATOR))\n)\n\n(define-private (add-peg-out-key-utxo-fold (id uint) (state (response { key-utxos: (list 1000 (buff 36)) } uint)))\n\t(let\n\t\t(\n\t\t\t(unwrapped-state (try! state))\n\t\t\t(key-utxo (unwrap! (element-at? (get key-utxos unwrapped-state) id) ERR-WRONG-ARRAY-SIZE))\n\t\t\t(total-key-utxo (var-get total-amount-key-utxo))\n\t\t)\n\t\t(map-set available-peg-out-key-utxo total-key-utxo key-utxo)\n\t\t(var-set total-amount-key-utxo (+ total-key-utxo u1))\n\t\tstate\n\t)\n)\n\n(define-public (add-peg-out-key-utxo (key-utxos (list 1000 (buff 36))))\n\t(let\n\t\t(\n\t\t\t(it (try! (get-iterator (len key-utxos))))\n\t\t)\n\t\t(asserts! (> (len key-utxos) u0) ERR-EMPTY-ARRAY)\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(try! (fold add-peg-out-key-utxo-fold it (ok {key-utxos: key-utxos})))\n\t\t(ok true)\n\t)\n)\n\n(define-private (remove-peg-out-key-utxo-fold (id uint) (state (response { keys: (list 1000 uint) } uint)))\n\t(let\n\t\t(\n\t\t\t(unwrapped-state (try! state))\n\t\t\t(key (unwrap! (element-at? (get keys unwrapped-state) id) ERR-WRONG-ARRAY-SIZE))\n\t\t\t(total-key-utxo (var-get total-amount-key-utxo))\n\t\t\t(pre-last-key (- total-key-utxo u1))\n\t\t\t(pre-last-key-utxo (unwrap! (map-get? available-peg-out-key-utxo pre-last-key) ERR-UNWRAP-PRE-LAST-UTXO))\n\t\t)\n\t\t(asserts! (>= key (var-get current-key-utxo)) ERR-REMOVING-USED-KEY-UTXO)\n\t\t(asserts! (< key total-key-utxo) ERR-REMOVING-NOT-EXISTING-KEY)\n\t\t(map-delete available-peg-out-key-utxo pre-last-key)\n\t\t(if (< key pre-last-key) (map-set available-peg-out-key-utxo key pre-last-key-utxo) false)\n\n\t\t(var-set total-amount-key-utxo (- total-key-utxo u1))\n\t\tstate\n\t)\n)\n\n(define-public (remove-peg-out-key-utxo (keys (list 1000 uint)))\n\t(let\n\t\t(\n\t\t\t(it (try! (get-iterator (len keys))))\n\t\t)\n\t\t(asserts! (> (len keys) u0) ERR-EMPTY-ARRAY)\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(try! (fold remove-peg-out-key-utxo-fold it (ok {keys: keys})))\n\t\t(ok true)\n\t)\n)\n\n(define-read-only (get-current-key-utxo)\n\t(var-get current-key-utxo)\n)\n\n(define-read-only (get-total-amount-key-utxo)\n\t(var-get total-amount-key-utxo)\n)\n\n(define-read-only (get-btc-token)\n\t(ok (var-get btc-token))\n)\n\n(define-read-only (get-rune-token-by-id (rune (buff 26)))\n\t(let \n\t\t(\n\t\t\t(rune-contract (unwrap! (map-get? rune-tokens-id-map rune) ERR-NO-SUCH-RUNE))\n\t\t)\n\t\t(ok { address: rune-contract, is-active: (map-get? rune-tokens-active rune-contract)})\n\t)\n)\n\n(define-read-only (get-is-rune-token-active (rune principal))\n\t(map-get? rune-tokens-active rune)\n)\n\n(define-read-only (get-is-ordinals-contract-active (ordinals-contract principal))\n\t(map-get? ordinals-contracts ordinals-contract)\n)\n\n(define-read-only (get-is-btc-paused)\n\t(var-get btc-paused)\n)\n\n(define-public (set-btc-token (btc-contract principal))\n\t(begin\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(ok (var-set btc-token btc-contract))\n\t)\n)\n\n(define-public (set-btc-paused (is-paused bool))\n\t(begin\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(ok (var-set btc-paused is-paused))\n\t)\n)\n\n(define-public (set-rune-token-by-id (rune (buff 26)) (rune-contract principal) (is-active bool))\n\t(begin\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(map-set rune-tokens-id-map rune rune-contract)\n\t\t(ok (map-set rune-tokens-active rune-contract is-active))\n\t)\n)\n\n(define-public (set-rune-token-active (rune (buff 26)) (is-active bool))\n\t(let \n\t\t(\n\t\t\t(rune-contract (unwrap! (map-get? rune-tokens-id-map rune) ERR-NO-SUCH-RUNE))\n\t\t)\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(ok (map-set rune-tokens-active rune-contract is-active))\n\t)\n)\n\n(define-public (set-ordinals-contract-active (ordinals-contract principal) (is-active bool))\n\t(begin\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(ok (map-set ordinals-contracts ordinals-contract is-active))\n\t)\n)\n\n(define-private (check-if-exists-and-mark (tx-hash-and-vout (buff 36)))\n\t(let \n\t\t(\n\t\t\t(exists (default-to false (map-get? processed-tx-hashes tx-hash-and-vout)))\n\t\t)\n\t\t(asserts! (not exists) ERR-HASH-EXISTS)\n\t\t(ok (map-set processed-tx-hashes tx-hash-and-vout true))\n\t)\n)\n\n(define-private (check-utxo-increment (network (buff 12)))\n\t(ok (if (is-eq network 0x425443) (try! (get-and-increment-utxo)) 0x))\n)\n\n(define-private (get-and-increment-utxo)\n\t(let\n\t\t( \n\t\t\t(key-utxo-index (var-get current-key-utxo))\n\t\t)\n\t\t(var-set current-key-utxo (+ key-utxo-index u1))\n\t\t(ok (unwrap! (map-get? available-peg-out-key-utxo key-utxo-index) ERR-NO-KEY-UTXO))\n\t)\n)\n\n(define-read-only (get-if-exists-fold (id uint) (state (response { tx-hashes-and-vout: (list 1000 (buff 36)), exists: (list 1000 bool) } uint)))\n\t(let\n\t\t(\n\t\t\t(unwrapped-state (try! state))\n\t\t\t(tx-hash-and-vout (unwrap! (element-at? (get tx-hashes-and-vout unwrapped-state) id) ERR-WRONG-ARRAY-SIZE))\n\t\t\t(exists (default-to false (map-get? processed-tx-hashes tx-hash-and-vout)))\n\t\t)\n\t\t(ok (merge unwrapped-state { exists: (unwrap! (as-max-len? (append (get exists unwrapped-state) exists) u1000) ERR-WRONG-ARRAY-SIZE) }))\n\t)\n)\n\n(define-read-only (get-if-exists-batch (tx-hashes-and-vout (list 1000 (buff 36))))\n\t(let\n\t\t(\n\t\t\t(it (try! (get-iterator (len tx-hashes-and-vout))))\n\t\t)\n\t\t(ok (get exists (try! (fold get-if-exists-fold it (ok {tx-hashes-and-vout: tx-hashes-and-vout, exists: (list)})))))\n\t)\n)\n\n(define-read-only (get-key-utxo-fold (id uint) (state (response { keys: (list 1000 uint), key-utxos: (list 1000 (buff 36)) } uint)))\n\t(let\n\t\t(\n\t\t\t(unwrapped-state (try! state))\n\t\t\t(key (unwrap! (element-at? (get keys unwrapped-state) id) ERR-WRONG-ARRAY-SIZE))\n\t\t\t(key-utxo (default-to 0x (map-get? available-peg-out-key-utxo key)))\n\t\t)\n\t\t(ok (merge unwrapped-state { key-utxos: (unwrap! (as-max-len? (append (get key-utxos unwrapped-state) key-utxo) u1000) ERR-WRONG-ARRAY-SIZE) }))\n\t)\n)\n\n(define-read-only (get-key-utxo-batch (keys (list 1000 uint)))\n\t(let\n\t\t(\n\t\t\t(it (try! (get-iterator (len keys))))\n\t\t)\n\t\t(ok (get key-utxos (try! (fold get-key-utxo-fold it (ok {keys: keys, key-utxos: (list)})))))\n\t)\n)\n\n(define-private (mint-runes-fold (id-to-mint uint) (state (response { rune-contracts: (list 100 <bridge-ft-trait>), amounts: (list 100 uint), recipients: (list 100 principal), tx-hashes-and-vout: (list 100 (buff 36)) } uint)))\n\t(let\n\t\t(\n\t\t\t(unwrapped-state (try! state))\n\t\t\t(rune-contract (unwrap! (element-at? (get rune-contracts unwrapped-state) id-to-mint) ERR-UNWRAP-CONTRACT))\n\t\t\t(recipient (unwrap! (element-at? (get recipients unwrapped-state) id-to-mint) ERR-UNWRAP-RECIPIENT))\n\t\t\t(amount (unwrap! (element-at? (get amounts unwrapped-state) id-to-mint) ERR-UNWRAP-AMOUNT))\n\t\t\t(tx-hash-and-vout (unwrap! (element-at? (get tx-hashes-and-vout unwrapped-state) id-to-mint) ERR-UNWRAP-TX-HASH))\n\t\t)\n\t\t(try! (check-if-exists-and-mark tx-hash-and-vout))\n\t\t(asserts! (default-to false (map-get? rune-tokens-active (contract-of rune-contract))) ERR-RUNE-NOT-ACTIVE)\n\t\t(try! (as-contract (contract-call? rune-contract mint amount recipient)))\n\t\tstate\n\t)\n)\n\n(define-public (mint-runes-batch (rune-contracts (list 100 <bridge-ft-trait>)) (amounts (list 100 uint)) (recipients (list 100 principal)) (tx-hashes-and-vout (list 100 (buff 36))))\n\t(let\n\t\t(\n\t\t\t(it (try! (get-iterator (len amounts))))\n\t\t)\n\t\t(asserts! (and (and (is-eq (len amounts) (len rune-contracts)) (is-eq (len amounts) (len recipients))) (is-eq (len amounts) (len tx-hashes-and-vout))) ERR-WRONG-ARRAY-SIZE)\n\t\t(asserts! (> (len amounts) u0) ERR-EMPTY-ARRAY)\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\n\t\t(try! (fold mint-runes-fold  it (ok {rune-contracts: rune-contracts, amounts: amounts, recipients: recipients, tx-hashes-and-vout: tx-hashes-and-vout})))\n\t\t(ok true)\n\t)\n)\n\n(define-public (mint-runes-batch-from-btc (rune-contracts (list 100 <bridge-ft-trait>)) (amounts (list 100 uint)) (recipients (list 100 principal)) (tx-hashes-and-vout (list 100 (buff 36))) (burn-hash (buff 32)) (burn-height uint))\n\t(let\n\t\t(\n\t\t\t(it (try! (get-iterator (len amounts))))\n\t\t)\n\t\t(asserts! (and (and (is-eq (len amounts) (len rune-contracts)) (is-eq (len amounts) (len recipients))) (is-eq (len amounts) (len tx-hashes-and-vout))) ERR-WRONG-ARRAY-SIZE)\n\t\t(asserts! (> (len amounts) u0) ERR-EMPTY-ARRAY)\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t;; Verify that Bitcoin hasn't forked by comparing the burn hash provided\n\t\t(asserts! (is-eq (some burn-hash) (get-burn-header burn-height)) ERR_INVALID_BURN_HASH)\n\n\t\t(try! (fold mint-runes-fold  it (ok {rune-contracts: rune-contracts, amounts: amounts, recipients: recipients, tx-hashes-and-vout: tx-hashes-and-vout})))\n\t\t(ok true)\n\t)\n)\n\n(define-public (mint-btc (btc-contract <bridge-ft-trait>) (amount uint) (recipient principal) (tx-hash-and-vout (buff 36)))\n\t(begin\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(try! (check-if-exists-and-mark tx-hash-and-vout))\n\n\t\t(asserts! (is-eq (var-get btc-token) (contract-of btc-contract)) ERR-WRONG-BTC-CONTRACT)\n\t\t(asserts! (not (var-get btc-paused)) ERR-PAUSED)\n\n\t\t(as-contract (contract-call? btc-contract mint amount recipient))\n\t)\n)\n\n(define-public (mint-btc-from-btc (btc-contract <bridge-ft-trait>) (amount uint) (recipient principal) (tx-hash-and-vout (buff 36)) (burn-hash (buff 32)) (burn-height uint))\n\t(begin\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(try! (check-if-exists-and-mark tx-hash-and-vout))\n\t\t;; Verify that Bitcoin hasn't forked by comparing the burn hash provided\n\t\t(asserts! (is-eq (some burn-hash) (get-burn-header burn-height)) ERR_INVALID_BURN_HASH)\n\n\t\t(asserts! (is-eq (var-get btc-token) (contract-of btc-contract)) ERR-WRONG-BTC-CONTRACT)\n\t\t(asserts! (not (var-get btc-paused)) ERR-PAUSED)\n\n\t\t(as-contract (contract-call? btc-contract mint amount recipient))\n\t)\n)\n\n(define-read-only (get-burn-header (height uint))\n    ;; (get-burn-block-info? header-hash height)\n    (get-tenure-info? burnchain-header-hash height)\n)\n\n(define-private (mint-ordinals-fold (id-to-mint uint) (state (response { ordinals-contract: <bridge-nft-trait>, ids: (list 1000 uint), recipients: (list 1000 principal), tx-hashes-and-vout: (list 1000 (buff 36)) } uint)))\n\t(let\n\t\t(\n\t\t\t(unwrapped-state (try! state))\n\t\t\t(id (unwrap! (element-at? (get ids unwrapped-state) id-to-mint) ERR-UNWRAP-ID))\n\t\t\t(ordinals-contract (get ordinals-contract unwrapped-state))\n\t\t\t(recipient (unwrap! (element-at? (get recipients unwrapped-state) id-to-mint) ERR-UNWRAP-RECIPIENT))\n\t\t\t(tx-hash-and-vout (unwrap! (element-at? (get tx-hashes-and-vout unwrapped-state) id-to-mint) ERR-UNWRAP-TX-HASH))\n\t\t)\n\t\t(try! (check-if-exists-and-mark tx-hash-and-vout))\n\t\t(try! (as-contract (contract-call? ordinals-contract mint id recipient)))\n\t\tstate\n\t)\n)\n\n(define-public (mint-ordinals-batch (ordinals-contract <bridge-nft-trait>) (ids (list 1000 uint)) (recipients (list 1000 principal)) (tx-hashes-and-vout (list 1000 (buff 36))))\n\t(let\n\t\t(\n\t\t\t(it (try! (get-iterator (len ids))))\n\t\t)\n\t\t(asserts! (and (is-eq (len recipients) (len ids)) (is-eq (len ids) (len tx-hashes-and-vout))) ERR-WRONG-ARRAY-SIZE)\n\t\t(asserts! (> (len recipients) u0) ERR-EMPTY-ARRAY)\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(asserts! (default-to false (map-get? ordinals-contracts (contract-of ordinals-contract))) ERR-ORDINALS-CONTRACT-NOT-ACTIVE)\n\n\t\t(try! (fold mint-ordinals-fold it (ok {ordinals-contract: ordinals-contract, ids: ids, recipients: recipients, tx-hashes-and-vout: tx-hashes-and-vout})))\n\t\t(ok true)\n\t)\n)\n\n(define-public (mint-ordinals-batch-from-btc (ordinals-contract <bridge-nft-trait>) (ids (list 1000 uint)) (recipients (list 1000 principal)) (tx-hashes-and-vout (list 1000 (buff 36))) (burn-hash (buff 32)) (burn-height uint))\n\t(let\n\t\t(\n\t\t\t(it (try! (get-iterator (len ids))))\n\t\t)\n\t\t;; Verify that Bitcoin hasn't forked by comparing the burn hash provided\n\t\t(asserts! (is-eq (some burn-hash) (get-burn-header burn-height)) ERR_INVALID_BURN_HASH)\n\t\t(asserts! (and (is-eq (len recipients) (len ids)) (is-eq (len ids) (len tx-hashes-and-vout))) ERR-WRONG-ARRAY-SIZE)\n\t\t(asserts! (> (len recipients) u0) ERR-EMPTY-ARRAY)\n\t\t(try! (contract-call? .pontis-bridge-controller authorize-bridge-owner))\n\t\t(asserts! (default-to false (map-get? ordinals-contracts (contract-of ordinals-contract))) ERR-ORDINALS-CONTRACT-NOT-ACTIVE)\n\n\t\t(try! (fold mint-ordinals-fold it (ok {ordinals-contract: ordinals-contract, ids: ids, recipients: recipients, tx-hashes-and-vout: tx-hashes-and-vout})))\n\t\t(ok true)\n\t)\n)\n\n(define-public (bridge-out-runes (rune (buff 26)) (rune-contract <bridge-ft-trait>) (amount uint) (recipient (buff 64)) (network (buff 12)))\n\t(let\n\t\t(\n\t\t\t(percent-fee (contract-call? .pontis-bridge-fee-manager-3 calculate-runes-percent-fee amount))\n\t\t\t(key-utxo (try! (check-utxo-increment network)))\n\t\t\t(rune-token-by-id (unwrap! (get-rune-token-by-id rune) ERR-NO-SUCH-RUNE))\n\t\t\t(sender tx-sender)\n\t\t)\n\t\t(asserts! (is-eq (get address rune-token-by-id) (contract-of rune-contract)) ERR-WRONG-RUNE-CONTRACT)\n\t\t(asserts! (default-to false (map-get? rune-tokens-active (contract-of rune-contract))) ERR-RUNE-NOT-ACTIVE)\n\t\t(asserts! (>= amount (unwrap! (contract-call? .pontis-bridge-fee-manager-3 get-min-runes-bridge (contract-of rune-contract)) ERR-MIN-AMOUNT-UNWRAP)) ERR-MIN-AMOUNT)\n\n\t\t(try! (contract-call? .pontis-bridge-fee-manager-3 pay-stx-fee (unwrap! (contract-call? .pontis-bridge-fee-manager-3 get-runes-base-fee network) ERR-BASE-FEE-UNWRAP)))\n\t\t(try! (contract-call? .pontis-bridge-fee-manager-3 pay-ft-fee percent-fee rune-contract))\n\n\t\t(print {operation: \"runes\", key-utxo: key-utxo, percent-fee: percent-fee, rune: rune, amount: amount, recipient: recipient, network: network})\n\t\t(as-contract (contract-call? rune-contract burn (- amount percent-fee) sender))\n\t)\n)\n\n(define-public (bridge-out-btc (btc-contract <bridge-ft-trait>) (amount uint) (recipient (buff 64)) (network (buff 12)))\n\t(let\n\t\t(\n\t\t\t(percent-fee (contract-call? .pontis-bridge-fee-manager-3 calculate-btc-percent-fee amount))\n\t\t\t(key-utxo (try! (check-utxo-increment network)))\n\t\t\t(sender tx-sender)\n\t\t)\n\n\t\t(asserts! (is-eq (var-get btc-token) (contract-of btc-contract)) ERR-WRONG-BTC-CONTRACT)\n\t\t(asserts! (not (var-get btc-paused)) ERR-PAUSED)\n\t\t(asserts! (>= amount (unwrap! (contract-call? .pontis-bridge-fee-manager-3 get-min-btc-bridge) ERR-MIN-AMOUNT-UNWRAP)) ERR-MIN-AMOUNT)\n\n\t\t(try! (contract-call? .pontis-bridge-fee-manager-3 pay-stx-fee (unwrap! (contract-call? .pontis-bridge-fee-manager-3 get-btc-base-fee network) ERR-BASE-FEE-UNWRAP)))\n\t\t(try! (contract-call? .pontis-bridge-fee-manager-3 pay-ft-fee percent-fee btc-contract))\n\n\t\t(print {operation: \"btc\", key-utxo: key-utxo, percent-fee: percent-fee, amount: amount, recipient: recipient, network: network})\n\t\t(as-contract (contract-call? btc-contract burn (- amount percent-fee) sender))\n\t)\n)\n\n\n(define-private (peg-out-ordinals-fold (id-to-burn uint) (state (response { ordinals-contract: <bridge-nft-trait>, ids: (list 1000 uint) } uint)))\n\t(let\n\t\t(\n\t\t\t(unwrapped-state (try! state))\n\t\t\t(ordinals-contract (get ordinals-contract unwrapped-state))\n\t\t\t(id (unwrap! (element-at? (get ids unwrapped-state) id-to-burn) ERR-UNWRAP-HASH))\n\t\t\t(sender tx-sender)\n\t\t)\n\t\t(try! (as-contract (contract-call? ordinals-contract burn id sender)))\n\t\tstate\n\t)\n)\n\n(define-public (peg-out-ordinals-batch (ordinals-contract <bridge-nft-trait>) (ids (list 1000 uint)) (recipients (list 1000 (buff 64))))\n\t(let\n\t\t(\n\t\t\t(it (try! (get-iterator (len ids))))\n\t\t\t(key-utxo (try! (check-utxo-increment 0x425443))) ;; Ordinals can be only wrapped and unwrapped\n\t\t)\n\t\t(try! (contract-call? .pontis-bridge-fee-manager-3 pay-ordinals-stx-fee (len ids)))\n\t\t(asserts! (default-to false (map-get? ordinals-contracts (contract-of ordinals-contract))) ERR-ORDINALS-CONTRACT-NOT-ACTIVE)\n\n\t\t(asserts! (is-eq (len recipients) (len ids)) ERR-WRONG-ARRAY-SIZE)\n\t\t(asserts! (> (len recipients) u0) ERR-EMPTY-ARRAY)\n\t\t(try! (fold peg-out-ordinals-fold it (ok {ordinals-contract: ordinals-contract, ids: ids})))\n\t\t(print {operation: \"ordinals\", key-utxo: key-utxo, ids: ids, recipients: recipients, ordinals-contract: ordinals-contract})\n\t\t(ok true)\n\t)\n)\n",
    "analysis": {
      "summary": "This contract facilitates cross-chain asset transfers between Bitcoin and the Stacks blockchain, supporting fungible tokens (runes), Bitcoin, and NFTs (ordinals).",
      "explanation": "The contract implements a bridge that allows users to peg in and out assets between Bitcoin and Stacks. It uses a combination of data variables, constants, and private/public functions to manage pegged assets, handle authorization, and interact with external contracts. Key components include:\n\n- Data variables (<L5-8>) store the BTC token principal, pause state, and UTXO keys for peg-outs.\n- Constants (<L10-35>) define error codes for various failure states.\n- The ITERATOR constant (<L36-39>) is a large list used for batch processing.\n- Maps (<L40-43>) store associations between runes and their contracts, active status, and processed transactions.\n- Functions for adding/removing peg-out keys (<L44-89>) manage UTXO keys for Bitcoin transactions.\n- The contract includes several 'set-' functions (<L182-229>) for administrative tasks like updating contract states and token mappings.\n- 'mint-' functions (<L230-317>) handle the creation (minting) of tokens or NFTs based on cross-chain transactions.\n- 'bridge-out-' functions (<L318-383>) allow users to send assets back to Bitcoin, burning the corresponding tokens on Stacks.\n- 'peg-out-ordinals-' functions (<L384-405>) specifically manage the pegging out of NFTs (ordinals), including burning them on Stacks.\n\nEach function checks for authorization, validates inputs, and interacts with other contracts (e.g., token contracts, fee manager) to perform its operations. The contract heavily utilizes batch processing and error handling to manage multiple assets and transactions efficiently.",
      "tags": [
        "cross-chain",
        "bridge",
        "NFT",
        "fungible-token",
        "Bitcoin",
        "Stacks"
      ]
    }
  },
  {
    "rank": 98,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-send",
    "calls": 293,
    "source": ";;; Send tokens and notify receiver.\n\n(define-constant err-send-preconditions  (err u501))\n(define-constant err-send-postconditions (err u502))\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait farming-receive-trait .farming-receive-trait.farming-receive-trait)\n\n(define-public\n  (send\n   (token <ft-trait>)\n   (amt   uint)\n   (to    <farming-receive-trait>))\n\n  (let ((bal (try! (contract-call? token get-balance tx-sender))))\n\n    (try! (contract-call?\n      token transfer amt tx-sender (contract-of to) none))\n\n    (try! (contract-call?\n      to receive token amt tx-sender))\n\n    (asserts!\n     (>= (try! (contract-call? token get-balance tx-sender))\n         (- bal amt))\n     err-send-postconditions)\n\n    (ok true)))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract facilitates the transfer of tokens to a recipient and notifies the recipient of the transfer.",
      "explanation": "The contract is designed to send tokens from the sender to a recipient and then notify the recipient about the received tokens. It uses two external traits, `ft-trait` for fungible tokens and `farming-receive-trait` for the notification mechanism. Here's a breakdown of its functionality:\n\n- **Constants** (<L1-2>): Defines two error codes for send preconditions and postconditions failures.\n\n- **Trait Usage** (<L4-5>): Imports the `ft-trait` from a specified contract, adhering to the SIP-010 standard for fungible tokens on Stacks. It also imports a `farming-receive-trait` for the recipient notification.\n\n- **Public Function `send`** (<L7-22>):\n  - **Parameters**: Accepts a token contract adhering to `ft-trait`, an amount (`amt`) to send, and a recipient (`to`) adhering to `farming-receive-trait`.\n  - **Balance Check** (<L9>): Retrieves the sender's balance before the transfer using `get-balance` from the token contract.\n  - **Token Transfer** (<L11-12>): Transfers the specified `amt` of tokens from the sender to the recipient's contract address using the `transfer` function of the token contract. It passes `none` for the memo field.\n  - **Notification** (<L14-15>): Notifies the recipient of the received tokens by calling the `receive` function on the recipient's contract, passing the token contract, amount, and sender.\n  - **Post-Transfer Assertion** (<L17-20>): Checks that the sender's new balance is not less than what it should be after the transfer. This ensures the transfer did not result in an unexpected loss of tokens beyond `amt`.\n  - **Success Return** (<L22>): Returns `ok true` indicating the transfer and notification were successful.\n\nThis contract ensures not only the transfer of tokens but also that the recipient is aware of the transfer, facilitating interactions in scenarios like farming or staking where the recipient needs to take additional actions upon receiving tokens.",
      "tags": [
        "fungible-token",
        "DeFi",
        "protocol",
        "notification"
      ]
    }
  },
  {
    "rank": 99,
    "contract": "SP4VEZSABNV5SXE9GTYMZHK9H08VCZM4V1GWPKEJ.chancla-stxcity-dex",
    "calls": 290,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u69000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP359XMJYWRDY24H7VDYJWKPAGHN75V8M0W1NBF3P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP4VEZSABNV5SXE9GTYMZHK9H08VCZM4V1GWPKEJ.chancla-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u62255639097744)\n    (var-set stx-balance u43333333)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX.",
      "explanation": "The contract facilitates token trading by implementing a bonding curve mechanism, allowing users to buy or sell tokens in exchange for STX. It uses the SIP-010 trait for token standards and manages its operations based on the contract's STX and token balance, along with a virtual STX amount to simulate liquidity. The contract has no deployer privileges, ensuring decentralized operation.\n\n- The `use-trait` statement <L1> imports the SIP-010 trait for fungible tokens, ensuring the contract interacts with tokens adhering to this standard.\n- Error constants <L4-11> define various error codes used throughout the contract for handling exceptions.\n- Constants <L13-25> define key parameters like token supply, DEX address, and fee wallets. These are crucial for the contract's trading logic and fee distribution.\n- Data variables <L27-32> store the contract's state, including whether trading is enabled, balances, and percentages for burning and deployer fees.\n- The `buy` function <L34-88> allows users to purchase tokens with STX. It calculates the number of tokens a user can buy based on the input STX amount, deducts a fee, and updates the contract's STX and token balances. If the STX balance reaches a target, it triggers a distribution mechanism, burning a portion of tokens, rewarding the deployer, and transferring the remaining tokens and STX to predefined wallets.\n- The `sell` function <L89-135> enables users to sell tokens in exchange for STX, updating the contract's balances accordingly and transferring STX to the user and a fee wallet.\n- `get-buyable-tokens` <L136-160> and `get-sellable-stx` <L161-185> are read-only functions that estimate the trade outcomes for buying or selling tokens, respectively, based on the current contract state.\n- The contract initialization <L186-195> sets initial values for virtual STX amount, token balance, STX balance, and trading parameters, and performs an initial STX transfer to a specified address.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "protocol",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 100,
    "contract": "SP97M6Z0T8MHKJ6NZE0GS6TRERCG3GW1WVJ4NVGT.aibtcdev-airdrop-1",
    "calls": 279,
    "source": "(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-constant DEPLOYER tx-sender)\n\n(define-data-var nextId uint u1)\n(define-data-var url (string-ascii 256) \"https://nft-ad-1.aibtc.dev/aibtcdev-1.json\")\n\n(define-non-fungible-token aibtcdev-1 uint)\n\n(define-read-only (get-last-token-id) (ok (- (var-get nextId) u1)))\n(define-read-only (get-token-uri (id uint)) (ok (some (var-get url) )))\n(define-read-only (get-owner (id uint)) (ok (nft-get-owner? aibtcdev-1 id)))\n\n(define-public (transfer (id uint) (from principal) (to principal))\n  (if (or (is-eq from tx-sender) (is-eq from contract-caller))\n    (nft-transfer? aibtcdev-1 id from to)\n    (err u4)\n  )\n)\n\n(define-public (burn (id uint) (from principal))\n  (if (or (is-eq from tx-sender) (is-eq from contract-caller))\n    (nft-burn? aibtcdev-1 id from)\n    (err u4)\n  )\n)\n\n(define-public (mint (to principal))\n  (let ((id (var-get nextId)))\n    (asserts! (is-eq DEPLOYER (get-standard-caller)) (err u401))\n    (var-set nextId (+ id u1))\n    (nft-mint? aibtcdev-1 id to)\n  )\n)\n\n(define-public (set-url (new (string-ascii 256)))\n  (if (is-eq DEPLOYER (get-standard-caller))\n    (ok (var-set url new))\n    (err u401)\n  )\n)\n\n(define-public (airdrop (l1 (list 5000 principal)) (l2 (list 5000 principal)) (l3 (list 4995 principal)))\n  (if (is-eq DEPLOYER (get-standard-caller))\n    (ok (var-set nextId (fold drop l3 (fold drop l2 (fold drop l1 (var-get nextId))))))\n    (err u401)\n  )\n)\n\n(define-private (drop (to principal) (id uint))\n  (begin (is-err (nft-mint? aibtcdev-1 id to)) (+ id u1))\n)\n\n(define-read-only (get-standard-caller)\n  (let ((d (unwrap-panic (principal-destruct? contract-caller))))\n    (unwrap-panic (principal-construct? (get version d) (get hash-bytes d)))\n  )\n)\n",
    "analysis": {
      "summary": "This contract implements a non-fungible token (NFT) system with minting, transferring, burning capabilities, and a unique feature for setting a universal token URI and airdropping tokens.",
      "explanation": "The contract starts by implementing a trait from another contract, ensuring it adheres to a predefined NFT interface. It defines constants and variables such as the deployer's address, the next token ID, and a default token URI. The NFT is defined with a unique identifier and functions are provided for interacting with the NFTs: getting the last token ID, the token URI, the owner of a token, transferring tokens, burning tokens, minting new tokens, setting a new token URI, and airdropping tokens to a list of addresses. Notably, minting, setting the URI, and airdropping are restricted to the deployer. The contract includes a private function for incrementing the token ID during the airdrop and a read-only function to get the 'standard' caller, handling cases where the call might come through a contract rather than directly from a user. Important details include the use of assertions for permission checks, the handling of token IDs, and the use of a custom method to determine the caller in a more complex scenario.",
      "tags": [
        "NFT",
        "minting",
        "transfer",
        "burn",
        "airdrop",
        "token-URI"
      ]
    }
  },
  {
    "rank": 101,
    "contract": "SP2SF8P7AKN8NYHD57T96C51RRV9M0GKRN02BNHD2.blocklist",
    "calls": 274,
    "source": "(impl-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait)\n(impl-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.proposal-trait.proposal-trait)\n\n(define-constant ERR-NOT-AUTHORIZED (err u1000))\n\n(define-map approved-updaters principal bool)\n\n;; read-only calls\n\n(define-read-only (is-dao-or-extension)\n  (ok (asserts! (or (is-eq tx-sender 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.executor-dao) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.executor-dao is-extension contract-caller)) ERR-NOT-AUTHORIZED)))\n\n(define-read-only (get-approved-updater-or-default (updater principal))\n\t(default-to false (map-get? approved-updaters updater)))\n\n(define-read-only (is-blocklisted-or-default (sender principal))\n\t(or (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-registry-v2-01 is-blocklisted-or-default sender) (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2 is-blocklisted-or-default sender)))\n\n(define-read-only (is-blocklisted-or-default-many (senders (list 5000 principal)))\n\t(map is-blocklisted-or-default senders))\n\n;; priviliged calls\n\n(define-public (add-to-blocklist-many (blocked-many (list 500 principal)))\n\t(begin \n\t\t(asserts! (or (is-ok (is-dao-or-extension)) (get-approved-updater-or-default tx-sender)) ERR-NOT-AUTHORIZED) \n\t\t(ok (map add-to-blocklist blocked-many))))\n\n;; governance calls\n\n(define-public (remove-from-blocklist-many (blocked-many (list 500 principal)))\n\t(begin \n\t\t(try! (is-dao-or-extension))\n\t\t(ok (map remove-from-blocklist blocked-many))))\n\n(define-public (approve-updater (updater principal) (approved bool))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (map-set approved-updaters updater approved))))\n\n;; internal calls\n\n(define-private (add-to-blocklist (blocked principal))\n\t(set-blocklist { sender: blocked, blocked: true }))\n\n(define-private (remove-from-blocklist (blocked principal))\n\t(set-blocklist { sender: blocked, blocked: false }))\n\n(define-private (set-blocklist (blocked { sender: principal, blocked: bool }))\n\t(begin\n\t\t(print { notification: \"set-blocklist\", payload: blocked }) \n\t\t(try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.alex-staking-v2 set-blocklist-many (list blocked)))\n\t\t(contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-registry-v2-01 set-blocklist-many (list blocked))))\n\n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true))\n\n(define-public (execute (sender principal))\n\t(begin \n\t\t(try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.executor-dao set-extensions (list { extension: .blocklist, enabled: true } )))\n\t\t(ok true)))\n",
    "analysis": {
      "summary": "This contract manages a blocklist, allowing certain privileged entities to add or remove principals from it and integrates with a DAO for authorization.",
      "explanation": "The contract is designed to work within a DAO framework, specifically interacting with predefined traits and other contracts for governance and execution. It provides mechanisms to blocklist principals, with functionality to handle these actions in bulk. The contract ensures that only authorized entities, such as the DAO itself or approved updaters, can modify the blocklist. It leverages Clarity's trait implementation and contract calls for secure, cross-contract interactions.\n\n- <L1-2> Implement traits for extension and proposal, ensuring this contract adheres to predefined interfaces, allowing for interoperability within the ecosystem.\n- <L4> Defines a constant for an unauthorized error.\n- <L6> A map to track approved updaters.\n- <L9-11> Checks if the caller is the DAO or an approved extension.\n- <L13-14> Retrieves an updater's status, defaulting to false if not found.\n- <L16-18> Checks if a principal is blocklisted across multiple contracts, demonstrating cross-contract communication.\n- <L20-22> Bulk checks blocklist status for a list of principals.\n- <L24-29> Allows adding multiple principals to the blocklist, with checks for authorization.\n- <L31-36> Similar to adding, but for removing principals from the blocklist, ensuring only authorized calls succeed.\n- <L38-42> Approves or revokes an updater's privileges, showcasing governance functionality.\n- <L44-46>, <L48-50>, <L52-58> Internal functions to modify the blocklist, including logging actions through prints and notifying other contracts.\n- <L60-62>, <L64-68> Placeholder functions for callbacks and execution, potentially for future expansion or integration with other systems.",
      "tags": [
        "DAO",
        "governance",
        "blocklist",
        "security",
        "cross-contract"
      ]
    }
  },
  {
    "rank": 102,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.router-stx-ststx-bitflow-arkadiko-v-1-1",
    "calls": 273,
    "source": ";; router-stx-ststx-bitflow-arkadiko-v-1-1\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n\n(define-constant ERR_NOT_AUTHORIZED (err u1001))\n(define-constant ERR_INVALID_AMOUNT (err u1002))\n(define-constant ERR_INVALID_PRINCIPAL (err u1003))\n(define-constant ERR_ALREADY_ADMIN (err u2001))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u2002))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u2003))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u2004))\n(define-constant ERR_SWAP_STATUS (err u4001))\n(define-constant ERR_MINIMUM_RECEIVED (err u4002))\n(define-constant ERR_SWAP_A (err u5001))\n(define-constant ERR_SWAP_B (err u5002))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var swap-status bool true)\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n(define-read-only (get-quote-a\n    (amount uint)\n    (token-x principal) (token-y principal)\n  )\n  (let (\n    (quote-a (unwrap-panic (contract-call?\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.arkadiko-swap-quotes-v-1-1 get-dx\n                           token-x token-y\n                           amount)))\n    (quote-b (unwrap-panic (contract-call?\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 get-dy\n                           'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                           quote-a)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-read-only (get-quote-b\n    (amount uint)\n    (token-x principal) (token-y principal)\n  )\n  (let (\n    (quote-a (unwrap-panic (contract-call?\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 get-dx\n                           'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                           amount)))\n    (quote-b (unwrap-panic (contract-call?\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.arkadiko-swap-quotes-v-1-1 get-dy\n                           token-x token-y\n                           quote-a)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (set-swap-status (status bool))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (var-set swap-status status)\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller-in-list (index-of admins-list tx-sender))\n    (admin-to-remove-in-list (index-of admins-list admin))\n    (caller tx-sender)\n  )\n    (asserts! (is-some caller-in-list) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some admin-to-remove-in-list) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removeable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (token-x-trait <ft-trait>) (token-y-trait <ft-trait>)\n  )\n  (let (\n    (swap-a (unwrap! (arkadiko-b token-x-trait token-y-trait amount) ERR_SWAP_A))\n    (swap-b (unwrap! (bitflow-a swap-a) ERR_SWAP_B))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-a\",\n        caller: caller, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          token-x-trait: (contract-of token-x-trait),\n          token-y-trait: (contract-of token-y-trait)\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (token-x-trait <ft-trait>) (token-y-trait <ft-trait>)\n  )\n  (let (\n    (swap-a (unwrap! (bitflow-b amount) ERR_SWAP_A))\n    (swap-b (unwrap! (arkadiko-a token-x-trait token-y-trait swap-a) ERR_SWAP_B))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-b\",\n        caller: caller, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          token-x-trait: (contract-of token-x-trait),\n          token-y-trait: (contract-of token-y-trait)\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-private (bitflow-a (x-amount uint))\n  (let (\n    (swap-a (try! (contract-call?\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 swap-x-for-y\n                  'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                  x-amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (bitflow-b (y-amount uint))\n  (let (\n    (swap-a (try! (contract-call?\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 swap-y-for-x\n                  'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                  y-amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (arkadiko-a\n    (token-x-trait <ft-trait>) (token-y-trait <ft-trait>)\n    (dx uint)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y\n                  token-x-trait token-y-trait\n                  dx u1)))\n  )\n    (ok (default-to u0 (element-at? swap-a u1)))\n  )\n)\n\n(define-private (arkadiko-b\n    (token-x-trait <ft-trait>) (token-y-trait <ft-trait>)\n    (dy uint)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n                  token-x-trait token-y-trait\n                  dy u1)))\n  )\n    (ok (default-to u0 (element-at? swap-a u0)))\n  )\n)\n\n(define-private (admin-not-removeable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)",
    "analysis": {
      "summary": "This contract facilitates token swaps, managing swap status, and admin roles for a decentralized exchange.",
      "explanation": "This Clarity smart contract is designed to manage token swaps between different tokens on the Stacks blockchain, leveraging the Arkadiko and Bitflow protocols. It includes functionalities for managing swap status (enabled or disabled), adding or removing admins, and calculating token swap quotes. Key components include error constants for handling exceptions, a list of admins with the ability to modify the contract's state, and public functions for swapping tokens and managing admins.\n\n- Error constants (<L3-12>) define specific error codes for various failure scenarios, improving contract readability and debugging.\n- The `CONTRACT_DEPLOYER` constant (<L14>) and `admins` variable (<L16>) establish an initial admin (the contract deployer) and allow for up to 5 admins.\n- The `swap-status` variable (<L18>) controls whether swaps can be performed, initially set to true.\n- `get-admins`, `get-admin-helper`, and `get-swap-status` (<L20-32>) are read-only functions that return the current state of the contract.\n- `get-quote-a` and `get-quote-b` (<L34-57>) calculate swap quotes by interacting with external contracts, demonstrating Clarity's capability for contract-to-contract calls.\n- `set-swap-status`, `add-admin`, and `remove-admin` (<L59-111>) are public functions allowing admins to modify the contract's state, showcasing Clarity's permissioned access patterns.\n- `swap-helper-a` and `swap-helper-b` (<L113-157>) perform token swaps if conditions are met, utilizing private helper functions for interacting with external swap protocols (`bitflow-a`, `bitflow-b`, `arkadiko-a`, `arkadiko-b` <L159-208>), illustrating complex contract logic and external interactions.\n- The `admin-not-removeable` private function (<L210-212>) is a utility for filtering the admin list, used in the `remove-admin` function.\n\nThis contract exemplifies Clarity's capabilities for creating secure, permissioned, and interoperable DeFi applications on the Stacks blockchain.",
      "tags": [
        "DeFi",
        "token-swap",
        "admin-management",
        "protocol-interaction"
      ]
    }
  },
  {
    "rank": 103,
    "contract": "SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.stxdx-wallet-zero",
    "calls": 272,
    "source": "(impl-trait .trait-ownable.ownable-trait)\n(use-trait sip010-trait .trait-sip-010.sip-010-trait)\n(define-constant err-unauthorised-caller (err u6000))\n(define-constant err-unauthorised-sender (err u6001))\n(define-constant err-unknown-request-id (err u6002))\n(define-constant err-unauthorised-request (err u6003))\n(define-constant err-amount-exceeds-balance (err u6004))\n(define-constant err-invalid-grace-period (err u6005))\n(define-constant err-unknown-asset-id (err u3501))\n(define-data-var contract-owner principal tx-sender)\n(define-map authorised-approvers principal bool)\n(define-map authorised-exchanges principal bool)\n(define-map user-balance \n\t{\n\t\tuser-id: uint,\n\t\tasset-id: uint\n\t}\n\tuint\n)\n(define-constant max-grace-period u1008)\n(define-data-var request-grace-period uint u100)\n(define-data-var request-nonce uint u0)\n(define-map requests \n\tuint\n\t{\n\t\tamount: uint,\n\t\tuser-id: uint,\n\t\tasset-id: uint,\n\t\tasset: principal,\n\t\trequest-block: uint,\n\t\tapproved: bool,\n\t\ttransferred-block: uint\n\t}\n)\n(define-public (set-request-grace-period (new-grace-period uint))\n\t(begin\n\t\t(try! (is-contract-owner))\n\t\t(asserts! (>= max-grace-period new-grace-period) err-invalid-grace-period)\n\t\t(ok (var-set request-grace-period new-grace-period))\n\t)\n)\n(define-read-only (get-request-grace-period)\n\t(ok (var-get request-grace-period))\n)\n(define-read-only (get-request-or-fail (request-id uint))\n\t(ok (unwrap! (map-get? requests request-id) err-unknown-request-id))\n)\n(define-private (is-contract-owner)\n\t(ok (asserts! (is-eq (var-get contract-owner) tx-sender) err-unauthorised-caller))\n)\n(define-public (set-contract-owner (new-owner principal))\n\t(begin\n\t\t(try! (is-contract-owner))\n\t\t(ok (var-set contract-owner new-owner))\n\t)\n)\n(define-read-only (get-contract-owner)\n\t(ok (var-get contract-owner))\n)\n(define-public (set-authorised-approver (authorised bool) (sender principal))\n\t(begin\n\t\t(try! (is-contract-owner))\n\t\t(ok (map-set authorised-approvers sender authorised))\n\t)\n)\n(define-private (is-authorised-approver)\n\t(ok (asserts! (default-to false (map-get? authorised-approvers tx-sender)) err-unauthorised-caller))\n)\n(define-public (approve-exchange (exchange principal) (approved bool))\n\t(begin\n\t\t(try! (is-contract-owner))\n\t\t(ok (map-set authorised-exchanges exchange approved))\n\t)\n)\n(define-read-only (is-approved-exchange (exchange principal))\n\t(default-to false (map-get? authorised-exchanges exchange))\n)\n(define-read-only (get-user-balance-or-default (user-id uint) (asset-id uint))\n\t(default-to u0 (map-get? user-balance { user-id: user-id, asset-id: asset-id }))\n)\n(define-public (transfer-in-many (user-id uint) (amounts (list 10 uint)) (asset-ids (list 10 uint)) (asset-traits (list 10 <sip010-trait>)))\n\t(ok \n\t\t(map transfer-in \n\t\t\tamounts\n\t\t\t(list user-id  user-id  user-id  user-id  user-id  user-id  user-id  user-id  user-id  user-id)\n\t\t\tasset-ids\n\t\t\tasset-traits\n\t\t)\n\t)\n)\n(define-public (transfer-in (amount uint) (user-id uint) (asset-id uint) (asset-trait <sip010-trait>))\n\t(begin \n\t\t(asserts! (is-eq (try! (contract-call? .stxdx-registry asset-from-id-or-fail asset-id)) (contract-of asset-trait)) err-unknown-asset-id)\n\t\t(try! (contract-call? asset-trait transfer-fixed amount tx-sender (as-contract tx-sender) none))\n\t\t(map-set user-balance { user-id: user-id, asset-id: asset-id } (+ (get-user-balance-or-default user-id asset-id) amount))\n\t\t(print {type: \"transfer_in\", asset-id: asset-id, amount: amount, user-id: user-id, sender: tx-sender})\n\t\t(ok true)\n\t)\n)\n(define-public (request-transfer-out-many (user-id uint) (amounts (list 10 uint)) (asset-ids (list 10 uint)) (assets (list 10 principal)))\n\t(ok \n\t\t(map request-transfer-out\n\t\t\tamounts\n\t\t\t(list user-id  user-id  user-id  user-id  user-id  user-id  user-id  user-id  user-id  user-id)\n\t\t\tasset-ids\n\t\t\tassets\n\t\t)\n\t)\n)\n(define-public (request-transfer-out (amount uint) (user-id uint) (asset-id uint) (asset principal))\n\t(let \n\t\t(\n\t\t\t(user (try! (contract-call? .stxdx-registry user-from-id-or-fail user-id)))\n\t\t\t(request-id (+ (var-get request-nonce) u1))\n\t\t)\n\t\t(asserts! (is-eq (try! (contract-call? .stxdx-registry asset-from-id-or-fail asset-id)) asset) err-unknown-asset-id)\n\t\t(asserts! (is-eq tx-sender (get maker user)) err-unauthorised-caller)\n\t\t(asserts! (<= amount (get-user-balance-or-default user-id asset-id)) err-amount-exceeds-balance)\n\t\t(map-set requests request-id { \n\t\t\tamount: amount, \n\t\t\tuser-id: user-id, \n\t\t\tasset-id: asset-id, \n\t\t\tasset: asset, \n\t\t\trequest-block: block-height, \n\t\t\tapproved: false, \n\t\t\ttransferred-block: u340282366920938463463374607431768211455 \n\t\t})\n\t\t(var-set request-nonce request-id)\n\t\t(print {type: \"request_transfer_out\", request-id: request-id, user-id: user-id, asset-id: asset-id, amount: amount})\n\t\t(ok request-id)\n\t)\n)\n(define-public (approve-transfer-out (request-id uint) (approved bool))\n\t(begin\n\t\t(asserts! (or (is-ok (is-authorised-approver)) (is-ok (is-contract-owner))) err-unauthorised-caller)\n\t\t(print {type: \"approve_transfer_out\", request-id: request-id, approved: approved})\n\t\t(ok (map-set requests request-id (merge (try! (get-request-or-fail request-id)) { approved: approved })))\n\t)\n)\n(define-public (approve-and-transfer-out (request-id uint) (asset-trait <sip010-trait>))\n\t(begin \n\t\t(try! (approve-transfer-out request-id true))\n\t\t(transfer-out request-id asset-trait)\n\t)\n)\n(define-public (approve-and-transfer-out-many (asset-trait <sip010-trait>) (request-ids (list 200 uint)))\n\t(ok\n\t\t(map approve-and-transfer-out \n\t\t\trequest-ids\n\t\t\t(list \n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\tasset-trait\n\t\t\t)\n\t\t)\n\t)\n)\n(define-public (transfer-out (request-id uint) (asset-trait <sip010-trait>))\n\t(let \n\t\t(\n\t\t\t(request (try! (get-request-or-fail request-id)))\n\t\t\t(user (try! (contract-call? .stxdx-registry user-from-id-or-fail (get user-id request))))\n\t\t)\n\t\t(asserts! (is-eq (get asset request) (contract-of asset-trait)) err-unknown-asset-id)\t\t\n\t\t(asserts! (or (is-ok (is-authorised-approver)) (is-eq tx-sender (get maker user)) (is-ok (is-contract-owner))) err-unauthorised-caller)\n\t\t(asserts! (or (get approved request) (>= block-height (+ (get request-block request) (var-get request-grace-period)))) err-unauthorised-request)\n\t\t(asserts! (> (get transferred-block request) block-height) err-unauthorised-request)\n\t\t(asserts! (<= (get amount request) (get-user-balance-or-default (get user-id request) (get asset-id request))) err-amount-exceeds-balance) \n\t\t\n\t\t(map-set user-balance { user-id: (get user-id request), asset-id: (get asset-id request) } (- (get-user-balance-or-default (get user-id request) (get asset-id request)) (get amount request)))\t\n\t\t(map-set requests request-id (merge request { transferred-block: block-height }))\t\t\n\t\t(as-contract (try! (contract-call? asset-trait transfer-fixed (get amount request) tx-sender (get maker user) none)))\n\t\t(print {type: \"transfer_out\", request-id: request-id, user-id: (get user-id request), asset-id: (get asset-id request), amount: (get amount request)})\n\t\t(ok true)\t\t\n\t)\n)\t\n(define-public (transfer (amount uint) (sender-id uint) (recipient-id uint) (asset-id uint))\n\t(let \n\t\t(\n\t\t\t(sender (try! (contract-call? .stxdx-registry user-from-id-or-fail sender-id)))\n\t\t)\n\t\t(asserts! (or (is-approved-exchange contract-caller) (is-eq tx-sender (get maker sender))) err-unauthorised-caller)\n\t\t(asserts! (<= amount (get-user-balance-or-default sender-id asset-id)) err-amount-exceeds-balance)\n\t\t(map-set user-balance { user-id: sender-id, asset-id: asset-id } (- (get-user-balance-or-default sender-id asset-id) amount))\n\t\t(map-set user-balance { user-id: recipient-id, asset-id: asset-id } (+ (get-user-balance-or-default recipient-id asset-id) amount))\n\t\t(print {type: \"internal_transfer\", asset-id: asset-id, amount: amount, sender-id: sender-id, recipient-id: recipient-id})\n\t\t(ok true)\n\t)\n)",
    "analysis": {
      "summary": "This contract facilitates asset management, including transfers, approvals, and ownership management, adhering to the SIP010 standard for fungible tokens.",
      "explanation": "This Clarity smart contract implements a comprehensive asset management system, integrating ownership control, transfer approvals, and asset tracking. Key functionalities include setting and querying the contract owner, managing authorized approvers and exchanges, transferring assets both internally and externally, and handling transfer requests with approval mechanisms. It leverages the SIP010 trait for fungible token standards, ensuring compatibility with Stacks' ecosystem requirements.\n\n- The contract begins by implementing the SIP010 trait and a custom ownership trait to manage permissions <L1-2>.\n- Constants for error codes are defined for standardized error handling <L3-8>.\n- The contract owner is stored as a data variable, alongside mappings for authorized approvers, exchanges, and user balances <L9-13>.\n- Functions to set and get the request grace period provide flexibility in handling transfer requests <L14-21>.\n- The `is-contract-owner` private function ensures that only the contract owner can perform certain actions, enhancing security <L22-24>.\n- Authorization functions allow the contract owner to manage approvers and exchanges, controlling who can approve transfers and which exchanges are recognized <L25-34>.\n- Asset transfers are handled through `transfer-in` and `transfer-out` functions, with support for batch operations. These functions ensure asset ownership and balance checks before proceeding with transfers <L35-107>.\n- The contract includes mechanisms for requesting and approving asset transfers out of the contract, with a grace period for automatic approval to facilitate smoother operations <L108-149>.\n- Internal asset transfers between users are supported, subject to approval by either the contract owner or an authorized exchange <L150-162>.\n\nOverall, the contract is designed to provide a secure and flexible framework for asset management on the Stacks blockchain, adhering to established standards and best practices.",
      "tags": [
        "asset-management",
        "SIP010",
        "fungible-token",
        "ownership",
        "authorization",
        "transfer"
      ]
    }
  },
  {
    "rank": 104,
    "contract": "SP2892G9YED28VAQWV6B3SRXHC3WY4X1N2YN1X6J3.screenfiends-nft-minter",
    "calls": 268,
    "source": "(define-constant CONTRACT-OWNER tx-sender)\n(define-constant MAX-SUPPLY u5000)\n\n(define-data-var artist-address principal 'SP3CFHSKDCW3761DD1P6X3VEC3NHKTJ4H0XJT79D6)\n(define-data-var member1-address principal 'SPN7M36SSAZQZZ1T4JRQF6PRJDXPT4VRW7Y8QRR)\n(define-data-var member2-address principal 'SP2JVKEW0YKTNT3SCTQSPF2V3DDVFFNG6B2TF9ZSV)\n(define-data-var project-address principal 'SPSSETN3G8A1V7PB0M6A8Q27WFG5J9EMWTDE1WZA)\n(define-data-var price uint u25000000)\n(define-data-var nft-contract principal .screenfiends-nft)\n(define-data-var premint-live bool false)\n(define-data-var mint-live bool false)\n(define-map mint-passes principal uint)\n(define-map mint-count principal uint)\n\n(define-data-var current-phase uint u1)\n(define-map phase-active uint bool)\n(define-map phase-supply uint {start: uint, end: uint})\n(define-map whitelist-next-phase principal uint)\n(define-map phase-presale-active uint bool)\n(define-map phase-publicsale-active uint bool)\n\n\n(define-constant ERR-NOT-AUTHORIZED (err u401))\n(define-constant ERR-MINT-NOT-LIVE (err u402))\n(define-constant ERR-SOLD-OUT (err u403))\n(define-constant ERR-NOT-ENOUGH-MINT-PASSES (err u405))\n(define-constant ERR-SUPPLY-NOT-DEFINED (err u404))\n\n\n(define-private (is-owner)\n    (is-eq tx-sender CONTRACT-OWNER))\n\n(define-public (set-price (new-price uint))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (var-set price new-price)\n        (ok true)))\n\n(define-read-only (get-price)\n    (ok (var-get price)))\n\n(define-public (set-nft-contract (contract principal))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (var-set nft-contract contract)\n        (ok true)))\n\n(define-public (set-artist-address (address principal ))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (var-set artist-address address)\n        (ok true)))\n\n(define-public (set-member1-address (address principal ))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (var-set member1-address address)\n        (ok true)))\n\n(define-public (set-member2-address (address principal ))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (var-set member2-address address)\n        (ok true)))\n\n\n(define-public (set-project-address (address principal ))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (var-set project-address address)\n        (ok true)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: initialize-phase-supply\n;; Description:\n;;   Dynamically calculates and populates the `phase-supply` map with values\n;;   for 5 phases, where the total supply is evenly divided among the phases.\n;;\n;; Parameters:\n;;   - max-supply (uint): The total supply of NFTs to be divided into phases.\n;;\n;; Returns:\n;;   - (ok true) if the initialization is successful.\n;;   - (err u401) if called by a non-owner.\n;;\n;; Notes:\n;;   - Divides the max-supply into 5 equal chunks.\n;;   - Handles cases where max-supply is not divisible by 5.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public (initialize-phase-supply (max-supply uint))\n  (begin\n    (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n\n    ;; Calculate the phase size\n    (let \n      (\n        (phase-size (/ max-supply u5)) ;; Divide the supply into 5 phases\n      )\n\n      ;; Initialize each phase\n      (map-set phase-supply u1 {start: u1, end: phase-size})\n      (map-set phase-supply u2 {start: (+ phase-size u1), end: (* phase-size u2)})\n      (map-set phase-supply u3 {start: (+ (* phase-size u2) u1), end: (* phase-size u3)})\n      (map-set phase-supply u4 {start: (+ (* phase-size u3) u1), end: (* phase-size u4)})\n      (map-set phase-supply u5 {start: (+ (* phase-size u4) u1), end: max-supply})\n\n      (ok true)\n    )\n  )\n)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: set-current-phase\n;; Description:\n;;   Sets the current active phase for the contract. Only callable by the contract owner.\n;;\n;; Parameters:\n;;   - phase (uint): The phase number to set as the current phase.\n;;\n;; Returns:\n;;   - (ok true) if the operation is successful.\n;;   - (err u401) if the caller is not authorized.\n;;\n;; Notes:\n;;   - This function updates the contract's `current-phase` variable.\n;;   - Ensures that only the contract owner can make this change.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public (set-current-phase (phase uint))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (var-set current-phase phase)\n        (ok true)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: get-current-phase\n;; Description:\n;;   Retrieves the current active phase of the contract.\n;;\n;; Parameters:\n;;   - None\n;;\n;; Returns:\n;;   - (ok uint): The current phase number.\n;;\n;; Notes:\n;;   - This function provides a read-only view of the `current-phase` variable.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-read-only (get-current-phase)\n    (ok (var-get current-phase)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: get-phase-supply\n;; Description:\n;;   Retrieves the supply range for a given phase, including the start and end\n;;   token IDs for the phase.\n;;\n;; Parameters:\n;;   - phase (uint): The phase number whose supply range is to be retrieved.\n;;\n;; Returns:\n;;   - (ok {start: uint, end: uint}) if the phase exists.\n;;   - (ok none) if the phase is not set.\n;;\n;; Notes:\n;;   - The supply range is defined as a map with `start` and `end` values.\n;;   - This function provides a read-only view of the phase supply.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-read-only (get-phase-supply (phase uint))\n    (ok (map-get? phase-supply phase)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: get-phase-remaining-supply\n;; Description:\n;;   Retrieves the remaining supply for a given phase, calculated based\n;;   on the last minted token ID and the phase's `start` and `end` values.\n;;\n;; Parameters:\n;;   - phase-id (uint): The phase number whose remaining supply is to be retrieved.\n;;\n;; Returns:\n;;   - (ok uint): The remaining supply for the given phase.\n;;\n;; Notes:\n;;   - Calls the `.screenfiends-nft` contract to get the last minted token ID.\n;;   - Retrieves the `start` and `end` values from the `phase-supply` map.\n;;   - If `last-id` is outside the phase's range, adjusts the remaining supply accordingly.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-read-only (get-phase-remaining-supply (phase-id uint))\n  (let\n    (\n      (last-id (unwrap-panic (contract-call? .screenfiends-nft get-last-token-id)))\n      (phase-supply-config (unwrap! (map-get? phase-supply phase-id) (err ERR-SUPPLY-NOT-DEFINED)))\n      (start-supply (get start phase-supply-config))\n      (end-supply (get end phase-supply-config))\n    )\n    (if (>= last-id end-supply)\n        ;; If `last-id` is beyond or equal to the phase's range, no supply left\n        (ok u0)\n        ;; Otherwise, calculate remaining supply within the phase range\n        (if (< last-id start-supply)\n            ;; If `last-id` is below the phase's range, full supply remains\n            (ok (- (+ end-supply u1) start-supply))\n            ;; Else, remaining supply is adjusted for minted tokens\n            (ok (- end-supply last-id))\n        )\n    )\n  )\n)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: set-phase-active\n;; Description:\n;;   Sets a phase actve\n;;\n;; Parameters:\n;;   - phase (uint) - The phase number to set active\n;;   - active (bool) - The status to set the phase\n;;\n;; Returns:\n;;   - (ok bool): true indicating successful update\n;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public (set-phase-active (phase uint) (active bool))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (map-set phase-active phase active)\n        (ok true)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: is-phase-active\n;; Description:\n;;   Checks whether a specific phase is active.\n;;\n;; Parameters:\n;;   - phase (uint): The phase number to check.\n;;\n;; Returns:\n;;   - (ok bool): `true` if the phase is active, `false` otherwise.\n;;\n;; Notes:\n;;   - Uses the `phase-active` map to determine the active status of the phase.\n;;   - If no value is set for the phase in the `phase-active` map, defaults to `false`.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-read-only (is-phase-active (phase uint))\n    (ok (default-to false (map-get? phase-active phase))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: set-phase-presale-active\n;; Description:\n;;   Enables or disables the presale status for a specific phase.\n;;\n;; Parameters:\n;;   - phase (uint): The phase number to update.\n;;   - active (bool): `true` to enable presale, `false` to disable it.\n;;\n;; Returns:\n;;   - (ok true) if the operation is successful.\n;;   - (err u401) if the caller is not authorized.\n;;\n;; Notes:\n;;   - Only callable by the contract owner.\n;;   - Updates the `phase-presale-active` map with the provided status.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public (set-phase-presale-active (phase uint) (active bool))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (map-set phase-presale-active phase active)\n        (ok true)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: set-phase-publicsale-active\n;; Description:\n;;   Enables or disables the public sale status for a specific phase.\n;;\n;; Parameters:\n;;   - phase (uint): The phase number to update.\n;;   - active (bool): `true` to enable public sale, `false` to disable it.\n;;\n;; Returns:\n;;   - (ok true) if the operation is successful.\n;;   - (err u401) if the caller is not authorized.\n;;\n;; Notes:\n;;   - Only callable by the contract owner.\n;;   - Updates the `phase-publicsale-active` map with the provided status.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public (set-phase-publicsale-active (phase uint) (active bool))\n    (begin\n        (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n        (map-set phase-publicsale-active phase active)\n        (ok true)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: is-phase-presale-active\n;; Description:\n;;   Checks whether the presale is active for a specific phase.\n;;\n;; Parameters:\n;;   - phase (uint): The phase number to check.\n;;\n;; Returns:\n;;   - (ok bool): `true` if the presale is active, `false` otherwise.\n;;\n;; Notes:\n;;   - Uses the `phase-presale-active` map to determine the status.\n;;   - Defaults to `false` if the phase is not set in the map.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-read-only (is-phase-presale-active (phase uint))\n    (ok (default-to false (map-get? phase-presale-active phase))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: is-phase-publicsale-active\n;; Description:\n;;   Checks whether the public sale is active for a specific phase.\n;;\n;; Parameters:\n;;   - phase (uint): The phase number to check.\n;;\n;; Returns:\n;;   - (ok bool): `true` if the public sale is active, `false` otherwise.\n;;\n;; Notes:\n;;   - Uses the `phase-publicsale-active` map to determine the status.\n;;   - Defaults to `false` if the phase is not set in the map.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-read-only (is-phase-publicsale-active (phase uint))\n    (ok (default-to false (map-get? phase-publicsale-active phase))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: add-mintpasses\n;; Description:\n;;   Adds or updates the mint passes for a list of addresses. Each address\n;;   can be assigned a specific number of mint passes.\n;;\n;; Parameters:\n;;   - entries (list 2000 {address: principal, quantity: uint}):\n;;       A list of objects where:\n;;       - `address` (principal): The principal address to assign mint passes to.\n;;       - `quantity` (uint): The number of mint passes to assign.\n;;\n;; Returns:\n;;   - (ok true) if the operation is successful.\n;;   - (err u401) if the caller is not authorized.\n;;\n;; Notes:\n;;   - Only callable by the contract owner.\n;;   - Iterates over the `entries` list and uses the `add-mintpasses-iter` function\n;;     to update the `mint-passes` map.\n;;   - Prints the total number of addresses processed for debugging purposes.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-public (add-mintpasses (entries (list 2000 {address: principal, quantity: uint})))\n  (begin\n    (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n    (let\n      ((index-reached (fold add-mintpasses-iter entries u0)))\n      (print {total-mintpasses-added: index-reached})\n      (ok true))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Name: get-mint-passes-remaining\n;; Description:\n;;   Calculates the remaining number of mint passes available for a given address.\n;;\n;; Parameters:\n;;   - address (principal): The address to check for remaining mint passes.\n;;\n;; Returns:\n;;   - (ok uint): The number of remaining mint passes for the given address.\n;;\n;; Notes:\n;;   - Retrieves the total mint passes (`allowed`) from the `mint-passes` map.\n;;   - Retrieves the number of NFTs minted (`minted`) from the `mint-count` map.\n;;   - Calculates the remaining passes as `allowed - minted`. Defaults both\n;;     values to `u0` if no entry exists in their respective maps.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(define-read-only (get-mint-passes-remaining (address principal))\n    (let (\n        (minted (default-to u0 (map-get? mint-count address)))\n        (allowed (default-to u0 (map-get? mint-passes address)))\n    )\n        (ok (- allowed minted))))\n\n\n(define-read-only (get-mint-passes (address principal))\n  (ok (default-to u0 (map-get? mint-passes address))))\n\n\n(define-public (clear-mintpasses (addresses (list 2000 principal)))\n  (begin\n    (asserts! (is-owner) ERR-NOT-AUTHORIZED)\n    (let\n      ((index-reached (fold clear-mintpasses-iter addresses u0)))\n      (print {total-mintpasses-cleared: index-reached})\n      (ok true))))\n\n\n(define-private (clear-mintpasses-iter (address principal) (next-index uint))\n  (begin\n    (map-delete mint-passes address)\n    (+ next-index u1)))\n\n(define-private (add-mintpasses-iter (entry {address: principal, quantity: uint}) (next-index uint))\n  (begin\n    (map-set mint-passes (get address entry) (get quantity entry))\n    (+ next-index u1)))\n\n(define-read-only (get-mint-count (address principal))\n  (ok (default-to u0 (map-get? mint-count address))))\n\n\n(define-private (direct-mint (new-owner principal))\n    (contract-call? .screenfiends-nft mint new-owner))\n\n\n(define-private (mnt)\n  (let\n    (\n      (active-phase (var-get current-phase))\n      (phase-is-active (unwrap-panic (is-phase-active active-phase)))\n      (phase-premint-live (default-to false (map-get? phase-presale-active active-phase)))\n      (phase-public-mint-live (default-to false (map-get? phase-publicsale-active active-phase)))\n      (phase-supply-config (unwrap-panic (get-phase-supply active-phase)))\n      (remaining-supply (unwrap-panic (get-phase-remaining-supply active-phase)))\n      (mintpass-passes (unwrap-panic (get-mint-passes-remaining tx-sender)))\n      (max-phase-supply (get end phase-supply-config))\n    )\n\n    ;; Check if there are NFTs left to mint\n    (asserts! (> remaining-supply u0) ERR-SOLD-OUT)\n\n    (asserts! phase-is-active ERR-MINT-NOT-LIVE)\n\n    ;; Check if mint-live or premint-live is true, otherwise throw error\n    (if (or phase-public-mint-live phase-premint-live)\n        ;; If mint-live is true, allow public mint\n        (if phase-public-mint-live\n            (direct-mint tx-sender)\n\n            ;; Otherwise, check if premint mint is live and mintpass passes are available\n            (if (> mintpass-passes u0)\n                (begin\n                  ;; Update mint count and mint for mintpass pass holders\n                  (map-set mint-count tx-sender (+ (default-to u0 (map-get? mint-count tx-sender)) u1))\n                  (direct-mint tx-sender)\n                )\n                ERR-NOT-ENOUGH-MINT-PASSES))\n        ERR-MINT-NOT-LIVE)))\n\n(define-private (mint-iter (ignore uint) (prior {minted: uint, error: (optional (response bool uint)), continue: bool, count: uint}))\n    (if (and (< (get minted prior) (get count prior)) (get continue prior))\n        (match (mnt)\n            success (merge prior {minted: (+ u1 (get minted prior))})\n            error (merge prior {error: (some (err error)), continue: false}))\n        prior))\n\n(define-public (mint (count uint))\n    (let\n        (\n            (total-price (* (var-get price) count))\n            (art-addr (var-get artist-address))\n            (member1-addr (var-get member1-address))\n            (member2-addr (var-get member2-address))\n            (project-addr (var-get project-address))\n            (total-artist-comm (/ (* total-price u4750) u10000))\n            (total-member1-comm (/ (* total-price u2375) u10000))\n            (total-member2-comm (/ (* total-price u2375) u10000))\n            (total-project-comm (/ (* total-price u500) u10000))\n            (loop-result\n                (begin\n                    (try! (stx-transfer? total-artist-comm tx-sender art-addr))\n                    (try! (stx-transfer? total-member1-comm tx-sender member1-addr))\n                    (try! (stx-transfer? total-member2-comm tx-sender member2-addr))\n                    (try! (stx-transfer? total-project-comm tx-sender project-addr))\n                    (fold mint-iter\n                        (list u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25)\n                        {minted: u0, error: none, continue: true, count: count}\n                    )\n                )\n            )\n        )\n        (if (is-some (get error loop-result))\n            (unwrap-panic (get error loop-result))\n            (ok true))))\n\n\n\n\n",
    "analysis": {
      "summary": "This contract manages the minting process for an NFT collection, including setting prices, managing phases, and distributing commissions.",
      "explanation": "The contract is designed to manage a multi-phase NFT minting process. It includes functionality to set and update various parameters such as artist addresses, NFT contract, mint prices, and to initialize and manage different minting phases with specific supplies. The contract ensures that only the contract owner can update critical settings. Minting can occur in different phases, with each phase having its own supply limits and activation status. The contract also handles commission distribution among multiple parties upon minting.\n\nKey functionalities include:\n- Setting and updating mint price, artist, and member addresses, and the NFT contract address.\n- Initializing phase supplies, setting the current phase, and activating/deactivating phases for both presale and public sale.\n- Adding mint passes for addresses, allowing them to mint NFTs during the presale phase.\n- Minting function (`mint`) which includes commission distribution logic and checks for phase activation and supply limits.\n\nThe contract uses several data structures to manage state, including variables for addresses and prices, maps for phase supplies and activations, and a minting function that enforces phase rules and distributes commissions.",
      "tags": [
        "NFT",
        "minting",
        "commission",
        "phases",
        "presale",
        "public-sale"
      ]
    }
  },
  {
    "rank": 105,
    "contract": "SP1SCEXE6PMGPAC6B4N5P2MDKX8V4GF9QDE1FNNGJ.degenlab-stacking-pool-pox4",
    "calls": 264,
    "source": ";; Mainnet Decentralized Stacking Pool Contract\n\n;; Flow\n;; 1. The liquidity provider deploys the contract \n;; 2. He locks into the SC a sum which will be sufficient to cover all the stackers' rewards\n;; 3. Stackers who want to stack through the stacking pool have to join the pool.\n;; 4. They will have to delegate the STX they want to stack to the pool's POX address\n;; 5. When the total amount commited is enough to be stacked, it will be auto committed\n;; 6. The stackers will be able to claim the rewards after they are distributed\n\n;; + In prepare phase, calculate weight of the stackers inside the pool\n\n;; Required traits\n(use-trait ft-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Default length of the PoX registration window, in burnchain blocks.\n(define-constant PREPARE_CYCLE_LENGTH (get prepare-cycle-length (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-pox-info))))\n\n;; Default length of the PoX reward cycle, in burnchain blocks.\n(define-constant REWARD_CYCLE_LENGTH (get reward-cycle-length (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-pox-info))))\n\n;; Half cycle length is 1050 for mainnet\n(define-constant half-cycle-length (/ (get reward-cycle-length (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-pox-info))) u2))\n\n ;; minimum amount for the liquidity provider to transfer after deploy in microSTX (STX * 10^-6)\n(define-constant minimum-deposit-amount-liquidity-provider u500000000)\n(define-constant maintenance u2)\n\n(define-constant err-only-liquidity-provider (err u100))\n(define-constant err-already-in-pool (err u101))\n(define-constant err-not-in-pool (err u102))\n(define-constant err-liquidity-provider-not-permitted (err u103))\n(define-constant err-wrong-moment-to-update-balances (err u123))\n(define-constant err-allow-pool-in-SC-first (err u195))\n(define-constant err-allow-pool-in-pox-4-first (err u199))\n(define-constant err-insufficient-funds (err u200))\n(define-constant err-revoke-delegation-in-pox-first (err u201))\n(define-constant err-disallow-pool-in-pox-4-first (err u299))\n(define-constant err-full-stacking-pool (err u300))\n(define-constant err-same-value (err u325))\n(define-constant err-future-reward-not-covered (err u333))\n(define-constant err-not-delegated-that-amount (err u396))\n(define-constant err-no-locked-funds (err u456))\n(define-constant err-too-early (err u500))\n(define-constant err-too-late (err u501))\n(define-constant err-not-delegated-before (err u502))\n(define-constant err-decrease-forbidden (err u503))\n(define-constant err-one-delegation-per-cycle (err u504))\n(define-constant err-no-reward-yet (err u576))\n(define-constant err-not-enough-reserved-balance (err u579))\n(define-constant err-stacking-permission-denied (err u609))\n(define-constant err-transfer-failed (err u777))\n(define-constant err-cant-calculate-weights (err u888))\n(define-constant err-already-updated-balances (err u895))\n(define-constant err-no-reward-for-this-block (err u900))\n(define-constant err-already-rewarded-block (err u992))\n(define-constant err-cant-withdraw-now (err u995))\n(define-constant err-cant-unwrap-exchange-preview (err u996))\n(define-constant err-return-div-exceeds-maximum (err u997))\n(define-constant err-pox-address-deactivated (err u999))\n(define-constant err-weights-not-calculated (err u1000))\n\n(define-constant first-deposit u0)\n(define-constant list-max-len u300)\n(define-constant pool-contract (as-contract tx-sender))\n(define-constant pox-contract (as-contract 'SP000000000000000000002Q6VF78.pox-4))\n(define-constant blocks-to-pass-until-reward u101)\n(define-constant max-return-div-accepted u333)\n(define-constant ONE-6 u1000000)\n(define-constant ONE_8 u100000000)\n\n;; liquidity provider data vars\n(define-data-var sc-total-balance uint u0)\n(define-data-var sc-owned-balance uint u0)\n(define-data-var sc-reserved-balance uint u0)\n  ;; (the percentage of the locked balance assured by the liquidity provider) ^ -1,\n  ;; return-div = u200 => the liquidity provider is ready to grant a maximum of 0.5% of the total locked balance.\n  ;; the general returns during cycles 64-66 was about 0.15-0.2% of the stacked amount \n(define-data-var return-div uint u200)  \n;; stackers data vars\n(define-data-var sc-delegated-balance uint u0)\n(define-data-var sc-locked-balance uint u0)\n\n;; temporary data var helpers\n(define-data-var calc-delegated-balance uint u0)\n(define-data-var calc-locked-balance uint u0)\n(define-data-var reward-cycle-to-calculate-weight uint u0)\n(define-data-var burn-block-to-distribute-rewards uint u0)\n(define-data-var reward-cycle-to-distribute-rewards uint u0)\n(define-data-var temp-current-reward uint u0)\n;; common data vars\n(define-data-var stackers-list (list 300 principal) (list tx-sender))\n(define-data-var liquidity-provider principal tx-sender)\n(define-data-var active bool true)\n(define-data-var blocks-rewarded uint u0)\n(define-data-var amount-rewarded uint u0)\n\n;; liqidity provider reward bitcoin address\n(define-data-var pool-pox-address {hashbytes: (buff 32), version: (buff 1)}\n  {\n    version: 0x00,\n    hashbytes: 0xb5a2378bdef677ebe6073647abb5225e87867bf0})\n\n(define-data-var stx-buffer uint u0) ;; 0 STX\n\n;; data maps\n\n(define-map user-data { address: principal } {is-in-pool:bool, delegated-balance: uint, locked-balance:uint, until-burn-ht: (optional uint) })\n(define-map user-revoked-delegation principal bool)\n(define-map pox-addr-indices uint uint)\n(define-map last-aggregation uint uint)\n(define-map allowance-contract-callers { sender: principal, contract-caller: principal} { until-burn-ht: (optional uint)})\n(define-map stacker-weights-per-reward-cycle { stacker: principal, reward-cycle: uint } { weight-percentage: uint })\n(define-map calculated-weights-reward-cycles { reward-cycle: uint } { calculated: bool })\n(define-map burn-block-rewards { burn-height: uint } { reward: uint })\n(define-map updated-sc-balances { reward-cycle: uint } { updated: bool, stackers-list: (list 300 principal) })\n(define-map already-rewarded { burn-block-height: uint } { value: bool })\n(allow-contract-caller (as-contract tx-sender) none)\n\n(map-set user-data {address: tx-sender} {is-in-pool: true, delegated-balance: u0, locked-balance: u0, until-burn-ht: none})\n\n;; Helpers\n\n(define-private (to-one-8 (a uint))\n  (* a ONE_8))\n\n(define-private (mul-down (a uint) (b uint))\n  (/ (* a b) ONE_8))\n\n(define-private (div-down (a uint) (b uint))\n  (if (is-eq a u0)\n    u0\n    (/ (* a ONE_8) b)))\n\n(define-private (minus-percent (a uint) (percent uint))\n  (if (is-eq a u0)\n    u0\n    (/ (- (* a u100) (* a percent)) u100)))\n\n\n;; Public functions\n\n(define-public (deposit-stx-liquidity-provider (amount uint)) \n(begin \n  (asserts! (is-eq contract-caller (var-get liquidity-provider)) err-only-liquidity-provider)\n  (try! (stx-transfer? amount contract-caller pool-contract))\n  (var-set sc-total-balance (+ amount (var-get sc-total-balance)))\n  (var-set sc-owned-balance (+ amount (var-get sc-owned-balance)))\n  (ok true)))\n\n(define-public (withdraw-stx-liquidity-provider (amount uint)) \n(begin \n  (asserts! (is-eq contract-caller (var-get liquidity-provider)) err-only-liquidity-provider)\n  (asserts! \n    (and \n      (check-can-decrement-owned-balance amount) \n      (check-can-decrement-total-balance amount)) \n  err-insufficient-funds)\n  (try! \n    (as-contract \n      (stx-transfer? amount tx-sender (var-get liquidity-provider))))\n  (var-set sc-total-balance (- (var-get sc-total-balance) amount))\n  (var-set sc-owned-balance (- (var-get sc-owned-balance) amount))\n  (ok true)))\n\n(define-public (reserve-funds-future-rewards (amount uint)) \n(begin \n  (asserts! (is-eq contract-caller (var-get liquidity-provider)) err-only-liquidity-provider)\n  (asserts! (>= (var-get sc-owned-balance) amount) err-insufficient-funds) \n  (asserts! (>= (+ amount (var-get sc-reserved-balance)) minimum-deposit-amount-liquidity-provider) err-future-reward-not-covered)\n  (var-set sc-owned-balance (- (var-get sc-owned-balance) amount))\n  (var-set sc-reserved-balance (+ (var-get sc-reserved-balance) amount))\n  (ok true)))\n\n(define-public (unlock-extra-reserved-funds) \n(begin \n  (asserts! \n    (is-eq \n      contract-caller \n      (var-get liquidity-provider)) \n  err-only-liquidity-provider)\n  (asserts! (can-withdraw-extra-reserved-now) err-cant-withdraw-now)\n    (let ((unreserve-amount (calculate-extra-reserved-funds))\n          (reserved-balance-before (var-get sc-reserved-balance))\n          (owned-balance-before (var-get sc-owned-balance))) \n      (var-set sc-reserved-balance \n        (- \n          reserved-balance-before \n          unreserve-amount))\n      (var-set sc-owned-balance \n        (+ \n          owned-balance-before \n          unreserve-amount))\n      (ok unreserve-amount))))\n\n(define-public (join-stacking-pool)\n(begin\n  (asserts! (check-pool-SC-pox-allowance) err-allow-pool-in-pox-4-first)\n  (asserts! (is-none (map-get? user-data {address: contract-caller})) err-already-in-pool)\n  (var-set stackers-list (unwrap! (as-max-len? (concat (var-get stackers-list) (list contract-caller )) u300) err-full-stacking-pool)) \n  (map-set user-data {address: contract-caller} {is-in-pool: true, delegated-balance: u0, locked-balance: u0, until-burn-ht: none})\n  (ok true)))\n\n(define-public (allow-contract-caller (caller principal) (until-burn-ht (optional uint)))\n(begin\n  (asserts! (is-eq tx-sender contract-caller) err-stacking-permission-denied)\n  (ok (map-set allowance-contract-callers\n        { sender: contract-caller, contract-caller: caller}\n        { until-burn-ht: until-burn-ht}))))\n\n;; revoke contract-caller authorization to call stacking methods\n(define-public (disallow-contract-caller (caller principal))\n(begin\n  (asserts! (is-eq tx-sender contract-caller) err-stacking-permission-denied)\n  (ok (map-delete allowance-contract-callers { sender: contract-caller, contract-caller: caller}))))\n\n(define-public (quit-stacking-pool)\n(begin\n  (asserts! (is-none (get-check-delegation contract-caller)) err-revoke-delegation-in-pox-first)\n  (asserts! (not (check-pool-SC-pox-allowance)) err-disallow-pool-in-pox-4-first)\n  (asserts! (is-some (map-get? user-data {address: contract-caller})) err-not-in-pool)\n  (asserts! (not (is-eq contract-caller (var-get liquidity-provider))) err-liquidity-provider-not-permitted)\n    (try! (disallow-contract-caller pool-contract))\n    (var-set stackers-list (filter remove-stacker-stackers-list (var-get stackers-list))) \n    (map-delete user-data {address: contract-caller})\n    (ok true)))\n\n(define-private (is-prepare-phase (next-reward-cycle-first-block uint))\n  (and \n    (>= burn-block-height (- next-reward-cycle-first-block PREPARE_CYCLE_LENGTH))\n    (< burn-block-height next-reward-cycle-first-block)))\n\n;; The SC balances need to be updated during the Prepare Phase\n;; Everyone can call the function in order to recalculate each stacker's weight inside the pool\n;; This WILL directly AFFECT the reward distribution\n;; STX should not be stacked during these last 3 blocks as it many not be taken into the calculation\n(define-public (update-sc-balances)\n(let (\n  (next-reward-cycle (get-next-reward-cycle))\n  (next-reward-cycle-first-block (contract-call? 'SP000000000000000000002Q6VF78.pox-4 reward-cycle-to-burn-height next-reward-cycle)))\n(begin \n  ;; check current block to be inside the first half of the current reward cycle's prepare phase\n  (asserts! (is-prepare-phase next-reward-cycle-first-block) err-wrong-moment-to-update-balances)\n  (asserts! (is-none (map-get? updated-sc-balances {reward-cycle: next-reward-cycle})) err-already-updated-balances)\n  (var-set calc-locked-balance u0)\n  (var-set calc-delegated-balance u0)\n  (map update-sc-balances-one-stacker (var-get stackers-list))\n  (var-set sc-locked-balance (var-get calc-locked-balance))\n  (var-set sc-delegated-balance (var-get calc-delegated-balance))\n  (map-set updated-sc-balances {reward-cycle: next-reward-cycle} {updated: true, stackers-list: (var-get stackers-list)})\n  (var-set reward-cycle-to-calculate-weight next-reward-cycle)\n  (unwrap! (calculate-all-stackers-weights (var-get stackers-list) next-reward-cycle) err-cant-calculate-weights)\n  (ok true))))\n\n;; recalculate balances inside pool\n(define-public (update-sc-balances-one-stacker (stacker principal))\n(let ((user-until-burn-ht (default-to u0 (default-to (some u0) (get until-burn-ht (map-get? user-data {address: stacker})))))\n      (user-delegated-balance (default-to u0 (get delegated-balance (map-get? user-data {address: stacker}))))\n      (user-locked-balance (default-to u0 (get locked-balance (map-get? user-data {address: stacker}))))) \n  (ok \n    ;; if burn-block-height < user's unlock burn block height, then user's balances \n    (and (< \n      burn-block-height \n      user-until-burn-ht) \n      (begin \n        (var-set calc-locked-balance \n          (+ \n            (var-get calc-locked-balance) \n            user-locked-balance))\n        (var-set calc-delegated-balance \n          (+ \n            (var-get calc-delegated-balance) \n            user-delegated-balance)))))))\n\n;; batch public function to distribute rewards for multiple blocks at a time\n(define-public (batch-reward-distribution (burn-block-list (list 300 uint)))\n(ok (map batch-reward-distribution-one-block burn-block-list)))\n\n;; private tool function for the batch rewards distribution function\n(define-private (batch-reward-distribution-one-block (rewarded-burn-block uint))\n(let ((reward-cycle \n        (contract-call? 'SP000000000000000000002Q6VF78.pox-4 burn-height-to-reward-cycle rewarded-burn-block))\n      (stackers-list-for-reward-cycle \n        (default-to (list ) (get stackers-list (map-get? updated-sc-balances {reward-cycle: reward-cycle})))))\n          (if \n            (and \n              (< rewarded-burn-block burn-block-height)\n              (check-won-block-rewards rewarded-burn-block) \n              (is-none (map-get? already-rewarded {burn-block-height: rewarded-burn-block}))\n              (var-set amount-rewarded (+ (var-get amount-rewarded) (default-to u0 (get reward (map-get? burn-block-rewards { burn-height: rewarded-burn-block})))))\n              (var-set blocks-rewarded (+ (var-get blocks-rewarded) u1))\n              (map-set already-rewarded {burn-block-height: rewarded-burn-block} {value: true})\n              (var-set reward-cycle-to-distribute-rewards reward-cycle)\n              (var-set burn-block-to-distribute-rewards rewarded-burn-block)\n              (default-to false (get calculated (map-get? calculated-weights-reward-cycles {reward-cycle: reward-cycle})))\n              (is-ok (transfer-rewards-all-stackers stackers-list-for-reward-cycle)))\n            burn-block-height\n            u0)))\n\n;; The rewards will be distributed. At that moment, the SC balance should have been updated and the stackers' weights calculated\n(define-public (reward-distribution (rewarded-burn-block uint))\n(let ((reward-cycle \n        (contract-call? 'SP000000000000000000002Q6VF78.pox-4 burn-height-to-reward-cycle rewarded-burn-block))\n      (stackers-list-for-reward-cycle \n        (default-to (list ) (get stackers-list (map-get? updated-sc-balances {reward-cycle: reward-cycle})))))\n          (asserts! (< rewarded-burn-block burn-block-height) err-no-reward-yet)\n          (asserts! (check-won-block-rewards rewarded-burn-block) err-no-reward-for-this-block)\n          (asserts! (is-none (map-get? already-rewarded {burn-block-height: rewarded-burn-block})) err-already-rewarded-block)\n          (var-set amount-rewarded (+ (var-get amount-rewarded) (default-to u0 (get reward (map-get? burn-block-rewards { burn-height: rewarded-burn-block})))))\n          (var-set blocks-rewarded (+ (var-get blocks-rewarded) u1))\n          (map-set already-rewarded {burn-block-height: rewarded-burn-block} {value: true})\n          (var-set reward-cycle-to-distribute-rewards reward-cycle)\n          (var-set burn-block-to-distribute-rewards rewarded-burn-block)\n          (match (map-get? calculated-weights-reward-cycles {reward-cycle: reward-cycle}) \n            calculated (ok \n                          (transfer-rewards-all-stackers stackers-list-for-reward-cycle))\n            err-weights-not-calculated)))\n\n;; delegating stx to the pool SC\n(define-public (delegate-stx (amount-ustx uint))\n(let ((user contract-caller)\n      (current-cycle (contract-call? 'SP000000000000000000002Q6VF78.pox-4 current-pox-reward-cycle))\n      (next-reward-cycle-first-block (contract-call? 'SP000000000000000000002Q6VF78.pox-4 reward-cycle-to-burn-height (+ u1 current-cycle))))\n  (asserts! (check-caller-allowed) err-stacking-permission-denied)\n  (asserts! (check-pool-SC-pox-allowance) err-allow-pool-in-pox-4-first)\n  (asserts! (can-delegate-this-cycle contract-caller next-reward-cycle-first-block) err-one-delegation-per-cycle)\n  (asserts! (is-in-pool) err-not-in-pool)\n  (asserts! (not (is-prepare-phase next-reward-cycle-first-block)) err-too-late)\n  (try! (delegate-stx-inner amount-ustx (as-contract tx-sender) none))\n  (as-contract (lock-delegated-stx user))))\n\n;; Stacks the delegated amount for the given user for the next cycle.\n;; This function can be called by automation, friends or family for user that have delegated once.\n;; This function can be called only after the current cycle is half through\n(define-public (delegate-stack-stx (user principal))\n  (let ((current-cycle (contract-call? 'SP000000000000000000002Q6VF78.pox-4 current-pox-reward-cycle))\n        (next-reward-cycle-first-block (contract-call? 'SP000000000000000000002Q6VF78.pox-4 reward-cycle-to-burn-height (+ u1 current-cycle))))\n    (asserts! (not (is-prepare-phase next-reward-cycle-first-block)) err-too-late)\n    (asserts! (can-lock-now current-cycle) err-too-early)\n    ;; Do 3.\n    (as-contract (lock-delegated-stx user))))\n\n(define-public (delegate-stack-stx-many (stackers-lock-list (list 100 principal))) \n(ok (map check-and-delegate-stack-stx stackers-lock-list)))\n\n(define-private (check-and-delegate-stack-stx (user principal)) \n(if (> (get unlock-height (stx-account user)) u0) \n    (delegate-stack-stx user)\n    err-not-delegated-before))\n\n(define-public (multiple-blocks-check-won-rewards (burn-heights-list (list 100 uint))) \n(ok (map check-won-block-rewards burn-heights-list)))\n\n;; liquidity provider pool management functions\n\n(define-public (set-pool-pox-address (new-pool-pox-address {hashbytes: (buff 32), version: (buff 1)})) \n(begin \n  (asserts! (is-eq contract-caller (var-get liquidity-provider)) err-only-liquidity-provider)\n  (ok (var-set pool-pox-address new-pool-pox-address))))\n\n(define-public (set-active (is-active bool))\n(begin\n  (asserts! (is-eq contract-caller (var-get liquidity-provider)) err-only-liquidity-provider)    \n  (ok (var-set active is-active))))\n\n(define-public (set-liquidity-provider (new-liquidity-provider principal)) \n(begin \n  (asserts! (is-eq contract-caller (var-get liquidity-provider)) err-only-liquidity-provider)\n  (asserts! (is-some (map-get? user-data {address: new-liquidity-provider})) err-not-in-pool) ;; new liquidity provider should be in pool\n  (ok (var-set liquidity-provider new-liquidity-provider))))\n\n(define-public (update-return (new-return-value uint)) \n(begin \n  (asserts! (is-eq contract-caller (var-get liquidity-provider)) err-only-liquidity-provider) \n  (asserts! (<= new-return-value max-return-div-accepted) err-return-div-exceeds-maximum)\n  (asserts! (not (is-eq new-return-value (var-get return-div))) err-same-value)\n  (var-set return-div new-return-value)\n  (ok new-return-value)))\n\n;; Private functions\n\n;; Pox operative functions\n\n(define-public (maybe-stack-aggregation-commit (current-cycle uint) \n                                                (signer-sig (optional (buff 65)))\n                                                (signer-pubkey (buff 33))\n                                                (max-allowed-amount uint)\n                                                (auth-id uint))\n(let ((reward-cycle (+ u1 current-cycle)))\n  (match (map-get? pox-addr-indices reward-cycle)\n          ;; Total stacked already reached minimum.\n          ;; Call stack-aggregate-increase.\n          ;; It might fail because called in the same cycle twice.\n    index (match (as-contract (contract-call? 'SP000000000000000000002Q6VF78.pox-4 stack-aggregation-increase (var-get pool-pox-address) reward-cycle index signer-sig signer-pubkey max-allowed-amount auth-id))\n            success (begin (map-set last-aggregation reward-cycle block-height) (ok true))\n            error (begin (print {err-increase-ignored: error}) (ok false)))\n          ;; Total stacked is still below minimum.\n          ;; Just try to commit, it might fail because minimum not yet met\n    (match (as-contract (contract-call? 'SP000000000000000000002Q6VF78.pox-4 stack-aggregation-commit-indexed (var-get pool-pox-address) reward-cycle signer-sig signer-pubkey max-allowed-amount auth-id))\n      index (begin\n              (map-set pox-addr-indices reward-cycle index)\n              (map-set last-aggregation reward-cycle block-height)\n              (ok true))\n      error (begin \n              (print {err-commit-ignored: error}) \n              (ok false)))))) ;; ignore errors\n\n(define-private (delegate-stx-inner (amount-ustx uint) (delegate-to principal) (until-burn-ht (optional uint)))\n(let ((result-revoke\n        ;; Calls revoke and ignores result\n        (contract-call? 'SP000000000000000000002Q6VF78.pox-4 revoke-delegate-stx))\n      (user-delegated-balance \n        (default-to u0 (get delegated-balance (map-get? user-data {address: contract-caller})))))\n      (if \n          (is-ok result-revoke) \n          (if \n            (is-ok result-revoke) \n            (begin \n              (asserts! \n                (check-can-decrement-delegated-balance \n                  user-delegated-balance) \n              err-not-delegated-that-amount) \n              (decrement-sc-delegated-balance user-delegated-balance)) \n            (decrement-sc-delegated-balance u0)) \n          (decrement-sc-delegated-balance u0))\n  ;; Calls delegate-stx, converts any error to uint\n  (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stx amount-ustx delegate-to until-burn-ht none)\n    success (begin \n              (increment-sc-delegated-balance amount-ustx)\n              (map-set \n                user-data \n                  {address: contract-caller} \n                  {\n                    is-in-pool: (default-to false (get is-in-pool (map-get? user-data {address: contract-caller}))),                    \n                    delegated-balance: amount-ustx, \n                    locked-balance: (default-to u0 (get locked-balance (map-get? user-data {address: contract-caller}))),\n                    until-burn-ht: until-burn-ht})\n              (print \"sc delegated balance\")\n              (print (var-get sc-delegated-balance))\n              (ok success))\n    error (err (* u1000 (to-uint error))))))\n\n(define-private (lock-delegated-stx (user principal))\n(let ((start-burn-ht (+ burn-block-height u1))\n      (pox-address (var-get pool-pox-address))\n      (buffer-amount u0) \n      (user-account (stx-account user))\n      (allowed-amount (- (min (get-delegated-amount user) (+ (get locked user-account) (get unlocked user-account))) ONE-6))\n      (amount-ustx (if (> allowed-amount buffer-amount) (- allowed-amount buffer-amount) allowed-amount)))\n  (asserts! (var-get active) err-pox-address-deactivated)\n  (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-stx\n            user amount-ustx\n            pox-address start-burn-ht u1)\n    stacker-details \n      (begin \n        (map-set \n          user-data \n            {address: user} \n            {\n              is-in-pool: \n                (default-to false (get is-in-pool (map-get? user-data {address: user}))),\n              delegated-balance: \n                (default-to u0 (get delegated-balance (map-get? user-data {address: user}))),\n              locked-balance: (get lock-amount stacker-details),\n              until-burn-ht: \n                  (some (get unlock-burn-height stacker-details))})\n        (increment-sc-locked-balance (get lock-amount stacker-details))\n        (ok stacker-details))\n\n      error (if (is-eq error 3) ;; check whether user is already stacked\n              (delegate-stack-extend-increase user amount-ustx pox-address start-burn-ht)\n              (err (* u1000 (to-uint error)))))))\n\n(define-private (delegate-stack-extend-increase (user principal)\n                  (amount-ustx uint)\n                  (pox-address {hashbytes: (buff 32), version: (buff 1)})\n                  (start-burn-ht uint))\n(let ((status (stx-account user)))\n  (asserts! (>= amount-ustx (get locked status)) err-decrease-forbidden)\n  (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-extend\n          user pox-address u1)\n    success (begin \n            (print \"success\")\n            (print success)\n            (map-set user-data \n                    {address: user} \n                    {\n                    is-in-pool: \n                      (default-to false (get is-in-pool (map-get? user-data {address: user}))),\n                    delegated-balance: \n                      (default-to u0 (get delegated-balance (map-get? user-data {address: user}))), \n                    locked-balance: \n                      (default-to u0 (get locked-balance (map-get? user-data {address: user}))),\n                    until-burn-ht: \n                      (some (get unlock-burn-height success))\n                    })\n            (if (> amount-ustx (get locked status))          \n              (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-increase \n                user \n                pox-address \n                (- \n                  amount-ustx \n                  (default-to u0 (get locked-balance (map-get? user-data {address: user})))))\n                success-increase (begin\n                                  (print \"success-increase\")\n                                  (print success-increase)\n                                  (print amount-ustx)\n                                  (map-set user-data \n                                    {address: user} \n                                    {\n                                    is-in-pool:\n                                      (default-to false (get is-in-pool (map-get? user-data {address: user}))),\n                                    delegated-balance: \n                                      (default-to u0 (get delegated-balance (map-get? user-data {address: user}))), \n                                    locked-balance: (get total-locked success-increase),\n                                    until-burn-ht:\n                                      (default-to none (get until-burn-ht (map-get? user-data {address: user})))\n                                    })\n                                  (increment-sc-locked-balance \n                                    (- amount-ustx \n                                      (default-to u0 (get locked-balance (map-get? user-data {address: user})))))\n                                  (ok {lock-amount: (get total-locked success-increase),\n                                      stacker: user,\n                                      unlock-burn-height: (get unlock-burn-height success)}))\n                error-increase (begin (print \"error-increase\") (err (* u1000000000 (to-uint error-increase)))))\n              (ok {\n                    lock-amount: (get locked status),\n                    stacker: user,\n                    unlock-burn-height: (get unlock-burn-height success)})))\n    error (err (* u1000000 (to-uint error))))))\n\n;; Rewards transferring functions\n\n(define-private (transfer-rewards-all-stackers (stackers-list-before-cycle (list 300 principal)))\n(let ((current-reward \n        (/\n          (unwrap! \n            (preview-exchange-reward \n              (default-to u0 \n                (get reward \n                  (map-get? burn-block-rewards { burn-height: (var-get burn-block-to-distribute-rewards)}))) \n              u5) err-cant-unwrap-exchange-preview)\n          u100))\n        (management-maintenance (/ (* maintenance current-reward) u100))\n        (distributed-reward (- current-reward management-maintenance))) \n  (var-set temp-current-reward distributed-reward)\n  (try! (as-contract (stx-transfer? management-maintenance tx-sender (var-get liquidity-provider))))\n  (ok (map transfer-reward-one-stacker stackers-list-before-cycle))))\n\n(define-private (transfer-reward-one-stacker (stacker principal)) \n(let (\n      (reward (var-get temp-current-reward))\n      (stacker-weight\n        (default-to u0\n          (get weight-percentage\n            (map-get? stacker-weights-per-reward-cycle {stacker: stacker, reward-cycle: (var-get reward-cycle-to-distribute-rewards)}))))\n      (stacker-reward (/ (* stacker-weight reward) ONE-6)))\n  (if (> stacker-weight u0)\n    (match (as-contract (stx-transfer? stacker-reward tx-sender stacker))\n      success\n        (begin\n          (if\n            (not (check-can-decrement-reserved-balance stacker-reward))\n            (decrement-sc-owned-balance stacker-reward)\n            (decrement-sc-reserved-balance stacker-reward)) \n          (ok true))\n      error (err error))\n    (ok false))))\n\n\n(define-private (preview-exchange-reward (sats-amount uint) (slippeage uint)) \n(swap-preview 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx sats-amount slippeage))\n\n;; Weight calculation functions\n\n;; calculating one stacker's weight inside pool based on his balances\n(define-private (weight-calculator (stacker-locked uint) (total-locked uint) (liquidity-provider-locked uint)) \n(begin \n  (asserts! (> (+ total-locked liquidity-provider-locked) u0) err-no-locked-funds) \n  (ok (/ (* stacker-locked ONE-6) (+ total-locked liquidity-provider-locked)))))\n\n(define-private (calculate-all-stackers-weights (stackers-list-before-cycle (list 300 principal)) (next-reward-cycle uint))\n(begin \n  (map calculate-one-stacker-weight stackers-list-before-cycle)\n  (map-set calculated-weights-reward-cycles {reward-cycle: next-reward-cycle} {calculated: true})\n  (ok true)))\n\n;; each stacker will have a weight inside the pool which will be used when distributing rewards\n(define-private (calculate-one-stacker-weight (stacker principal))\n(let ((last-burn-block-before-reward-cycle \n        (- \n          (contract-call? 'SP000000000000000000002Q6VF78.pox-4 reward-cycle-to-burn-height (var-get reward-cycle-to-calculate-weight)) \n          u1))\n      ;; total locked by pool\n      (total-locked-at-reward-cycle \n        (var-get sc-locked-balance))\n      ;; total reserved by liquidity provider\n      (liquidity-provider-reserved-at-reward-cycle \n        (var-get sc-reserved-balance))\n      ;; total locked by a stacker\n      (stacker-locked-at-reward-cycle \n        (default-to u0 (get locked-balance (map-get? user-data {address: stacker}))))\n      (liquidity-provider-contribution (+ liquidity-provider-reserved-at-reward-cycle stacker-locked-at-reward-cycle))\n      ;; the weight calculator result for the given stacker\n      (weight-calculator-result \n        (if \n          (is-eq stacker (var-get liquidity-provider)) \n          (weight-calculator \n            liquidity-provider-contribution\n            total-locked-at-reward-cycle \n            liquidity-provider-reserved-at-reward-cycle)\n          (weight-calculator \n            stacker-locked-at-reward-cycle \n            total-locked-at-reward-cycle \n            liquidity-provider-reserved-at-reward-cycle))))\n    ;; register the stacker's weight for a given reward cycle using a map\n    (map-set stacker-weights-per-reward-cycle \n      {stacker: stacker, reward-cycle: (var-get reward-cycle-to-calculate-weight)} \n      {weight-percentage: \n        (if \n          (not (is-err weight-calculator-result)) \n          (unwrap-panic weight-calculator-result) \n          u0)\n      })))\n\n\n;; check if pool pox address has won the rewards for a given burn height and store the reward if true\n(define-private (check-won-block-rewards (burn-height uint)) \n(let ((reward-pox-addr-list (default-to (list ) (get addrs (get-burn-block-info? pox-addrs burn-height))))) \n  (if \n    (is-some \n      (index-of? reward-pox-addr-list (var-get pool-pox-address))) \n    (begin \n      (register-block-reward burn-height)\n      true) \n    false)))\n\n;; batch read-only to check the burn blocks reward status\n(define-read-only (check-won-block-rewards-batch (burn-blocks-list (list 300 uint))) \n(ok (map check-won-block-rewards-one-block burn-blocks-list)))\n\n;; check if pool pox address has won the rewards for a given burn height and store the reward if true\n(define-private (check-won-block-rewards-one-block (burn-height uint)) \n(let ((reward-pox-addr-list (default-to (list ) (get addrs (get-burn-block-info? pox-addrs burn-height))))) \n  (if   \n    (is-some \n      (index-of? reward-pox-addr-list (var-get pool-pox-address))) \n    burn-height \n    u0)))\n\n;; batch read-only to check the burn blocks not already rewarded\n(define-read-only (check-not-claimed-blocks-rewards-batch (burn-blocks-list (list 300 uint))) \n(ok (map check-not-claimed-block-rewards-one-block burn-blocks-list)))\n\n(define-private (check-not-claimed-block-rewards-one-block (burn-height uint)) \n(if   \n  (is-none (map-get? already-rewarded {burn-block-height: burn-height}))\n  burn-height \n  u0))\n\n;; store the reward for a given block using a map\n(define-private (register-block-reward (burn-height uint)) \n(map-set burn-block-rewards {burn-height: burn-height} {reward: (default-to u0 (get payout (get-burn-block-info? pox-addrs burn-height)))}))\n\n(define-private (remove-stacker-stackers-list (address principal)) (not (is-eq contract-caller address)))\n\n(define-private (increment-sc-delegated-balance (amount-ustx uint)) \n(var-set sc-delegated-balance (+ (var-get sc-delegated-balance) amount-ustx)))\n\n(define-private (increment-sc-locked-balance (amount-ustx uint)) \n(var-set sc-locked-balance (+ (var-get sc-locked-balance) amount-ustx)))\n\n(define-private (decrement-sc-delegated-balance (amount-ustx uint)) \n(var-set sc-delegated-balance (- (var-get sc-delegated-balance) amount-ustx)))\n\n(define-private (decrement-sc-locked-balance (amount-ustx uint)) \n(var-set sc-locked-balance (- (var-get sc-locked-balance) amount-ustx)))\n\n(define-private (decrement-sc-reserved-balance (amount-ustx uint)) \n(var-set sc-reserved-balance (- (var-get sc-reserved-balance) amount-ustx)))\n\n(define-private (decrement-sc-owned-balance (amount-ustx uint)) \n(var-set sc-owned-balance (- (var-get sc-owned-balance) amount-ustx)))\n\n(define-private (check-can-decrement-delegated-balance (amount-ustx uint)) \n(not (< (var-get sc-delegated-balance) amount-ustx)))\n\n(define-private (check-can-decrement-locked-balance (amount-ustx uint)) \n(not (< (var-get sc-locked-balance) amount-ustx)))\n\n(define-private (check-can-decrement-reserved-balance (amount-ustx uint)) \n(not (< (var-get sc-reserved-balance) amount-ustx)))\n\n(define-private (check-can-decrement-total-balance (amount-ustx uint)) \n(not (< (var-get sc-total-balance) amount-ustx)))\n\n(define-private (check-can-decrement-owned-balance (amount-ustx uint)) \n(not (< (var-get sc-owned-balance) amount-ustx)))\n\n(define-private (min (amount-1 uint) (amount-2 uint))\n(if (< amount-1 amount-2)\n  amount-1\n  amount-2))\n\n(define-private (get-next-reward-cycle) \n(+ (contract-call? 'SP000000000000000000002Q6VF78.pox-4 current-pox-reward-cycle) u1))\n\n;; Read-only helper functions\n\n(define-read-only (get-stx-account)\n(stx-account contract-caller))\n\n(define-read-only (get-pool-members) \n(var-get stackers-list))\n\n(define-read-only (check-caller-allowed)\n  (or (is-eq tx-sender contract-caller)\n    (let ((caller-allowed\n            ;; if not in the caller map, return false\n            (unwrap! \n              (map-get? allowance-contract-callers\n                { sender: tx-sender, contract-caller: contract-caller})\n            false))\n          (expires-at\n            ;; if until-burn-ht not set, then return true (because no expiry)\n            (unwrap! (get until-burn-ht caller-allowed) true)))\n      ;; is the caller allowance still valid\n      (< burn-block-height expires-at))))\n\n(define-read-only (is-in-pool) \n(default-to false (get is-in-pool (map-get? user-data {address: contract-caller}))))\n\n(define-read-only (get-stacker-weight (stacker principal) (reward-cycle uint)) \n(get weight-percentage (map-get? stacker-weights-per-reward-cycle {stacker: stacker, reward-cycle: reward-cycle})))\n\n(define-read-only (get-SC-total-balance) \n(var-get sc-total-balance))\n\n(define-read-only (get-SC-owned-balance) \n(var-get sc-owned-balance))\n\n(define-read-only (get-SC-locked-balance)\n(var-get sc-locked-balance))\n\n(define-read-only (get-SC-reserved-balance) \n(var-get sc-reserved-balance))\n\n(define-read-only (get-user-data (user principal)) \n(map-get? user-data {address: user}))\n\n(define-read-only (check-pool-SC-pox-allowance)\n(is-some (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-allowance-contract-callers contract-caller pool-contract)))\n\n(define-read-only (get-check-delegation (stacker principal))\n(contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-check-delegation stacker))\n\n(define-read-only (get-pox-addr-indices (reward-cycle uint))\n(map-get? pox-addr-indices reward-cycle))\n\n(define-read-only (get-block-rewards (burn-height uint)) \n(ok (get-burn-block-info? pox-addrs burn-height)))\n\n(define-read-only (can-lock-now (cycle uint))\n(>= burn-block-height (+ (contract-call? 'SP000000000000000000002Q6VF78.pox-4 reward-cycle-to-burn-height cycle) half-cycle-length)))\n\n(define-read-only (get-delegated-amount (user principal))\n(default-to u0 (get amount-ustx (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-delegation-info user))))\n\n(define-read-only (get-pool-pox-address) \n(var-get pool-pox-address))\n\n(define-read-only (get-liquidity-provider) \n(var-get liquidity-provider))\n\n(define-read-only (get-amount-rewarded) \n(var-get amount-rewarded))\n\n(define-read-only (get-blocks-rewarded) \n(var-get blocks-rewarded))\n\n(define-private (check-is-liquidity-provider (address principal)) \n(is-eq address (var-get liquidity-provider)))\n\n(define-private (check-is-stacker (address principal)) \n(default-to false (get is-in-pool (map-get? user-data {address: address}))))\n\n(define-read-only (get-address-status (address principal))\n(if (check-is-liquidity-provider address)  \n  (ok \"is-provider\")\n  (if (check-is-stacker address)\n    (ok \"is-stacker\")\n    (ok \"is-none\"))))\n\n(define-read-only (calculate-extra-reserved-funds) \n;; subtract the potential return from the total reserved balance and get the extra reserved balance\n(- \n  (var-get sc-reserved-balance) \n    (/ \n      (var-get sc-locked-balance) \n      (var-get return-div))))\n\n;; The extra reserved funds can be withdrawn during the first 750 blocks of the cycle\n(define-read-only (can-withdraw-extra-reserved-now)\n(let ((current-cycle \n        (contract-call? 'SP000000000000000000002Q6VF78.pox-4 burn-height-to-reward-cycle burn-block-height))) \n    (< \n      burn-block-height \n      (- \n        (+ \n          (contract-call? 'SP000000000000000000002Q6VF78.pox-4 reward-cycle-to-burn-height current-cycle) \n          half-cycle-length)\n        u300))))\n\n(define-read-only (get-return) \n(var-get return-div))\n\n(define-read-only (get-minimum-deposit-liquidity-provider) \nminimum-deposit-amount-liquidity-provider)\n\n(define-read-only (was-block-claimed (rewarded-burn-block uint))\n(map-get? already-rewarded {burn-block-height: rewarded-burn-block}))\n\n;; check if pool pox address has won the rewards for a given burn height\n(define-read-only (has-won-burn-block (burn-height uint)) \n(let ((reward-pox-addr-list (default-to (list ) (get addrs (get-burn-block-info? pox-addrs burn-height))))) \n  (is-some (index-of? reward-pox-addr-list (var-get pool-pox-address)))))\n\n(define-read-only (already-rewarded-burn-block (burn-height uint))\n(is-some (map-get? burn-block-rewards {burn-height: burn-height})))\n\n(define-read-only (amount-rewarded-burn-block-optional (burn-height uint))\n(map-get? burn-block-rewards {burn-height: burn-height}))\n\n(define-read-only (updated-balances-given-cycle (given-cycle uint))\n(default-to false (get updated (map-get? updated-sc-balances { reward-cycle: given-cycle }))))\n\n(define-read-only (get-reward-phase-length) \nREWARD_CYCLE_LENGTH)\n\n(define-read-only (get-prepare-phase-length) \nPREPARE_CYCLE_LENGTH)\n\n(define-read-only (can-delegate-this-cycle (user principal) (next-reward-cycle-first-block uint)) \n(<= \n  (default-to burn-block-height \n    (default-to (some burn-block-height) (get until-burn-ht (get-user-data user)))) \n  next-reward-cycle-first-block))\n\n(define-public (swap-preview (token-x-trait <ft-trait>) (token-y-trait <ft-trait>) (multiplied-amount uint) (slippeage uint)) \n  (let (\n    (token-x (contract-of token-x-trait))\n    (token-y (contract-of token-y-trait))\n    (fee-amount \n      (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 fee-helper token-x token-y ONE_8))\n    (get-helper-result (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-helper token-x token-y ONE_8 multiplied-amount)))\n    (converted-amount \n      (mul-down \n        get-helper-result \n        (- ONE_8 (unwrap-panic fee-amount))))\n    (converted-amount-slippeage (minus-percent converted-amount slippeage)))\n      (ok converted-amount)))\n",
    "analysis": {
      "summary": "This contract is a decentralized stacking pool for the Stacks blockchain, enabling users to pool their STX tokens to participate in Stacks' Proof of Transfer (PoX) consensus mechanism, thereby earning Bitcoin rewards collectively.",
      "explanation": "This contract facilitates a decentralized stacking pool, allowing multiple users to combine their STX tokens to meet the minimum stacking threshold required by the Stacks blockchain to participate in its PoX consensus mechanism. The contract includes functionalities for a liquidity provider to deposit and manage funds, users to join or leave the pool, delegate STX for stacking, and claim Bitcoin rewards distributed after successful stacking cycles. It uses various data structures to track user participation, delegated STX amounts, and rewards distribution. Key functionalities include depositing STX by the liquidity provider, reserving funds for future rewards, joining the stacking pool, updating the smart contract's balances, and distributing rewards to participants based on their contribution to the pool. The contract interacts with the PoX contract on the Stacks blockchain to delegate STX for stacking, and it includes mechanisms for calculating user weights in the reward distribution and handling reward claims.",
      "tags": [
        "DeFi",
        "PoX",
        "Stacking",
        "Rewards",
        "STX",
        "Bitcoin"
      ]
    }
  },
  {
    "rank": 106,
    "contract": "SP2QEZ06AGJ3RKJPBV14SY1V5BBFNAW33D96YPGZF.zonefile-resolver",
    "calls": 263,
    "source": ";; BNS Zonefile Management Contract\n\n;; Error constants\n(define-constant ERR-NOT-AUTHORIZED (err u100))\n(define-constant ERR-NO-ZONEFILE-FOUND (err u101))\n(define-constant ERR-NO-NAME (err u102))\n(define-constant ERR-NO-NAMESPACE (err u103))\n(define-constant ERR-NAME-REVOKED (err u104))\n(define-constant ERR-MIGRATION-IN-PROGRESS (err u105))\n(define-constant ERR-INVALID-PERIOD (err u106))\n\n;; Data Maps\n\n;; zonefile map: Stores zonefile information for each name in a namespace\n;; Key: {name: (buff 48), namespace: (buff 20)}\n;; Value: {owner: principal, zonefile: (optional (buff 8192)), revoked: bool}\n(define-map zonefile {name: (buff 48), namespace: (buff 20)} \n    {\n        owner: principal,\n        zonefile: (optional (buff 8192)),\n        revoked: bool\n    }\n)\n\n;; Read-only Functions\n\n;; Resolve a name to its zonefile\n;; This function checks ownership and validity before returning the zonefile\n(define-read-only (resolve-name (name (buff 48)) (namespace (buff 20))) \n    (let \n        (\n            (name-resolve (unwrap! (contract-call? .BNS-V2 can-resolve-name namespace name) ERR-NO-NAME))\n            (current-zonefile (unwrap! (map-get? zonefile {name: name, namespace: namespace}) ERR-NO-ZONEFILE-FOUND))\n        ) \n        ;; Check if the name is in a valid grace period\n        (asserts! \n            (if (is-eq u0 (get renewal name-resolve))\n                ;; If true it means that the name is in a managed namespace or the namespace does not require renewals\n                true\n                ;; If false then calculate valid period\n                (<= burn-block-height (+ (get renewal name-resolve) u5000))\n            )\n            ERR-INVALID-PERIOD\n        )\n        ;; Check that the name is not revoked\n        (asserts! (not (get revoked current-zonefile)) ERR-NAME-REVOKED)\n        (ok \n            (if (is-eq (get owner name-resolve) (get owner current-zonefile)) \n                ;; If the name owner matches the zonefile owner, return the zonefile\n                (get zonefile current-zonefile)\n                ;; If owners don't match, return none\n                none\n            )\n        )\n    )\n)\n\n;; Public Functions\n\n;; Update the zonefile for a name\n;; This function allows authorized users to update the zonefile of a name\n(define-public (update-zonefile (name (buff 48)) (namespace (buff 20)) (new-zonefile (optional (buff 8192))))\n    (let \n        (\n            ;; Retrieve namespace and name properties\n            (namespace-properties (try! (contract-call? .BNS-V2 get-namespace-properties namespace)))\n            (namespace-props (get properties namespace-properties))\n            ;; Retrieve name properties from BNS-V2 contract\n            (name-properties (unwrap! (contract-call? .BNS-V2 get-bns-info name namespace) ERR-NO-NAME))\n            (name-owner (get owner name-properties))\n            (renewal (get renewal-height name-properties))\n            (current-zonefile (map-get? zonefile {name: name, namespace: namespace}))\n            (zonefile-owner (get owner current-zonefile))\n        ) \n        ;; Check if the name is in a valid grace period\n        (asserts! \n            (if (is-eq (get lifetime namespace-props) u0)\n                ;; It's always in a valid period \n                true\n                ;; Check if it's within the grace period\n                (<= burn-block-height (+ renewal u5000))\n            )\n            ERR-INVALID-PERIOD\n        )\n        ;; Check if the zonefile exists\n        (match current-zonefile \n            c-zonefile \n            ;; If it does check that the name is not revoked\n            (asserts! (not (get revoked c-zonefile)) ERR-NAME-REVOKED)\n            ;; If it doesn't then continue\n            true\n        )\n        \n        ;; Check authorization based on namespace manager\n        (match (get namespace-manager namespace-props)\n            manager \n            ;; If managed, check if contract-caller is the manager\n            (asserts! (is-eq contract-caller manager) ERR-NOT-AUTHORIZED)\n            ;; If not managed, check if contract-caller is the owner\n            (asserts! (is-eq contract-caller name-owner) ERR-NOT-AUTHORIZED)\n        )\n        ;; Update the zonefile map\n        (map-set zonefile {name: name, namespace: namespace} \n            {\n                ;; Update owner to the current owner\n                owner: name-owner,\n                ;; Set new zonefile or CID\n                zonefile: new-zonefile,\n                ;; Set revoked to false since it's being updated\n                revoked: false\n            }\n        )\n        (print \n            {\n                topic: \"update-zonefile\", \n                name: name,\n                namespace: namespace,\n                new-zonefile: new-zonefile\n            }\n        )\n        (ok true)\n    )\n)\n\n;; Revoke a name\n;; This function allows authorized users to revoke a name\n(define-public (revoke-name (name (buff 48)) (namespace (buff 20)))\n    (let\n        (\n            ;; Retrieve namespace and name properties\n            (namespace-properties (try! (contract-call? .BNS-V2 get-namespace-properties namespace)))\n            (namespace-props (get properties namespace-properties))\n            (name-properties (unwrap! (contract-call? .BNS-V2 get-bns-info name namespace) ERR-NO-NAME))\n            (name-owner (get owner name-properties))\n        )\n        ;; Check authorization based on namespace manager\n        (match (get namespace-manager namespace-props)\n            manager \n            ;; If managed, check if contract-caller is the manager\n            (asserts! (is-eq contract-caller manager) ERR-NOT-AUTHORIZED)\n            ;; If not managed, check if contract-caller is the owner or namespace import principal\n            (asserts! (or (is-eq contract-caller name-owner) (is-eq contract-caller (get namespace-import namespace-props))) ERR-NOT-AUTHORIZED)\n        )\n        ;; Update the zonefile information to revoke the name\n        (map-set zonefile {name: name, namespace: namespace} \n            {\n                ;; Update owner to the current owner\n                owner: name-owner,\n                ;; Clear the zonefile\n                zonefile: none,\n                ;; Set revoked to true\n                revoked: true\n            }\n        )\n        (print \n            {\n                topic: \"revoke-name\", \n                name: name,\n                namespace: namespace,\n                zonefile: 0x\n            }\n        )\n        (ok true)\n    )\n)",
    "analysis": {
      "summary": "This contract manages zonefile updates and revocations for names within namespaces on the Stacks blockchain, integrating with the BNS (Blockchain Name Service).",
      "explanation": "The contract defines error constants for various failure modes, such as unauthorized actions or missing data. It utilizes a data map 'zonefile' to store ownership, zonefile content, and revocation status for each name in a namespace. The 'resolve-name' read-only function allows querying a name's zonefile, ensuring the name is not revoked and is within a valid renewal period. The 'update-zonefile' function enables authorized users (either the name owner or namespace manager) to update a name's zonefile, while the 'revoke-name' function allows these authorized users to revoke a name, effectively marking it as inactive and clearing its zonefile data.\n\n- Error constants <L3-10> define specific error codes for various failure scenarios, improving contract usability by providing more informative error messages.\n- The 'zonefile' map <L13-18> is central to the contract, linking names to their zonefile data and ownership information.\n- The 'resolve-name' function <L21-48> serves as a read-only method for external queries to get a name's zonefile, ensuring the name is active and the requester has valid permissions.\n- The 'update-zonefile' function <L51-98> allows updating the zonefile for a name, with checks for authorization and name validity. It also logs the update event.\n- The 'revoke-name' function <L101-134> enables name revocation, updating the zonefile map to mark the name as revoked and clearing any associated zonefile data, with appropriate authorization checks and event logging.",
      "tags": [
        "BNS",
        "zonefile-management",
        "name-service",
        "blockchain",
        "Stacks"
      ]
    }
  },
  {
    "rank": 107,
    "contract": "SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.migrate-legacy-v2-wl",
    "calls": 261,
    "source": "(impl-trait .extension-trait.extension-trait)\n(impl-trait .proposal-trait.proposal-trait)\n(define-constant err-unauthorised (err u1000))\n(define-constant err-already-requested (err u1001))\n(define-constant err-unknown-sender (err u1002))\n(define-constant err-cannot-delete (err u1003))\n(define-constant ONE_8 u100000000) ;; 8 decimal places\n(define-data-var threshold uint u0)\n(define-map request-map principal uint)\n(define-map whitelisted principal bool)\n(define-read-only (get-threshold)\n    (var-get threshold))\n(define-read-only (get-request-or-fail (sender principal))\n    (ok (unwrap! (map-get? request-map sender) err-unknown-sender)))\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) err-unauthorised)))\n(define-read-only (is-whitelisted-or-default (user principal))\n    (or (default-to false (map-get? whitelisted user)) (< u0 (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age009-token-lock get-recipient-id-or-default user))))\n(define-public (whitelist (users (list 1000 principal)) (approved (list 1000 bool)))\n\t(begin \n\t\t(try! (is-dao-or-extension))\n\t\t(ok (map approve-whitelist users approved))))\n(define-public (execute (sender principal))\n\t(begin \n\t\t(try! (contract-call? .executor-dao set-extensions (list\n\t\t\t{ extension: .migrate-legacy-v2-wl, enabled: true }\n\t\t)))\n\t\t(try! (set-threshold (* u10000 ONE_8)))\n\t\t(ok true)))\n(define-public (migrate)\n    (let (\n            (sender tx-sender)\n            (bal (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token get-balance-fixed sender))))\n        (and (> bal u0) (as-contract (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token burn-fixed bal sender))))\n        (if (and (>= bal (var-get threshold)) (not (is-whitelisted-or-default sender)))\n            (begin \n                (asserts! (map-insert request-map sender bal) err-already-requested)\n                (print { action: \"migrate\", sender: sender, amount: bal, status: \"requested\" })\n                (ok true))\n            (begin\n                (and (> bal u0) (as-contract (try! (contract-call? .token-alex mint-fixed bal sender))))\n                (print { action: \"migrate\", sender: sender, amount: bal, status: \"migrated\" })\n                (ok true)))))\n(define-public (set-threshold (new-threshold uint))\n    (begin \n        (try! (is-dao-or-extension))\n        (ok (var-set threshold new-threshold))))\n(define-public (finalise-migrate (sender principal))\n\t(match (contract-call? .migrate-legacy-v2 finalise-migrate sender)\n\t\tok-value (ok ok-value)\n\t\terr-value\n    (let ( \n            (bal (try! (get-request-or-fail sender))))\n        (try! (is-dao-or-extension))\n        (and (> bal u0) (try! (contract-call? .token-alex mint-fixed bal sender)))\n        (asserts! (map-delete request-map sender) err-cannot-delete)\n        (print { action: \"migrate\", sender: sender, amount: bal, status: \"migrated\" })\n        (ok true))))\n        \n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true))\n(define-private (approve-whitelist (user principal) (approved bool))\n\t(ok (map-set whitelisted user approved)))",
    "analysis": {
      "summary": "This contract manages a migration process, including whitelisting users, setting migration thresholds, and executing migrations for a governance token.",
      "explanation": "The contract implements traits for extension and proposal management, handles authorization, and manages a migration process for a governance token. Key functionalities include setting a migration threshold, whitelisting users, and executing the migration by burning the old token and minting a new one.\n\n- <L1-2> Implement traits for extension and proposal management, allowing this contract to interact with other contracts that follow the same interface.\n- <L3-6> Define constants for error handling, improving contract readability and debugging.\n- <L7> Sets a constant for handling token amounts with 8 decimal places precision.\n- <L8> Initializes a threshold variable to determine when migration can occur.\n- <L9-10> Use maps to track migration requests and whitelisted principals.\n- <L11-13> A read-only function to get the current threshold value.\n- <L14-16> Retrieves a user's request status or fails with an error if not found.\n- <L17-19> Checks if the caller is authorized as the DAO or an extension.\n- <L20-22> Determines if a user is whitelisted or has a default status based on another contract's token lock status.\n- <L23-28> Allows whitelisting of users in bulk, requiring authorization from the DAO or an extension.\n- <L29-35> Handles execution of migration by setting a new threshold and enabling an extension in the executor DAO.\n- <L36-53> Manages the migration process, including burning the old governance token and optionally minting a new one based on balance and whitelisting status.\n- <L54-58> Updates the migration threshold, requiring DAO or extension authorization.\n- <L59-73> Finalizes migration for a user, minting new tokens and removing the user from the request map.\n- <L74-76> A placeholder callback function, potentially for future extension.\n- <L77-79> A private function to update the whitelisting status of a user.",
      "tags": [
        "migration",
        "governance-token",
        "whitelisting",
        "authorization"
      ]
    }
  },
  {
    "rank": 108,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-velar-stx-core",
    "calls": 260,
    "source": ";;; Core: maintains a historical distribution of stake shares.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; errors\n(define-constant err-stake-preconditions    (err u901))\n(define-constant err-stake-postconditions   (err u902))\n(define-constant err-unstake-preconditions  (err u903))\n(define-constant err-unstake-postconditions (err u904))\n(define-constant err-share-preconditions    (err u905))\n(define-constant err-share-postconditions   (err u906))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; constants\n(define-constant MIN-STAKE u1)\n(define-constant STAKING-TOKEN .velar-stx)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Map blocks to epochs\n(define-constant EPOCH-LENGTH  u500) ;; ~1 week at ~10min/block\n(define-constant GENESIS-BLOCK block-height)\n(define-constant GENESIS-EPOCH (calc-epoch GENESIS-BLOCK)) ;;zero\n\n(define-read-only (current-epoch) (calc-epoch block-height))\n\n;; Crash on block in the past.\n(define-read-only (calc-epoch (block uint))\n  (/ (- block GENESIS-BLOCK) EPOCH-LENGTH))\n\n(define-read-only (calc-epoch-start (epoch uint))\n  (+ GENESIS-BLOCK (* EPOCH-LENGTH epoch)))\n\n(define-read-only (calc-epoch-end (epoch uint))\n  (- (+ GENESIS-BLOCK (* EPOCH-LENGTH (+ epoch u1))) u1))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; state\n(define-data-var total-staked\n  {epoch: uint, ;;last state change\n   min  : uint, ;;minimum staked during current epoch\n   end  : uint} ;;total staked during current epoch\n  {epoch: GENESIS-EPOCH,\n   min  : u0,\n   end  : u0})\n\n(define-map user-staked\n  principal\n  {epoch: uint,\n   min  : uint,\n   end  : uint})\n\n(define-read-only (get-total-staked) (var-get total-staked))\n\n(define-read-only (get-user-staked (user principal))\n  (default-to\n    {epoch: GENESIS-EPOCH, min: u0, end: u0}\n    (map-get? user-staked user)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; stake\n(define-public (stake (amt uint))\n  (let ((user      tx-sender)\n        (protocol  (as-contract tx-sender))\n\n        (epoch     (current-epoch))\n\n        (t-staked  (get-total-staked))\n        (u-staked  (get-user-staked user))\n        (t-end1    (+ (get end t-staked) amt))\n        (u-end1    (+ (get end u-staked) amt)) )\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (>= epoch GENESIS-EPOCH)\n      (>= epoch (get epoch t-staked))\n      (>= epoch (get epoch u-staked))\n      (>= (get epoch t-staked) (get epoch u-staked))\n      (>  amt u0)\n      (>= u-end1 MIN-STAKE)\n      )\n     err-stake-preconditions)\n\n    ;; Update global state\n    (try! (contract-call? .velar-stx transfer amt user protocol none))\n\n    ;; Update local state\n    ;; N.B. during the genesis epoch, min is always zero.\n    (if (is-eq epoch (get epoch t-staked))\n        (var-set total-staked\n                 (merge t-staked {end: t-end1}))\n        (var-set total-staked\n                 {epoch: epoch,\n                  min  : (get end t-staked),\n                  end  : t-end1}))\n\n    (if (is-eq epoch (get epoch u-staked))\n        (map-set user-staked user (merge u-staked {end: u-end1}))\n        (map-set user-staked user\n                 {epoch: epoch,\n                  min  : (get end u-staked),\n                  end  : u-end1}))\n\n    ;; Postconditions\n    (asserts!\n      (>= (unwrap-panic (contract-call? .velar-stx get-balance protocol))\n          (get end (get-total-staked)))\n     err-stake-postconditions)\n\n    ;; Return\n    (let ((event\n           {op       : \"stake\",\n            user     : user,\n            amt      : amt,\n            epoch    : epoch,\n            total-old: t-staked,\n            user-old : u-staked,\n            total-new: (get-total-staked),\n            user-new : (get-user-staked user)\n           }))\n      (print event)\n      (ok event)\n      )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; unstake\n(define-public (unstake (amt uint))\n  (let ((user      tx-sender)\n        (protocol  (as-contract tx-sender))\n\n        (epoch     (current-epoch))\n\n        (t-staked  (get-total-staked))\n        (u-staked  (get-user-staked user))\n        (t-end1    (- (get end t-staked) amt))\n        (u-end1    (- (get end u-staked) amt))\n        (t-min1    (min t-end1 (get min t-staked))) ;;unstake most recent first\n        (u-min1    (min u-end1 (get min u-staked))) )\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (>= epoch GENESIS-EPOCH)\n      (>= epoch (get epoch t-staked))\n      (>= epoch (get epoch u-staked))\n      (>= (get epoch t-staked) (get epoch u-staked))\n      (>  amt u0)\n    ;;(<= amt (get end u-staked))\n      (or (>= u-end1 MIN-STAKE)\n          (is-eq u-end1 u0))\n      )\n     err-unstake-preconditions)\n\n    ;; Update global state\n    (try! (as-contract (contract-call? .velar-stx transfer amt protocol user none)))\n\n    ;; Update local state\n    ;; N.B. during the genesis epoch, min is always zero.\n    (if (is-eq epoch (get epoch t-staked))\n        (var-set total-staked (merge t-staked {min: t-min1, end: t-end1}))\n        (var-set total-staked\n                 {epoch: epoch,\n                  min  : t-end1,\n                  end  : t-end1}))\n\n    (if (is-eq epoch (get epoch u-staked))\n        (map-set user-staked user (merge u-staked {min: u-min1, end: u-end1}))\n        (map-set user-staked user\n                 {epoch: epoch,\n                  min  : u-end1,\n                  end  : u-end1}))\n\n    ;; Postconditions\n    (asserts!\n     (and\n      (>= (unwrap-panic (contract-call? .velar-stx get-balance protocol))\n          (get end (get-total-staked)))\n      )\n     err-unstake-postconditions)\n\n    ;; Return\n    (let ((event\n           {op       : \"unstake\",\n            user     : user,\n            amt      : amt,\n            epoch    : epoch,\n            total-old: t-staked,\n            user-old : u-staked,\n            total-new: (get-total-staked),\n            user-new : (get-user-staked user)\n           }))\n      (print event)\n      (ok event) )))\n\n(define-read-only (min (x uint) (y uint)) (if (<= x y) x y))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; staking distribution over time\n\n;; convenience/testing\n(define-read-only\n  (get-unstable-share-at\n     (user  principal)\n     (epoch uint))\n  (if (< epoch (current-epoch))\n      (get-share-at user epoch)\n      (let ((t     (get-total-staked))\n            (u     (get-user-staked user))\n            (t-amt (get end t))\n            (u-amt (get end u))\n            (share {staked: u-amt, total: t-amt}))\n        (ok share))))\n\n(define-read-only\n  (get-share-at\n   (user  principal)\n   (epoch uint))\n\n  (let ((last-block (calc-epoch-end epoch))\n        (header     (unwrap-panic (get-block-info? id-header-hash last-block)))\n        (t-at       (at-block header (get-total-staked)))\n        (u-at       (at-block header (get-user-staked user)))\n        (t-amt      (eligible-amount epoch t-at))\n        (u-amt      (eligible-amount epoch u-at))\n        (share      {staked: u-amt, total: t-amt}) )\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (< epoch (current-epoch))\n      (<= (get epoch t-at) epoch)\n      (<= (get epoch u-at) epoch)\n      )\n     err-share-preconditions)\n\n      (ok share) ))\n\n(define-read-only\n  (eligible-amount\n   (goal  uint)\n   (entry {epoch: uint, min: uint, end: uint}))\n\n  (if (is-eq goal (get epoch entry))\n      ;; If the specific epoch we are looking at had interactions,\n      ;; only the minimum amount staked continuously during that\n      ;; period counts.\n      (get min entry)\n      ;; Otherwise carry over staked amount from previous active epoch.\n      (get end entry)) )\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract manages a staking mechanism, tracking stakes over time and calculating shares for each epoch.",
      "explanation": "This Clarity smart contract implements a staking system that records and updates the amount of tokens staked by users over time, divided into epochs. It allows users to stake and unstake tokens, maintaining a historical record of stakes to calculate shares per epoch. The contract uses maps and data variables to track the total staked amount and individual user stakes, updating these records as users stake or unstake. It also includes functions to calculate a user's share at any given epoch, based on the staking history.\n\n- Errors (<L2-7>): Defines error codes for various failure states related to staking and unstaking operations.\n- Constants (<L10-15>): Sets up basic constants like the minimum stake amount, the staking token, and epoch length.\n- Epoch Calculation (<L17-27>): Functions to calculate the current epoch, start, and end of an epoch based on the block height.\n- State Variables (<L29-39>): Defines data variables to track the total staked amount and user-specific staking information.\n- Stake and Unstake Functions (<L41-126>): These functions allow users to stake or unstake tokens. They update the global and user-specific staking records, check preconditions to ensure valid operations, and handle token transfers. Postconditions verify the state after operations.\n- Share Calculation (<L128-166>): Includes functions to calculate the share of stakes for a user at a specific epoch, considering the total staked amount and the user's contribution.\n\nThe contract leverages Clarity's features like `asserts!` for precondition checks, `map-get?` and `map-set` for state updates, and `at-block` for historical data access. It demonstrates a complex state management pattern, handling staking logic with temporal considerations.",
      "tags": [
        "staking",
        "token",
        "epoch-tracking",
        "state-management"
      ]
    }
  },
  {
    "rank": 109,
    "contract": "SP32BCNMVZ237CC7CHV53GVXHFY8TKVCF1Q2PC59J.stacks-believers-stxcity-dex",
    "calls": 259,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u10000000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u10000000000)\n(define-constant VIRTUAL_STX_VALUE u2000000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u200000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP32BCNMVZ237CC7CHV53GVXHFY8TKVCF1Q2PC59J.stacks-believers-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  (var-set token-balance token-supply)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX, with features for buying and selling tokens, and automatic distribution upon reaching a target STX amount.",
      "explanation": "The contract uses the SIP-010 trait for token standards and is designed to facilitate token trading on a bonding curve. It initializes with a set token supply, target STX amount, and initial virtual STX for the curve. Users can buy or sell tokens at prices determined by the bonding curve, with fees applied. Upon reaching the target STX amount, the contract distributes tokens and STX to specified addresses, including a burn address for deflationary pressure.\n\n- <L1-L9> Metadata including title, notice, and developer notes.\n- <L11> Uses SIP-010 trait for fungible tokens.\n- <L13-20> Defines error constants for various failure modes.\n- <L22-29> Sets constants for token supply, DEX address, STX target, virtual STX value, and fees.\n- <L31-35> Specifies wallets for fees, AMM, and token burning.\n- <L37-42> Initializes contract state variables for trading status, balances, and percentages.\n- <L44-99> The `buy` function allows users to purchase tokens with STX, adjusting balances and applying fees. It also checks if the target STX amount is reached to trigger distribution.\n- <L101-141> The `sell` function enables users to sell tokens back to the DEX in exchange for STX, with fees deducted.\n- <L143-166>, <L168-191> `get-buyable-tokens` and `get-sellable-stx` are read-only functions that calculate the amount of tokens or STX that can be bought or sold, including fees.\n- <L193-195> `get-tradable` is a simple read-only function to check if trading is enabled.\n- <L197-205> The contract initialization sets initial values and transfers STX to a specified address, likely for initial liquidity or as a setup fee.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "protocol",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 110,
    "contract": "SPV8C2N59MA417HYQNG6372GCV0SEQE01EV4Z1RQ.stacks-invaders-v0",
    "calls": 258,
    "source": "(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-non-fungible-token stacks-invaders-v0 uint)\n\n;; Constants\n(define-constant DEPLOYER tx-sender )\n;;deployer: 'SPV8C2N59MA417HYQNG6372GCV0SEQE01EV4Z1RQ)\n\n(define-constant ERR-NO-MORE-NFTS u100)\n(define-constant ERR-NOT-ENOUGH-PASSES u101)\n(define-constant ERR-PUBLIC-SALE-DISABLED u102)\n(define-constant ERR-CONTRACT-INITIALIZED u103)\n(define-constant ERR-NOT-AUTHORIZED u104)\n(define-constant ERR-INVALID-USER u105)\n(define-constant ERR-LISTING u106)\n(define-constant ERR-WRONG-COMMISSION u107)\n(define-constant ERR-NOT-FOUND u108)\n(define-constant ERR-PAUSED u109)\n(define-constant ERR-MINT-LIMIT u110)\n(define-constant ERR-METADATA-FROZEN u111)\n(define-constant ERR-AIRDROP-CALLED u112)\n(define-constant ERR-NO-MORE-MINTS u113)\n(define-constant ERR-INVALID-PERCENTAGE u114)\n(define-constant ERR-BLOCK-ALREADY-MINTED u115)\n\n\n;; Internal variables\n(define-data-var mint-limit uint u4995) ;; 5 batches of 999 \n(define-data-var last-id uint u0)\n(define-data-var total-price uint u1000000) ;;Either free or 1 STX\n(define-data-var artist-address principal 'SP30MSY8NECE4SJJRQ5NVFZA58HF9Y93XX6E15WMG)\n(define-data-var ipfs-root (string-ascii 80) \"ipfs://ipfs/temporaryURL/json/\")\n(define-data-var mint-paused bool true)\n(define-data-var premint-enabled bool false)\n(define-data-var sale-enabled bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var airdrop-called bool false)\n(define-data-var mint-cap uint u10) ;; Max 10 per wallet\n\n(define-map mints-per-user principal uint)\n(define-map free-mints-per-user\n    {user-wallet:  principal}\n    {available-mints: uint}\n)\n\n;; map to save the colour per number preferences.\n(define-map colour-code\n    {colour-id:  (string-ascii 40)}\n    {colour-hexa: (string-ascii 7)}\n)\n;; map to save the base model per number preferences.\n(define-map base-model\n    {model-id: (string-ascii 40)}\n    {model-hexa: (string-ascii 1024), model-hexa-2: (string-ascii 1024), model-hexa-3: (string-ascii 1024)}\n)\n(define-map base-model-special\n    {model-id: (string-ascii 40)}\n    {model-hexa: (string-ascii 1024)}\n)\n;; maps to save generated token vs block. (access via token or block)\n(define-map generated-dmt\n    {token-id: uint}\n    {block-id: uint, miner: principal}\n)\n(define-map blocks-gen\n    {block-id: uint}\n    {token-id: uint, miner: principal}\n)\n\n;; set the base models for DMT\n(define-public (model-set (model-id-input uint) (model-hexa-input (string-ascii 1024)) (model-hexa-input-2 (string-ascii 1024)) (model-hexa-input-3 (string-ascii 1024)) )\n  (let\n  (\n      (model-ascii (int-to-ascii model-id-input))\n  )\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (map-set base-model { model-id: model-ascii } { model-hexa: model-hexa-input , model-hexa-2: model-hexa-input-2 , model-hexa-3: model-hexa-input-3 })\n    (ok \"Post successful\")\n  )\n  )\n)\n\n;; set whitelist\n(define-public (whitelist-user (wallet-input principal) )\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (map-set free-mints-per-user { user-wallet: wallet-input } { available-mints: u1 })\n    (ok \"Post successful\")\n  )\n)\n\n\n;; set the base models for DMT\n(define-public (model-special-set (model-id-input uint) (model-hexa-input (string-ascii 1024)) )\n  (let\n  (\n      (model-ascii (int-to-ascii model-id-input))\n  )\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (map-set base-model-special { model-id: model-ascii } { model-hexa: model-hexa-input })\n    (ok \"Post successful\")\n  )\n  )\n)\n\n;; set the base colours for DMT\n(define-public (colour-set (colour-id-input uint) (colour-hexa-input (string-ascii 7)) )\n  (let\n  (\n      (colour-ascii (int-to-ascii colour-id-input))\n  )\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (map-set colour-code { colour-id: colour-ascii } { colour-hexa: colour-hexa-input })\n    (ok \"Post successful\")\n  )\n  )\n)\n\n(define-read-only (get-block-height-design (block-id uint)) \n  (let \n    (\n      ;; split block numbers\n      (block-ascii (int-to-ascii block-id))\n      (block-digit-1 (default-to \"0\" (slice? block-ascii u5 u6)))\n      (block-digit-2 (default-to \"0\" (slice? block-ascii u4 u5)))\n      (block-digit-3 (default-to \"0\" (slice? block-ascii u2 u4)))\n      ;; unpack into colours and patterns\n      (colour-1 (default-to \"#000000\" (get colour-hexa (map-get? colour-code (tuple ( colour-id block-digit-1 )))))) \n      (colour-2 (default-to \"#000000\" (get colour-hexa (map-get? colour-code (tuple ( colour-id block-digit-2 )))))) \n      (base-mod (default-to \"<div>\" (get model-hexa (map-get? base-model  (tuple ( model-id block-digit-3 )))))) \n      (base-mod-2 (default-to \"<div>\" (get model-hexa-2 (map-get? base-model  (tuple ( model-id block-digit-3 )))))) \n      (base-mod-3 (default-to \"<div>\" (get model-hexa-3 (map-get? base-model  (tuple ( model-id block-digit-3 )))))) \n      (base-mod-special (default-to \"none\" (get model-hexa (map-get? base-model-special  (tuple ( model-id block-ascii )))))) \n      (colour-3     (if (is-eq colour-1 colour-2) \"#9000CE\" colour-2 ) )\n      ;;(conc-return (concat block-digit-1 (concat colour-1 (concat block-digit-2 (concat colour-2 (concat block-digit-3 base-mod))))))\n      (conc-return (if (is-eq base-mod-special \"none\" ) (concat base-mod (concat colour-1 (concat base-mod-2 (concat colour-3 base-mod-3)))) base-mod-special ))\n    )\n  (ok conc-return) \n  )\n)\n\n(define-read-only (get-current-block-height-design) \n  (let\n  (\n    (block-design (get-block-height-design block-height))\n  )\n  (ok block-design)\n  )\n)\n(define-read-only (get-dmt-for-block-height (block-input uint)) \n  (let\n  (\n    (block-design (get-block-height-design block-input))\n  )\n  (ok block-design)\n  )\n)\n\n;; TODO: Export full block vs Token list\n;; TODO: execute contract calls to put inital data\n\n(define-public (claim) \n  (mint (list true)))\n\n;; Default Minting\n(define-private (mint (orders (list 25 bool)))\n  (mint-many orders))\n\n\n(define-private (mint-many (orders (list 25 bool )))  \n  (let \n    (\n      (last-nft-id (var-get last-id))\n      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))\n      (art-addr (var-get artist-address))\n      (id-reached (fold mint-many-iter orders last-nft-id));; mint command\n      (price (var-get total-price) )\n     ;; (price (* (var-get total-price) (- id-reached last-nft-id)))\n      (current-balance (get-balance tx-sender))\n      (capped (> (var-get mint-cap) u0))\n      (user-mints (get-mints tx-sender))\n      (free-mints (default-to u0 (get available-mints (map-get? free-mints-per-user (tuple ( user-wallet tx-sender )))))) \n      (current_id (- id-reached u1))\n    )\n    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))\n    (asserts! (or (not capped) (is-eq tx-sender DEPLOYER) (is-eq tx-sender art-addr) (>= (var-get mint-cap) (+ (len orders) user-mints))) (err ERR-NO-MORE-MINTS))\n    ;; add function to check block height from map\n    (asserts! (is-eq none (get token-id (map-get? blocks-gen  (tuple ( block-id block-height ))))) (err ERR-BLOCK-ALREADY-MINTED))\n    (map-set mints-per-user tx-sender (+ (len orders) user-mints))\n    (var-set last-id id-reached)\n    (map-set blocks-gen { block-id: block-height } { token-id: current_id , miner: tx-sender })\n    (map-set generated-dmt { token-id: current_id } { block-id: block-height , miner: tx-sender })\n    ;; get whitelist\n    (if (or (is-eq tx-sender art-addr) (is-eq tx-sender DEPLOYER) (is-eq free-mints u1) (is-eq (var-get total-price) u0000000))\n      (begin\n        (map-set free-mints-per-user { user-wallet: tx-sender } { available-mints: u0 })\n        (map-set token-count tx-sender (+ current-balance u1))\n      )\n      (begin       \n        (map-set token-count tx-sender (+ current-balance u1))\n        (try! (stx-transfer? price tx-sender (var-get artist-address)))\n      )    \n    )\n    (ok current_id)\n    )\n)\n\n;; public function to return token SVG per token ID:\n(define-read-only (get-token-svg (token-id uint))\n  (let\n  (\n    (block-id (default-to u100 (get block-id (map-get? generated-dmt  (tuple ( token-id token-id ))))))\n    (block-design (get-block-height-design block-id))\n  )\n  (ok block-design)\n  )\n)\n\n\n(define-private (mint-many-iter (ignore bool) (next-id uint))\n  (if (<= next-id (var-get mint-limit))\n    (begin\n      (unwrap! (nft-mint? stacks-invaders-v0 next-id tx-sender) next-id)\n      ;; function to save: tokenID + BlockHeight + 1stPrincipal\n      (+ next-id u1)    \n    )\n    next-id))\n\n\n(define-public (set-artist-address (address principal))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set artist-address address))))\n\n(define-public (set-price (price uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set total-price price))))\n\n(define-public (toggle-pause)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set mint-paused (not (var-get mint-paused))))))\n\n(define-public (set-mint-limit (limit uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))\n    (ok (var-set mint-limit limit))))\n\n(define-public (burn (token-id uint))\n  (begin \n    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))\n    (nft-burn? stacks-invaders-v0 token-id tx-sender)))\n\n(define-private (is-owner (token-id uint) (user principal))\n    (is-eq user (unwrap! (nft-get-owner? stacks-invaders-v0 token-id) false)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))\n    (print { notification: \"token-metadata-update\", payload: { token-class: \"nft\", contract-id: (as-contract tx-sender) }})\n    (var-set ipfs-root new-base-uri)\n    (ok true)))\n\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Non-custodial SIP-009 transfer function\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))\n    (trnsfr id sender recipient)))\n\n;; read-only functions\n(define-read-only (get-owner (token-id uint))\n  (ok (nft-get-owner? stacks-invaders-v0 token-id)))\n\n(define-read-only (get-last-token-id)\n  (ok (- (var-get last-id) u1)))\n\n\n(define-read-only (get-token-uri (token-id uint))\n(let\n  ( \n    (block-id (int-to-ascii (default-to u100 (get block-id (map-get? generated-dmt  (tuple ( token-id token-id ))))))) \n  )\n;; get token block, replace on the ID below\n  (ok (some (concat (concat (var-get ipfs-root) block-id) \".json\")))\n)\n)\n\n(define-read-only (get-paused)\n  (ok (var-get mint-paused)))\n\n(define-read-only (get-price)\n  (ok (var-get total-price)))\n\n(define-read-only (get-artist-address)\n  (ok (var-get artist-address)))\n\n(define-read-only (get-mints (caller principal))\n  (default-to u0 (map-get? mints-per-user caller)))\n\n(define-read-only (get-mint-limit)\n  (ok (var-get mint-limit)))\n\n(define-data-var license-uri (string-ascii 80) \"https://arweave.net/zmc1WTspIhFyVY82bwfAIcIExLFH5lUcHHUN0wXg4W8/5\")\n(define-data-var license-name (string-ascii 40) \"PERSONAL-NO-HATE\")\n\n(define-read-only (get-license-uri)\n  (ok (var-get license-uri)))\n  \n(define-read-only (get-license-name)\n  (ok (var-get license-name)))\n\n;; updating license details  \n(define-public (set-license-uri (uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-uri uri))))\n    \n(define-public (set-license-name (name (string-ascii 40)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-name name))))\n\n;; Non-custodial marketplace extras\n(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)\n\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal, royalty: uint})\n\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? stacks-invaders-v0 id sender recipient)\n    success\n      (let\n        ((sender-balance (get-balance sender))\n        (recipient-balance (get-balance recipient)))\n          (map-set token-count\n            sender\n            (- sender-balance u1))\n          (map-set token-count\n            recipient\n            (+ recipient-balance u1))\n          (ok success))\n    error (err error)))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? stacks-invaders-v0 id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? stacks-invaders-v0 id) (err ERR-NOT-FOUND)))\n      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))\n      (price (get price listing))\n      (royalty (get royalty listing)))\n    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (pay-royalty price royalty))\n    (try! (contract-call? comm-trait pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))\n    \n(define-data-var royalty-percent uint u5000) ;; 5%\n\n(define-read-only (get-royalty-percent)\n  (ok (var-get royalty-percent)))\n\n(define-public (set-royalty-percent (royalty uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))\n    (ok (var-set royalty-percent royalty))))\n\n(define-private (pay-royalty (price uint) (royalty uint))\n  (let (\n    (royalty-amount (/ (* price royalty) u10000))\n  )\n  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))))\n    (try! (stx-transfer? royalty-amount tx-sender (var-get artist-address)))\n    (print false)\n  )\n  (ok true)))",
    "analysis": {
      "summary": "This Clarity smart contract implements a non-fungible token (NFT) collection with unique digital media tokens (DMTs) that can be minted, transferred, and listed for sale. It includes features like artist-defined metadata, minting limits, and royalty payments.",
      "explanation": "The contract defines an NFT collection named 'stacks-invaders-v0' using the `define-non-fungible-token` construct, allowing for the creation and tracking of unique tokens identified by unsigned integers. The contract includes several constants and variables for managing the state, such as mint limits, artist addresses, and pricing information. It implements the SIP-009 standard for NFTs on the Stacks blockchain, ensuring compatibility with wallets and marketplaces that support this standard.\n\nKey functionalities include:\n- Minting of NFTs with unique designs based on block height, ensuring each token's design is distinct (<L120-125>).\n- Setting and updating artist-specific information, such as the artist's address and metadata URI (<L88-96>, <L98-102>).\n- Enabling and disabling minting to control the supply of NFTs in circulation (<L104-108>).\n- Transferring NFTs in a non-custodial manner, allowing users to send tokens directly to others without intermediary control (<L110-114>).\n- Listing NFTs for sale and managing listings through a commission-based system, integrating with a separate commission contract to handle payments and royalties (<L116-120>).\n\nThe contract uses various Clarity constructs such as `define-map` for storing data, `define-public` and `define-private` functions for interaction, and `asserts!` for condition checks. It leverages Clarity's capabilities for creating secure, decentralized digital assets on the Stacks blockchain.",
      "tags": [
        "NFT",
        "DeFi",
        "metadata",
        "royalties",
        "minting",
        "marketplace"
      ]
    }
  },
  {
    "rank": 111,
    "contract": "SP3NDZ2HXSCT0MZSJGZHYNA382DM6163KYT61524M.stx-faktory-dex",
    "calls": 254,
    "source": "\n;; c3bae5402a2884625f7c5efff2299475d92edec3b74eaa280db60aaadb636c64\n;; Faktory.Fun @version 1.0\n  \n(impl-trait 'SP3XXMS38VTAWTVPE5682XSBFXPTH7XCPEBTX8AN2.faktory-dex-trait-v1.dex-trait)\n(use-trait faktory-token 'SP3XXMS38VTAWTVPE5682XSBFXPTH7XCPEBTX8AN2.faktory-trait-v1.sip-010-trait) \n\n(define-constant ERR-MARKET-CLOSED (err u1001))\n(define-constant ERR-STX-NON-POSITIVE (err u1002))\n(define-constant ERR-STX-BALANCE-TOO-LOW (err u1003))\n(define-constant ERR-FT-NON-POSITIVE (err u1004))\n\n(define-constant ERR-TOKEN-NOT-AUTH (err u401))\n(define-constant ERR-UNAUTHORIZED-CALLER (err u402))\n\n(define-constant FEE-RECEIVER 'SMHAVPYZ8BVD0BHBBQGY5AQVVGNQY4TNHAKGPYP)\n(define-constant G-RECEIVER 'SM3NY5HXXRNCHS1B65R78CYAC1TQ6DEMN3C0DN74S)\n(define-constant AMM-RECEIVER 'SP3DX9KDA8AMX5BHW5QJ68W39V7YHZE696PHXFR20)\n(define-constant CANT-BE-EVIL 'SP000000000000000000002Q6VF78)\n(define-constant DEV tx-sender)\n(define-constant DEX-TOKEN 'SP3NDZ2HXSCT0MZSJGZHYNA382DM6163KYT61524M.stx-faktory)\n(define-constant AUTHORIZED-CONTRACT 'SPV9K21TBFAK4KNRJXF5DFP8N7W46G4V9RCJDC22.buy-with-velar-faktory)\n\n;; token constants\n(define-constant TARGET_STX u6000000000)\n(define-constant FAK_STX u1500000000)\n(define-constant GRAD-FEE u120000000)\n\n;; data vars\n(define-data-var open bool false)\n(define-data-var fak-ustx uint u0)\n(define-data-var ft-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-rate uint u20)\n(define-data-var dev-premium uint u10)\n\n;; Helper function to check if caller is authorized\n(define-private (is-valid-caller)\n  (or \n    (is-eq contract-caller tx-sender)\n    (is-eq contract-caller AUTHORIZED-CONTRACT)\n  ))\n\n(define-public (buy (ft <faktory-token>) (ustx uint))\n  (begin\n    (asserts! (is-eq DEX-TOKEN (contract-of ft)) ERR-TOKEN-NOT-AUTH)\n    (asserts! (is-valid-caller) ERR-UNAUTHORIZED-CALLER)\n    (asserts! (var-get open) ERR-MARKET-CLOSED)\n    (asserts! (> ustx u0) ERR-STX-NON-POSITIVE)\n    (let ((total-stx (var-get stx-balance))\n          (total-stk (+ total-stx (var-get fak-ustx)))\n          (total-ft (var-get ft-balance))\n          (k (* total-ft total-stk))\n          (fee (/ (* ustx u2) u100))\n          (stx-in (- ustx fee))\n          (new-stk (+ total-stk stx-in))\n          (new-ft (/ k new-stk))\n          (tokens-out (- total-ft new-ft))\n          (new-stx (+ total-stx stx-in))\n          (ft-receiver tx-sender))\n      (try! (stx-transfer? fee tx-sender FEE-RECEIVER))\n      (try! (stx-transfer? stx-in tx-sender (as-contract tx-sender)))\n      (try! (as-contract (contract-call? ft transfer tokens-out tx-sender ft-receiver none)))\n      (if (>= new-stx TARGET_STX)\n        (begin\n          (let ((grad-amount (/ (* new-ft (var-get burn-rate)) u100))\n              (dev-amount (/ (* grad-amount (var-get dev-premium)) u100))\n              (burn-amount (- grad-amount dev-amount))\n              (bonus-amount (/ (* new-ft u69) u10000)) \n              (amm-amount (- new-ft (+ grad-amount bonus-amount)))\n              (amm-ustx (- new-stx GRAD-FEE)))\n            (try! (as-contract (contract-call? ft transfer burn-amount tx-sender CANT-BE-EVIL none)))\n            (try! (as-contract (contract-call? ft transfer dev-amount tx-sender DEV none)))\n            (try! (as-contract (contract-call? ft transfer bonus-amount tx-sender G-RECEIVER none)))\n               (try! (as-contract (contract-call? ft transfer amm-amount tx-sender AMM-RECEIVER none)))\n      (try! (as-contract (stx-transfer? amm-ustx tx-sender AMM-RECEIVER)))\n            (try! (as-contract (stx-transfer? GRAD-FEE tx-sender G-RECEIVER)))\n            (var-set open false)\n            (var-set stx-balance u0)\n            (var-set ft-balance u0)\n            (print {type: \"buy\", ft: (contract-of ft),tokens-out: tokens-out, ustx: ustx, burn-amount: burn-amount, amm-amount: amm-amount,\n                    amm-ustx: amm-ustx,\n                    stx-balance: u0, ft-balance: u0,\n                    fee: fee, grad-fee: GRAD-FEE, maker: tx-sender,\n                    open: false})\n            (ok true)))\n        (begin\n          (var-set stx-balance new-stx)\n          (var-set ft-balance new-ft)\n          (print {type: \"buy\", ft: (contract-of ft), tokens-out: tokens-out, ustx: ustx, maker: tx-sender,\n                  stx-balance: new-stx, ft-balance: new-ft,\n                  fee: fee,\n                  open: true})\n          (ok true))))))\n\n(define-read-only (get-in (ustx uint))\n  (let ((total-stx (var-get stx-balance))\n        (total-stk (+ total-stx (var-get fak-ustx)))\n        (total-ft (var-get ft-balance))\n        (k (* total-ft total-stk))\n        (fee (/ (* ustx u2) u100))\n        (stx-in (- ustx fee))\n        (new-stk (+ total-stk stx-in))\n        (new-ft (/ k new-stk))\n        (tokens-out (- total-ft new-ft))\n        (raw-to-grad (- TARGET_STX total-stx))\n        (stx-to-grad (/ (* raw-to-grad u103) u100)))\n    (ok {stx-in: stx-in,\n         fee: fee,\n         tokens-out: tokens-out,\n         ft-balance: total-ft,\n         new-ft: new-ft,\n         total-stx: total-stx,\n         new-stx: (+ total-stx stx-in),\n         stx-to-grad: stx-to-grad})))\n\n(define-public (sell (ft <faktory-token>) (amount uint))\n  (begin\n    (asserts! (is-eq DEX-TOKEN (contract-of ft)) ERR-TOKEN-NOT-AUTH)\n    (asserts! (is-valid-caller) ERR-UNAUTHORIZED-CALLER)\n    (asserts! (var-get open) ERR-MARKET-CLOSED)\n    (asserts! (> amount u0) ERR-FT-NON-POSITIVE)\n    (let ((total-stx (var-get stx-balance))\n          (total-stk (+ total-stx (var-get fak-ustx)))\n          (total-ft (var-get ft-balance))\n          (k (* total-ft total-stk))\n          (new-ft (+ total-ft amount))\n          (new-stk (/ k new-ft))\n          (stx-out (- (- total-stk new-stk) u1))\n          (fee (/ (* stx-out u2) u100))\n          (stx-to-receiver (- stx-out fee))\n          (new-stx (- total-stx stx-out))\n          (stx-receiver tx-sender))\n      (asserts! (>= total-stx stx-out) ERR-STX-BALANCE-TOO-LOW)\n      (try! (contract-call? ft transfer amount tx-sender (as-contract tx-sender) none))\n      (try! (as-contract (stx-transfer? stx-to-receiver tx-sender stx-receiver)))\n      (try! (as-contract (stx-transfer? fee tx-sender FEE-RECEIVER)))\n      (var-set stx-balance new-stx)\n      (var-set ft-balance new-ft)\n      (print {type: \"sell\", ft: (contract-of ft), amount: amount, stx-to-receiver: stx-to-receiver, maker: tx-sender,\n              stx-balance: new-stx, ft-balance: new-ft,\n              fee: fee,\n              open: true})\n      (ok true))))\n\n(define-read-only (get-out (amount uint))\n  (let ((total-stx (var-get stx-balance))\n        (total-stk (+ total-stx (var-get fak-ustx)))\n        (total-ft (var-get ft-balance))\n        (k (* total-ft total-stk))\n        (new-ft (+ total-ft amount))\n        (new-stk (/ k new-ft))\n        (stx-out (- (- total-stk new-stk) u1))\n        (fee (/ (* stx-out u2) u100))\n        (stx-to-receiver (- stx-out fee)))\n    (ok {amount-in: amount,\n         stx-out: stx-out,\n         fee: fee,\n         stx-to-receiver: stx-to-receiver,\n         total-stx: total-stx,\n         new-stx: (- total-stx stx-out),\n         ft-balance: total-ft,\n         new-ft: new-ft})))\n\n(define-read-only (get-open)\n  (ok (var-get open)))\n\n;; boot dex\n  (begin\n    (var-set fak-ustx FAK_STX)\n    (var-set ft-balance u919117647058824)\n    (var-set stx-balance u132000000)\n    (var-set open true)\n    (try! (stx-transfer? u1000000 tx-sender 'SMH8FRN30ERW1SX26NJTJCKTDR3H27NRJ6W75WQE))\n      (print { \n          type: \"faktory-dex-trait-v1\", \n          dexContract: (as-contract tx-sender),\n          ammReceiver: 'SP3DX9KDA8AMX5BHW5QJ68W39V7YHZE696PHXFR20,\n     })\n    (ok true))",
    "analysis": {
      "summary": "This contract implements a decentralized exchange (DEX) mechanism for trading between STX (the native cryptocurrency of the Stacks blockchain) and a specific fungible token, utilizing an Automated Market Maker (AMM) model.",
      "explanation": "The contract starts by implementing a trait from another contract and using another trait for a fungible token, ensuring interoperability and standardization. It defines constants for error messages, addresses of interest (like fee receivers), and token-related constants. The contract maintains several state variables, including whether the market is open, balances of STX and the fungible token, and rates like the burn rate and dev premium.\n\nThe `is-valid-caller` private function <L37-40> checks if the caller is authorized, either being the transaction sender or a specific authorized contract, enhancing security by preventing unauthorized interactions.\n\nThe `buy` function <L42-95> allows users to purchase the fungible token with STX. It checks for authorization, market status, and positive STX input. It calculates the token amount to transfer based on the input STX, adjusting for fees and ensuring the contract's invariant (K = total-ft * total-stk) remains constant. If the STX balance reaches a target, it triggers a distribution mechanism, distributing tokens to various parties and closing the market.\n\nThe `sell` function <L97-133> enables users to sell the fungible token in exchange for STX, with similar checks and calculations as the `buy` function but in reverse.\n\n`get-in` and `get-out` <L135-163> are read-only functions providing information on potential trade outcomes without affecting the state. They calculate how much of one asset you would receive for supplying another, considering current balances and fees.\n\nThe contract initializes with a boot sequence <L165-175>, setting initial balances and opening the market. This sequence also includes a transfer, likely meant as an initial funding or fee payment.\n\nOverall, the contract facilitates decentralized trading between STX and a specific fungible token, with mechanisms for fee collection, authorization checks, and market opening/closing based on conditions.",
      "tags": [
        "DEX",
        "AMM",
        "fungible-token",
        "trading",
        "DeFi"
      ]
    }
  },
  {
    "rank": 113,
    "contract": "SPFDQHA10SPK9X3QPJVA1VPS1R96BANXJWGHW38V.little-twat-collective-stxcity-dex",
    "calls": 254,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u100000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP359XMJYWRDY24H7VDYJWKPAGHN75V8M0W1NBF3P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SPFDQHA10SPK9X3QPJVA1VPS1R96BANXJWGHW38V.little-twat-collective-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u98360655737704)\n    (var-set stx-balance u6666667)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX, with features like automatic fee distribution and token burning.",
      "explanation": "The contract facilitates the buying and selling of a specific token using a bonding curve model, which determines the price based on the token's supply. It includes mechanisms for fee collection, token burning for deflationary pressure, and automatic transfer of assets to predefined wallets upon reaching a target STX amount. Key points include:\n\n- The contract uses the SIP-010 trait for token standards, ensuring compatibility with the broader Stacks ecosystem <L1>.\n- It defines several error constants for handling unauthorized access and insufficient balances <L4-11>.\n- The contract sets up constants for the token supply, DEX address, bonding curve configuration, fee, and wallet addresses for fee collection and token burning <L13-29>.\n- Tradable status, virtual STX amount, token balance, and STX balance are tracked using data variables, allowing the contract to manage its state effectively <L31-36>.\n- The `buy` function allows users to purchase tokens with STX, adjusting the token and STX balance within the contract, and applying fees. It also checks if the STX target amount is reached to distribute tokens and STX accordingly <L38-86>.\n- The `sell` function enables users to sell tokens back to the contract in exchange for STX, with a fee applied <L88-123>.\n- `get-buyable-tokens` and `get-sellable-stx` are read-only functions that calculate the amount of tokens or STX that can be bought or sold based on the current balances and the bonding curve <L125-163>.\n- The contract initialization sets the initial state, including virtual STX amount, token balance, and tradable status. It also performs an initial STX transfer as part of the setup <L165-174>.\n\nOverall, this contract demonstrates a complex financial mechanism on the Stacks blockchain, leveraging Clarity's capabilities for decentralized finance applications.",
      "tags": [
        "DeFi",
        "DEX",
        "bonding-curve",
        "protocol",
        "token-trading"
      ]
    }
  },
  {
    "rank": 114,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-wstx-roo-distributor",
    "calls": 244,
    "source": ";;; Distributor: receive and distribute rewards.\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(impl-trait .farming-receive-trait.farming-receive-trait)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; errors\n(define-constant err-check-owner               (err u801))\n(define-constant err-receive-preconditions     (err u802))\n(define-constant err-distribute-preconditions  (err u803))\n(define-constant err-distribute-postconditions (err u804))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; constants\n(define-constant REWARD-TOKEN 'SP2C1WREHGM75C7TGFAEJPFKTFTEGZKF6DFT6E2GE.kangaroo)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; auth\n(define-data-var owner principal tx-sender)\n(define-read-only (get-owner) (var-get owner))\n(define-private (check-owner)\n  (ok (asserts! (is-eq tx-sender (get-owner)) err-check-owner)))\n(define-public (set-owner (new-owner principal))\n  (begin\n   (try! (check-owner))\n   (ok (var-set owner new-owner)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; accounting\n(define-map revenue uint uint) ;;epoch -> cumulative token rewards\n\n(define-read-only (get-revenue-at (epoch uint))\n  (default-to u0 (map-get? revenue epoch) ))\n\n;; Called by operator.\n;; MUST ALWAYS BE ACCOMPANIED BY A CORRECT TRANSFER!\n;; Could also store balance and compare to previous but that adds code.\n(define-data-var balance uint u0)\n\n(define-read-only (get-balance)\n  (var-get balance))\n\n(define-private (sync (new-balance uint))\n  (var-set balance new-balance))\n\n(define-public\n  (receive\n   (token <ft-trait>)\n   (amt   uint)\n   (from  principal))\n\n  (let ((epoch (contract-call? .farming-wstx-roo-core current-epoch))\n        (r     (get-revenue-at epoch))\n        (bal   (unwrap-panic\n                (contract-call?\n                 token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n     (and\n      (is-eq (contract-of token) REWARD-TOKEN)\n    ;;(> amt u0)\n      (is-eq from (get-owner))\n      (>= bal (+ (get-balance) amt))\n      )\n      err-receive-preconditions)\n\n    (try! (check-owner))\n    (sync bal)\n    ;; (var-set balance (+ (var-get balance) amt))\n    (ok (map-set revenue epoch (+ r amt)) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; claims\n(define-map claims\n  {user: principal, epoch: uint}\n  uint) ;;block number claimed at\n\n(define-private\n  (do-claim\n   (user principal)\n   (epoch uint))\n  (map-set claims\n           {user: user, epoch: epoch}\n           block-height))\n\n(define-read-only\n  (has-claimed-epoch\n   (user principal)\n   (epoch uint))\n  (is-some (map-get? claims {user: user, epoch: epoch})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; low level API\n(define-private\n  (do-distribute\n   (user  principal)\n   (token <ft-trait>)\n   (amt   uint))\n\n  (let ((protocol (as-contract tx-sender)))\n    (ok (if (> amt u0)\n        (try!\n         (as-contract\n          (contract-call?\n           token transfer amt protocol user none)))\n        true)) ))\n\n(define-read-only\n  (calc-distribute\n   (share {staked: uint, total: uint})\n   (amt   uint))\n\n  (if (> (get total share) u0)\n      (/ (* amt (get staked share)) (get total share))\n      u0) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epoch\n(define-private\n  (distribute-epoch\n   (user   principal)\n   (token  <ft-trait>)\n   (epoch  uint))\n\n  (let ((reward (unwrap-panic (get-reward user epoch))))\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (not (has-claimed-epoch user epoch))\n    ;;(< epoch (current-epoch)) checked by get-share-at\n      (is-eq (contract-of token) REWARD-TOKEN)\n      )\n     err-distribute-preconditions)\n\n    ;; Update global state\n    (try! (do-distribute user token (get amt reward)))\n\n    ;; Update local state\n    (do-claim user epoch)\n\n    ;; Postconditions\n\n    (ok true)) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epochs\n(define-private\n  (distribute-epochs-step\n   (epoch uint)\n   (args  {user: principal, token: <ft-trait>}))\n\n  (let ((res_\n         (unwrap-panic\n          (distribute-epoch\n           (get user args)\n           (get token args)\n           epoch)) ))\n    args))\n\n(define-public\n  (distribute-epochs\n   (user   principal)\n   (token  <ft-trait>)\n   (epochs (list 10 uint))) ;;XXX: MAX-EPOCHS\n\n  (let ((args {user : user,\n               token: token})\n        (res_ (fold distribute-epochs-step epochs args))\n        (bal (unwrap-panic (contract-call? token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n      (is-eq (contract-of token) REWARD-TOKEN)\n      err-distribute-preconditions)\n\n    ;; Update local state\n    (sync bal)\n\n    ;; Return\n    (let ((event\n           {op    : \"distribute-epochs\",\n            user  : user,\n            epochs: epochs\n            }))\n      (print event)\n      (ok event) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; compute reward epoch list\n\n;; Returns epochs starting at `start-epoch' for which `user' has\n;; non-zero rewards.\n;; Pagination via GENESIS-EPOCH and `end-epoch'.\n(define-read-only\n  (get-reward\n   (user principal)\n   (epoch uint))\n\n  (let ((share   (try! (contract-call? .farming-wstx-roo-core get-share-at user epoch)))\n        (rev     (get-revenue-at epoch))\n        (calc    (calc-distribute share rev))\n        (claimed (default-to u0 (map-get? claims {user: user, epoch: epoch})))\n        (amt     (if (is-eq claimed u0) calc u0)))\n    (ok {share  : share,\n         rev    : rev,\n         calc   : calc,\n         claimed: claimed,\n         amt    : amt})))\n\n(define-read-only\n  (get-rewards-step\n   (epoch uint)\n   (state {user: principal,\n           acc : (list 10 ;;XXX: MAX-EPOCHS\n                       {epoch : uint,\n                        reward: uint}) }) )\n\n  (let ((reward (unwrap-panic\n                 (get-reward (get user state)\n                             epoch)))\n        (amt    (get amt reward)))\n\n    {user: (get user state),\n     acc : (if (> amt u0)\n               (unwrap-panic\n                (as-max-len?\n                 (append (get acc state) {epoch: epoch, reward: amt}) ;;FIXME: reward?\n                 u10))\n               (get acc state))\n     }))\n\n(define-read-only\n  (get-rewards\n   (user        principal)\n   (start-epoch uint))\n\n  (let ((end-epoch     (+ start-epoch MAX-EPOCHS)) ;;next\n        (epochs_       (mkepochs start-epoch))\n        (reward-epochs (fold get-rewards-step epochs_ {user: user, acc: (list)})))\n\n    {reward-epochs: (get acc reward-epochs),\n     end-epoch    : end-epoch} ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; epochs\n(define-constant OFFSETS (list u0 u1 u2 u3 u4 u5 u6 u7 u8 u9))\n(define-constant MAX-EPOCHS (len OFFSETS)) ;;10\n\n(define-private\n  (epochs-step\n   (i_    uint)\n   (state {epoch: uint, current: uint, acc: (list 10 uint)})) ;; XXX: MAX-EPOCHS\n  {epoch: (+ (get epoch state) u1),\n   current: (get current state),\n   acc  : (if (>= (get epoch state) (get current state))\n              (get acc state)\n              (unwrap-panic\n               (as-max-len?\n                (append (get acc state) (get epoch state))\n                u10)))\n   })\n\n(define-read-only (mkepochs (start-epoch uint))\n  (let ((current (contract-call? .farming-wstx-roo-core current-epoch))\n        (state0  {epoch: start-epoch, current: current, acc: (list)})\n        (state   (fold epochs-step OFFSETS state0)))\n    (get acc state)))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract is designed to receive and distribute reward tokens to users based on their participation in a farming operation.",
      "explanation": "The contract implements functionality to manage rewards distribution for a farming operation on the Stacks blockchain, using the SIP-010 standard for fungible tokens. It allows an operator to set and update the owner, synchronize token balances, receive tokens, and distribute rewards to users across different epochs. The contract ensures that only the owner can distribute rewards and that users can claim rewards for epochs in which they have participated without having already claimed. It uses a combination of maps and data variables to track ownership, token balances, revenue per epoch, and claims by users.\n\n- <L1-3> Import statements for using the SIP-010 fungible token trait and a custom trait for receiving farming rewards.\n- <L6-9> Error constants define error codes for various failure states.\n- <L12> A constant specifying the reward token's contract address.\n- <L15-24> Ownership management functions allow transferring contract ownership securely.\n- <L27-31> A map to track revenue (cumulative token rewards) per epoch.\n- <L34-38> Functions to manage the internal token balance state, ensuring synchronization with actual token balances.\n- <L41-67> The `receive` function allows the contract to accept reward tokens and update the revenue for the current epoch, enforcing several preconditions for security and correctness.\n- <L70-76> Claim management tracks which users have claimed rewards for which epochs, preventing double claiming.\n- <L79-95> Low-level API for distributing tokens to users, calculating distribution amounts based on user shares, and performing the actual token transfer.\n- <L98-129> Functions for distributing rewards for multiple epochs in a batch, including helper functions for iterating over epochs and generating lists of epochs for which rewards are available.\n- <L132-160> Utility functions for generating a list of epochs starting from a given epoch, used for paginating through rewards.",
      "tags": [
        "DeFi",
        "farming",
        "reward-distribution",
        "SIP-010",
        "fungible-token"
      ]
    }
  },
  {
    "rank": 115,
    "contract": "SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.bridge",
    "calls": 240,
    "source": ";; bridge contract\n\n;;(use-trait 'STX)\n(use-trait sip-010-token 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait ownable-trait .ownable-trait.ownable-trait)\n(use-trait bridge-token .bridge-token-trait.bridge-token-trait)\n\n;; Error codes\n(define-constant ERR-INTERNAL u500)\n\n(define-constant ERR-TOKEN-EXISTS u10000)\n(define-constant ERR-TOKEN-DOES-NOT-EXIST u10001)\n(define-constant ERR-NOT-ALLOWED u10002)\n(define-constant ERR-AMOUNT-IS-ZERO u10003)\n(define-constant ERR-AMOUNT-IS-TOO-SMALL u10004)\n(define-constant ERR-LOCK-ID-EXISTS u10006)\n(define-constant ERR-WRONG-VERSION u10007)\n(define-constant ERR-UNLOCK-EXISTS u10008)\n(define-constant ERR-WRONG-RECIPIENT u10009)\n(define-constant ERR-WRONG-DESTINATION u10010)\n(define-constant ERR-WRONG-LOCK-SOURCE u10011)\n(define-constant ERR-WRONG-SIGNATURE u10012)\n(define-constant ERR-WRONG-PUBLIC-KEY u10013)\n(define-constant ERR-NOT-STANDARD u10014)\n(define-constant ERR-WRONG-TOKEN-SOURCE u10015)\n(define-constant ERR-AMOUNT-IS-TOO-BIG u10016)\n(define-constant ERR-WRONG-PRECISION u10017)\n(define-constant ERR-WRONG-MIN-FEE u10018)\n(define-constant ERR-WRONG-TOKEN-TYPE u10019)\n(define-constant ERR-ASSET-DELETE-ERROR u10020)\n(define-constant ERR-ASSET-SOURCE-DELETE-ERROR u10021)\n(define-constant ERR-WRONG-SIGNATURE-LENGTH u10022)\n(define-constant ERR-TRANSFER-OWNERSHIP-FAILED u10023)\n(define-constant ERR-WRONG-OWNER u10024)\n(define-constant ERR-TRANSFER-FEE-FAILED u10025)\n(define-constant ERR-BRIDGE-IS-DISABLED u777)\n(define-constant ERR-LOCK-EXISTS u20000)\n(define-constant ERR-SAME-CHAIN u20001)\n(define-constant ERR-LOCK-NOT-CREATED u20002)\n(define-constant ERR-WRONG-LOCK-ID u20003)\n(define-constant ERR-WRONG-UNLOCK-ID u20004)\n\n;; Supported token types\n(define-constant TOKEN-TYPE-BASE u100)\n(define-constant TOKEN-TYPE-NATIVE u200)\n(define-constant TOKEN-TYPE-WRAPPED u300)\n\n;; Encoded chain id\n(define-constant THIS-CHAIN 0x53544b5a) ;; \"STKZ\"\n;; Token system precision\n(define-constant SYSTEM-PRECISION u9)\n\n(define-constant UNLOCK 0x756E6C6F636B) ;; \"unlock\"\n(define-constant VERSION 0x01) ;; Version constant\n\n(define-constant BP u10000) ;; 10 bp = 0.1 %\n(define-constant ENV-VERSION (if (is-standard 'STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6) 0x1a 0x1b)) ;; 0x1a - testnet, 0x1b - mainnet\n\n(define-data-var base-fee-rate-bp uint u10)\n(define-data-var validator-public-key (buff 33) 0x00)\n;; Fee collector principal\n(define-data-var fee-collector principal contract-caller)\n;; Bridge owner principal\n(define-data-var contract-owner principal contract-caller)\n;; BIG RED BUTTON\n(define-data-var is-bridge-enabled bool true)\n\n;; locks map\n(define-map locks\n  {lock-id: (buff 16)}\n  {\n    sender: principal,\n    recipient: (buff 32),\n    amount: uint,\n    destination: (buff 4),\n    token-source: (buff 36)\n  }\n)\n;; unlocks map\n(define-map unlocks\n  {chain-lock-id: (buff 20)}\n  {value: bool}\n)\n\n;; supported assets map\n(define-map assets\n  {address: principal}\n  {\n    token-source: (buff 36),\n    precision: uint,\n    token-type: uint,\n    min-fee: uint\n  }\n)\n\n;; asset source map\n(define-map asset-source-map\n  {\n    token-source: (buff 36),\n  }\n  {address: principal}\n)\n\n;; Add token to the bridge\n(define-public \n  (add-token (token-source (buff 36)) (token <bridge-token>) (type uint) (min-fee uint))\n  (begin\n    (let (\n        (token-address (contract-of token))\n        (precision (try! (contract-call? token get-decimals)))\n      )\n      (try! (assert-valid-token-input token-source token-address precision type min-fee))\n      (if (or (is-eq type TOKEN-TYPE-WRAPPED)\n              (is-eq type TOKEN-TYPE-BASE))\n        (asserts! (is-eq (try! (contract-call? token get-contract-owner)) .bridge) (err ERR-WRONG-OWNER))\n        (asserts! (is-eq type TOKEN-TYPE-NATIVE) (err ERR-WRONG-TOKEN-TYPE))\n      )\n      (ok (try! (save-token token-source token-address precision min-fee type)))\n    )\n  )\n)\n\n;; Remove token from the bridge\n(define-public \n  (remove-token (token-source (buff 36)) (token <bridge-token>) (new-owner principal))\n  (begin\n    (let (\n        (token-address (contract-of token))\n        (token-info (unwrap! (map-get? assets {address: token-address}) (err ERR-TOKEN-DOES-NOT-EXIST)))\n        (token-type (get token-type token-info)))  \n      ;; Check if owwner is calling the function\n      (try! (assert-owner))\n      ;; Check if token  principal is correct\n      (try! (assert-principal token-address))\n      ;; Check if owner principal is correct\n      (asserts! (is-standard new-owner) (err ERR-NOT-STANDARD))\n      ;; Check if token is correct\n      (try! (assert-token-exists-in-asset-source-map token-source))\n      (try! (assert-token-exists-in-assets-map token-address))\n      ;; Check if token type is correct\n\n      (if (or (is-eq token-type TOKEN-TYPE-NATIVE) (is-eq token-type TOKEN-TYPE-BASE))\n          ;; Transfer all tokens to the new owner\n          (asserts! (or (is-eq (try! (contract-call? token get-balance .bridge)) u0)\n            (try! (as-contract (safe-transfer! token .bridge new-owner (try! (contract-call? token get-balance .bridge))))))\n            (err ERR-TRANSFER-OWNERSHIP-FAILED))\n          ;; Transfer ownership to the new owner\n          (try! (assert-token-type token-type))\n      )\n      (if (or (is-eq token-type TOKEN-TYPE-WRAPPED) (is-eq token-type TOKEN-TYPE-BASE))\n          ;; Transfer ownership to the new owner\n          (asserts! (try! (as-contract (contract-call? token set-contract-owner new-owner)))\n            (err ERR-TRANSFER-OWNERSHIP-FAILED))\n          (try! (assert-token-type token-type))\n      )\n      ;; Remove token from the bridge\n      (ok (try! (clean-assets-maps token-source token-address)))\n    )\n  )\n)\n\n;; Bridge lock method \n(define-public\n  (lock\n    (lock-id (buff 16))\n    (trait-address <sip-010-token>)\n    (amount uint)\n    (recipient (buff 32))\n    (destination (buff 4))\n  )\n  (begin\n    ;; Check if input is valid\n    (try! (assert-lock-input lock-id (contract-of trait-address) amount recipient destination))   \n    (let \n      ((token-info (unwrap! (map-get? assets {address: (contract-of trait-address)}) (err ERR-TOKEN-DOES-NOT-EXIST)))\n        (fee (calculate-fee amount (get min-fee token-info)))\n        (token-type (get token-type token-info))\n        (token-source (get token-source token-info))\n        (precision (get precision token-info))\n        (amount-to-lock (- amount fee))\n        (sender contract-caller)\n      )\n      ;; check if token is supported\n      (try! (assert-token-type token-type))\n      (try! (create-lock lock-id token-source precision amount-to-lock recipient destination))\n      ;; transfer fee to the fee collector\n      (asserts! (try! (safe-transfer! trait-address sender (var-get fee-collector) fee)) (err ERR-TRANSFER-FEE-FAILED))\n      ;; transfer tokens to the bridge\n      (ok (try! (safe-transfer! trait-address sender .bridge amount-to-lock)))\n    )    \n  )\n)\n\n;; Bridge unlock method\n(define-public\n  (unlock\n    (lock-id (buff 16))\n    (recipient-principal principal)\n    (system-amount uint)\n    (lock-source (buff 4))\n    (token <sip-010-token>)\n    (signature (buff 65))\n  )\n  (begin\n    ;; Check if input is valid\n    (try! (assert-unlock-input lock-id recipient-principal system-amount lock-source (contract-of token) signature))\n    (let (\n        (token-info (unwrap! (map-get? assets {address: (contract-of token)}) (err ERR-TOKEN-DOES-NOT-EXIST)))\n        (amount (from-system-precision system-amount (get precision token-info)))\n        (token-type (get token-type token-info))\n        (token-source (get token-source token-info))\n        (precision (get precision token-info))\n        (recipient (get hash-bytes (unwrap-panic (principal-destruct? recipient-principal))))\n        (unlock-created (try! (create-unlock lock-id recipient system-amount lock-source token-source signature)))\n      )\n      ;; check if token is supported\n      (try! (assert-token-type token-type))\n      ;; create unlock\n      (asserts! unlock-created (err ERR-INTERNAL))\n      ;; transfer tokens to the recipient\n      (ok (try! (as-contract (safe-transfer! token .bridge recipient-principal amount))))\n    ) \n  )\n)\n\n;; Create lock\n(define-private \n  (create-lock \n    (lock-id (buff 16))\n    (token-source (buff 36))\n    (precision uint)\n    (amount-to-lock uint)\n    (recipient (buff 32))\n    (destination (buff 4))\n  ) \n  (begin\n    ;; check if destination is valid\n    (asserts! (not (is-eq destination THIS-CHAIN)) (err ERR-SAME-CHAIN))\n    ;; Lock-id should not exist, if it does, that means the lock is already created\n    (asserts! (is-none (map-get? locks {lock-id: lock-id})) (err ERR-LOCK-ID-EXISTS))\n    ;; create lock\n    (asserts! (map-set locks\n        {lock-id: lock-id}\n        {\n          sender: contract-caller,\n          recipient: recipient,\n          amount: (to-system-precision amount-to-lock precision),\n          destination: destination,\n          token-source: token-source\n        }\n      ) (err ERR-INTERNAL))\n    (ok true)\n  )\n)\n\n;; Create unlock\n(define-private \n  (create-unlock\n    (lock-id (buff 16))\n    (recipient (buff 20))\n    (system-amount uint)\n    (lock-source (buff 4))\n    (token-source (buff 36))\n    (signature (buff 65))\n  )\n  (begin\n    (let ((chain-lock-id (concat lock-source lock-id)))\n      ;; Check that this is not the same chain as the lock source\n      (asserts! (not (is-eq lock-source THIS-CHAIN)) (err ERR-SAME-CHAIN))\n      ;; Unlock should not already exist, if it does, that means the unlock is already created\n      (asserts! (is-none (map-get? unlocks {chain-lock-id: chain-lock-id})) (err ERR-UNLOCK-EXISTS))\n      ;; Check that message was signed by the validator\n      (asserts! (secp256k1-verify \n          ;; Hash of lock-id, recipient, system-amount, lock-source, token-source and unlock\n          (keccak256 \n            (concat lock-id \n              (concat recipient \n              (concat (unwrap-panic (to-consensus-buff? system-amount))\n              (concat lock-source \n              (concat token-source UNLOCK))))\n            )\n          )\n          signature\n          (var-get validator-public-key))\n          (err ERR-WRONG-SIGNATURE))\n      ;; create unlock\n      (ok (map-set unlocks \n        {chain-lock-id: chain-lock-id}\n        {value: true}\n      ))\n    )\n  )\n)\n\n;; Calculate fee based on the amount and the base fee rate\n(define-private \n  (calculate-fee (amount uint) (min-fee uint))\n  (begin\n    (let \n      ((fee (/ (* amount (var-get base-fee-rate-bp)) BP)))\n      (if (< fee min-fee) min-fee fee)\n    )\n  )\n)\n\n;; Method to transfer tokens using the trait\n(define-private \n  (safe-transfer! \n    (token <sip-010-token>) \n    (sender principal) \n    (recipient principal) \n    (amount uint)\n  )\n  (ok (try! (contract-call? token transfer amount sender recipient none)))\n)\n\n;; Method returns token principal on Stacks by the token source\n(define-read-only \n  (get-token-by-source\n    (token-source (buff 36))\n  )\n  (match \n      (map-get? asset-source-map {token-source: token-source})\n      value (ok value)\n      (err ERR-TOKEN-DOES-NOT-EXIST))\n)\n\n;; Method returns token config by the token address\n(define-read-only \n  (get-token-native (native-address principal))\n  (match \n      (map-get? assets {address: native-address})\n      value (ok value)\n      (err ERR-TOKEN-DOES-NOT-EXIST))\n)\n\n;; Convert amount to system precision\n(define-read-only \n  (to-system-precision\n    (amount uint)\n    (precision uint)\n  )\n  (begin\n    (if (> precision SYSTEM-PRECISION) \n      (/ amount (pow u10 (- precision SYSTEM-PRECISION)))\n      (if (< precision SYSTEM-PRECISION)\n          (* amount (pow u10 (- SYSTEM-PRECISION precision)))\n          amount\n      )\n    )\n  )\n)\n\n;; Convert amount from system precision\n(define-read-only \n  (from-system-precision \n    (amount uint)\n    (precision uint)\n  )\n  (begin \n    (if (> precision SYSTEM-PRECISION) \n        (* amount (pow u10 (- precision SYSTEM-PRECISION)))\n      (if (< precision SYSTEM-PRECISION)\n        (/ amount (pow u10 (- SYSTEM-PRECISION precision)))\n        amount\n      )\n    )\n  )\n)\n\n;; Returns owner principal\n(define-read-only \n\t(get-contract-owner)\n  (ok (var-get contract-owner))\n)\n\n;; Set owner principal\n(define-public \n\t(set-contract-owner \n    (owner principal)\n  )\n\t(begin\n\t\t(try! (assert-owner))\n    (asserts! (is-standard owner) (err ERR-NOT-ALLOWED))\n\t\t(ok (var-set contract-owner owner))\n\t)\n)\n\n;; Returns base fee rate in basis points\n(define-read-only \n\t(get-base-fee-rate-bp)\n  (ok (var-get base-fee-rate-bp))\n)\n\n;; Set base fee rate in basis points\n(define-public \n\t(set-base-fee-rate-bp \n    (value uint)\n  )\n\t(begin\n\t\t(try! (assert-owner))\n    (asserts! (> value u0) (err ERR-AMOUNT-IS-ZERO))\n    (asserts! (>= BP value) (err ERR-AMOUNT-IS-TOO-BIG))\n\t\t(ok (var-set base-fee-rate-bp value))\n\t)\n)\n\n;; Returns fee collector principal\n(define-read-only \n\t(get-fee-collector)\n  (ok (var-get fee-collector))\n)\n\n;; Set fee collector principal\n(define-public \n\t(set-fee-collector \n    (collector principal)\n  )\n\t(begin\n\t\t(try! (assert-owner))\n    (asserts! (is-standard collector) (err ERR-NOT-ALLOWED))\n\t\t(ok (var-set fee-collector collector))\n\t)\n)\n\n;; Returns validator public key\n(define-read-only \n\t(get-validator-public-key)\n  (ok (var-get validator-public-key))\n)\n\n;; Set validator public key\n(define-public \n\t(set-validator-public-key \n    (public-key (buff 33))\n  )\n\t(begin\n\t\t(try! (assert-owner))\n\t\t(try! (assert-public-key-length public-key))\n\t\t(ok (var-set validator-public-key public-key))\n\t)\n)\n\n;; Returns is bridge enabled state\n(define-read-only \n\t(get-is-bridge-enabled)\n  (ok (var-get is-bridge-enabled))\n)\n\n;; Change is bridge enabled state\n(define-public \n\t(set-is-bridge-enabled \n    (enabled bool)\n  )\n\t(begin\n\t\t(try! (assert-owner))\n\t\t(ok (var-set is-bridge-enabled enabled))\n\t)\n)\n\n;; Set token min fee\n(define-public \n  (set-token-min-fee (native-address principal) (fee uint)) \n  (begin \n    (try! (assert-owner))\n    (try! (assert-principal native-address))\n    (try! (assert-min-fee fee))\n    (let ((asset (unwrap! (map-get? assets { address: native-address }) (err ERR-TOKEN-DOES-NOT-EXIST))))\n      (ok (map-set assets { address: native-address} (merge asset { min-fee: fee })))\n    )\n  )\n)\n\n;; Method returns lock data by the lock-id\n(define-read-only \n  (get-lock (lock-id (buff 16)))\n  (match \n      (map-get? locks {lock-id: lock-id})\n      value (ok value)\n      (err ERR-WRONG-LOCK-ID))\n)\n\n;; Method returns is lock claimed with the given lock-id\n(define-read-only \n  (is-claimed (lock-id (buff 20)))\n  (begin \n    (match \n      (map-get? unlocks {chain-lock-id: lock-id})\n      value (ok value)\n      (err ERR-WRONG-UNLOCK-ID))\n  )\n)\n\n;; Add new token to the bridge asset and asset-source maps\n(define-private \n  (save-token\n    (token-source (buff 36))\n    (token principal)\n    (precision uint)\n    (min-fee uint)\n    (token-type uint)\n  ) \n  (begin  \n    (asserts! (map-set assets\n      {address: token}\n      {\n        token-source: token-source,\n        precision: precision,\n        token-type: token-type,\n        min-fee: min-fee\n      }\n    ) (err ERR-INTERNAL))\n    (asserts! (map-set asset-source-map \n      {token-source: token-source}\n      {address: token}\n    ) (err ERR-INTERNAL))\n    (ok true)\n  )\n)\n\n;; Remove token from the bridge asset and asset-source maps\n(define-private \n  (clean-assets-maps\n    (token-source (buff 36))\n    (token-address principal)\n  ) \n  (begin \n    (asserts! (map-delete assets {address: token-address}) (err ERR-ASSET-DELETE-ERROR))\n    (asserts! (map-delete asset-source-map {token-source: token-source}) (err ERR-ASSET-SOURCE-DELETE-ERROR))\n    (ok true)\n  )\n)\n\n;; Validate that caller has enough permission to call the function\n(define-private \n  (is-valid-owner)\n  (is-eq contract-caller (var-get contract-owner))\n)\n\n;; Ensure contract-caller is allowed to call the function\n(define-private \n  (assert-owner)\n  (ok (asserts! (is-valid-owner) (err ERR-NOT-ALLOWED)))\n)\n\n;; Ensure that principal is valid\n(define-private \n  (assert-principal\n    (address principal)\n  )\n  (ok (asserts! (is-standard address) (err ERR-NOT-STANDARD)))\n)\n\n;; Ensure that token type is valid\n(define-private \n  (assert-token-type\n    (token-type uint)\n  )\n  (ok (asserts! \n    (or (is-eq token-type TOKEN-TYPE-BASE) \n        (is-eq token-type TOKEN-TYPE-NATIVE)\n        (is-eq token-type TOKEN-TYPE-WRAPPED)\n    ) (err ERR-WRONG-TOKEN-TYPE)))\n)\n\n;; Ensure that token source has valid length\n(define-private \n  (assert-token-source-length \n    (source (buff 36))\n  )\n  (ok (asserts! (is-eq (len source) u36) (err ERR-WRONG-TOKEN-SOURCE)))\n)\n\n;; Ensure that public key has valid length\n(define-private \n  (assert-public-key-length \n    (public-key (buff 33))\n  )\n  (ok (asserts! (is-eq (len public-key) u33) (err ERR-WRONG-PUBLIC-KEY)))\n)\n\n;; Ensure that token precision is valid\n(define-private \n  (assert-precision \n    (precision uint)\n  )\n  (ok (asserts! (> precision u0) (err ERR-WRONG-PRECISION)))\n)\n\n;; Ensure that token min fee is valid\n(define-private \n  (assert-min-fee \n    (min-fee uint)\n  )\n  (ok (asserts! (> min-fee u0) (err ERR-WRONG-MIN-FEE)))\n)\n\n;; Ensure token-source is not registered in the bridge\n(define-private \n  (assert-token-not-exists-in-asset-source-map \n    (token-source (buff 36))\n  )\n  (ok (asserts! \n      (is-none (map-get? asset-source-map {token-source: token-source}))\n      (err ERR-TOKEN-EXISTS))\n  )\n)\n\n;; Ensure token-source is registered in the bridge\n(define-private \n  (assert-token-exists-in-asset-source-map \n    (token-source (buff 36))\n  )\n  (ok (asserts! \n        (is-some (map-get? asset-source-map {token-source: token-source}))\n        (err ERR-TOKEN-DOES-NOT-EXIST))\n  )\n)\n\n;; Ensure token principal is not registered in the bridge\n(define-private \n  (assert-token-not-exists-in-assets-map \n    (token principal)\n  )\n  (ok (asserts! \n      (is-none (map-get? assets {address: token}))\n      (err ERR-TOKEN-EXISTS)\n    )\n  )\n)\n\n;; Ensure token principal is registered in the bridge\n(define-private \n  (assert-token-exists-in-assets-map \n    (token principal)\n  )\n  (ok (asserts! \n      (is-some (map-get? assets {address: token}))\n      (err ERR-TOKEN-DOES-NOT-EXIST)\n    )\n  )\n)\n\n;; Ensure add-token input is valid\n(define-private \n  (assert-valid-token-input \n    (token-source (buff 36))\n    (token principal)\n    (precision uint)\n    (type uint)\n    (min-fee uint)\n  )\n  (begin \n    (try! (assert-owner))\n    (try! (assert-principal token))\n    (try! (assert-token-source-length token-source))\n    (try! (assert-precision precision))\n    (try! (assert-min-fee min-fee))\n    (try! (assert-token-type type))\n    (try! (assert-token-not-exists-in-asset-source-map token-source))\n    (try! (assert-token-not-exists-in-assets-map token))\n    (ok true)\n  )\n)\n\n;; Ensure lock input is valid\n(define-private \n  (assert-lock-input\n    (lock-id (buff 16))\n    (token-address principal)\n    (amount uint)\n    (recipient (buff 32))\n    (destination (buff 4))\n  ) \n  (begin \n    (asserts! (var-get is-bridge-enabled) (err ERR-BRIDGE-IS-DISABLED))\n    (asserts! (is-eq (len lock-id) u16) (err ERR-WRONG-LOCK-ID))\n    (asserts! (is-eq VERSION (unwrap! (element-at lock-id u0) (err ERR-INTERNAL))) (err ERR-WRONG-VERSION))\n    (try! (assert-principal token-address))\n    (asserts! (is-eq (len recipient) u32) (err ERR-WRONG-RECIPIENT))\n    (asserts! (is-eq (len destination) u4) (err ERR-WRONG-DESTINATION))\n    (asserts! (> amount u0) (err ERR-AMOUNT-IS-ZERO))\n    (try! (assert-token-exists-in-assets-map token-address))\n    (ok true)\n  )\n)\n\n;; Ensure unlock input is valid\n(define-private \n  (assert-unlock-input\n    (lock-id (buff 16))\n    (recipient principal)\n    (system-amount uint)\n    (lock-source (buff 4))\n    (token principal)\n    (signature (buff 65))\n  ) \n  (begin\n    (asserts! (var-get is-bridge-enabled) (err ERR-BRIDGE-IS-DISABLED))\n    (asserts! (is-eq VERSION (unwrap! (element-at lock-id u0) (err ERR-INTERNAL))) (err ERR-WRONG-VERSION))\n    (asserts! (is-standard recipient) (err ERR-WRONG-RECIPIENT))\n    (asserts! (> system-amount u0) (err ERR-AMOUNT-IS-ZERO))\n    (asserts! (is-eq (len lock-source) u4) (err ERR-WRONG-LOCK-SOURCE))\n    (try! (assert-principal token))\n    (asserts! (or (is-eq (len signature) u65) (is-eq (len signature) u64)) (err ERR-WRONG-SIGNATURE-LENGTH))\n    (ok true)\n  )\n)\n\n(set-fee-collector 'SP3A8FDNDJK7N75AD8C49Y0B92TR47W3F6TMF9MV8)\n(set-validator-public-key 0x02acd399d678d76d85cfc055e3b93ced1e883ed021de54c5707155f29b9f67933f)",
    "analysis": {
      "summary": "This contract serves as a bridge for token transfers across different blockchains, allowing tokens to be locked on the Stacks blockchain and unlocked on another chain.",
      "explanation": "The contract defines a bridge mechanism that enables tokens to be transferred between the Stacks blockchain and other blockchains. It uses a combination of locking and unlocking mechanisms, where tokens are locked in the contract on one chain and then unlocked on another chain. The contract supports different token types, including native, base, and wrapped tokens, and incorporates features like ownership, fee collection, and token management. Key functionalities include adding/removing tokens to/from the bridge, locking tokens for cross-chain transfers, and unlocking tokens on the destination chain. The contract utilizes SIP-010 for fungible token standards, ensuring compatibility with Stacks' token protocols. Error codes and constants are defined for various states and actions within the contract, facilitating error handling and parameter definitions. The contract also includes security features like ownership verification and function call permissions to safeguard against unauthorized access and actions.",
      "tags": [
        "bridge",
        "token-transfer",
        "cross-chain",
        "SIP-010",
        "fungible-token",
        "ownership",
        "fee-management"
      ]
    }
  },
  {
    "rank": 116,
    "contract": "SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dungeon-crawler-v0",
    "calls": 239,
    "source": ";; Dungeon Crawler Contract\n;;\n;; This contract serves as the primary interface for user interactions within the Charisma protocol.\n;; It acts as a central hub for executing actions across various interaction contracts, enabling\n;; users to engage with multiple protocol components in a single transaction.\n;;\n;; Key Responsibilities:\n;; 1. Action Execution: Coordinates the execution of actions on interaction contracts.\n;; 2. Multi-Interaction Support: Allows users to execute up to eight different interactions in one transaction.\n;; 3. Error Handling: Implements a \"best-effort\" approach, attempting all interactions even if some fail.\n;;\n;; Core Components:\n;; - Interaction Execution: Provides functions to execute single or multiple interactions.\n;; - Error Clobbering: Continues execution of subsequent interactions even if earlier ones fail.\n;;\n;; Integration with Charisma Ecosystem:\n;; - Interaction Contracts: Executes actions on various protocol components through standardized interfaces.\n;; - Dungeon Keeper: Relies on for interaction verification and privileged operations (indirectly through interactions).\n;; - Token Contracts: Interacts with Experience, Energy, DMG, and Charisma token contracts indirectly through verified interactions.\n;;\n;; Key Functions:\n;; - interact: Executes a single interaction with the specified action.\n;; - explore: Executes up to eight different interactions in a single transaction.\n;;\n;; Security Features:\n;; - Interaction Isolation: Each interaction is executed independently, preventing cascading failures.\n;; - Non-Privileged Execution: The Dungeon Crawler itself does not perform sensitive operations, relying on properly verified interaction contracts.\n;;\n;; Error Handling Philosophy:\n;; The Dungeon Crawler implements a \"best-effort\" approach to interaction execution:\n;; - In single interactions, errors are propagated to the caller for handling.\n;; - In multi-interaction calls, the contract attempts to execute all provided interactions, regardless of individual failures.\n;; - This approach ensures maximum utility from each transaction while isolating failures.\n;;\n;; This contract is crucial for enabling flexible and robust user engagement with the Charisma protocol.\n;; It provides a streamlined interface for executing complex sequences of interactions while maintaining\n;; system integrity. The architecture supports the protocol's innovative approach to multi-faceted\n;; blockchain interactions, allowing for complex operations to be performed in a single transaction.\n\n(use-trait rulebook-trait .charisma-traits-v1.rulebook-trait)\n(use-trait interaction-trait .charisma-traits-v1.interaction-trait)\n\n(define-public (interact (rulebook <rulebook-trait>) (interaction <interaction-trait>) (action (string-ascii 32)))\n  (contract-call? interaction execute rulebook action))\n\n(define-public (explore\n  (rulebook <rulebook-trait>)\n  (interaction-1 (optional <interaction-trait>)) (action-1 (optional (string-ascii 32)))\n  (interaction-2 (optional <interaction-trait>)) (action-2 (optional (string-ascii 32)))\n  (interaction-3 (optional <interaction-trait>)) (action-3 (optional (string-ascii 32)))\n  (interaction-4 (optional <interaction-trait>)) (action-4 (optional (string-ascii 32)))\n  (interaction-5 (optional <interaction-trait>)) (action-5 (optional (string-ascii 32)))\n  (interaction-6 (optional <interaction-trait>)) (action-6 (optional (string-ascii 32)))\n  (interaction-7 (optional <interaction-trait>)) (action-7 (optional (string-ascii 32)))\n  (interaction-8 (optional <interaction-trait>)) (action-8 (optional (string-ascii 32))))\n  (let (\n    (response-1 (match interaction-1 i1 (match (interact rulebook i1 (match action-1 a1 a1 \"\")) success success error error) \"\"))\n    (response-2 (match interaction-2 i2 (match (interact rulebook i2 (match action-2 a2 a2 \"\")) success success error error) \"\"))\n    (response-3 (match interaction-3 i3 (match (interact rulebook i3 (match action-3 a3 a3 \"\")) success success error error) \"\"))\n    (response-4 (match interaction-4 i4 (match (interact rulebook i4 (match action-4 a4 a4 \"\")) success success error error) \"\"))\n    (response-5 (match interaction-5 i5 (match (interact rulebook i5 (match action-5 a5 a5 \"\")) success success error error) \"\"))\n    (response-6 (match interaction-6 i6 (match (interact rulebook i6 (match action-6 a6 a6 \"\")) success success error error) \"\"))\n    (response-7 (match interaction-7 i7 (match (interact rulebook i7 (match action-7 a7 a7 \"\")) success success error error) \"\"))\n    (response-8 (match interaction-8 i8 (match (interact rulebook i8 (match action-8 a8 a8 \"\")) success success error error) \"\"))\n    (output {\n      i1: {x: (match interaction-1 i1 (as-contract i1) .none), y: (match action-1 a1 a1 \"\"), z: response-1},\n      i2: {x: (match interaction-2 i2 (as-contract i2) .none), y: (match action-2 a2 a2 \"\"), z: response-2},\n      i3: {x: (match interaction-3 i3 (as-contract i3) .none), y: (match action-3 a3 a3 \"\"), z: response-3},\n      i4: {x: (match interaction-4 i4 (as-contract i4) .none), y: (match action-4 a4 a4 \"\"), z: response-4},\n      i5: {x: (match interaction-5 i5 (as-contract i5) .none), y: (match action-5 a5 a5 \"\"), z: response-5},\n      i6: {x: (match interaction-6 i6 (as-contract i6) .none), y: (match action-6 a6 a6 \"\"), z: response-6},\n      i7: {x: (match interaction-7 i7 (as-contract i7) .none), y: (match action-7 a7 a7 \"\"), z: response-7},\n      i8: {x: (match interaction-8 i8 (as-contract i8) .none), y: (match action-8 a8 a8 \"\"), z: response-8},\n    }))\n    (print output)\n    (ok output)))",
    "analysis": {
      "summary": "The contract facilitates complex user interactions within the Charisma protocol by executing single or multiple actions across various interaction contracts in one transaction.",
      "explanation": "This Clarity smart contract, named Dungeon Crawler, is designed to serve as a central hub for user interactions within the Charisma protocol, allowing execution of actions across different components of the protocol in a single transaction. It supports executing up to eight different interactions, employing a 'best-effort' error handling strategy to maximize transaction utility while isolating failures.\n\n- The contract uses two traits, `rulebook-trait` and `interaction-trait`, from the `.charisma-traits-v1` namespace to ensure that the interactions comply with the protocol's standards (<L1-2>).\n\n- The `interact` function (<L4>) allows executing a single action by calling the `execute` method on an interaction contract, passing a rulebook and an action as arguments. This is the basic unit of interaction within the protocol.\n\n- The `explore` function (<L6-29>) is more complex, allowing up to eight different interactions to be executed in one transaction. It uses the `optional` type for interaction contracts and actions, enabling users to specify fewer than eight interactions. The function processes each interaction independently, using the `match` construct to handle optional values and execute the `interact` function conditionally. This design ensures that the execution of subsequent interactions is not affected by the failure of previous ones, embodying the 'best-effort' error handling philosophy.\n\n- The `explore` function constructs a response object for each interaction, capturing the contract address (if available), the action, and the interaction result. This response is printed and returned as the function's output, providing detailed feedback on the execution of each interaction (<L31-40>).\n\n- The contract emphasizes security through interaction isolation and non-privileged execution, ensuring that even if an interaction fails, it does not compromise the entire transaction or the system's integrity.\n\nOverall, the Dungeon Crawler contract is a critical component of the Charisma protocol, enabling flexible, efficient, and robust user engagement by facilitating complex operations in a single transaction.",
      "tags": [
        "protocol",
        "multi-interaction",
        "error-handling",
        "user-engagement"
      ]
    }
  },
  {
    "rank": 117,
    "contract": "SP3J9CZ0HNRZX7S5YBAFPT3SJ4KP1PBSRVP3TQAT7.balls-stxcity-dex",
    "calls": 237,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant ERR-SELF-LISTING-FAIL (err u1005))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u1000000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP3J9CZ0HNRZX7S5YBAFPT3SJ4KP1PBSRVP3TQAT7.balls-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n            (xyk-pool-uri (default-to u\"https://bitflow.finance\" (try! (contract-call? token-trait get-token-uri)) ))\n            (xyk-burn-amount (- (sqrti (* remain-stx remain-tokens)) u1))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; Call XYK Core v-1-2 pool by Bitflow\n            (try! (as-contract (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 create-pool 'SP3J9CZ0HNRZX7S5YBAFPT3SJ4KP1PBSRVP3TQAT7.xyk-pool-stx-balls-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-2 token-trait remain-stx remain-tokens xyk-burn-amount u10 u40 u10 u40 'SP31C60QVZKZ9CMMZX73TQ3F3ZZNS89YX2DCCFT8P xyk-pool-uri true)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n(var-set token-balance u952380952380952)\n(var-set stx-balance u20000000)\n\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX, with features like automatic liquidity pool creation and token burning.",
      "explanation": "This Clarity smart contract facilitates token trading on the Stacks blockchain using a bonding curve, a mathematical curve that determines the price of a token based on its supply. The contract allows users to buy or sell tokens in exchange for STX, Stacks' native cryptocurrency. Key features include a mechanism to automatically send tokens and STX to specific addresses upon reaching a target STX amount, and a set of error constants for handling various failure modes. The contract uses the SIP-010 trait for fungible tokens to ensure compatibility with the Stacks token standard.\n\n- The contract starts by declaring the use of the SIP-010 trait for fungible tokens <L1>.\n- Error constants are defined for various error states <L3-11>.\n- Constants for the token supply, DEX address, bonding curve configuration, fee, and wallet addresses are set <L13-23>.\n- The contract initializes several state variables including whether trading is allowed, virtual STX amount, token balance, STX balance, burn percent, and deployer percent <L25-32>.\n- The `buy` function allows users to purchase tokens with STX, calculating fees, and adjusting balances accordingly. It also handles the scenario where the STX target amount is reached, triggering token burning, fee distribution, and pool creation <L34-83>.\n- The `sell` function enables users to sell tokens back to the DEX in exchange for STX, with fees deducted and balances updated <L85-115>.\n- `get-buyable-tokens` and `get-sellable-stx` are read-only functions that estimate the number of tokens one can buy with a certain amount of STX and vice versa, based on the current state of the contract <L117-148, L150-178>.\n- `get-tradable` is a simple read-only function that returns whether trading is currently allowed <L180-182>.\n- The contract initialization sets up initial values for key variables and makes a STX transfer to a specified address <L184-191>.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "protocol",
        "token-trading",
        "Clarity"
      ]
    }
  },
  {
    "rank": 118,
    "contract": "SP17Z9QG1VZCZT01FYZD5KGVNMZVAXB0W536YMA7C.annoying-delusional-assholes-stxcity-dex",
    "calls": 237,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u100000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP17Z9QG1VZCZT01FYZD5KGVNMZVAXB0W536YMA7C.annoying-delusional-assholes-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u96680631646793)\n    (var-set stx-balance u13733333)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX.",
      "explanation": "The contract allows users to buy and sell a predefined token in exchange for STX, the native cryptocurrency of the Stacks blockchain, based on a bonding curve mechanism. The contract is initialized with specific parameters, including the target STX amount, virtual STX value, and fees. Trading can be enabled or disabled, and the contract handles the distribution of fees, burning of tokens, and transfer of tokens and STX between users and predefined wallets upon successful trades. The contract uses the SIP-010 trait for token operations and does not grant any special privileges to the deployer post-deployment.\n\n- The contract uses the SIP-010 trait for interacting with the token (<L1>).\n- Error constants define various error states (<L4-11>).\n- Constants define the token supply, DEX address, bonding curve configuration, fee, and wallet addresses (<L13-27>).\n- Data variables track whether trading is enabled, balances, and percentages for burning and deployer fees (<L29-34>).\n- The `buy` function (<L36-92>) allows users to purchase tokens with STX, calculating the amount of tokens they receive based on the current state of the bonding curve, transferring fees to specified wallets, and updating balances. It also checks if the target STX amount is reached to distribute tokens and STX accordingly, including burning a percentage of tokens.\n- The `sell` function (<L93-130>) enables users to sell tokens back to the DEX in exchange for STX, with fees and balance updates handled similarly to the buy function.\n- The `get-buyable-tokens` (<L131-157>) and `get-sellable-stx` (<L158-184>) read-only functions provide estimates for trades without executing them.\n- The contract initialization (<L185-193>) sets initial values for key variables and performs an initial STX transfer.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "trading",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 119,
    "contract": "SP2BQ0676YV3F7QBJXS1PT7XA975ZG03XEXS9C8TN.stacksai-stxcity-dex",
    "calls": 234,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u42000042000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u5000000000)\n(define-constant VIRTUAL_STX_VALUE u1000000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u100000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP2BQ0676YV3F7QBJXS1PT7XA975ZG03XEXS9C8TN.stacksai-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u39375039375000)\n    (var-set stx-balance u66666667)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for token trading, with features for buying and selling tokens, and automatic adjustments based on supply and demand.",
      "explanation": "The contract leverages the SIP-010 trait for fungible tokens to facilitate the trading of a specific token against STX (the native cryptocurrency of the Stacks blockchain). It uses a bonding curve to determine prices, aiming to provide liquidity and price discovery for the token in an automated manner. Key components include error constants for handling various failure modes, configuration constants for the bonding curve and fees, and public functions for buying and selling tokens.\n\n- The contract initializes with predefined constants for the token supply, DEX address, STX target amount, virtual STX value, and various wallets for fees and liquidity (<L7-23>).\n- Tradable status, virtual STX amount, token balance, and STX balance are managed through data variables, allowing the contract to track its current state (<L25-30>).\n- The `buy` function (<L32-77>) allows users to purchase tokens with STX at the current bonding curve price, updating balances and fees accordingly. It includes mechanisms to transfer fees to a specified wallet and tokens to the buyer's address.\n- The `sell` function (<L78-115>) enables users to sell tokens back to the DEX in exchange for STX, also based on the bonding curve's current price, adjusting the DEX's STX and token balances.\n- `get-buyable-tokens` and `get-sellable-stx` are read-only functions that calculate the amount of tokens that can be bought or sold for a given amount of STX, factoring in the current state of the bonding curve and applying transaction fees (<L116-148>, <L149-178>).\n- The contract initializes with a set of predefined values and makes itself immediately tradable, indicating that it is ready to process buy and sell orders upon deployment (<L180-188>).\n\nThis contract does not provide functions for modifying its core parameters (e.g., fees, target amounts) post-deployment, emphasizing its decentralized nature and ensuring that its operation is predictable and transparent.",
      "tags": [
        "DeFi",
        "DEX",
        "bonding-curve",
        "protocol",
        "trading",
        "fungible-token"
      ]
    }
  },
  {
    "rank": 120,
    "contract": "SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.btc-peg-in-endpoint-v2-05",
    "calls": 230,
    "source": ";; SPDX-License-Identifier: BUSL-1.1\n\n(impl-trait 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.extension-trait.extension-trait)\n\n(use-trait ft-trait 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.trait-sip-010.sip-010-trait)\n\n(define-constant err-unauthorised (err u1000))\n(define-constant err-paused (err u1001))\n(define-constant err-peg-in-address-not-found (err u1002))\n(define-constant err-invalid-amount (err u1003))\n(define-constant err-invalid-tx (err u1004))\n(define-constant err-already-sent (err u1005))\n(define-constant err-bitcoin-tx-not-mined (err u1011))\n(define-constant err-invalid-input (err u1012))\n(define-constant err-token-mismatch (err u1015))\n(define-constant err-slippage (err u1016))\n(define-constant err-not-in-whitelist (err u1017))\n(define-constant err-invalid-routing (err u1018))\n(define-constant err-commit-tx-mismatch (err u1019))\n(define-constant err-invalid-token (err u1020))\n\n(define-constant MAX_UINT u340282366920938463463374607431768211455)\n(define-constant ONE_8 u100000000)\n\n(define-data-var fee-to-address principal 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao)\n\n(define-data-var peg-in-paused bool true)\n(define-data-var peg-in-fee uint u0)\n(define-data-var peg-in-min-fee uint u0)\n\n;; governance functions\n\n(define-public (set-fee-to-address (new-fee-to-address principal))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set fee-to-address new-fee-to-address))))\n\n(define-public (pause-peg-in (paused bool))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set peg-in-paused paused))))\n\n(define-public (set-peg-in-fee (fee uint))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set peg-in-fee fee))))\n\n(define-public (set-peg-in-min-fee (fee uint))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set peg-in-min-fee fee))))\n\n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true))\n\n;; read-only functions\n\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao) (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao is-extension contract-caller)) err-unauthorised)))\n\n(define-read-only (is-peg-in-paused)\n\t(var-get peg-in-paused))\n\n(define-read-only (get-peg-in-fee)\n\t(var-get peg-in-fee))\n\n(define-read-only (get-peg-in-min-fee)\n\t(var-get peg-in-min-fee))\n\n(define-read-only (get-fee-to-address)\n\t(var-get fee-to-address))\n\n(define-read-only (is-peg-in-address-approved (address (buff 128)))\n\t(contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-bridge-registry-v2-01 is-peg-in-address-approved address))\n\n(define-read-only (get-peg-in-sent-or-default (tx (buff 32768)) (output uint))\n\t(contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-bridge-registry-v2-01 get-peg-in-sent-or-default tx output))\n\n(define-read-only (extract-tx-ins-outs (tx (buff 32768)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 extract-tx-ins-outs tx))\n\n(define-read-only (get-txid (tx (buff 32768)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 get-txid tx))\n\n(define-read-only (destruct-principal (address principal))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 destruct-principal address))\n\n(define-read-only (construct-principal (hash-bytes (buff 20)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 construct-principal hash-bytes))\n\t\n(define-read-only (verify-mined (tx (buff 32768)) (block { header: (buff 80), height: uint }) (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint }))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 verify-mined tx block proof))\n\n(define-read-only (decode-from-reveal-tx-or-fail (tx (buff 32768)) (order-idx uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 decode-from-reveal-tx-or-fail tx order-idx))\n\n;; @dev cross order size > 80 bytes, so uses drop\n(define-read-only (create-order-cross-or-fail (order { from: (buff 128), to: (buff 128), chain-id: (optional uint), token: principal, token-out: principal }))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 create-order-cross-or-fail order))\n\n;; @dev no op-code offset for drop-based order\n(define-read-only (decode-order-cross-or-fail (order-script (buff 512)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 decode-order-cross-or-fail order-script u0))\n\n(define-read-only (decode-order-cross-from-reveal-tx-or-fail (tx (buff 32768)) (order-idx uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 decode-order-cross-from-reveal-tx-or-fail tx order-idx))\n\n(define-read-only (validate-tx-cross (commit-tx { tx: (buff 32768), output-idx: uint }) (reveal-tx { tx: (buff 32768), order-idx: uint }) (token-out-trait <ft-trait>))\n\t(validate-tx-cross-extra (try! (validate-tx-cross-base commit-tx reveal-tx)) token-out-trait))\n\n;; public functions\n\n(define-public (finalize-peg-in-cross\n\t(tx (buff 32768))\n\t(block { header: (buff 80), height: uint })\n\t(proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n\t(output-idx uint)\n\t(reveal-tx { tx: (buff 32768), order-idx: uint })\n\t(reveal-block { header: (buff 80), height: uint })\n\t(reveal-proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n\t(token-out-trait <ft-trait>))\n\t(let (\n\t\t\t(common-check (try! (finalize-peg-in-common tx block proof)))\n\t\t\t(reveal-tx-mined (verify-mined (get tx reveal-tx) reveal-block reveal-proof))\n\t\t\t(validation-data (try! (validate-tx-cross-base { tx: tx, output-idx: output-idx } reveal-tx)))\n\t\t\t(order-details (get order-details validation-data))\n\t\t\t(print-msg { type: \"peg-in\", tx-id: (try! (get-txid tx)), output: output-idx, order-details: order-details, fee: (get fee validation-data), amount-net: (get amount-net validation-data) }))\t\t\n\t\t(as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc mint-fixed (+ (get fee validation-data) (get amount-net validation-data)) tx-sender)))\n\t\t(as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-bridge-registry-v2-01 set-peg-in-sent tx output-idx true)))\t\t\n\t\t(match (validate-tx-cross-extra validation-data token-out-trait)\n\t\t\tok-value\n\t\t\t(begin\n\t\t\t\t(and (> (get fee validation-data) u0) (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc transfer-fixed (get fee validation-data) tx-sender (var-get fee-to-address) none))))\t\t\t\t\n\t\t\t\t(as-contract (try! (contract-call? .cross-router-v2-03 route (get amount-net validation-data) (list 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc) (list ) token-out-trait none { address: (get to order-details), chain-id: (get chain-id order-details) })))\n\t\t\t\t(print (merge print-msg { success: true }))\n\t\t\t\t(ok true))\n\t\t\terr-value\n\t\t\t(begin\n\t\t\t\t(as-contract (try! (refund (+ (get fee validation-data) (get amount-net validation-data)) (get from order-details))))\n\t\t\t\t(print (merge print-msg { success: false, err-value: err-value }))\n\t\t\t\t(ok false)))))\n\n;; internal functions\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value)))\n\n(define-private (check-trait (token-trait <ft-trait>) (token principal))\n  (ok (asserts! (is-eq (contract-of token-trait) token) err-token-mismatch)))\n\n(define-private (validate-tx-cross-base (commit-tx { tx: (buff 32768), output-idx: uint }) (reveal-tx { tx: (buff 32768), order-idx: uint }))\n\t(let (\n\t\t\t(validation-data (try! (validate-drop-tx-common commit-tx reveal-tx))))\n\t\t(ok { order-details: (try! (decode-order-cross-or-fail (get order-script validation-data))), fee: (get fee validation-data), amount-net: (get amount-net validation-data) })))\n\n(define-private (validate-tx-cross-extra (validation-data { order-details: { from: (buff 128), to: (buff 128), chain-id: (optional uint), token: principal, token-out: principal }, fee: uint, amount-net: uint }) (token-out-trait <ft-trait>))\n\t(let (\n\t\t\t(order-details (get order-details validation-data)))\n\t\t(try! (check-trait token-out-trait (get token-out order-details)))\n\t\t(try! (contract-call? .cross-router-v2-03 validate-route (get amount-net validation-data) (list 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc) (list ) (get token-out order-details) none { address: (get to order-details), chain-id: (get chain-id order-details) }))\n\t\t(ok validation-data)))\n\n(define-private (validate-tx-common (tx (buff 32768)) (output-idx uint) (order-idx uint))\n\t(let (\n\t\t\t(parsed-tx (try! (extract-tx-ins-outs tx)))\n\t\t\t(output (unwrap! (element-at (get outs parsed-tx) output-idx) err-invalid-tx))\n\t\t\t(amount (get value output))\n\t\t\t(peg-in-address (get scriptPubKey output))\n\t\t\t(order-script (get scriptPubKey (unwrap-panic (element-at? (get outs parsed-tx) order-idx))))\n\t\t\t(fee (max (mul-down amount (var-get peg-in-fee)) (var-get peg-in-min-fee)))\n\t\t\t(check-fee (asserts! (> amount fee) err-invalid-amount))\n\t\t\t(amount-net (- amount fee)))\n\t\t(asserts! (not (get-peg-in-sent-or-default tx output-idx)) err-already-sent)\n\t\t(asserts! (is-peg-in-address-approved peg-in-address) err-peg-in-address-not-found)\n\n\t\t(ok { parsed-tx: parsed-tx, order-script: order-script, fee: fee, amount-net: amount-net })))\n\n(define-private (validate-drop-tx-common (commit-tx { tx: (buff 32768), output-idx: uint }) (reveal-tx { tx: (buff 32768), order-idx: uint }))\n\t(let (\n\t\t\t(parsed-tx (try! (extract-tx-ins-outs (get tx commit-tx))))\n\t\t\t(output (unwrap! (element-at (get outs parsed-tx) (get output-idx commit-tx)) err-invalid-tx))\n\t\t\t(amount (get value output))\n\t\t\t(peg-in-address (get scriptPubKey output))\t\t\t\n\t\t\t(reveal-tx-data (try! (decode-from-reveal-tx-or-fail (get tx reveal-tx) (get order-idx reveal-tx))))\n\t\t\t(fee (max (mul-down amount (var-get peg-in-fee)) (var-get peg-in-min-fee)))\n\t\t\t(check-fee (asserts! (> amount fee) err-invalid-amount))\n\t\t\t(amount-net (- amount fee)))\n\t\t(asserts! (not (get-peg-in-sent-or-default (get tx commit-tx) (get output-idx commit-tx))) err-already-sent)\n\t\t(asserts! (is-peg-in-address-approved peg-in-address) err-peg-in-address-not-found)\n    \t(asserts! (is-eq (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.clarity-bitcoin-v1-07 get-segwit-txid (get tx commit-tx)) (get commit-txid reveal-tx-data)) err-commit-tx-mismatch)\n\n\t\t(ok { parsed-tx: parsed-tx, order-script: (get order-script reveal-tx-data), fee: fee, amount-net: amount-net })))\n\n(define-private (finalize-peg-in-common\n\t(tx (buff 32768))\n\t(block { header: (buff 80), height: uint })\n\t(proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint }))\n\t(begin\n\t\t(asserts! (not (var-get peg-in-paused)) err-paused)\n\t\t(verify-mined tx block proof)))\n\n(define-private (max (a uint) (b uint))\n\t(if (< a b) b a))\n\n(define-private (min (a uint) (b uint))\n\t(if (< a b) a b))\n\n(define-private (mul-down (a uint) (b uint))\n\t(/ (* a b) ONE_8))\n\n(define-private (div-down (a uint) (b uint))\n\t(if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n\n(define-private (unwrap-string-to-uint (input (string-ascii 40)))\n\t(unwrap-panic (string-to-uint? input)))\n\n(define-private (refund (amount uint) (from (buff 128)))\n\t(ok (and (> amount u0)\n  \t\t(let (\n      \t\t\t(btc-peg-out-fee (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 get-peg-out-fee))\n      \t\t\t(btc-peg-out-min-fee (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 get-peg-out-min-fee)))\n      \t\t(try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-fee u0))\n      \t\t(try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-min-fee u0))\n      \t\t(try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 request-peg-out-0 from amount))\n      \t\t(try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-fee btc-peg-out-fee))\n      \t\t(try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-min-fee btc-peg-out-min-fee))\n      \ttrue))))\n",
    "analysis": {
      "summary": "This contract facilitates cross-chain transactions, specifically peg-in operations from Bitcoin to Stacks, with governance functions for fee and pause management.",
      "explanation": "This Clarity smart contract is designed to support cross-chain transactions, enabling assets to be pegged in from Bitcoin to the Stacks blockchain. It includes governance functions to manage fees and pause or resume peg-in operations, and it integrates with external contracts for transaction validation and execution. Key functionalities include setting fee addresses, pausing/resuming peg-ins, setting peg-in fees, and finalizing peg-in transactions with validation against Bitcoin transaction proofs. The contract employs several read-only functions for checking permissions, fees, and transaction details, alongside internal functions for transaction validation and error handling. It leverages external contracts for broader interoperability and transaction processing within the Stacks ecosystem.",
      "tags": [
        "cross-chain",
        "peg-in",
        "governance",
        "Bitcoin",
        "Stacks",
        "transaction-validation"
      ]
    }
  },
  {
    "rank": 121,
    "contract": "SP2TTK8YMANQ8P88T2GGXF45R2M53MTMZGMWNQFVC.stupid-oblivious-loser-stxcity-dex",
    "calls": 230,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u100000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP2TTK8YMANQ8P88T2GGXF45R2M53MTMZGMWNQFVC.stupid-oblivious-loser-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u90009000900090)\n    (var-set stx-balance u44400000)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX.",
      "explanation": "This contract facilitates token trading on the Stacks blockchain, leveraging a bonding curve to determine prices. It allows users to buy or sell tokens in exchange for STX, adjusting prices based on supply and demand dynamics. Key features include a target STX amount triggering distribution of tokens and STX to specified addresses, and a deflationary mechanism through token burning.\n\n- The contract uses the SIP-010 trait for token standards <L1>.\n- Error constants define various error states for contract operations <L4-11>.\n- Constants are set for token supply, DEX address, bonding curve configuration, fee structure, and specific wallets <L12-27>.\n- Tradable status, balances, and percentages for burning and deployer shares are maintained as data variables <L29-34>.\n- The `buy` function <L36-92> allows users to purchase tokens with STX, including fee deductions, and updates balances accordingly. It also checks if the STX target is reached to distribute tokens and STX as per the bonding curve completion.\n- The `sell` function <L93-126> enables users to sell tokens back to the DEX in exchange for STX, adjusting the global STX and token balances.\n- `get-buyable-tokens` <L127-148> and `get-sellable-stx` <L149-171> are read-only functions providing estimates for trade amounts.\n- The contract initialization <L172-181> sets initial values and performs a test STX transfer.\n\nEach function includes checks for trading authorization, sufficient balances, and correct token usage. The contract emphasizes a non-custodial approach, with no deployer privileges post-deployment, aligning with decentralized principles.",
      "tags": [
        "DeFi",
        "DEX",
        "bonding-curve",
        "token-trading",
        "non-custodial"
      ]
    }
  },
  {
    "rank": 122,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v201",
    "calls": 229,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait oabc2f5b3982b0123 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o318649a6b009833d 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait oeb241b403e5527bf 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (oc9bd3483422ecf0d (o5183708558b845a4 <oabc2f5b3982b0123>) (o5fea83bcb8e0304e <oabc2f5b3982b0123>) (o26a22f288488cc6a <oeb241b403e5527bf>) (oc53901217b812f93 <o318649a6b009833d>) (o977b01773ea33d9d uint)) (let ((o9808b37ac42bb57f (try! (as-contract (contract-call? o26a22f288488cc6a swap o5183708558b845a4 o5fea83bcb8e0304e oc53901217b812f93 o977b01773ea33d9d u1))))) (ok (get amt-out o9808b37ac42bb57f)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-b (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-c (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-e (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-f (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-g (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-i (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-j (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-k (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-l (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-m (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-n (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-p (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-q (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-r (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53)))) (asserts! (> o24ee854d6599d6a5 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o24ee854d6599d6a5 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o24ee854d6599d6a5))))) (define-public (swap-helper-s (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-t (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-u (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-w (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-x (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-y (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-z (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379)))))",
    "analysis": {
      "summary": "This contract facilitates complex token swaps across various protocols on the Stacks blockchain.",
      "explanation": "The contract appears to be a part of a larger decentralized finance (DeFi) system, designed to enable users to swap tokens across different protocols on the Stacks blockchain. It utilizes multiple SIP-010 trait implementations for fungible tokens, indicating its compatibility with a wide range of tokens adhering to the SIP-010 standard. The contract includes numerous 'swap-helper' functions, each tailored for different swap scenarios, possibly involving different token pairs and liquidity pools. Each 'swap-helper' function follows a similar pattern: verifying the caller's identity, calculating transaction amounts based on the current state and input parameters, interacting with external contracts to execute the swap, and updating the contract's state post-transaction. The use of 'as-contract' and 'unwrap-panic' suggests that these operations are critical and must succeed for the swap to proceed. The contract's design reflects a high degree of interoperability and composability within the Stacks DeFi ecosystem, allowing users to leverage liquidity across multiple platforms through a single interface.",
      "tags": [
        "DeFi",
        "token-swap",
        "SIP-010",
        "interoperability",
        "liquidity-pool"
      ]
    }
  },
  {
    "rank": 123,
    "contract": "SP1G48FZ4Y7JY8G2Z0N51QTCYGBQ6F4J43J77BQC0.dia-oracle",
    "calls": 227,
    "source": "(impl-trait .trait-dia-oracle.dia-oracle-trait)\n\n(define-constant err-unauthorized (err u100))\n\n(define-data-var oracle-updater principal tx-sender)\n\n(define-map values\n    (string-ascii 32)\n    { value: uint, timestamp: uint }\n)\n\n(define-public (set-value (key (string-ascii 32)) (value uint) (timestamp uint))\n    (begin\n        (try! (check-is-oracle-updater))\n        (update-value { key: key, value: value, timestamp: timestamp })\n        (ok true)\n    )\n)\n\n(define-public (set-multiple-values (entries (list 10 { key: (string-ascii 32), value: uint, timestamp: uint })))\n    (begin\n        (try! (check-is-oracle-updater))\n        (map update-value entries)\n        (ok true)\n    )\n)\n\n(define-public (change-oracle-updater (new-oracle-updater principal))\n    (begin\n        ;; #[filter(new-oracle-updater)]\n        (try! (check-is-oracle-updater))\n        (var-set oracle-updater new-oracle-updater)\n        (print\n            {\n                action: \"oracle-updater-changed\",\n                data: { old-updater: tx-sender, new-updater: new-oracle-updater }\n            }\n        )\n        (ok true)\n    )\n)\n\n(define-read-only (get-oracle-updater)\n    (var-get oracle-updater)\n)\n\n(define-read-only (get-value (key (string-ascii 32)))\n    (ok (default-to { value: u0, timestamp: u0 } (map-get? values key)))\n)\n\n(define-private (check-is-oracle-updater)\n    (ok (asserts! (is-eq tx-sender (var-get oracle-updater)) err-unauthorized))\n)\n\n(define-private (update-value (entry { key: (string-ascii 32), value: uint, timestamp: uint }))\n    (begin\n        (map-set values\n            (get key entry)\n            { value: (get value entry), timestamp: (get timestamp entry) }\n        )\n        (print { action: \"updated\", data: entry })\n    )\n)\n",
    "analysis": {
      "summary": "This contract serves as an oracle updater, allowing a designated principal to update or set multiple key-value pairs with timestamps, and change the oracle updater.",
      "explanation": "The contract implements a basic oracle system on the Stacks blockchain, using Clarity. It allows for the storage and update of data points identified by keys, with each data point consisting of a value and a timestamp. The contract ensures that only an authorized principal, known as the oracle updater, can modify the data. Here's a breakdown of its key components:\n\n- **Trait Implementation (<L1>)**: The contract starts by implementing a trait, which is a set of functions that other contracts can rely on to interact with this contract in a standardized way.\n\n- **Constants and Variables (<L3-L5>)**: It defines a constant for an error code and a data variable to store the current oracle updater's principal.\n\n- **Data Storage (<L7>)**: Uses a map to store values, where each entry is a key-value pair, and the value is an object containing the actual data value and a timestamp.\n\n- **Public Functions**: \n  - `set-value` (<L9-14>) allows the oracle updater to set a single value for a given key.\n  - `set-multiple-values` (<L16-21>) enables setting multiple values at once, accepting a list of entries.\n  - `change-oracle-updater` (<L23-32>) permits the current oracle updater to transfer their role to a new principal.\n\n- **Read-Only Functions**: \n  - `get-oracle-updater` (<L34-36>) returns the current oracle updater.\n  - `get-value` (<L38-40>) retrieves the value for a given key, returning default values if the key is not found.\n\n- **Private Functions**: \n  - `check-is-oracle-updater` (<L42-44>) is a security check to ensure that only the designated oracle updater can modify values.\n  - `update-value` (<L46-52>) is used internally to update or set the value for a given key in the map.\n\nThis contract is a foundational piece for decentralized applications that require external data to be fed into the blockchain in a controlled manner. It emphasizes the importance of access control in smart contracts to prevent unauthorized data manipulation.",
      "tags": [
        "oracle",
        "data-storage",
        "access-control",
        "protocol"
      ]
    }
  },
  {
    "rank": 124,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-wstx-roo-distributor2",
    "calls": 219,
    "source": ";;; Distributor: receive and distribute rewards.\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(impl-trait .farming-receive-trait.farming-receive-trait)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; errors\n(define-constant err-check-owner               (err u801))\n(define-constant err-receive-preconditions     (err u802))\n(define-constant err-distribute-preconditions  (err u803))\n(define-constant err-distribute-postconditions (err u804))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; constants\n(define-constant REWARD-TOKEN .velar-token)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; auth\n(define-data-var owner principal tx-sender)\n(define-read-only (get-owner) (var-get owner))\n(define-private (check-owner)\n  (ok (asserts! (is-eq tx-sender (get-owner)) err-check-owner)))\n(define-public (set-owner (new-owner principal))\n  (begin\n   (try! (check-owner))\n   (ok (var-set owner new-owner)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; accounting\n(define-map revenue uint uint) ;;epoch -> cumulative token rewards\n\n(define-read-only (get-revenue-at (epoch uint))\n  (default-to u0 (map-get? revenue epoch) ))\n\n;; Called by operator.\n;; MUST ALWAYS BE ACCOMPANIED BY A CORRECT TRANSFER!\n;; Could also store balance and compare to previous but that adds code.\n(define-data-var balance uint u0)\n\n(define-read-only (get-balance)\n  (var-get balance))\n\n(define-private (sync (new-balance uint))\n  (var-set balance new-balance))\n\n(define-public\n  (receive\n   (token <ft-trait>)\n   (amt   uint)\n   (from  principal))\n\n  (let ((epoch (contract-call? .farming-wstx-roo-core current-epoch))\n        (r     (get-revenue-at epoch))\n        (bal   (unwrap-panic\n                (contract-call?\n                 token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n     (and\n      (is-eq (contract-of token) REWARD-TOKEN)\n    ;;(> amt u0)\n      (is-eq from (get-owner))\n      (>= bal (+ (get-balance) amt))\n      )\n      err-receive-preconditions)\n\n    (try! (check-owner))\n    (sync bal)\n    ;; (var-set balance (+ (var-get balance) amt))\n    (ok (map-set revenue epoch (+ r amt)) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; claims\n(define-map claims\n  {user: principal, epoch: uint}\n  uint) ;;block number claimed at\n\n(define-private\n  (do-claim\n   (user principal)\n   (epoch uint))\n  (map-set claims\n           {user: user, epoch: epoch}\n           block-height))\n\n(define-read-only\n  (has-claimed-epoch\n   (user principal)\n   (epoch uint))\n  (is-some (map-get? claims {user: user, epoch: epoch})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; low level API\n(define-private\n  (do-distribute\n   (user  principal)\n   (token <ft-trait>)\n   (amt   uint))\n\n  (let ((protocol (as-contract tx-sender)))\n    (ok (if (> amt u0)\n        (try!\n         (as-contract\n          (contract-call?\n           token transfer amt protocol user none)))\n        true)) ))\n\n(define-read-only\n  (calc-distribute\n   (share {staked: uint, total: uint})\n   (amt   uint))\n\n  (if (> (get total share) u0)\n      (/ (* amt (get staked share)) (get total share))\n      u0) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epoch\n(define-private\n  (distribute-epoch\n   (user   principal)\n   (token  <ft-trait>)\n   (epoch  uint))\n\n  (let ((reward (unwrap-panic (get-reward user epoch))))\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (not (has-claimed-epoch user epoch))\n    ;;(< epoch (current-epoch)) checked by get-share-at\n      (is-eq (contract-of token) REWARD-TOKEN)\n      )\n     err-distribute-preconditions)\n\n    ;; Update global state\n    (try! (do-distribute user token (get amt reward)))\n\n    ;; Update local state\n    (do-claim user epoch)\n\n    ;; Postconditions\n\n    (ok true)) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epochs\n(define-private\n  (distribute-epochs-step\n   (epoch uint)\n   (args  {user: principal, token: <ft-trait>}))\n\n  (let ((res_\n         (unwrap-panic\n          (distribute-epoch\n           (get user args)\n           (get token args)\n           epoch)) ))\n    args))\n\n(define-public\n  (distribute-epochs\n   (user   principal)\n   (token  <ft-trait>)\n   (epochs (list 10 uint))) ;;XXX: MAX-EPOCHS\n\n  (let ((args {user : user,\n               token: token})\n        (res_ (fold distribute-epochs-step epochs args))\n        (bal (unwrap-panic (contract-call? token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n      (is-eq (contract-of token) REWARD-TOKEN)\n      err-distribute-preconditions)\n\n    ;; Update local state\n    (sync bal)\n\n    ;; Return\n    (let ((event\n           {op    : \"distribute-epochs\",\n            user  : user,\n            epochs: epochs\n            }))\n      (print event)\n      (ok event) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; compute reward epoch list\n\n;; Returns epochs starting at `start-epoch' for which `user' has\n;; non-zero rewards.\n;; Pagination via GENESIS-EPOCH and `end-epoch'.\n(define-read-only\n  (get-reward\n   (user principal)\n   (epoch uint))\n\n  (let ((share   (try! (contract-call? .farming-wstx-roo-core get-share-at user epoch)))\n        (rev     (get-revenue-at epoch))\n        (calc    (calc-distribute share rev))\n        (claimed (default-to u0 (map-get? claims {user: user, epoch: epoch})))\n        (amt     (if (is-eq claimed u0) calc u0)))\n    (ok {share  : share,\n         rev    : rev,\n         calc   : calc,\n         claimed: claimed,\n         amt    : amt})))\n\n(define-read-only\n  (get-rewards-step\n   (epoch uint)\n   (state {user: principal,\n           acc : (list 10 ;;XXX: MAX-EPOCHS\n                       {epoch : uint,\n                        reward: uint}) }) )\n\n  (let ((reward (unwrap-panic\n                 (get-reward (get user state)\n                             epoch)))\n        (amt    (get amt reward)))\n\n    {user: (get user state),\n     acc : (if (> amt u0)\n               (unwrap-panic\n                (as-max-len?\n                 (append (get acc state) {epoch: epoch, reward: amt}) ;;FIXME: reward?\n                 u10))\n               (get acc state))\n     }))\n\n(define-read-only\n  (get-rewards\n   (user        principal)\n   (start-epoch uint))\n\n  (let ((end-epoch     (+ start-epoch MAX-EPOCHS)) ;;next\n        (epochs_       (mkepochs start-epoch))\n        (reward-epochs (fold get-rewards-step epochs_ {user: user, acc: (list)})))\n\n    {reward-epochs: (get acc reward-epochs),\n     end-epoch    : end-epoch} ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; epochs\n(define-constant OFFSETS (list u0 u1 u2 u3 u4 u5 u6 u7 u8 u9))\n(define-constant MAX-EPOCHS (len OFFSETS)) ;;10\n\n(define-private\n  (epochs-step\n   (i_    uint)\n   (state {epoch: uint, current: uint, acc: (list 10 uint)})) ;; XXX: MAX-EPOCHS\n  {epoch: (+ (get epoch state) u1),\n   current: (get current state),\n   acc  : (if (>= (get epoch state) (get current state))\n              (get acc state)\n              (unwrap-panic\n               (as-max-len?\n                (append (get acc state) (get epoch state))\n                u10)))\n   })\n\n(define-read-only (mkepochs (start-epoch uint))\n  (let ((current (contract-call? .farming-wstx-roo-core current-epoch))\n        (state0  {epoch: start-epoch, current: current, acc: (list)})\n        (state   (fold epochs-step OFFSETS state0)))\n    (get acc state)))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract is designed to receive, track, and distribute token rewards based on epochs, handling claims and ensuring only eligible users receive their due rewards.",
      "explanation": "The contract implements functionality to receive rewards, track them per epoch, and distribute these rewards to users based on their stake. It uses the SIP-010 trait for fungible tokens to interact with reward tokens and a custom trait for receiving rewards.\n\n- **Use Trait and Implement Trait**: <L1-2> It uses the SIP-010 standard for fungible tokens and implements a custom trait for receiving farming rewards, allowing it to interact with standard tokens and receive notifications.\n- **Error Codes**: <L5-8> Defines constants for error handling, ensuring clarity in error reporting.\n- **Ownership Management**: <L12-23> Allows setting and getting the contract's owner, ensuring only the owner can perform certain actions.\n- **Accounting**: <L25-50> Tracks revenue per epoch and overall balance, allowing synchronization of the contract's balance with actual token holdings.\n- **Receive Function**: <L52-73> Handles receiving tokens, updating the contract's balance and revenue per epoch accordingly. It checks for preconditions like the sender being the owner and the token being the expected reward token.\n- **Claims Management**: <L75-91> Tracks claims by users for rewards in specific epochs, preventing double claiming.\n- **Distribution Logic**: <L93-142> Includes low-level API for distributing rewards, calculating distribution amounts based on user stakes, and a public function for distributing rewards across multiple epochs.\n- **Reward Calculation**: <L144-179> Provides functionality to calculate and list rewards for a user starting from a specific epoch, handling pagination of epochs.\n- **Epochs Handling**: <L181-212> Manages epoch lists for reward calculation, utilizing a constant list of offsets to iterate through epochs.\n\nOverall, the contract is structured to facilitate the distribution of rewards in a decentralized finance (DeFi) context, ensuring fairness and transparency in reward allocation.",
      "tags": [
        "DeFi",
        "rewards-distribution",
        "fungible-token",
        "epoch-management"
      ]
    }
  },
  {
    "rank": 125,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token",
    "calls": 216,
    "source": ";;; Velar SIP010 token.\n\n(impl-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n\n(define-constant DECIMALS (pow u10 u6))\n\n(define-fungible-token velar (* u1000000000 DECIMALS)) ;;1 billion\n\n(define-constant err-check-owner (err u1))\n(define-constant err-transfer    (err u4))\n\n(define-data-var owner principal tx-sender)\n\n(define-private (check-owner)\n  (ok (asserts! (is-eq tx-sender (var-get owner)) err-check-owner)))\n\n(define-public (set-owner (new-owner principal))\n  (begin\n   (try! (check-owner))\n   (ok (var-set owner new-owner)) ))\n\n(define-public\n  (transfer\n    (amt  uint)\n    (from principal)\n    (to   principal)\n    (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender from) err-transfer)\n    (ft-transfer? velar amt from to)))\n\n\n(define-public (mint (amt uint) (to principal))\n\t(begin\n    (try! (check-owner))\n\t  (ft-mint? velar amt to) ))\n\n(define-read-only (get-name)                   (ok \"Velar\"))\n(define-read-only (get-symbol)                 (ok \"VELAR\"))\n(define-read-only (get-decimals)               (ok u6))\n(define-read-only (get-balance (of principal)) (ok (ft-get-balance velar of)))\n(define-read-only (get-total-supply)           (ok (ft-get-supply velar)))\n(define-read-only (get-token-uri)              (ok (some u\"https://velar.co/metadata/velar-token.json\")))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract implements a fungible token named Velar with a fixed supply of 1 billion units, adhering to the SIP010 standard for fungible tokens on the Stacks blockchain.",
      "explanation": "The contract starts by implementing the SIP010 trait, ensuring compatibility with the Stacks ecosystem's fungible token standard. This trait implementation guarantees that the Velar token will be interoperable with other contracts and wallets that support the standard.\n\n- <L2> The `DECIMALS` constant is defined with a value of 10^6, indicating that the token will have 6 decimal places, allowing for fractional tokens.\n\n- <L4> The `velar` fungible token is defined with a total supply of 1 billion units, multiplied by the `DECIMALS` constant to account for the decimal places.\n\n- <L6-7> Two error constants are defined for use in ownership checks and transfer validations.\n\n- <L9> A data variable `owner` is defined to keep track of the token's owner, initially set to the contract deployer (`tx-sender`).\n\n- <L11-13> The `check-owner` private function ensures that only the current owner can perform certain actions, throwing an error if the caller is not the owner.\n\n- <L15-20> The `set-owner` public function allows the current owner to transfer ownership to a new principal, after passing the ownership check.\n\n- <L22-30> The `transfer` public function allows token holders to transfer their tokens to another principal, ensuring that the caller (`tx-sender`) is the same as the `from` argument.\n\n- <L32-37> The `mint` public function allows the owner to mint new tokens to a specified principal, subject to the ownership check.\n\n- <L39-49> Read-only functions provide basic information about the token (name, symbol, decimals, balance of a principal, total supply, and token URI) without altering the state of the blockchain.\n\nEach function and variable is carefully designed to ensure the contract's integrity, security, and adherence to the SIP010 standard, making the Velar token a fully functional and compliant fungible token on the Stacks blockchain.",
      "tags": [
        "fungible-token",
        "SIP010",
        "DeFi",
        "protocol"
      ]
    }
  },
  {
    "rank": 126,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v180",
    "calls": 213,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait oabc2f5b3982b0123 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o318649a6b009833d 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait oeb241b403e5527bf 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (oc9bd3483422ecf0d (o5183708558b845a4 <oabc2f5b3982b0123>) (o5fea83bcb8e0304e <oabc2f5b3982b0123>) (o26a22f288488cc6a <oeb241b403e5527bf>) (oc53901217b812f93 <o318649a6b009833d>) (o977b01773ea33d9d uint)) (let ((o9808b37ac42bb57f (try! (as-contract (contract-call? o26a22f288488cc6a swap o5183708558b845a4 o5fea83bcb8e0304e oc53901217b812f93 o977b01773ea33d9d u1))))) (ok (get amt-out o9808b37ac42bb57f)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <ocb3efe2975f75d1d>) (o058a5af358019b66 <ocb3efe2975f75d1d>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o76c0dbe41b8c1e62 o6222ee5620048475 o058a5af358019b66 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-b (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <ocb3efe2975f75d1d>) (o058a5af358019b66 <ocb3efe2975f75d1d>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o76c0dbe41b8c1e62 o6222ee5620048475 o058a5af358019b66 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-c (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <ocb3efe2975f75d1d>) (o058a5af358019b66 <ocb3efe2975f75d1d>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o76c0dbe41b8c1e62 o6222ee5620048475 o058a5af358019b66 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <ocb3efe2975f75d1d>) (o058a5af358019b66 <ocb3efe2975f75d1d>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o76c0dbe41b8c1e62 o6222ee5620048475 o058a5af358019b66 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-e (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53)))) (asserts! (> o24ee854d6599d6a5 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o24ee854d6599d6a5 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o24ee854d6599d6a5))))) (define-public (swap-helper-f (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-g (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-i (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-j (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-k (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-l (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-m (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-n (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-p (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-q (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-r (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-s (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-t (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-u (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-w (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-x (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-y (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-z (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115)))))",
    "analysis": {
      "summary": "This contract facilitates complex swap operations across multiple protocols on the Stacks blockchain.",
      "explanation": "The contract is designed to interact with various DeFi protocols on the Stacks blockchain to execute swap operations. It uses multiple SIP-010 trait implementations for fungible tokens and custom traits for specific functionalities like liquidity pools and fees. The contract defines a series of private and public functions (`swap-helper-a` through `swap-helper-z`) that encapsulate the logic for different swap scenarios, leveraging the `try!` and `unwrap-panic` patterns for error handling and result extraction. Each swap helper function is tailored for specific token pairs and protocols, indicated by the use of different trait implementations and contract calls. The contract also includes logic for calculating transaction fees and ensuring that the sender has sufficient balance for the swap, with detailed error handling. The use of `define-constant` and `define-data-var` suggests that the contract maintains state related to its operations, possibly for tracking purposes or to enforce certain constraints on the swaps.",
      "tags": [
        "DeFi",
        "swap",
        "protocol-interaction",
        "fungible-token",
        "liquidity-pool"
      ]
    }
  },
  {
    "rank": 127,
    "contract": "SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.router-xyk-velar-v-1-3",
    "calls": 209,
    "source": "\n;; router-xyk-velar-v-1-3\n\n;; Use all required traits\n(use-trait xyk-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait xyk-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-trait-v-1-2.xyk-pool-trait)\n(use-trait velar-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait velar-share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n\n;; Error constants\n(define-constant ERR_NOT_AUTHORIZED (err u6001))\n(define-constant ERR_INVALID_AMOUNT (err u6002))\n(define-constant ERR_INVALID_PRINCIPAL (err u6003))\n(define-constant ERR_ALREADY_ADMIN (err u6004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u6005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u6006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u6007))\n(define-constant ERR_SWAP_STATUS (err u6008))\n(define-constant ERR_MINIMUM_RECEIVED (err u6009))\n\n;; Contract deployer address\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n;; Admins list and helper var used to remove admins\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n;; Data var used to enable or disable quotes and swaps\n(define-data-var swap-status bool true)\n\n;; Get admins list\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n;; Get admin helper var\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n;; Get swap status\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n;; Add an admin to the admins list\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      ;; Assert caller is an existing admin and new admin is not in admins-list\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n\n      ;; Add admin to list with max length of 5\n      (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n\n      ;; Print add admin data and return true\n      (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n      (ok true)\n    )\n  )\n)\n\n;; Remove an admin from the admins list\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      ;; Assert caller is an existing admin and admin to remove is in admins-list\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n\n      ;; Assert contract deployer cannot be removed\n      (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n\n      ;; Set admin-helper to admin to remove and filter admins-list to remove admin\n      (var-set admin-helper admin)\n      (var-set admins (filter admin-not-removable admins-list))\n\n      ;; Print remove admin data and return true\n      (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n      (ok true)\n    )\n  )\n)\n\n;; Enable or disable quotes and swaps\n(define-public (set-swap-status (status bool))\n  (let (\n    (caller tx-sender)\n  )\n    (begin\n      ;; Assert caller is an admin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n\n      ;; Set swap-status to status\n      (var-set swap-status status)\n\n      ;; Print function data and return true\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n;; Get quote for swap-helper-a\n(define-public (get-quote-a\n    (amount uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    \n    ;; Get quotes for each swap\n    (quote-a (try! (if (is-eq swaps-reversed false)\n                       (xyk-quote-a amount xyk-tokens xyk-pools)\n                       (velar-quote-a amount velar-tokens))))\n    (quote-b (try! (if (is-eq swaps-reversed false)\n                       (velar-quote-a quote-a velar-tokens)\n                       (xyk-quote-a quote-a xyk-tokens xyk-pools))))\n  )\n    ;; Return number of tokens the caller would receive\n    (ok quote-b)\n  )\n)\n\n;; Get quote for swap-helper-b\n(define-public (get-quote-b\n    (amount uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    \n    ;; Get quotes for each swap\n    (quote-a (try! (if (is-eq swaps-reversed false)\n                       (xyk-quote-a amount xyk-tokens xyk-pools)\n                       (velar-quote-b amount velar-tokens))))\n    (quote-b (try! (if (is-eq swaps-reversed false)\n                       (velar-quote-b quote-a velar-tokens)\n                       (xyk-quote-a quote-a xyk-tokens xyk-pools))))\n  )\n    ;; Return number of tokens the caller would receive\n    (ok quote-b)\n  )\n)\n\n;; Get quote for swap-helper-c\n(define-public (get-quote-c\n    (amount uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    \n    ;; Get quotes for each swap\n    (quote-a (try! (if (is-eq swaps-reversed false)\n                       (xyk-quote-a amount xyk-tokens xyk-pools)\n                       (velar-quote-c amount velar-tokens))))\n    (quote-b (try! (if (is-eq swaps-reversed false)\n                       (velar-quote-c quote-a velar-tokens)\n                       (xyk-quote-a quote-a xyk-tokens xyk-pools))))\n  )\n    ;; Return number of tokens the caller would receive\n    (ok quote-b)\n  )\n)\n\n;; Get quote for swap-helper-d\n(define-public (get-quote-d\n    (amount uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>) (e <velar-ft-trait>)))\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    \n    ;; Get quotes for each swap\n    (quote-a (try! (if (is-eq swaps-reversed false)\n                       (xyk-quote-a amount xyk-tokens xyk-pools)\n                       (velar-quote-d amount velar-tokens))))\n    (quote-b (try! (if (is-eq swaps-reversed false)\n                       (velar-quote-d quote-a velar-tokens)\n                       (xyk-quote-a quote-a xyk-tokens xyk-pools))))\n  )\n    ;; Return number of tokens the caller would receive\n    (ok quote-b)\n  )\n)\n\n;; Perform swap via XYK Core and Velar\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>)))\n    (velar-share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap\n    (swap-a (if (is-eq swaps-reversed false)\n                (try! (xyk-swap-a amount xyk-tokens xyk-pools))\n                (try! (velar-swap-a amount velar-tokens velar-share-fee-to))))\n    (swap-b (if (is-eq swaps-reversed false)\n                (try! (velar-swap-a swap-a velar-tokens velar-share-fee-to))\n                (try! (xyk-swap-a swap-a xyk-tokens xyk-pools))))\n  )\n    (begin\n      ;; Assert that swap-b is greater than or equal to min-received\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n      ;; Print swap data and return number of tokens the caller received\n      (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          velar-data: {\n            velar-tokens: velar-tokens,\n            velar-share-fee-to: velar-share-fee-to,\n            velar-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n;; Perform swap via XYK Core and Velar\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>)))\n    (velar-share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap\n    (swap-a (if (is-eq swaps-reversed false)\n                (try! (xyk-swap-a amount xyk-tokens xyk-pools))\n                (try! (velar-swap-b amount velar-tokens velar-share-fee-to))))\n    (swap-b (if (is-eq swaps-reversed false)\n                (try! (velar-swap-b swap-a velar-tokens velar-share-fee-to))\n                (try! (xyk-swap-a swap-a xyk-tokens xyk-pools))))\n  )\n    (begin\n      ;; Assert that swap-b is greater than or equal to min-received\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n      ;; Print swap data and return number of tokens the caller received\n      (print {\n        action: \"swap-helper-b\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          velar-data: {\n            velar-tokens: velar-tokens,\n            velar-share-fee-to: velar-share-fee-to,\n            velar-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n;; Perform swap via XYK Core and Velar\n(define-public (swap-helper-c\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>)))\n    (velar-share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n\n    ;; Perform each swap\n    (swap-a (if (is-eq swaps-reversed false)\n                (try! (xyk-swap-a amount xyk-tokens xyk-pools))\n                (try! (velar-swap-c amount velar-tokens velar-share-fee-to))))\n    (swap-b (if (is-eq swaps-reversed false)\n                (try! (velar-swap-c swap-a velar-tokens velar-share-fee-to))\n                (try! (xyk-swap-a swap-a xyk-tokens xyk-pools))))\n  )\n    (begin\n      ;; Assert that swap-b is greater than or equal to min-received\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n      ;; Print swap data and return number of tokens the caller received\n      (print {\n        action: \"swap-helper-c\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          velar-data: {\n            velar-tokens: velar-tokens,\n            velar-share-fee-to: velar-share-fee-to,\n            velar-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n;; Perform swap via XYK Core and Velar\n(define-public (swap-helper-d\n    (amount uint) (min-received uint)\n    (swaps-reversed bool)\n    (xyk-tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (xyk-pools (tuple (a <xyk-pool-trait>)))\n    (velar-tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>) (e <velar-ft-trait>)))\n    (velar-share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    ;; Assert that swap-status is true and amount is greater than 0\n    (swap-status-check (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS))\n    (amount-check (asserts! (> amount u0) ERR_INVALID_AMOUNT))\n    \n    ;; Perform each swap\n    (swap-a (if (is-eq swaps-reversed false)\n                (try! (xyk-swap-a amount xyk-tokens xyk-pools))\n                (try! (velar-swap-d amount velar-tokens velar-share-fee-to))))\n    (swap-b (if (is-eq swaps-reversed false)\n                (try! (velar-swap-d swap-a velar-tokens velar-share-fee-to))\n                (try! (xyk-swap-a swap-a xyk-tokens xyk-pools))))\n  )\n    (begin\n      ;; Assert that swap-b is greater than or equal to min-received\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n\n      ;; Print swap data and return number of tokens the caller received\n      (print {\n        action: \"swap-helper-d\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          swaps-reversed: swaps-reversed,\n          xyk-data: {\n            xyk-tokens: xyk-tokens,\n            xyk-pools: xyk-pools,\n            xyk-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-a swap-b)\n            }\n          },\n          velar-data: {\n            velar-tokens: velar-tokens,\n            velar-share-fee-to: velar-share-fee-to,\n            velar-swaps: {\n              a: (if (is-eq swaps-reversed false) swap-b swap-a)\n            }\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n;; Helper function for removing an admin\n(define-private (admin-not-removable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)\n\n;; Check if token path for swap via XYK Core is reversed relative to the pool's tokens\n(define-private (is-xyk-path-reversed\n    (token-in <xyk-ft-trait>) (token-out <xyk-ft-trait>)\n    (pool-contract <xyk-pool-trait>)\n  )\n  (let (\n    (pool-data (unwrap-panic (contract-call? pool-contract get-pool)))\n  )\n    (not\n      (and\n        (is-eq (contract-of token-in) (get x-token pool-data))\n        (is-eq (contract-of token-out) (get y-token pool-data))\n      )\n    )\n  )\n)\n\n;; Get swap quote via XYK Core using two tokens\n(define-private (xyk-quote-a\n    (amount uint)\n    (tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    ;; Determine if token path is reversed\n    (is-reversed (is-xyk-path-reversed (get a tokens) (get b tokens) (get a pools)))\n\n    ;; Get quote based on path direction\n    (quote-result (if (is-eq is-reversed false)\n                      (try! (contract-call?\n                            'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 get-dy\n                            (get a pools)\n                            (get a tokens) (get b tokens)\n                            amount))\n                      (try! (contract-call?\n                            'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 get-dx\n                            (get a pools)\n                            (get b tokens) (get a tokens)\n                            amount))))\n  )\n    (ok quote-result)\n  )\n)\n\n;; Get swap quote via Velar using two tokens\n(define-private (velar-quote-a\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>)))\n  )\n  (let (\n    (quote-result (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 amount-out\n                  amount\n                  (get a tokens) (get b tokens)))\n  )\n    (ok quote-result)\n  )\n)\n\n;; Get swap quote via Velar using three tokens\n(define-private (velar-quote-b\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>)))\n  )\n  (let (\n    (quote-result (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 get-amount-out-3\n                  amount\n                  (get a tokens) (get b tokens) (get c tokens)))\n  )\n    (ok (get c quote-result))\n  )\n)\n\n;; Get swap quote via Velar using four tokens\n(define-private (velar-quote-c\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>)))\n  )\n  (let (\n    (quote-result (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 get-amount-out-4\n                  amount\n                  (get a tokens) (get b tokens) (get c tokens) (get d tokens)\n                  (list u1 u2 u3 u4)))\n  )\n    (ok (get d quote-result))\n  )\n)\n\n;; Get swap quote via Velar using five tokens\n(define-private (velar-quote-d\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>) (e <velar-ft-trait>)))\n  )\n  (let (\n    (quote-result (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 get-amount-out-5\n                  amount\n                  (get a tokens) (get b tokens) (get c tokens)\n                  (get d tokens) (get e tokens)))\n  )\n    (ok (get e quote-result))\n  )\n)\n\n;; Perform swap via XYK Core using two tokens\n(define-private (xyk-swap-a\n    (amount uint)\n    (tokens (tuple (a <xyk-ft-trait>) (b <xyk-ft-trait>)))\n    (pools (tuple (a <xyk-pool-trait>)))\n  )\n  (let (\n    ;; Determine if token path is reversed\n    (is-reversed (is-xyk-path-reversed (get a tokens) (get b tokens) (get a pools)))\n\n    ;; Perform swap based on path direction\n    (swap-result (if (is-eq is-reversed false)\n                     (try! (contract-call?\n                           'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 swap-x-for-y\n                           (get a pools)\n                           (get a tokens) (get b tokens)\n                           amount u1))\n                     (try! (contract-call?\n                           'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 swap-y-for-x\n                           (get a pools)\n                           (get b tokens) (get a tokens)\n                           amount u1))))\n  )\n    (ok swap-result)\n  )\n)\n\n;; Perform swap via Velar using two tokens\n(define-private (velar-swap-a\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>)))\n    (share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-result (try! (contract-call?\n                       'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 do-swap\n                       amount\n                       (get a tokens) (get b tokens)\n                       share-fee-to)))\n  )\n    (ok (get amt-out swap-result))\n  )\n)\n\n;; Perform swap via Velar using three tokens\n(define-private (velar-swap-b\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>)))\n    (share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-result (try! (contract-call?\n                       'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-3\n                       amount u1\n                       (get a tokens) (get b tokens) (get c tokens)\n                       share-fee-to)))\n  )\n    (ok (get amt-out (get c swap-result)))\n  )\n)\n\n;; Perform swap via Velar using four tokens\n(define-private (velar-swap-c\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>)))\n    (share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-result (try! (contract-call?\n                       'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-4\n                       amount u1\n                       (get a tokens) (get b tokens) (get c tokens) (get d tokens)\n                       share-fee-to)))\n  )\n    (ok (get amt-out (get d swap-result)))\n  )\n)\n\n;; Perform swap via Velar using five tokens\n(define-private (velar-swap-d\n    (amount uint)\n    (tokens (tuple (a <velar-ft-trait>) (b <velar-ft-trait>) (c <velar-ft-trait>) (d <velar-ft-trait>) (e <velar-ft-trait>)))\n    (share-fee-to <velar-share-fee-to-trait>)\n  )\n  (let (\n    (swap-result (try! (contract-call?\n                       'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-path2 swap-5\n                       amount u1\n                       (get a tokens) (get b tokens) (get c tokens) (get d tokens) (get e tokens)\n                       share-fee-to)))\n  )\n    (ok (get amt-out (get e swap-result)))\n  )\n)",
    "analysis": {
      "summary": "This contract facilitates multi-token swaps using both XYK and Velar protocols, manages admin privileges, and controls swap operations.",
      "explanation": "The contract integrates with external XYK and Velar protocols to perform token swaps, allowing for complex swap operations across different token pairs and protocols. It includes administrative functions to manage these swaps and ensure security and flexibility in operations.\n\n- **Use Traits (<L2-5>)**: Implements traits for SIP-010 fungible tokens, XYK pools, and Velar protocols to interact with external contracts.\n- **Error Constants (<L8-16>)**: Defines error codes for various failure states, improving contract readability and debugging.\n- **Admin Management (<L18-67>)**: Manages a list of admin principals with functions to add or remove admins, ensuring that only authorized users can perform certain actions.\n- **Swap Status Control (<L69-79>)**: A boolean flag controlled by admins to enable or disable swap operations, providing a mechanism for emergency stops or maintenance periods.\n- **Swap Quotes and Execution (<L81-321>)**: Functions to get quotes and perform swaps through XYK Core and Velar protocols, supporting multiple tokens and swap paths. These functions check for swap status, validate amounts, and ensure minimum received tokens, offering flexibility in swap strategies while maintaining user security.\n- **Helper Functions (<L323-372>)**: Includes private functions for admin management, path reversal checks, and swap operations, encapsulating complex logic for reuse and clarity.\n\nEach public function performs specific checks (e.g., admin status, swap status) before proceeding with its logic, ensuring that operations adhere to the contract's rules. The contract's design allows for expandable swap strategies and administrative control, making it a versatile tool for DeFi operations on the Stacks blockchain.",
      "tags": [
        "DeFi",
        "token-swap",
        "XYK",
        "Velar",
        "admin-management",
        "protocol-interaction"
      ]
    }
  },
  {
    "rank": 128,
    "contract": "SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.curve-farming-core-v1_1_1_ststx-0001",
    "calls": 205,
    "source": ";;; Core: maintains a historical distribution of stake shares.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; errors\n(define-constant err-stake-preconditions    (err u901))\n(define-constant err-stake-postconditions   (err u902))\n(define-constant err-unstake-preconditions  (err u903))\n(define-constant err-unstake-postconditions (err u904))\n(define-constant err-share-preconditions    (err u905))\n(define-constant err-share-postconditions   (err u906))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; constants\n(define-constant MIN-STAKE u1)\n(define-constant STAKING-TOKEN .curve-lp-token-v1_0_0_ststx-0001)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Map blocks to epochs\n(define-constant EPOCH-LENGTH  u20000) ;; 10k ~1 week at ~10 blocks/min\n(define-constant GENESIS-BLOCK stacks-block-height)\n(define-constant GENESIS-EPOCH (calc-epoch GENESIS-BLOCK)) ;;zero\n\n(define-read-only (current-epoch) (calc-epoch stacks-block-height))\n\n;; Crash on block in the past.\n(define-read-only (calc-epoch (block uint))\n  (/ (- block GENESIS-BLOCK) EPOCH-LENGTH))\n\n(define-read-only (calc-epoch-start (epoch uint))\n  (+ GENESIS-BLOCK (* EPOCH-LENGTH epoch)))\n\n(define-read-only (calc-epoch-end (epoch uint))\n  (- (+ GENESIS-BLOCK (* EPOCH-LENGTH (+ epoch u1))) u1))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; state\n(define-data-var total-staked\n  {epoch: uint, ;;last state change\n   min  : uint, ;;minimum staked during current epoch\n   end  : uint} ;;total staked during current epoch\n  {epoch: GENESIS-EPOCH,\n   min  : u0,\n   end  : u0})\n\n(define-map user-staked\n  principal\n  {epoch: uint,\n   min  : uint,\n   end  : uint})\n\n(define-read-only (get-total-staked) (var-get total-staked))\n\n(define-read-only (get-user-staked (user principal))\n  (default-to\n    {epoch: GENESIS-EPOCH, min: u0, end: u0}\n    (map-get? user-staked user)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; stake\n(define-public (stake (amt uint))\n  (let ((user      tx-sender)\n        (protocol  (as-contract tx-sender))\n\n        (epoch     (current-epoch))\n\n        (t-staked  (get-total-staked))\n        (u-staked  (get-user-staked user))\n        (t-end1    (+ (get end t-staked) amt))\n        (u-end1    (+ (get end u-staked) amt)) )\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (>= epoch GENESIS-EPOCH)\n      (>= epoch (get epoch t-staked))\n      (>= epoch (get epoch u-staked))\n      (>= (get epoch t-staked) (get epoch u-staked))\n      (>  amt u0)\n      (>= u-end1 MIN-STAKE)\n      )\n     err-stake-preconditions)\n\n    ;; Update global state\n    (try! (contract-call? .curve-lp-token-v1_0_0_ststx-0001 transfer amt user protocol none))\n\n    ;; Update local state\n    ;; N.B. during the genesis epoch, min is always zero.\n    (if (is-eq epoch (get epoch t-staked))\n        (var-set total-staked\n                 (merge t-staked {end: t-end1}))\n        (var-set total-staked\n                 {epoch: epoch,\n                  min  : (get end t-staked),\n                  end  : t-end1}))\n\n    (if (is-eq epoch (get epoch u-staked))\n        (map-set user-staked user (merge u-staked {end: u-end1}))\n        (map-set user-staked user\n                 {epoch: epoch,\n                  min  : (get end u-staked),\n                  end  : u-end1}))\n\n    ;; Postconditions\n    (asserts!\n      (>= (unwrap-panic (contract-call? .curve-lp-token-v1_0_0_ststx-0001 get-balance protocol))\n          (get end (get-total-staked)))\n     err-stake-postconditions)\n\n    ;; Return\n    (let ((event\n           {op       : \"stake\",\n            user     : user,\n            amt      : amt,\n            epoch    : epoch,\n            total-old: t-staked,\n            user-old : u-staked,\n            total-new: (get-total-staked),\n            user-new : (get-user-staked user)\n           }))\n      (print event)\n      (ok event)\n      )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; unstake\n(define-public (unstake (amt uint))\n  (let ((user      tx-sender)\n        (protocol  (as-contract tx-sender))\n\n        (epoch     (current-epoch))\n\n        (t-staked  (get-total-staked))\n        (u-staked  (get-user-staked user))\n        (t-end1    (- (get end t-staked) amt))\n        (u-end1    (- (get end u-staked) amt))\n        (t-min1    (min t-end1 (get min t-staked))) ;;unstake most recent first\n        (u-min1    (min u-end1 (get min u-staked))) )\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (>= epoch GENESIS-EPOCH)\n      (>= epoch (get epoch t-staked))\n      (>= epoch (get epoch u-staked))\n      (>= (get epoch t-staked) (get epoch u-staked))\n      (>  amt u0)\n    ;;(<= amt (get end u-staked))\n      (or (>= u-end1 MIN-STAKE)\n          (is-eq u-end1 u0))\n      )\n     err-unstake-preconditions)\n\n    ;; Update global state\n    (try! (as-contract (contract-call? .curve-lp-token-v1_0_0_ststx-0001 transfer amt protocol user none)))\n\n    ;; Update local state\n    ;; N.B. during the genesis epoch, min is always zero.\n    (if (is-eq epoch (get epoch t-staked))\n        (var-set total-staked (merge t-staked {min: t-min1, end: t-end1}))\n        (var-set total-staked\n                 {epoch: epoch,\n                  min  : t-end1,\n                  end  : t-end1}))\n\n    (if (is-eq epoch (get epoch u-staked))\n        (map-set user-staked user (merge u-staked {min: u-min1, end: u-end1}))\n        (map-set user-staked user\n                 {epoch: epoch,\n                  min  : u-end1,\n                  end  : u-end1}))\n\n    ;; Postconditions\n    (asserts!\n     (and\n      (>= (unwrap-panic (contract-call? .curve-lp-token-v1_0_0_ststx-0001 get-balance protocol))\n          (get end (get-total-staked)))\n      )\n     err-unstake-postconditions)\n\n    ;; Return\n    (let ((event\n           {op       : \"unstake\",\n            user     : user,\n            amt      : amt,\n            epoch    : epoch,\n            total-old: t-staked,\n            user-old : u-staked,\n            total-new: (get-total-staked),\n            user-new : (get-user-staked user)\n           }))\n      (print event)\n      (ok event) )))\n\n(define-read-only (min (x uint) (y uint)) (if (<= x y) x y))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; staking distribution over time\n\n;; convenience/testing\n(define-read-only\n  (get-unstable-share-at\n     (user  principal)\n     (epoch uint))\n  (if (< epoch (current-epoch))\n      (get-share-at user epoch)\n      (let ((t     (get-total-staked))\n            (u     (get-user-staked user))\n            (t-amt (get end t))\n            (u-amt (get end u))\n            (share {staked: u-amt, total: t-amt}))\n        (ok share))))\n\n(define-read-only\n  (get-share-at\n   (user  principal)\n   (epoch uint))\n\n  (let ((last-block (calc-epoch-end epoch))\n        (header     (unwrap-panic (get-stacks-block-info? id-header-hash last-block)))\n        (t-at       (at-block header (get-total-staked)))\n        (u-at       (at-block header (get-user-staked user)))\n        (t-amt      (eligible-amount epoch t-at))\n        (u-amt      (eligible-amount epoch u-at))\n        (share      {staked: u-amt, total: t-amt}) )\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (< epoch (current-epoch))\n      (<= (get epoch t-at) epoch)\n      (<= (get epoch u-at) epoch)\n      )\n     err-share-preconditions)\n\n      (ok share) ))\n\n(define-read-only\n  (eligible-amount\n   (goal  uint)\n   (entry {epoch: uint, min: uint, end: uint}))\n\n  (if (is-eq goal (get epoch entry))\n      ;; If the specific epoch we are looking at had interactions,\n      ;; only the minimum amount staked continuously during that\n      ;; period counts.\n      (get min entry)\n      ;; Otherwise carry over staked amount from previous active epoch.\n      (get end entry)) )\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract manages a staking system with epochs, tracking the historical distribution of stake shares over time.",
      "explanation": "This Clarity smart contract provides a framework for users to stake and unstake tokens, tracking these actions over time through epochs, which are defined periods based on block heights. It maintains historical data on how much each user and the total system have staked, adjusting for stakes and unstakes over different epochs. The contract ensures that stake distributions are calculated accurately, allowing for the determination of user shares at any given epoch.\n\n- **Errors** (<L2-7>): Defines custom errors for various failure states in staking and unstaking processes.\n- **Constants** (<L10-16>): Sets up basic constants like `MIN-STAKE`, the staking token, and epoch length.\n- **Epoch Calculation** (<L18-32>): Functions to calculate the current epoch, and the start and end of any given epoch based on the block height.\n- **State Variables** (<L34-44>): Maintains the total staked amount and individual user stakes with details on the epoch of the last change, and the minimum and ending stake amounts for the current epoch.\n- **Staking** (<L46-92>): Allows users to stake tokens, updating both their individual stake record and the total staked amount. It checks for various preconditions to ensure valid transactions and updates the state accordingly.\n- **Unstaking** (<L94-140>): Similar to staking, but for withdrawing stakes. It also ensures that the unstake does not violate predefined conditions and updates the state.\n- **Utility Functions** (<L142-144>, <L146-191>): Includes a custom min function and functions to calculate a user's share of the total stake at any given epoch, either currently or historically.\n\nOverall, this contract is designed to track and manage staking activities over time, adjusting for changes in each epoch and ensuring that users can only stake or unstake under valid conditions.",
      "tags": [
        "staking",
        "token-distribution",
        "DeFi",
        "epoch-tracking"
      ]
    }
  },
  {
    "rank": 129,
    "contract": "SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token",
    "calls": 202,
    "source": "(define-constant ERR_NOT_OWNER (err u4)) ;; `tx-sender` or `contract-caller` tried to move a token it does not own.\n(define-constant ERR_TRANSFER_INDEX_PREFIX u1000)\n\n(define-fungible-token sbtc-token)\n(define-fungible-token sbtc-token-locked)\n\n(define-data-var token-name (string-ascii 32) \"sBTC\")\n(define-data-var token-symbol (string-ascii 10) \"sBTC\")\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://ipfs.io/ipfs/bafkreibqnozdui4ntgoh3oo437lvhg7qrsccmbzhgumwwjf2smb3eegyqu\"))\n(define-constant token-decimals u8)\n\n;; --- Protocol functions\n\n(define-public (protocol-lock (amount uint) (owner principal) (contract-flag (buff 1)))\n\t(begin\n\t\t(try! (contract-call? .sbtc-registry is-protocol-caller contract-flag contract-caller))\n\t\t(try! (ft-burn? sbtc-token amount owner))\n\t\t(ft-mint? sbtc-token-locked amount owner)\n\t)\n)\n\n(define-public (protocol-unlock (amount uint) (owner principal) (contract-flag (buff 1)))\n\t(begin\n\t\t(try! (contract-call? .sbtc-registry is-protocol-caller contract-flag contract-caller))\n\t\t(try! (ft-burn? sbtc-token-locked amount owner))\n\t\t(ft-mint? sbtc-token amount owner)\n\t)\n)\n\n(define-public (protocol-mint (amount uint) (recipient principal) (contract-flag (buff 1)))\n\t(begin\n\t\t(try! (contract-call? .sbtc-registry is-protocol-caller contract-flag contract-caller))\n\t\t(ft-mint? sbtc-token amount recipient)\n\t)\n)\n\n(define-public (protocol-burn (amount uint) (owner principal) (contract-flag (buff 1)))\n\t(begin\n\t\t(try! (contract-call? .sbtc-registry is-protocol-caller contract-flag contract-caller))\n\t\t(ft-burn? sbtc-token amount owner)\n\t)\n)\n\n(define-public (protocol-burn-locked (amount uint) (owner principal) (contract-flag (buff 1)))\n\t(begin\n\t\t(try! (contract-call? .sbtc-registry is-protocol-caller contract-flag contract-caller))\n\t\t(ft-burn? sbtc-token-locked amount owner)\n\t)\n)\n\n(define-public (protocol-set-name (new-name (string-ascii 32)) (contract-flag (buff 1)))\n\t(begin\n\t\t(try! (contract-call? .sbtc-registry is-protocol-caller contract-flag contract-caller))\n\t\t(ok (var-set token-name new-name))\n\t)\n)\n\n(define-public (protocol-set-symbol (new-symbol (string-ascii 10)) (contract-flag (buff 1)))\n\t(begin\n\t\t(try! (contract-call? .sbtc-registry is-protocol-caller contract-flag contract-caller))\n\t\t(ok (var-set token-symbol new-symbol))\n\t)\n)\n\n(define-public (protocol-set-token-uri (new-uri (optional (string-utf8 256))) (contract-flag (buff 1)))\n\t(begin\n\t\t(try! (contract-call? .sbtc-registry is-protocol-caller contract-flag contract-caller))\n\t\t(ok (var-set token-uri new-uri))\n\t)\n)\n\n(define-private (protocol-mint-many-iter (item {amount: uint, recipient: principal}))\n\t(ft-mint? sbtc-token (get amount item) (get recipient item))\n)\n\n(define-public (protocol-mint-many (recipients (list 200 {amount: uint, recipient: principal})) (contract-flag (buff 1)))\n\t(begin\n\t\t(try! (contract-call? .sbtc-registry is-protocol-caller contract-flag contract-caller))\n\t\t(ok (map protocol-mint-many-iter recipients))\n\t)\n)\n\n;; --- Public functions\n(define-public (transfer-many\n\t\t\t\t(recipients (list 200 {\n\t\t\t\t\tamount: uint,\n\t\t\t\t\tsender: principal,\n\t\t\t\t\tto: principal,\n\t\t\t\t\tmemo: (optional (buff 34)) })))\n\t(fold transfer-many-iter recipients (ok u0))\n)\n\n(define-private (transfer-many-iter\n\t\t\t\t\t(individual-transfer {\n\t\t\t\t\t\tamount: uint,\n\t\t\t\t\t\tsender: principal,\n\t\t\t\t\t\tto: principal,\n\t\t\t\t\t\tmemo: (optional (buff 34)) })\n\t\t\t\t\t(result (response uint uint)))\n\t(match result\n\t\tindex\n\t\t\t(begin\n\t\t\t\t(unwrap!\n\t\t\t\t\t(transfer\n\t\t\t\t\t\t(get amount individual-transfer)\n\t\t\t\t\t\t(get sender individual-transfer)\n\t\t\t\t\t\t(get to individual-transfer)\n\t\t\t\t\t\t(get memo individual-transfer))\n\t\t\t\t(err (+ ERR_TRANSFER_INDEX_PREFIX index)))\n\t\t\t\t(ok (+ index u1))\n\t\t\t)\n\t\terr-index\n\t\t\t(err err-index)\n\t)\n)\n\n;; sip-010-trait\n\n(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))\n\t(begin\n\t\t(asserts! (or (is-eq tx-sender sender) (is-eq contract-caller sender)) ERR_NOT_OWNER)\n\t\t(try! (ft-transfer? sbtc-token amount sender recipient))\n\t\t(match memo to-print (print to-print) 0x)\n\t\t(ok true)\n\t)\n)\n\n(define-read-only (get-name)\n\t(ok (var-get token-name))\n)\n\n(define-read-only (get-symbol)\n\t(ok (var-get token-symbol))\n)\n\n(define-read-only (get-decimals)\n\t(ok token-decimals)\n)\n\n(define-read-only (get-balance (who principal))\n\t(ok (+ (ft-get-balance sbtc-token who) (ft-get-balance sbtc-token-locked who)))\n)\n\n(define-read-only (get-balance-available (who principal))\n\t(ok (ft-get-balance sbtc-token who))\n)\n\n(define-read-only (get-balance-locked (who principal))\n\t(ok (ft-get-balance sbtc-token-locked who))\n)\n\n(define-read-only (get-total-supply)\n\t(ok (+ (ft-get-supply sbtc-token) (ft-get-supply sbtc-token-locked)))\n)\n\n(define-read-only (get-token-uri)\n\t(ok (var-get token-uri))\n)",
    "analysis": {
      "summary": "This contract manages a fungible token with lockable and unlockable functionalities, alongside protocol-specific operations like minting, burning, and updating token metadata.",
      "explanation": "The contract defines two types of fungible tokens: `sbtc-token` and `sbtc-token-locked`, representing the main token and its locked state, respectively. It includes mechanisms for locking tokens to restrict their transferability, unlocking them for normal use, and protocol-level operations such as minting and burning tokens, both in their standard and locked forms. The contract also allows updating token metadata like name, symbol, and URI, and supports batch operations for minting and transferring tokens to multiple recipients. Key functions include `protocol-lock` and `protocol-unlock` for changing the state of tokens between locked and unlocked, `protocol-mint` and `protocol-burn` for adjusting the token supply, and `transfer-many` for distributing tokens to multiple addresses. The contract adheres to the SIP-010 standard for fungible tokens on the Stacks blockchain, ensuring compatibility with wallets and other contracts expecting standard token interfaces.",
      "tags": [
        "fungible-token",
        "DeFi",
        "protocol",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 130,
    "contract": "SP1QMFV1W1T3CX70W6V95VWGSBJA3WFMVZRABE1FN.stableswap-stx-ststx-v-1-1",
    "calls": 202,
    "source": "(define-constant A tx-sender)\n\n(define-public (swap-x-for-y (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\ta0 u0)))\n\t\t(a1 (unwrap-panic (element-at b0 u1)))\n\t(b1 (try! (contract-call?\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l\n\t\ta1 u0)))\n\t(a2 (unwrap-panic (element-at b1 u0)))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n\t))))\n\n(define-public (swap-y-for-x (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l\n\t\ta0 u0)))\n\t(a1 (unwrap-panic (element-at b0 u1)))\n\t(b1 (try! (contract-call?\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\ta1 u0)))\n\t\t(a2 (unwrap-panic (element-at b1 u0)))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n\t))))\n\n(define-public (swap-helper (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token\n\t\tu100000000 (* a0 u100) none)))\n\t(a1 (get dy b0))\n\t(b1 (try! (contract-call?\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko\n\t\tu100000000 a1 none)))\n\t(a2 (/ (get dy b1) u100))\n\t(b2 (try! (contract-call?\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c\n\t\ta2 u0)))\n\t(a3 (unwrap-panic (element-at b2 u0)))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))\n\n(define-public (swap-helper-a (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kt9nmle8c\n\t\ta0 u0)))\n\t(a1 (unwrap-panic (element-at b0 u1)))\n\t(b1 (try! (contract-call?\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko\n\t\tu100000000 (* a1 u100) none)))\n\t(a2 (get dx b1))\n\t(b2 (try! (contract-call?\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token\n\t\tu100000000 a2 none)))\n\t(a3 (/ (get dx b2) u100))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))",
    "analysis": {
      "summary": "This contract enables swapping of tokens across different decentralized exchanges (DEXs) on the Stacks blockchain, ensuring the user receives a greater amount of tokens than they started with.",
      "explanation": "The contract consists of multiple public functions designed to interact with various DEXs to swap tokens. Each function follows a similar pattern: verify the caller, transfer STX to the contract, perform the swap(s), and ensure the final amount of tokens received is greater than the initial amount sent.\n\n- <L1> A constant 'A' is defined as the transaction sender, restricting contract operations to the initial deployer.\n- <L3-27> `swap-x-for-y` swaps tokens 'x' for 'y' using two different DEXs and ensures the final amount of 'y' is greater than the initial amount of 'x'.\n- <L29-53> `swap-y-for-x` performs the reverse operation of `swap-x-for-y`, swapping tokens 'y' for 'x'.\n- <L55-87> `swap-helper` is a utility function that swaps tokens through a specific path, potentially involving multiple swaps to achieve a desired token outcome.\n- <L89-119> `swap-helper-a` is similar to `swap-helper` but follows a different swap path or strategy.\n\nEach swap function utilizes `asserts!` to ensure the caller is the deployer, `try!` for STX transfers and contract calls, and `unwrap-panic` to handle return values from contract calls. The use of `as-contract` ensures actions are performed by the contract itself, not the user, for actions like STX transfers.",
      "tags": [
        "DeFi",
        "DEX",
        "token-swap",
        "smart-contracts"
      ]
    }
  },
  {
    "rank": 131,
    "contract": "SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.redemption-vault-v0",
    "calls": 200,
    "source": ";; Charisma Redemption Vault\n;; https://charisma.rocks\n\n(define-constant err-unauthorized (err u401))\n(define-constant err-liquidity-lock (err u402))\n(define-constant err-not-blue-pilled (err u403))\n(define-constant err-insufficient-ious (err u404))\n\n(define-constant contract (as-contract tx-sender))\n(define-constant max-claim-amount-welsh u10000000000)\n(define-constant max-claim-amount-roo u100000000)\n\n(define-data-var lock-enabled bool false)\n\n;; --- Authorization checks\n\n(define-read-only (is-dao-or-extension)\n  (or (is-eq tx-sender 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dungeon-master) (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dungeon-master is-extension contract-caller))\n)\n\n(define-read-only (is-authorized)\n  (ok (asserts! (is-dao-or-extension) err-unauthorized))\n)\n\n(define-read-only (is-blue-pilled)\n  (ok (asserts! (contract-call? .blue-pill-nft has-balance tx-sender) err-not-blue-pilled))\n)\n\n(define-read-only (get-available-welsh)\n  (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance contract)\n)\n\n(define-read-only (get-available-roo)\n  (contract-call? 'SP2C1WREHGM75C7TGFAEJPFKTFTEGZKF6DFT6E2GE.kangaroo get-balance contract)\n)\n\n(define-read-only (is-locked)\n  (ok (var-get lock-enabled))\n)\n\n(define-public (toggle-lock)\n  (begin\n    (try! (is-authorized))\n    (ok (var-set lock-enabled (not (var-get lock-enabled))))\n  )\n)\n\n(define-public (redeem-welsh (amount uint))\n  (let (\n    (sender tx-sender)\n    (available-tokens (unwrap-panic (get-available-welsh)))\n    (claim-amount (if (> amount max-claim-amount-welsh) max-claim-amount-welsh amount))\n    (final-amount (if (> claim-amount available-tokens) available-tokens claim-amount))\n  )\n    (asserts! (or (not (var-get lock-enabled)) (try! (is-blue-pilled))) err-not-blue-pilled)\n    (asserts! (>= (unwrap-panic (contract-call? .synthetic-welsh get-balance sender)) final-amount) err-insufficient-ious)\n    \n    ;; Burn synthetic-welsh tokens\n    (try! (contract-call? .synthetic-welsh burn final-amount))\n    \n    ;; Transfer welshcorgicoin tokens\n    (as-contract (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token transfer final-amount contract sender none))\n  )\n)\n\n(define-public (redeem-roo (amount uint))\n  (let (\n    (sender tx-sender)\n    (available-tokens (unwrap-panic (get-available-roo)))\n    (claim-amount (if (> amount max-claim-amount-roo) max-claim-amount-roo amount))\n    (final-amount (if (> claim-amount available-tokens) available-tokens claim-amount))\n  )\n    (asserts! (or (not (var-get lock-enabled)) (try! (is-blue-pilled))) err-not-blue-pilled)\n    (asserts! (>= (unwrap-panic (contract-call? .synthetic-roo get-balance sender)) final-amount) err-insufficient-ious)\n    \n    ;; Burn synthetic-roo tokens\n    (try! (contract-call? .synthetic-roo burn final-amount))\n    \n    ;; Transfer roo tokens\n    (as-contract (contract-call? 'SP2C1WREHGM75C7TGFAEJPFKTFTEGZKF6DFT6E2GE.kangaroo transfer final-amount contract sender none))\n  )\n)\n\n(define-public (deposit-welsh (amount uint))\n  (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token transfer amount tx-sender contract none)\n)\n\n(define-public (deposit-roo (amount uint))\n  (contract-call? 'SP2C1WREHGM75C7TGFAEJPFKTFTEGZKF6DFT6E2GE.kangaroo transfer amount tx-sender contract none)\n)",
    "analysis": {
      "summary": "This contract serves as a redemption vault for synthetic tokens, allowing users to redeem synthetic Welsh and Roo tokens for their real counterparts, with mechanisms for authorization, liquidity checks, and lock toggling.",
      "explanation": "The contract defines a redemption mechanism for two types of synthetic tokens, Welsh and Roo, into their real counterparts. It includes error codes for unauthorized access, liquidity lock, lack of blue pill ownership, and insufficient IOUs. The contract uses external calls to check balances and transfer tokens, and it incorporates a lock mechanism to restrict redemptions.\n\n- Constants like `err-unauthorized` and `max-claim-amount-welsh` define error codes and limits <L3-6>.\n- `lock-enabled` is a boolean variable controlling the lock state of the contract <L8>.\n- `is-dao-or-extension` checks if the caller is authorized as the DAO or an extension by comparing `tx-sender` or using a contract call <L12-14>.\n- `is-authorized` ensures that only authorized users can toggle the lock <L16-18>.\n- `is-blue-pilled` checks if the caller owns a blue pill NFT, a prerequisite for certain actions <L20-22>.\n- `get-available-welsh` and `get-available-roo` are read-only functions that check the contract's balance of Welsh and Roo tokens <L24-30>.\n- `toggle-lock` allows authorized users to toggle the redemption lock <L32-37>.\n- `redeem-welsh` and `redeem-roo` allow users to redeem synthetic tokens for real ones, with checks for lock status, blue pill ownership, and sufficient synthetic token balance. They burn the synthetic tokens and transfer real tokens to the caller <L39-70>.\n- `deposit-welsh` and `deposit-roo` are public functions that allow users to deposit real Welsh and Roo tokens into the contract <L72-79>.\n\nEach function incorporates security and logic checks to ensure proper operation, such as authorization checks, balance verifications, and conditional logic for claim amounts.",
      "tags": [
        "DeFi",
        "synthetic-tokens",
        "redemption-vault",
        "authorization",
        "liquidity-management"
      ]
    }
  },
  {
    "rank": 132,
    "contract": "SP3X384EHYMSQPRKZE2R61J81V0G11KTMKDZTS8NK.tokenmobiles-43",
    "calls": 200,
    "source": ";; tokenmobiles-43\n;; contractType: editions\n\n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-non-fungible-token tokenmobiles-43 uint)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant COMM u1000)\n(define-constant COMM-ADDR 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S)\n\n(define-constant ERR-NO-MORE-NFTS u100)\n(define-constant ERR-NOT-ENOUGH-PASSES u101)\n(define-constant ERR-PUBLIC-SALE-DISABLED u102)\n(define-constant ERR-CONTRACT-INITIALIZED u103)\n(define-constant ERR-NOT-AUTHORIZED u104)\n(define-constant ERR-INVALID-USER u105)\n(define-constant ERR-LISTING u106)\n(define-constant ERR-WRONG-COMMISSION u107)\n(define-constant ERR-NOT-FOUND u108)\n(define-constant ERR-PAUSED u109)\n(define-constant ERR-MINT-LIMIT u110)\n(define-constant ERR-METADATA-FROZEN u111)\n(define-constant ERR-AIRDROP-CALLED u112)\n(define-constant ERR-NO-MORE-MINTS u113)\n(define-constant ERR-INVALID-PERCENTAGE u114)\n(define-constant ERR-CONTRACT-LOCKED u115)\n\n;; Internal variables\n(define-data-var mint-limit uint u200)\n(define-data-var last-id uint u1)\n(define-data-var total-price uint u4000000)\n(define-data-var artist-address principal 'SP3X384EHYMSQPRKZE2R61J81V0G11KTMKDZTS8NK)\n(define-data-var ipfs-root (string-ascii 80) \"ipfs://ipfs/QmTZV6YkuWcDC3UTwY9rFmZPFVWA48sZqvJbi1DwQHwJta/\")\n(define-data-var mint-paused bool true)\n(define-data-var premint-enabled bool false)\n(define-data-var sale-enabled bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var airdrop-called bool false)\n(define-data-var mint-cap uint u0)\n(define-data-var locked bool false)\n\n(define-map mints-per-user principal uint)\n(define-map mint-passes principal uint)\n\n(define-public (lock-contract)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set locked true)\n    (ok true)))\n\n(define-public (claim) \n  (mint (list true)))\n\n;; Default Minting\n(define-private (mint (orders (list 25 bool)))\n  (mint-many orders))\n\n(define-private (mint-many (orders (list 25 bool )))  \n  (let \n    (\n      (last-nft-id (var-get last-id))\n      (enabled (asserts! (or (is-eq (var-get mint-limit) u0) (<= last-nft-id (var-get mint-limit))) (err ERR-NO-MORE-NFTS)))\n      (art-addr (var-get artist-address))\n      (id-reached (fold mint-many-iter orders last-nft-id))\n      (price (* (var-get total-price) (- id-reached last-nft-id)))\n      (total-commission (/ (* price COMM) u10000))\n      (current-balance (get-balance tx-sender))\n      (total-artist (- price total-commission))\n      (capped (> (var-get mint-cap) u0))\n      (user-mints (get-mints tx-sender))\n    )\n    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))\n    (asserts! (is-eq (var-get locked) false) (err ERR-CONTRACT-LOCKED))\n    (asserts! (or (not capped) (is-eq tx-sender DEPLOYER) (is-eq tx-sender art-addr) (>= (var-get mint-cap) (+ (len orders) user-mints))) (err ERR-NO-MORE-MINTS))\n    (map-set mints-per-user tx-sender (+ (len orders) user-mints))\n    (if (or (is-eq tx-sender art-addr) (is-eq tx-sender DEPLOYER) (is-eq (var-get total-price) u0000000))\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n      )\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n        (try! (stx-transfer? total-artist tx-sender (var-get artist-address)))\n        (try! (stx-transfer? total-commission tx-sender COMM-ADDR))\n      )    \n    )\n    (ok id-reached)))\n\n(define-private (mint-many-iter (ignore bool) (next-id uint))\n  (if (or (is-eq (var-get mint-limit) u0) (<= next-id (var-get mint-limit)))\n    (begin\n      (unwrap! (nft-mint? tokenmobiles-43 next-id tx-sender) next-id)\n      (+ next-id u1)    \n    )\n    next-id))\n\n(define-public (set-artist-address (address principal))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set artist-address address))))\n\n(define-public (set-price (price uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set total-price price))))\n\n(define-public (toggle-pause)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set mint-paused (not (var-get mint-paused))))))\n\n(define-public (set-mint-limit (limit uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))\n    (ok (var-set mint-limit limit))))\n\n(define-public (burn (token-id uint))\n  (begin \n    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))\n    (nft-burn? tokenmobiles-43 token-id tx-sender)))\n\n(define-private (is-owner (token-id uint) (user principal))\n    (is-eq user (unwrap! (nft-get-owner? tokenmobiles-43 token-id) false)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))\n    (print { notification: \"token-metadata-update\", payload: { token-class: \"nft\", contract-id: (as-contract tx-sender) }})\n    (var-set ipfs-root new-base-uri)\n    (ok true)))\n\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Non-custodial SIP-009 transfer function\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))\n    (trnsfr id sender recipient)))\n\n;; read-only functions\n(define-read-only (get-owner (token-id uint))\n  (ok (nft-get-owner? tokenmobiles-43 token-id)))\n\n(define-read-only (get-last-token-id)\n  (ok (- (var-get last-id) u1)))\n\n(define-read-only (get-token-uri (token-id uint))\n  (ok (some (var-get ipfs-root))))\n\n(define-read-only (get-paused)\n  (ok (var-get mint-paused)))\n\n(define-read-only (get-price)\n  (ok (var-get total-price)))\n\n(define-read-only (get-artist-address)\n  (ok (var-get artist-address)))\n\n(define-read-only (get-locked)\n  (ok (var-get locked)))\n\n(define-read-only (get-mints (caller principal))\n  (default-to u0 (map-get? mints-per-user caller)))\n\n(define-read-only (get-mint-limit)\n  (ok (var-get mint-limit)))\n\n(define-data-var license-uri (string-ascii 80) \"\")\n(define-data-var license-name (string-ascii 40) \"\")\n\n(define-read-only (get-license-uri)\n  (ok (var-get license-uri)))\n  \n(define-read-only (get-license-name)\n  (ok (var-get license-name)))\n  \n(define-public (set-license-uri (uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-uri uri))))\n    \n(define-public (set-license-name (name (string-ascii 40)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-name name))))\n\n;; Non-custodial marketplace extras\n(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)\n\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal, royalty: uint})\n\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? tokenmobiles-43 id sender recipient)\n    success\n      (let\n        ((sender-balance (get-balance sender))\n        (recipient-balance (get-balance recipient)))\n          (map-set token-count\n            sender\n            (- sender-balance u1))\n          (map-set token-count\n            recipient\n            (+ recipient-balance u1))\n          (ok success))\n    error (err error)))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? tokenmobiles-43 id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? tokenmobiles-43 id) (err ERR-NOT-FOUND)))\n      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))\n      (price (get price listing))\n      (royalty (get royalty listing)))\n    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (pay-royalty price royalty))\n    (try! (contract-call? comm-trait pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))\n    \n(define-data-var royalty-percent uint u500)\n\n(define-read-only (get-royalty-percent)\n  (ok (var-get royalty-percent)))\n\n(define-public (set-royalty-percent (royalty uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))\n    (ok (var-set royalty-percent royalty))))\n\n(define-private (pay-royalty (price uint) (royalty uint))\n  (let (\n    (royalty-amount (/ (* price royalty) u10000))\n  )\n  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))))\n    (try! (stx-transfer? royalty-amount tx-sender (var-get artist-address)))\n    (print false)\n  )\n  (ok true)))\n  \n\n;; Airdrop\n(define-public (admin-airdrop)\n  (let\n    (\n      (last-nft-id (var-get last-id))\n    )\n    (begin\n      (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n      (asserts! (is-eq false (var-get airdrop-called)) (err ERR-AIRDROP-CALLED))\n      (try! (nft-mint? tokenmobiles-43 (+ last-nft-id u0) 'SP1YZ7GYG4F7DGRAY0TDN5Z2GGPXDYKN7NGFDWEJC))\n      (map-set token-count 'SP1YZ7GYG4F7DGRAY0TDN5Z2GGPXDYKN7NGFDWEJC (+ (get-balance 'SP1YZ7GYG4F7DGRAY0TDN5Z2GGPXDYKN7NGFDWEJC) u1))\n      (try! (nft-mint? tokenmobiles-43 (+ last-nft-id u1) 'SP1YZ7GYG4F7DGRAY0TDN5Z2GGPXDYKN7NGFDWEJC))\n      (map-set token-count 'SP1YZ7GYG4F7DGRAY0TDN5Z2GGPXDYKN7NGFDWEJC (+ (get-balance 'SP1YZ7GYG4F7DGRAY0TDN5Z2GGPXDYKN7NGFDWEJC) u1))\n\n      (var-set last-id (+ last-nft-id u2))\n      (var-set airdrop-called true)\n      (ok true))))",
    "analysis": {
      "summary": "This contract implements a non-fungible token (NFT) collection with minting, burning, and transfer capabilities, alongside artist-defined royalties, metadata management, and a marketplace for listing and purchasing NFTs.",
      "explanation": "The contract starts by implementing a trait from another contract, ensuring it adheres to a standard NFT interface. It defines a non-fungible token called 'tokenmobiles-43' with a unique identifier of type uint. Various constants and variables are declared for managing the contract's state, including mint limits, artist addresses, and metadata information. The contract includes functions for minting (`mint` and `mint-many`), which allow for the creation of new tokens up to a specified limit and under certain conditions, such as not being paused or locked. The `burn` function allows token owners to destroy their tokens. It also includes administrative functions for setting the artist's address, minting price, and toggling the minting pause state. Metadata management is facilitated through functions for setting the base URI and freezing metadata to prevent further changes. The contract supports a basic marketplace with listing, unlisting, and buying functions, incorporating artist-defined royalties on sales. Additionally, there's an airdrop function for the contract owner or artist to mint tokens directly to a specified address. The contract ensures that only authorized users (e.g., the artist or deployer) can perform certain actions, like changing critical settings or performing airdrops, and includes checks to prevent unauthorized access or actions that would violate the contract's rules.",
      "tags": [
        "NFT",
        "marketplace",
        "royalties",
        "metadata-management",
        "minting",
        "burning",
        "airdrop"
      ]
    }
  },
  {
    "rank": 133,
    "contract": "SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity",
    "calls": 199,
    "source": "\n;; @title Bonding Curve Token by STX.CITY\n;; @version 2.0\n;; @hash teqEgDGRqVP4fBFHja2kAg:6sbJv5ZsT9Cu7ACGk7K34Q:xuN0qP_c57Izc7rGhvpebFjxj07HNN2_oI92fmzS1B_1PfwYc0gZhS9jzBiv1nsZvSIv3g_7tsf-ukd84evdL5W_ioLFABd_aePdEbHMVMU\n\n;; Errors \n(define-constant ERR-UNAUTHORIZED u401)\n(define-constant ERR-NOT-OWNER u402)\n(define-constant ERR-INVALID-PARAMETERS u403)\n(define-constant ERR-NOT-ENOUGH-FUND u101)\n\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Constants\n(define-constant MAXSUPPLY u777777777000000)\n\n;; Variables\n(define-fungible-token FlatEarth MAXSUPPLY)\n(define-data-var contract-owner principal tx-sender) \n\n\n\n;; SIP-10 Functions\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender) (err ERR-UNAUTHORIZED))\n        (ft-transfer? FlatEarth amount from to)\n    )\n)\n\n\n;; DEFINE METADATA\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://pdakhjpwkuwtadzmpnjm.supabase.co/storage/v1/object/public/uri/tXnDRnwO-flat-earth-0-decimals.json\"))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (begin\n        (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))\n        (var-set token-uri (some value))\n        (ok (print {\n              notification: \"token-metadata-update\",\n              payload: {\n                contract-id: (as-contract tx-sender),\n                token-class: \"ft\"\n              }\n            })\n        )\n    )\n)\n\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance FlatEarth owner))\n)\n(define-read-only (get-name)\n  (ok \"Flat Earth\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"FlatEarth\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply FlatEarth))\n)\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri))\n)\n\n;; transfer ownership\n(define-public (transfer-ownership (new-owner principal))\n  (begin\n    ;; Checks if the sender is the current owner\n    (if (is-eq tx-sender (var-get contract-owner))\n      (begin\n        ;; Sets the new owner\n        (var-set contract-owner new-owner)\n        ;; Returns success message\n        (ok \"Ownership transferred successfully\"))\n      ;; Error if the sender is not the owner\n      (err ERR-NOT-OWNER)))\n)\n\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n(define-private (send-stx (recipient principal) (amount uint))\n  (begin\n    (try! (stx-transfer? amount tx-sender recipient))\n    (ok true) \n  )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n    (try! (send-stx 'SP11WRT9TPPKP5492X3VE81CM1T74MD13SPFT527D u1000000))\n    (try! (ft-mint? FlatEarth u700070006300630 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity-dex))\n    (try! (ft-mint? FlatEarth u77707770699370 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH))\n    \n    (try! (send-stx 'SP3W69VDG9VTZNG7NTW1QNCC1W45SNY98W1JSZBJH.flat-earth-stxcity-dex u222000000))\n    (try! (send-stx 'SP1WTA0YBPC5R6GDMPPJCEDEA6Z2ZEPNMQ4C39W6M u111000000))\n \n)\n",
    "analysis": {
      "summary": "This contract implements a fungible token named FlatEarth with a fixed supply, utilizing a bonding curve for distribution, and includes features for token transfer, metadata management, and ownership transfer.",
      "explanation": "The contract defines a fungible token 'FlatEarth' with a maximum supply and implements the SIP-010 standard for fungible tokens on the Stacks blockchain. It includes functions for transferring tokens, setting and retrieving token metadata, transferring contract ownership, and utility functions for batch token transfers and STX transfers. The minting process is initiated at the contract's deployment, distributing tokens to specific addresses and sending STX to others, likely for initial liquidity or similar purposes.\n\n- The `ERR-*` constants (<L5-8>) define error codes for various failure states.\n- The `MAXSUPPLY` constant (<L11>) sets the token's maximum supply.\n- The `FlatEarth` fungible token is defined with this supply limit (<L13>), and the contract owner is initially set to the transaction sender (<L14>).\n- SIP-010 standard functions (<L17-75>) provide the necessary interface for a fungible token, including `transfer`, `get-balance`, and others, ensuring compatibility with wallets and other contracts expecting this standard.\n- The `transfer-ownership` function (<L76-87>) allows the current owner to transfer ownership to a new principal.\n- Utility functions (<L89-117>) include `send-many` for batch processing of token transfers and `send-stx` for transferring STX, demonstrating advanced contract capabilities like batch operations and interacting with native STX tokens.\n- The minting process (<L119-125>) and initial STX transfers (<L126-127>) are executed as part of the contract's initialization, setting up initial token distribution and possibly liquidity provision for a decentralized exchange (DEX).",
      "tags": [
        "fungible-token",
        "SIP-010",
        "token-metadata",
        "ownership-transfer",
        "utility-functions",
        "minting",
        "STX-transfer"
      ]
    }
  },
  {
    "rank": 134,
    "contract": "SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.farming-wstx-roo-distributor3",
    "calls": 199,
    "source": ";;; Distributor: receive and distribute rewards.\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(impl-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-receive-trait.farming-receive-trait)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; errors\n(define-constant err-check-owner               (err u801))\n(define-constant err-receive-preconditions     (err u802))\n(define-constant err-distribute-preconditions  (err u803))\n(define-constant err-distribute-postconditions (err u804))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; constants\n(define-constant REWARD-TOKEN 'SP14NS8MVBRHXMM96BQY0727AJ59SWPV7RMHC0NCG.pontis-bridge-ROONS)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; auth\n(define-data-var owner principal tx-sender)\n(define-read-only (get-owner) (var-get owner))\n(define-private (check-owner)\n  (ok (asserts! (is-eq tx-sender (get-owner)) err-check-owner)))\n(define-public (set-owner (new-owner principal))\n  (begin\n   (try! (check-owner))\n   (ok (var-set owner new-owner)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; accounting\n(define-map revenue uint uint) ;;epoch -> cumulative token rewards\n\n(define-read-only (get-revenue-at (epoch uint))\n  (default-to u0 (map-get? revenue epoch) ))\n\n;; Called by operator.\n;; MUST ALWAYS BE ACCOMPANIED BY A CORRECT TRANSFER!\n;; Could also store balance and compare to previous but that adds code.\n(define-data-var balance uint u0)\n\n(define-read-only (get-balance)\n  (var-get balance))\n\n(define-private (sync (new-balance uint))\n  (var-set balance new-balance))\n\n(define-public\n  (receive\n   (token <ft-trait>)\n   (amt   uint)\n   (from  principal))\n\n  (let ((epoch (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-wstx-roo-core current-epoch))\n        (r     (get-revenue-at epoch))\n        (bal   (unwrap-panic\n                (contract-call?\n                 token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n     (and\n      (is-eq (contract-of token) REWARD-TOKEN)\n    ;;(> amt u0)\n      (is-eq from (get-owner))\n      (>= bal (+ (get-balance) amt))\n      )\n      err-receive-preconditions)\n\n    (try! (check-owner))\n    (sync bal)\n    ;; (var-set balance (+ (var-get balance) amt))\n    (ok (map-set revenue epoch (+ r amt)) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; claims\n(define-map claims\n  {user: principal, epoch: uint}\n  uint) ;;block number claimed at\n\n(define-private\n  (do-claim\n   (user principal)\n   (epoch uint))\n  (map-set claims\n           {user: user, epoch: epoch}\n           stacks-block-height))\n\n(define-read-only\n  (has-claimed-epoch\n   (user principal)\n   (epoch uint))\n  (is-some (map-get? claims {user: user, epoch: epoch})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; low level API\n(define-private\n  (do-distribute\n   (user  principal)\n   (token <ft-trait>)\n   (amt   uint))\n\n  (let ((protocol (as-contract tx-sender)))\n    (ok (if (> amt u0)\n        (try!\n         (as-contract\n          (contract-call?\n           token transfer amt protocol user none)))\n        true)) ))\n\n(define-read-only\n  (calc-distribute\n   (share {staked: uint, total: uint})\n   (amt   uint))\n\n  (if (> (get total share) u0)\n      (/ (* amt (get staked share)) (get total share))\n      u0) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epoch\n(define-private\n  (distribute-epoch\n   (user   principal)\n   (token  <ft-trait>)\n   (epoch  uint))\n\n  (let ((reward (unwrap-panic (get-reward user epoch))))\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (not (has-claimed-epoch user epoch))\n    ;;(< epoch (current-epoch)) checked by get-share-at\n      (is-eq (contract-of token) REWARD-TOKEN)\n      )\n     err-distribute-preconditions)\n\n    ;; Update global state\n    (try! (do-distribute user token (get amt reward)))\n\n    ;; Update local state\n    (do-claim user epoch)\n\n    ;; Postconditions\n\n    (ok true)) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epochs\n(define-private\n  (distribute-epochs-step\n   (epoch uint)\n   (args  {user: principal, token: <ft-trait>}))\n\n  (let ((res_\n         (unwrap-panic\n          (distribute-epoch\n           (get user args)\n           (get token args)\n           epoch)) ))\n    args))\n\n(define-public\n  (distribute-epochs\n   (user   principal)\n   (token  <ft-trait>)\n   (epochs (list 10 uint))) ;;XXX: MAX-EPOCHS\n\n  (let ((args {user : user,\n               token: token})\n        (res_ (fold distribute-epochs-step epochs args))\n        (bal (unwrap-panic (contract-call? token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n      (is-eq (contract-of token) REWARD-TOKEN)\n      err-distribute-preconditions)\n\n    ;; Update local state\n    (sync bal)\n\n    ;; Return\n    (let ((event\n           {op    : \"distribute-epochs\",\n            user  : user,\n            epochs: epochs\n            }))\n      (print event)\n      (ok event) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; compute reward epoch list\n\n;; Returns epochs starting at `start-epoch' for which `user' has\n;; non-zero rewards.\n;; Pagination via GENESIS-EPOCH and `end-epoch'.\n(define-read-only\n  (get-reward\n   (user principal)\n   (epoch uint))\n\n  (let ((share   (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-wstx-roo-core get-share-at user epoch)))\n        (rev     (get-revenue-at epoch))\n        (calc    (calc-distribute share rev))\n        (claimed (default-to u0 (map-get? claims {user: user, epoch: epoch})))\n        (amt     (if (is-eq claimed u0) calc u0)))\n    (ok {share  : share,\n         rev    : rev,\n         calc   : calc,\n         claimed: claimed,\n         amt    : amt})))\n\n(define-read-only\n  (get-rewards-step\n   (epoch uint)\n   (state {user: principal,\n           acc : (list 10 ;;XXX: MAX-EPOCHS\n                       {epoch : uint,\n                        reward: uint}) }) )\n\n  (let ((reward (unwrap-panic\n                 (get-reward (get user state)\n                             epoch)))\n        (amt    (get amt reward)))\n\n    {user: (get user state),\n     acc : (if (> amt u0)\n               (unwrap-panic\n                (as-max-len?\n                 (append (get acc state) {epoch: epoch, reward: amt}) ;;FIXME: reward?\n                 u10))\n               (get acc state))\n     }))\n\n(define-read-only\n  (get-rewards\n   (user        principal)\n   (start-epoch uint))\n\n  (let ((end-epoch     (+ start-epoch MAX-EPOCHS)) ;;next\n        (epochs_       (mkepochs start-epoch))\n        (reward-epochs (fold get-rewards-step epochs_ {user: user, acc: (list)})))\n\n    {reward-epochs: (get acc reward-epochs),\n     end-epoch    : end-epoch} ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; epochs\n(define-constant OFFSETS (list u0 u1 u2 u3 u4 u5 u6 u7 u8 u9))\n(define-constant MAX-EPOCHS (len OFFSETS)) ;;10\n\n(define-private\n  (epochs-step\n   (i_    uint)\n   (state {epoch: uint, current: uint, acc: (list 10 uint)})) ;; XXX: MAX-EPOCHS\n  {epoch: (+ (get epoch state) u1),\n   current: (get current state),\n   acc  : (if (>= (get epoch state) (get current state))\n              (get acc state)\n              (unwrap-panic\n               (as-max-len?\n                (append (get acc state) (get epoch state))\n                u10)))\n   })\n\n(define-read-only (mkepochs (start-epoch uint))\n  (let ((current (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-wstx-roo-core current-epoch))\n        (state0  {epoch: start-epoch, current: current, acc: (list)})\n        (state   (fold epochs-step OFFSETS state0)))\n    (get acc state)))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract is designed to receive, track, and distribute reward tokens to users based on their participation in a farming protocol.",
      "explanation": "The contract implements functionality to manage reward distribution for a farming protocol. It uses the SIP-010 trait for fungible tokens to handle reward tokens and a custom trait for receiving rewards. The contract allows setting and updating the owner, synchronizing balance with actual token transfers, claiming rewards for specific epochs, and distributing rewards to users based on their share of the total staked tokens.\n\n- The `use-trait` and `impl-trait` statements <L1-2> link external contracts/interfaces for interoperability.\n- Error codes <L5-8> define specific failure modes related to ownership checks and reward distribution conditions.\n- A constant <L11> specifies the reward token's contract address.\n- Ownership management <L14-25> is handled through a variable and functions to get and set the contract's owner.\n- The `revenue` map <L28> and related functions <L30-41> track cumulative token rewards by epoch.\n- The `receive` function <L43-68> updates the contract's balance and revenue mapping when tokens are received, enforcing several preconditions for security.\n- Claims management <L70-87> is facilitated through a map and functions to track and verify if rewards for specific epochs have been claimed.\n- The `do-distribute` <L89-105> and `calc-distribute` <L107-114> functions handle the calculations and operations to distribute rewards to users.\n- The `distribute-epoch` <L116-137> and `distribute-epochs` <L139-168> functions manage the distribution of rewards for single or multiple epochs, respectively, including updating global and local state and enforcing preconditions.\n- Reward calculation and epoch management <L170-231> are handled through a series of functions that compute rewards for users based on their share and manage epoch lists for reward distribution.\n\nOverall, the contract is designed with a focus on security and efficiency, using Clarity's features like `asserts!`, `map-set`, and `fold` to ensure correct operation and minimize potential for errors.",
      "tags": [
        "DeFi",
        "farming-protocol",
        "fungible-token",
        "rewards-distribution"
      ]
    }
  },
  {
    "rank": 135,
    "contract": "SP1QMFV1W1T3CX70W6V95VWGSBJA3WFMVZRABE1FN.stableswap-ststx-wstx-v1-1",
    "calls": 196,
    "source": "(define-constant A tx-sender)\n\n(define-public (swap-x-for-y (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu21\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n        'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta0 u1)))\n\t(a1 (get amt-out b0))\n\t(b1 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu22\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token\n        'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta1 u1)))\n\t(a2 (get amt-out b1))\n\t(b2 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu6\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n        'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta2 u1)))\n\t(a3 (get amt-out b2))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))\n\n(define-public (swap-y-for-x (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu6\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta0 u1)))\n\t(a1 (get amt-out b0))\n\t(b1 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu22\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta1 u1)))\n\t(a2 (get amt-out b1))\n\t(b2 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu21\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta2 u1)))\n\t(a3 (get amt-out b2))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))",
    "analysis": {
      "summary": "This contract defines two public functions for swapping tokens in a decentralized finance (DeFi) protocol, ensuring that the swap results in a profit.",
      "explanation": "The contract contains two main functions, `swap-x-for-y` and `swap-y-for-x`, which interact with a decentralized exchange (DEX) router to swap tokens. Each function performs a series of swaps between different token pairs and ensures that the final amount of tokens received is greater than the amount initially sent. If the final amount is not greater, the transaction is reverted.\n\n- <L1> A constant `A` is defined as the transaction sender, which is used to restrict who can call the swap functions.\n\n- <L3-37> The `swap-x-for-y` function begins by checking if the caller is the constant `A` defined at the beginning. It then performs a series of token swaps by calling the `swap-exact-tokens-for-tokens` function on a DEX router contract. The swaps are designed to change the token type step by step, finally returning to the original sender a greater amount of the initial token, or reverting the transaction if not profitable.\n\n- Each `let` block within `as-contract` scopes variables for the swap sequence, utilizing `contract-call?` to interact with external contracts and `get` to extract the `amt-out` from the swap results.\n\n- The `asserts!` statement ensures the swap resulted in profit by comparing the final amount of tokens received (`a3`) with the initial amount sent (`a0`). If the condition is not met, it errors out with the final amount `a3`.\n\n- The `stx-transfer?` calls transfer STX tokens to and from the contract and the original caller, facilitating the swap's funding and profit return.\n\n- <L39-73> The `swap-y-for-x` function mirrors `swap-x-for-y` but targets a different initial and final token, potentially catering to different market conditions or swap strategies.\n\n- The use of `as-contract` ensures that actions within its scope are executed with the contract itself as the sender, which is necessary for certain operations like transferring tokens that the contract holds.",
      "tags": [
        "DeFi",
        "token-swap",
        "protocol",
        "DEX"
      ]
    }
  },
  {
    "rank": 136,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v144",
    "calls": 194,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-b (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-c (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-e (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-f (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-g (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-i (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-j (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-k (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-l (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-m (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-n (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-p (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-q (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-r (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-s (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-t (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-u (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-w (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-x (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53)))) (asserts! (> o24ee854d6599d6a5 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o24ee854d6599d6a5 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o24ee854d6599d6a5))))) (define-public (swap-helper-y (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-z (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115)))))",
    "analysis": {
      "summary": "This contract facilitates complex swap operations across multiple liquidity pools and protocols on the Stacks blockchain.",
      "explanation": "The contract is designed to perform a series of token swaps by interacting with different decentralized finance (DeFi) protocols on the Stacks blockchain. It uses a combination of SIP-010 standard fungible token traits and specific protocol traits to achieve this. The contract defines a series of private and public functions (`swap-helper-a` to `swap-helper-z`) that execute swaps or transfer operations under various conditions. Each helper function is tailored to interact with specific tokens or liquidity pools, indicated by the use of different traits at the beginning of the contract. The contract ensures that only the designated sender (defined by a constant at the beginning) can initiate these swap operations, adding a layer of security. The operations involve calculating amounts, performing swaps through direct calls to other contracts (e.g., AMM pools, token contracts), and transferring the result back to the sender or another specified contract. Error handling is implemented to revert transactions if operations fail, ensuring atomicity. The contract also maintains a counter for operations performed, which could be used for tracking or limiting purposes.",
      "tags": [
        "DeFi",
        "swap",
        "liquidity-pool",
        "fungible-token",
        "protocol-interaction",
        "security"
      ]
    }
  },
  {
    "rank": 137,
    "contract": "SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-peg-in-endpoint-v2-04",
    "calls": 192,
    "source": ";; SPDX-License-Identifier: BUSL-1.1\n\n(use-trait ft-trait 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.trait-sip-010.sip-010-trait)\n\n(define-constant err-unauthorised (err u1000))\n(define-constant err-paused (err u1001))\n(define-constant err-peg-in-address-not-found (err u1002))\n(define-constant err-invalid-amount (err u1003))\n(define-constant err-token-mismatch (err u1004))\n(define-constant err-invalid-tx (err u1005))\n(define-constant err-already-sent (err u1006))\n(define-constant err-address-mismatch (err u1007))\n(define-constant err-request-already-revoked (err u1008))\n(define-constant err-request-already-finalized (err u1009))\n(define-constant err-revoke-grace-period (err u1010))\n(define-constant err-request-already-claimed (err u1011))\n(define-constant err-invalid-input (err u1012))\n(define-constant err-tx-mined-before-request (err u1013))\n(define-constant err-commit-tx-mismatch (err u1014))\n(define-constant err-invalid-burn-height (err u1003))\n(define-constant err-tx-mined-before-start (err u1015))\n(define-constant err-slippage-error (err u1016))\n(define-constant err-bitcoin-tx-not-mined (err u1017))\n\n(define-constant MAX_UINT u340282366920938463463374607431768211455)\n(define-constant ONE_8 u100000000)\n\n(define-constant burn-height-start burn-block-height)\n\n(define-data-var paused bool true)\n(define-data-var fee-to-address principal tx-sender)\n\n(define-data-var peg-in-fee uint u0) ;; fixed in BTC\n\n;; read-only functions\n\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao) (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.executor-dao is-extension contract-caller)) err-unauthorised)))\n\n(define-read-only (is-paused)\n\t(var-get paused))\n\n(define-read-only (get-fee-to-address)\n  (var-get fee-to-address))\n\n(define-read-only (get-peg-in-fee)\n\t(var-get peg-in-fee))\n\n(define-read-only (get-pair-details (pair { token: principal, chain-id: uint }))\n  (match (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-pair-details-or-fail pair) ok-value (some ok-value) err-value none))\n\n(define-read-only (get-pair-details-many (pairs (list 200 { token: principal, chain-id: uint })))\n  (map get-pair-details pairs))\n\n(define-read-only (get-tick-to-pair-or-fail (tick (string-utf8 256)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-tick-to-pair-or-fail tick))\n\n(define-read-only (is-peg-in-address-approved (address (buff 128)))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 is-peg-in-address-approved address))\n\n(define-read-only (get-pair-details-or-fail (pair { token: principal, chain-id: uint }))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-pair-details-or-fail pair))\n\n(define-read-only (is-approved-pair (pair { token: principal, chain-id: uint }))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 is-approved-pair pair))\n\n(define-read-only (get-peg-in-sent-or-default (bitcoin-tx (buff 32768)) (output uint) (offset uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-peg-in-sent-or-default bitcoin-tx output offset))\n\n;; @dev cross order size > 80 bytes, so uses drop\n(define-read-only (create-order-cross-or-fail (order { from: (buff 128), to: (buff 128), chain-id: (optional uint), token: principal, token-out: principal }))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 create-order-cross-or-fail order))\n\n;; @dev no op-code offset for drop-based order\n(define-read-only (decode-order-cross-or-fail (order-script (buff 128)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 decode-order-cross-or-fail order-script u0))\n\n(define-read-only (decode-order-cross-from-reveal-tx-or-fail (tx (buff 32768)) (order-idx uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 decode-order-cross-from-reveal-tx-or-fail tx order-idx))\n\n;; @dev reveal-tx is sent by bot to peg-in-address by consuming previous input, so we skip verify-mine\n(define-read-only (validate-tx-cross (commit-tx { tx: (buff 32768), output-idx: uint, fee-idx: (optional uint) }) (reveal-tx { tx: (buff 32768), order-idx: uint }) (token-out-trait <ft-trait>))\n\t(validate-tx-cross-extra (try! (validate-tx-cross-base commit-tx reveal-tx)) token-out-trait))\n\n;; governance functions\n(define-public (pause (new-paused bool))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set paused new-paused))))\n\n(define-public (set-fee-to-address (new-fee-to-address principal))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (var-set fee-to-address new-fee-to-address))))\n\n(define-public (set-peg-in-fee (fee uint))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(ok (var-set peg-in-fee fee))))\n\n(define-public (transfer-all-to (new-owner principal) (token-trait <ft-trait>))\n  (begin \n    (try! (is-dao-or-extension))\n    (as-contract (contract-call? token-trait transfer-fixed (unwrap-panic (contract-call? token-trait get-balance-fixed tx-sender)) tx-sender new-owner none))))\n\n(define-public (transfer-all-to-many (new-owner principal) (token-traits (list 10 <ft-trait>)))\n  (ok (map transfer-all-to (list new-owner new-owner new-owner new-owner new-owner new-owner new-owner new-owner new-owner new-owner) token-traits)))\n\n;; public functions\n\n(define-public (finalize-peg-in-cross-on-index\n  (tx { bitcoin-tx: (buff 32768), output: uint, tick: (string-utf8 256), amt: uint, from: (buff 128), to: (buff 128), from-bal: uint, to-bal: uint, decimals: uint })\n  (block { header: (buff 80), height: uint })\n  (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n  (signature-packs (list 10 { signer: principal, tx-hash: (buff 32), signature: (buff 65) }))\n  (reveal-tx { tx: (buff 32768), order-idx: uint })\n  (reveal-block { header: (buff 80), height: uint })\n  (reveal-proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n  (fee-idx (optional uint))\n  (token-trait <ft-trait>)\n  (token-out-trait <ft-trait>))\n  (begin\n    (try! (index-tx tx block proof signature-packs))\n    (finalize-peg-in-cross { tx: (get bitcoin-tx tx), output-idx: (get output tx), fee-idx: fee-idx } reveal-tx reveal-block reveal-proof token-trait token-out-trait)))\n\n(define-public (finalize-peg-in-cross \n  (commit-tx { tx: (buff 32768), output-idx: uint, fee-idx: (optional uint) }) \n  (reveal-tx { tx: (buff 32768), order-idx: uint }) \n  (reveal-block { header: (buff 80), height: uint })\n  (reveal-proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })  \n  (token-trait <ft-trait>)\n  (token-out-trait <ft-trait>))\n  (let (      \n      (is-reveal-tx-mined (try! (verify-mined (get tx reveal-tx) reveal-block reveal-proof)))\n      (validation-data (try! (validate-tx-cross-base commit-tx reveal-tx)))\n      (tx (get tx commit-tx))\n      (order-details (get order-details validation-data))\n      (token-details (get token-details validation-data))\n      (fee (get fee validation-data))\n      (amt-net (get amt-net validation-data))\n\t\t\t(print-msg (merge (get tx-idxed validation-data) { type: \"peg-in\", order-details: order-details, fee: fee, amt-net: amt-net, tx-id: (try! (get-txid tx)), output-idx: (get output-idx commit-tx), offset-idx: u0 })))\n    (asserts! (not (get peg-in-paused token-details)) err-paused)\n\t\t(asserts! (< burn-height-start (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-bitcoin-tx-mined-or-fail tx))) err-tx-mined-before-start)\t\t\n    (match (get fee-idx commit-tx) some-value (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-bridge-registry-v2-01 set-peg-in-sent tx some-value true))) true)\n    (as-contract (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-in-sent { tx: tx, output: (get output-idx commit-tx), offset: u0 } true)))\n    (and (> fee u0) (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc mint-fixed fee tx-sender))))\n    (try! (check-trait token-trait (get token (get pair-details validation-data))))\n    (and (> amt-net u0) (if (get no-burn token-details) \n      (let (\n          (peg-out-balance (- (unwrap-panic (contract-call? token-trait get-balance-fixed .meta-peg-out-endpoint-v2-04)) amt-net))) \n        (as-contract (try! (contract-call? .meta-peg-out-endpoint-v2-04 transfer-all-to tx-sender token-trait)))\n        (as-contract (try! (contract-call? token-trait transfer-fixed peg-out-balance tx-sender .meta-peg-out-endpoint-v2-04 none))))\n      (as-contract (try! (contract-call? token-trait mint-fixed amt-net tx-sender)))))\n\t\t(match (validate-tx-cross-extra validation-data token-out-trait)\n\t\t\tok-value\n\t\t\t(begin\n\t\t\t\t(and (> fee u0) (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc transfer-fixed fee tx-sender (var-get fee-to-address) none))))\t\t\n\t\t\t\t(as-contract (try! (contract-call? .cross-router-v2-03 route amt-net (list token-trait) (list ) token-out-trait none { address: (get to order-details), chain-id: (get chain-id order-details) })))\n\t\t\t\t(print (merge print-msg { success: true }))\n\t\t\t\t(ok true))\n\t\t\terr-value\n\t\t\t(begin\n\t\t\t  (as-contract (try! (refund fee amt-net (get from order-details) token-trait (get chain-id (get pair-details validation-data)))))\n\t\t\t\t(print (merge print-msg { success: false, err-value: err-value }))\n\t\t\t\t(ok false)))))\n\n;; internal functions\n\n(define-private (validate-tx-cross-base (commit-tx { tx: (buff 32768), output-idx: uint, fee-idx: (optional uint) }) (reveal-tx { tx: (buff 32768), order-idx: uint }))\n  (let (\n\t\t\t(validation-data (try! (validate-drop-common commit-tx)))\n\t\t\t(reveal-tx-data (try! (decode-order-cross-from-reveal-tx-or-fail (get tx reveal-tx) (get order-idx reveal-tx)))))\n    (asserts! (is-eq (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.clarity-bitcoin-v1-07 get-segwit-txid (get tx commit-tx)) (get commit-txid reveal-tx-data)) err-commit-tx-mismatch)\n    (ok (merge validation-data { order-details: (get order-details reveal-tx-data) }))))\n\n(define-private (validate-tx-cross-extra\n  (validation-data {\n    fee: uint, amt-net: uint, \n    tx-idxed: { tick: (string-utf8 256), amt: uint, from: (buff 128), to: (buff 128) }, \n    pair-details: { token: principal, chain-id: uint },\n    token-details: { approved: bool, tick: (string-utf8 256), peg-in-paused: bool, peg-out-paused: bool, peg-in-fee: uint, peg-out-fee: uint, peg-out-gas-fee: uint, no-burn: bool },\n    order-details: { from: (buff 128), to: (buff 128), chain-id: (optional uint), token: principal, token-out: principal }})\n  (token-out-trait <ft-trait>))\n\t(let (\t\t\t\n\t\t\t(order-details (get order-details validation-data)))\n    (asserts! (is-eq (get token order-details) (get token (get pair-details validation-data))) err-token-mismatch)\n    (try! (check-trait token-out-trait (get token-out order-details)))\n\t\t(try! (contract-call? .cross-router-v2-03 validate-route (get amt-net validation-data) (list (get token order-details)) (list ) (get token-out order-details) none { address: (get to order-details), chain-id: (get chain-id order-details) }))\n\t\t(ok validation-data)))\n\n(define-private (validate-drop-common (commit-tx { tx: (buff 32768), output-idx: uint, fee-idx: (optional uint) }))\n\t(let (\n      (tx-idxed (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-bitcoin-tx-indexed-or-fail (get tx commit-tx) (get output-idx commit-tx) u0)))      \n      (pair-details (try! (get-tick-to-pair-or-fail (get tick tx-idxed))))\n      (token-details (try! (get-pair-details-or-fail pair-details)))\n      (amt-in-fixed (decimals-to-fixed (get amt tx-idxed) (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-tick-decimals-or-default (get tick tx-idxed)))))    \n    (asserts! (get approved token-details) err-unauthorised)\n    (asserts! (not (get-peg-in-sent-or-default (get tx commit-tx) (get output-idx commit-tx) u0)) err-already-sent)\n    (asserts! (is-peg-in-address-approved (get to tx-idxed)) err-peg-in-address-not-found)     \t\n    (ok (merge { tx-idxed: tx-idxed, pair-details: pair-details, token-details: token-details, amt-net: amt-in-fixed } (try! (process-fee (get tx commit-tx) (get fee-idx commit-tx)))))))\n\n(define-private (index-tx\n  (tx { bitcoin-tx: (buff 32768), output: uint, tick: (string-utf8 256), amt: uint, from: (buff 128), to: (buff 128), from-bal: uint, to-bal: uint, decimals: uint })\n  (block { header: (buff 80), height: uint })\n  (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })\n  (signature-packs (list 10 { signer: principal, tx-hash: (buff 32), signature: (buff 65) })))\n  (begin \n    (and \n      (not (is-ok (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 get-bitcoin-tx-indexed-or-fail (get bitcoin-tx tx) (get output tx) u0)))\n      (as-contract (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.oracle-v2-01 index-tx-many (list { tx: (merge tx { offset: u0 }), block: block, proof: proof, signature-packs: signature-packs })))))\n    (print { type: \"indexed-tx\", tx-id: (try! (get-txid (get bitcoin-tx tx))), block: block, proof: proof, signature-packs: signature-packs })\n    (ok true)))\n\n(define-private (max (a uint) (b uint))\n\t(if (< a b) b a))\n\n(define-private (min (a uint) (b uint))\n  (if (< a b) a b))\n\n(define-private (mul-down (a uint) (b uint))\n  (/ (* a b) ONE_8))\n\n(define-private (div-down (a uint) (b uint))\n  (if (is-eq a u0) u0 (/ (* a ONE_8) b)))\n\n(define-private (decimals-to-fixed (amount uint) (decimals uint))\n  (/ (* amount ONE_8) (pow u10 decimals)))\n\n(define-private (unwrap-string-to-uint (input (string-ascii 40)))\n\t(unwrap-panic (string-to-uint? input)))\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value)))\n\n(define-private (check-trait (token-trait <ft-trait>) (token principal))\n  (ok (asserts! (is-eq (contract-of token-trait) token) err-token-mismatch)))\n\n(define-private (decode-from-reveal-tx-or-fail (tx (buff 32768)) (order-idx uint))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 decode-from-reveal-tx-or-fail tx order-idx))\n\n(define-private (break-routing-id (routing-ids (list 4 uint)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 break-routing-id routing-ids))\n\n(define-private (extract-tx-ins-outs (tx (buff 32768)))\n  (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 extract-tx-ins-outs tx))\n\n(define-private (get-txid (tx (buff 32768)))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 get-txid tx))\n\n(define-private (verify-mined (tx (buff 32768)) (block { header: (buff 80), height: uint }) (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint }))\n\t(contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.bridge-common-v2-02 verify-mined tx block proof))\n\n(define-private (refund (btc-amount uint) (token-amount uint) (from (buff 128)) (token-trait <ft-trait>) (the-chain-id uint))\n  (let (\n      (pair-details { token: (contract-of token-trait), chain-id: the-chain-id })\n\t    (token-details (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 get-pair-details-or-fail pair-details)))\n      (btc-peg-out-fee (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 get-peg-out-fee))\n      (btc-peg-out-min-fee (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 get-peg-out-min-fee)))\n    (and (> btc-amount u0) (begin\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-fee u0))\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-min-fee u0))\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 request-peg-out-0 from btc-amount))\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-fee btc-peg-out-fee))\n      (try! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-peg-out-endpoint-v2-01 set-peg-out-min-fee btc-peg-out-min-fee))\n      true))\n    (and (> token-amount u0) (begin\n      (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-out-fee pair-details u0))\n      (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-out-gas-fee pair-details u0))\n      (try! (contract-call? .meta-peg-out-endpoint-v2-04 request-peg-out token-amount from token-trait the-chain-id))\n      (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-out-fee pair-details (get peg-out-fee token-details)))\n      (try! (contract-call? 'SP673Z4BPB4R73359K9HE55F2X91V5BJTN5SXZ5T.meta-bridge-registry-v2-03 set-peg-out-gas-fee pair-details (get peg-out-gas-fee token-details)))\n      true))\n    (ok true))) \n\n(define-private (process-fee (tx (buff 32768)) (fee-idx (optional uint)))\n  (match fee-idx some-value\n    (let (\n\t\t\t  (fee-output (unwrap! (element-at (get outs (try! (extract-tx-ins-outs tx))) some-value) err-invalid-tx)))\n      (asserts! (>= (get value fee-output) (get-peg-in-fee)) err-invalid-amount)  \n\t\t  (asserts! (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-bridge-registry-v2-01 is-peg-in-address-approved (get scriptPubKey fee-output)) err-peg-in-address-not-found)\n      (asserts! (not (contract-call? 'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.btc-bridge-registry-v2-01 get-peg-in-sent-or-default tx some-value)) err-already-sent)    \n      (ok { fee: (get value fee-output) }))\n    (begin \n      (asserts! (is-eq u0 (get-peg-in-fee)) err-invalid-amount)  \n      (ok { fee: u0 }))))",
    "analysis": {
      "summary": "This contract facilitates cross-chain transactions, allowing users to peg in and out between Bitcoin and Stacks with fee management and governance controls.",
      "explanation": "This Clarity smart contract is designed for cross-chain transactions, specifically between Bitcoin and Stacks blockchain. It includes mechanisms for pegging in (transferring assets from Bitcoin to Stacks) and pegging out (vice versa), handling fees, and providing governance functions to manage operational parameters. Key features include read-only functions for checking various states (e.g., paused status, fees), public functions for finalizing transactions, and internal functions for validating transactions and processing fees.\n\n- Governance functions (<L86-111>) allow designated addresses to pause the contract, set fee distribution addresses, and adjust peg-in fees, ensuring operational flexibility and control.\n- Public functions (<L113-160>) include methods for finalizing peg-in transactions, involving validation of Bitcoin transactions, minting of tokens on Stacks, and fee transfers.\n- Internal functions (<L162-271>) provide the core logic for transaction validation, fee processing, and refunds in case of errors or failed transactions. These functions ensure that transactions meet specified criteria, such as correct fee payments and transaction authenticity.\n- The contract utilizes several error constants (<L8-26>) for clear error handling and integrates with external contracts and traits for token operations and cross-chain interactions.",
      "tags": [
        "cross-chain",
        "peg-in",
        "peg-out",
        "governance",
        "fee-management"
      ]
    }
  },
  {
    "rank": 138,
    "contract": "SP3NJ4BR35W8002J0PWZY0QNG9FTYZ32H38Z0PV17.rise-of-the-meme",
    "calls": 191,
    "source": ";; rise-of-the-meme\n;; contractType: public\n\n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-non-fungible-token rise-of-the-meme uint)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant COMM u1000)\n(define-constant COMM-ADDR 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S)\n\n(define-constant ERR-NO-MORE-NFTS u100)\n(define-constant ERR-NOT-ENOUGH-PASSES u101)\n(define-constant ERR-PUBLIC-SALE-DISABLED u102)\n(define-constant ERR-CONTRACT-INITIALIZED u103)\n(define-constant ERR-NOT-AUTHORIZED u104)\n(define-constant ERR-INVALID-USER u105)\n(define-constant ERR-LISTING u106)\n(define-constant ERR-WRONG-COMMISSION u107)\n(define-constant ERR-NOT-FOUND u108)\n(define-constant ERR-PAUSED u109)\n(define-constant ERR-MINT-LIMIT u110)\n(define-constant ERR-METADATA-FROZEN u111)\n(define-constant ERR-AIRDROP-CALLED u112)\n(define-constant ERR-NO-MORE-MINTS u113)\n(define-constant ERR-INVALID-PERCENTAGE u114)\n\n;; Internal variables\n(define-data-var mint-limit uint u2000)\n(define-data-var last-id uint u1)\n(define-data-var total-price uint u4000000)\n(define-data-var artist-address principal 'SP3NJ4BR35W8002J0PWZY0QNG9FTYZ32H38Z0PV17)\n(define-data-var ipfs-root (string-ascii 80) \"ipfs://ipfs/QmQbe4QEmw5HbCvxLtLQirT6JfdJDi9cJRqNBdLvf2x8X4/json/\")\n(define-data-var mint-paused bool true)\n(define-data-var premint-enabled bool false)\n(define-data-var sale-enabled bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var airdrop-called bool false)\n(define-data-var mint-cap uint u500)\n\n(define-map mints-per-user principal uint)\n(define-map mint-passes principal uint)\n\n(define-public (claim) \n  (mint (list true)))\n\n(define-public (claim-two) (mint (list true true)))\n\n(define-public (claim-three) (mint (list true true true)))\n\n(define-public (claim-four) (mint (list true true true true)))\n\n(define-public (claim-five) (mint (list true true true true true)))\n\n;; Default Minting\n(define-private (mint (orders (list 25 bool)))\n  (mint-many orders))\n\n(define-private (mint-many (orders (list 25 bool )))  \n  (let \n    (\n      (last-nft-id (var-get last-id))\n      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))\n      (art-addr (var-get artist-address))\n      (id-reached (fold mint-many-iter orders last-nft-id))\n      (price (* (var-get total-price) (- id-reached last-nft-id)))\n      (total-commission (/ (* price COMM) u10000))\n      (current-balance (get-balance tx-sender))\n      (total-artist (- price total-commission))\n      (capped (> (var-get mint-cap) u0))\n      (user-mints (get-mints tx-sender))\n    )\n    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))\n    (asserts! (or (not capped) (is-eq tx-sender DEPLOYER) (is-eq tx-sender art-addr) (>= (var-get mint-cap) (+ (len orders) user-mints))) (err ERR-NO-MORE-MINTS))\n    (map-set mints-per-user tx-sender (+ (len orders) user-mints))\n    (if (or (is-eq tx-sender art-addr) (is-eq tx-sender DEPLOYER) (is-eq (var-get total-price) u0000000))\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n      )\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n        (try! (stx-transfer? total-artist tx-sender (var-get artist-address)))\n        (try! (stx-transfer? total-commission tx-sender COMM-ADDR))\n      )    \n    )\n    (ok id-reached)))\n\n(define-private (mint-many-iter (ignore bool) (next-id uint))\n  (if (<= next-id (var-get mint-limit))\n    (begin\n      (unwrap! (nft-mint? rise-of-the-meme next-id tx-sender) next-id)\n      (+ next-id u1)    \n    )\n    next-id))\n\n(define-public (set-artist-address (address principal))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set artist-address address))))\n\n(define-public (set-price (price uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set total-price price))))\n\n(define-public (toggle-pause)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set mint-paused (not (var-get mint-paused))))))\n\n(define-public (set-mint-limit (limit uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))\n    (ok (var-set mint-limit limit))))\n\n(define-public (burn (token-id uint))\n  (begin \n    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))\n    (nft-burn? rise-of-the-meme token-id tx-sender)))\n\n(define-private (is-owner (token-id uint) (user principal))\n    (is-eq user (unwrap! (nft-get-owner? rise-of-the-meme token-id) false)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))\n    (print { notification: \"token-metadata-update\", payload: { token-class: \"nft\", contract-id: (as-contract tx-sender) }})\n    (var-set ipfs-root new-base-uri)\n    (ok true)))\n\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Non-custodial SIP-009 transfer function\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))\n    (trnsfr id sender recipient)))\n\n;; read-only functions\n(define-read-only (get-owner (token-id uint))\n  (ok (nft-get-owner? rise-of-the-meme token-id)))\n\n(define-read-only (get-last-token-id)\n  (ok (- (var-get last-id) u1)))\n\n(define-read-only (get-token-uri (token-id uint))\n  (ok (some (concat (concat (var-get ipfs-root) \"{id}\") \".json\"))))\n\n(define-read-only (get-paused)\n  (ok (var-get mint-paused)))\n\n(define-read-only (get-price)\n  (ok (var-get total-price)))\n\n(define-read-only (get-artist-address)\n  (ok (var-get artist-address)))\n\n(define-read-only (get-mints (caller principal))\n  (default-to u0 (map-get? mints-per-user caller)))\n\n(define-read-only (get-mint-limit)\n  (ok (var-get mint-limit)))\n\n(define-data-var license-uri (string-ascii 80) \"\")\n(define-data-var license-name (string-ascii 40) \"\")\n\n(define-read-only (get-license-uri)\n  (ok (var-get license-uri)))\n  \n(define-read-only (get-license-name)\n  (ok (var-get license-name)))\n  \n(define-public (set-license-uri (uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-uri uri))))\n    \n(define-public (set-license-name (name (string-ascii 40)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-name name))))\n\n;; Non-custodial marketplace extras\n(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)\n\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal, royalty: uint})\n\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? rise-of-the-meme id sender recipient)\n    success\n      (let\n        ((sender-balance (get-balance sender))\n        (recipient-balance (get-balance recipient)))\n          (map-set token-count\n            sender\n            (- sender-balance u1))\n          (map-set token-count\n            recipient\n            (+ recipient-balance u1))\n          (ok success))\n    error (err error)))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? rise-of-the-meme id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? rise-of-the-meme id) (err ERR-NOT-FOUND)))\n      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))\n      (price (get price listing))\n      (royalty (get royalty listing)))\n    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (pay-royalty price royalty))\n    (try! (contract-call? comm-trait pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))\n    \n(define-data-var royalty-percent uint u500)\n\n(define-read-only (get-royalty-percent)\n  (ok (var-get royalty-percent)))\n\n(define-public (set-royalty-percent (royalty uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))\n    (ok (var-set royalty-percent royalty))))\n\n(define-private (pay-royalty (price uint) (royalty uint))\n  (let (\n    (royalty-amount (/ (* price royalty) u10000))\n  )\n  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))))\n    (try! (stx-transfer? royalty-amount tx-sender (var-get artist-address)))\n    (print false)\n  )\n  (ok true)))\n  \n\n",
    "analysis": {
      "summary": "This contract implements a non-fungible token (NFT) collection with minting, burning, and marketplace functionalities, adhering to the SIP-009 standard for NFTs on the Stacks blockchain.",
      "explanation": "The contract defines an NFT collection named 'rise-of-the-meme' with unique identifiers for each token. It includes features for minting, setting various parameters (e.g., artist address, mint price, mint limit), pausing/unpausing minting, metadata management, and a marketplace for listing and buying NFTs. Key components include:\n\n- Implementation of the `nft-trait` ensuring compatibility with the Stacks NFT standard (<L3>).\n- Definition of constants and error codes for various operations (<L7-26>).\n- Internal variables to track the state of the contract, such as `mint-limit`, `last-id`, `total-price`, and others (<L28-39>).\n- Functions to claim/mint NFTs in different quantities, using a private `mint` function that checks for conditions like mint limits and whether minting is paused (<L41-70>).\n- The `mint-many` function iterates over a list of orders, minting each NFT and updating the `last-id` variable (<L72-100>).\n- Administrative functions to set the artist address, mint price, pause state, and mint limit, with checks to ensure only authorized users can call these functions (<L102-138>).\n- A `burn` function to allow NFT owners to destroy their tokens, ensuring the token is not listed in the marketplace before burning (<L140-146>).\n- Functions to manage NFT metadata, including setting a base URI and freezing metadata to prevent further changes (<L148-166>).\n- Implementation of a non-custodial marketplace within the contract, allowing users to list, unlist, and buy NFTs directly through the contract with support for custom commission and royalty logic (<L168-261>).\n\nOverall, the contract is designed to provide a comprehensive suite of features for managing an NFT collection, with an emphasis on flexibility and security for both the collection owner and NFT holders.",
      "tags": [
        "NFT",
        "marketplace",
        "SIP-009",
        "minting",
        "metadata-management"
      ]
    }
  },
  {
    "rank": 139,
    "contract": "SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.stacking-dao-genesis-nft",
    "calls": 186,
    "source": ";; @contract Stacking DAO Genesis NFT\n;; @version 1\n;;\n;; Stacking DAO Genesis NFT for early adopters\n;; If people held at least 100 stSTX throughout cycle 74/75, they get a Stacking DAO Genesis NFT\n;; If people are Stacks OGs and in the TG group, they get a Stacking DAO Genesis OG NFT\n;; Based on weight, some of these people get a diamond or gold NFT. This is handled through an off-chain allocation\n\n(impl-trait .nft-trait.nft-trait)\n(use-trait commission-trait .commission-trait.commission)\n\n(define-non-fungible-token stacking-dao-genesis uint)\n\n;;-------------------------------------\n;; Constants\n;;-------------------------------------\n\n(define-constant ERR_NOT_AUTHORIZED u1101)\n(define-constant ERR_SENDER_NOT_OWNER u1102)\n(define-constant ERR_NFT_NOT_FOUND u1103)\n(define-constant ERR_NO_LISTING u1104)\n(define-constant ERR_WRONG_COMMISSION u1105)\n(define-constant ERR_IS_LISTED u1106)\n(define-constant ERR_GET_OWNER u1107)\n\n;;-------------------------------------\n;; Variables\n;;-------------------------------------\n\n(define-data-var last-id uint u0)\n(define-data-var base-token-uri (string-ascii 210) \"ipfs://\")\n\n;;-------------------------------------\n;; Maps\n;;-------------------------------------\n\n(define-map token-count principal uint)\n(define-map market uint { price: uint, commission: principal })\n;; u0 - normal\n;; u1 - OG\n;; u2 - gold\n;; u3 - diamond\n(define-map genesis-type uint uint)\n\n;;-------------------------------------\n;; Getters\n;;-------------------------------------\n\n(define-read-only (get-base-token-uri)\n  (var-get base-token-uri)\n)\n\n(define-read-only (get-balance (account principal))\n  (default-to u0 (map-get? token-count account))\n)\n\n(define-read-only (get-genesis-type (id uint))\n  (default-to u0 (map-get? genesis-type id))\n)\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id)\n)\n\n;;-------------------------------------\n;; IPFS\n;;-------------------------------------\n\n(define-public (set-base-token-uri (new-base-token-uri (string-ascii 210)))\n  (begin\n    (try! (contract-call? .dao check-is-protocol contract-caller))\n\n    (var-set base-token-uri new-base-token-uri)\n    (ok true)\n  )\n)\n\n;;-------------------------------------\n;; SIP-009 \n;;-------------------------------------\n\n(define-read-only (get-last-token-id)\n  (ok (var-get last-id))\n)\n\n(define-read-only (get-token-uri (token-id uint))\n  (ok (some (concat (concat (var-get base-token-uri) (uint-to-string token-id)) \".json\")))\n)\n\n(define-read-only (get-owner (token-id uint))\n  (ok (nft-get-owner? stacking-dao-genesis token-id))\n)\n\n(define-public (transfer (token-id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR_NOT_AUTHORIZED))\n    (asserts! (is-none (map-get? market token-id)) (err ERR_IS_LISTED))\n    (try! (transfer-helper token-id sender recipient))\n    (ok true)\n  )\n)\n\n;;-------------------------------------\n;; uint to string\n;;-------------------------------------\n\n(define-constant LIST_40 (list\n  true true true true true true true true true true\n  true true true true true true true true true true\n  true true true true true true true true true true\n  true true true true true true true true true true\n))\n\n(define-read-only (uint-to-string (value uint))\n  (get return (fold uint-to-string-clojure LIST_40 {value: value, return: \"\"}))\n)\n\n(define-read-only (uint-to-string-clojure (i bool) (data {value: uint, return: (string-ascii 40)}))\n  (if (> (get value data) u0)\n    {\n      value: (/ (get value data) u10),\n      return: (unwrap-panic (as-max-len? (concat (unwrap-panic (element-at \"0123456789\" (mod (get value data) u10))) (get return data)) u40))\n    }\n    data\n  )\n)\n\n;;-------------------------------------\n;; Mint / Burn\n;;-------------------------------------\n\n(define-public (mint-for-protocol (recipient principal) (type uint))\n  (let (\n    (next-id (+ u1 (var-get last-id)))\n  )\n    (try! (contract-call? .dao check-is-protocol contract-caller))\n\n    (try! (nft-mint? stacking-dao-genesis (var-get last-id) recipient))\n\n    (map-set token-count recipient (+ (get-balance recipient) u1))\n    (map-set genesis-type (var-get last-id) type)\n    (var-set last-id next-id)\n    (ok true)\n  )\n)\n\n(define-public (burn-for-protocol (token-id uint))\n  (let (\n    (owner (unwrap! (unwrap! (get-owner token-id) (err ERR_GET_OWNER)) (err ERR_GET_OWNER)))\n  )\n    (try! (contract-call? .dao check-is-protocol contract-caller))\n\n    (try! (nft-burn? stacking-dao-genesis token-id owner))\n\n    (map-set token-count owner (- (get-balance owner) u1))\n    (ok true)\n  )\n)\n\n;;-------------------------------------\n;; Marketplace\n;;-------------------------------------\n\n(define-private (is-sender-owner (id uint))\n  (let (\n    (owner (unwrap! (nft-get-owner? stacking-dao-genesis id) false))\n  )\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))\n  )\n)\n\n(define-public (list-in-ustx (id uint) (price uint) (commission-contract <commission-trait>))\n  (let (\n    (listing  { price: price, commission: (contract-of commission-contract) })\n  )\n    (asserts! (is-sender-owner id) (err ERR_SENDER_NOT_OWNER))\n\n    (map-set market id listing)\n    (print (merge listing { a: \"list-in-ustx\", id: id }))\n    (ok true)\n  )\n)\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) (err ERR_SENDER_NOT_OWNER))\n\n    (map-delete market id)\n    (print { a: \"unlist-in-ustx\", id: id })\n    (ok true)\n  )\n)\n\n(define-public (buy-in-ustx (id uint) (commission-contract <commission-trait>))\n  (let (\n    (owner (unwrap! (nft-get-owner? stacking-dao-genesis id) (err ERR_NFT_NOT_FOUND)))\n    (listing (unwrap! (map-get? market id) (err ERR_NO_LISTING)))\n    (price (get price listing))\n  )\n    (asserts! (is-eq (contract-of commission-contract) (get commission listing)) (err ERR_WRONG_COMMISSION))\n\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (contract-call? commission-contract pay id price))\n    (try! (transfer-helper id owner tx-sender))\n\n    (map-delete market id)\n    (print { a: \"buy-in-ustx\", id: id })\n    (ok true)\n  )\n)\n\n(define-private (transfer-helper (id uint) (sender principal) (recipient principal))\n  (begin\n    (try! (nft-transfer? stacking-dao-genesis id sender recipient))\n\n    (let (\n      (sender-balance (get-balance sender))\n      (recipient-balance (get-balance recipient))\n    )\n      (map-set token-count sender (- sender-balance u1))\n      (map-set token-count recipient (+ recipient-balance u1))\n      (ok true)\n    )\n  )\n)\n",
    "analysis": {
      "summary": "This contract implements a special NFT for early adopters of a Stacking DAO, with additional marketplace functionality for listing, buying, and transferring these NFTs.",
      "explanation": "The contract defines a non-fungible token (NFT) called 'stacking-dao-genesis' that represents membership or participation in a Stacking DAO for early adopters. It includes mechanisms for minting, burning, transferring, and listing these NFTs for sale. The contract uses Clarity traits to ensure interoperability with other contracts and follows the SIP-009 standard for NFTs on the Stacks blockchain.\n\n- <L5-8> Describes the purpose of the NFT.\n- <L10> Implements the NFT trait for standard NFT functionality.\n- <L11> Uses a commission trait for marketplace transactions.\n- <L13> Defines the NFT using a unique identifier (uint).\n- <L19-25> Constants are defined for error handling.\n- <L27-30> Variables for tracking the last minted ID and the base URI for token metadata are set.\n- <L32-38> Maps are used to track ownership counts, marketplace listings, and special genesis types (e.g., OG, gold, diamond).\n- <L40-54> Read-only functions provide information about the NFTs, including base URI, balance of a given account, genesis type, and listings.\n- <L56-62> Allows the DAO to update the base token URI, ensuring only authorized calls through a check with another contract.\n- <L64-82> Implements SIP-009 required functions for NFT standards, including fetching the last token ID, token URI, and owner of a token.\n- <L84-97> Handles the transfer of NFTs, ensuring the sender is authorized and the NFT is not listed in the marketplace.\n- <L99-121> Converts uint values to strings, a utility for generating token URIs.\n- <L123-145> Minting and burning functions are restricted to protocol use, allowing the DAO to control the issuance and removal of NFTs.\n- <L147-169> Marketplace functionality includes listing, unlisting, and buying NFTs, with checks for ownership and correct commission contracts.\n- <L171-187> A helper function simplifies NFT transfers, updating balances accordingly.",
      "tags": [
        "NFT",
        "marketplace",
        "DAO",
        "SIP-009"
      ]
    }
  },
  {
    "rank": 140,
    "contract": "SP32AEEF6WW5Y0NMJ1S8SBSZDAY8R5J32NBZFPKKZ.nope",
    "calls": 186,
    "source": ";; Error codes\n(define-constant ERR-UNAUTHORIZED u401)\n(define-constant ERR-YOU-POOR u402)\n(define-constant ERR-INVALID-PARAMS u400)\n\n(define-constant WRAP-THRESHOLD (* u85 (pow u10 u12)))\n\n;; 88,975,877,083,900\n(define-constant MAX-SUPPLY u88975877083900)\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n(define-data-var contract-admin principal tx-sender)\n\n;; can only be set once when the threshold is met\n(define-data-var is-threshold-reached bool false)\n\n(define-fungible-token NOT MAX-SUPPLY)\n\n(define-private (update-threshold-state) \n    (if (var-get is-threshold-reached) false\n        (var-set is-threshold-reached \n            (>= (ft-get-supply NOT) WRAP-THRESHOLD))))\n\n\n(define-read-only (is-safe-to-wrap (amount uint) (wrapper principal)) \n    (let (\n            (supply (ft-get-supply NOT)))\n    \n        (or \n            (var-get is-threshold-reached)\n            (and\n                ;; exclusive basically the threshold is a finish line\n                (> supply WRAP-THRESHOLD)\n                (<= (+ amount supply) MAX-SUPPLY))\n            (is-eq contract-caller .napper))))\n\n\n(define-public (wrap-nthng (amount uint))\n    (begin\n        (asserts! (is-safe-to-wrap amount tx-sender) (err ERR-UNAUTHORIZED))\n        (unwrap! \n            (contract-call? \n                .micro-nthng \n                transfer (as-contract tx-sender) amount)\n            (err ERR-YOU-POOR))\n        (try! (ft-mint? NOT amount tx-sender))\n        (update-threshold-state)\n        (ok true)))\n\n\n(define-public (unwrap (amount uint))\n    (let (\n        (unwrapper tx-sender)\n    )\n        (asserts! (>= (ft-get-balance NOT tx-sender) amount) (err ERR-YOU-POOR))\n        (unwrap-panic (ft-burn? NOT amount tx-sender))\n        (as-contract (contract-call? .micro-nthng transfer unwrapper amount))))\n\n;;;;;;;;;;;;;;;;;;;;; SIP 010 ;;;;;;;;;;;;;;;;;;;;;;\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender) (err ERR-UNAUTHORIZED))\n        (asserts! (not (is-eq to tx-sender)) (err ERR-INVALID-PARAMS))\n        (asserts! (>= (ft-get-balance NOT from) amount) (err ERR-YOU-POOR))\n        (print (default-to 0x memo))\n        (ft-transfer? NOT amount from to)))\n\n\n(define-read-only (get-name)\n    (ok (var-get token-name)))\n\n(define-read-only (get-symbol)\n    (ok (var-get token-symbol)))\n\n(define-read-only (get-decimals)\n    (ok (var-get token-decimals)))\n\n(define-read-only (get-balance (user principal))\n    (ok (ft-get-balance NOT user)))\n\n(define-read-only (get-total-supply)\n    (ok (ft-get-supply NOT)))\n\n(define-read-only (get-token-uri)\n    (ok (var-get token-uri)))\n\n;; send-many\n\n(define-public (send-nothing (amount uint) (to principal) (memo (optional (buff 34))))\n    (let ((transfer-ok (try! (transfer amount tx-sender to none))))\n    (print (default-to 0x memo))\n    (ok transfer-ok)))\n\n(define-private (send-nothing-unwrap (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n    (send-nothing\n        (get amount recipient)\n        (get to recipient)\n        (get memo recipient)))\n\n(define-private (check-err  (result (response bool uint))\n                            (prior (response bool uint)))\n    (match prior ok-value result\n                err-value (err err-value)))\n\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n    (fold check-err\n        (map send-nothing-unwrap recipients)\n        (ok true)))\n\n\n\n;; METADATA\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"ipfs://ipfs/bafkreigrnes22au2i45fcdsmrlq6srfyvxufjoosqpyafcz6ykbee2i6d4\"))\n(define-data-var token-name (string-ascii 32) \"Nothing\")\n(define-data-var token-symbol (string-ascii 32) \"NOT\")\n(define-data-var token-decimals uint u0)\n\n;; anything can be edited\n(define-public \n    (set-metadata \n        (uri (optional (string-utf8 256))) \n        (name (string-ascii 32))\n        (symbol (string-ascii 32))\n        (decimals uint))\n    (begin\n        (asserts! (is-eq tx-sender (var-get contract-admin)) (err ERR-UNAUTHORIZED))\n        (asserts! \n            (and \n                (is-some uri)\n                (> (len name) u0)\n                (> (len symbol) u0)\n                (<= decimals u6))\n            (err ERR-INVALID-PARAMS))\n        (var-set token-uri uri)\n        (var-set token-name name)\n        (var-set token-symbol symbol)\n        (var-set token-decimals decimals)\n        (print \n            {\n                notification: \"token-metadata-update\",\n                payload: {\n                    token-class: \"ft\", \n                    contract-id: (as-contract tx-sender) \n                }\n            })\n        (ok true)))\n\n;; should be set to a DAO contract in the future\n;; this can only change the metadata nothing else\n(define-public (set-admin (new-admin principal))\n    (begin\n        (asserts! (is-eq contract-caller (var-get contract-admin)) (err ERR-UNAUTHORIZED))\n        (asserts! (not (is-eq new-admin (var-get contract-admin))) (err ERR-INVALID-PARAMS))\n        (var-set contract-admin new-admin)\n        (ok true)))\n",
    "analysis": {
      "summary": "This contract implements a fungible token with wrapping functionality, threshold-based state changes, and metadata management.",
      "explanation": "The contract defines a fungible token (NOT) with a maximum supply and implements the SIP-010 standard for Stacks fungible tokens. It includes mechanisms for wrapping tokens from another contract, updating the token's metadata, and a unique feature that changes the contract's state based on a supply threshold. Key functionalities are detailed below:\n\n- **Error Codes (<L1-3>)**: Defines constants for error handling, improving readability and debugging.\n\n- **Constants (<L5-8>)**: Sets critical values like the wrap threshold and maximum supply, central to the contract's logic.\n\n- **Admin and State Variables (<L10-13>)**: Initializes the contract's admin and a boolean to track if a supply threshold has been reached, affecting certain operations.\n\n- **Token Declaration (<L15>)**: Declares the fungible token using the defined maximum supply.\n\n- **Private Functions (<L17-19>)**: Includes a function to update the state variable based on the token's supply, showcasing conditional state management.\n\n- **Token Wrapping (<L21-31>)**: Provides a method for users to 'wrap' tokens by transferring them from another contract, contingent on the contract's current state and supply constraints.\n\n- **Token Unwrapping (<L33-41>)**: Allows users to 'unwrap' their tokens, converting them back and transferring them to another contract, demonstrating interoperability between contracts.\n\n- **SIP 010 Implementation (<L43-53>)**: Implements required functions for the SIP-010 fungible token standard, ensuring compatibility within the Stacks ecosystem.\n\n- **Metadata Management (<L55-75>)**: Offers functionality to update the token's metadata, including URI, name, symbol, and decimals, with checks for authorization and parameter validity.\n\n- **Admin Management (<L77-85>)**: Allows changing the contract's admin, with safeguards against unauthorized changes and self-assignment, indicating a basic access control pattern.\n\n- **Batch Operations (<L87-105>)**: Introduces a 'send-many' function, enabling batch transfers to optimize transaction efficiency and user experience.\n\nOverall, the contract is a comprehensive example of a fungible token with advanced features like state-based functionality, metadata management, and contract interoperability.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "metadata-management",
        "interoperability",
        "state-management"
      ]
    }
  },
  {
    "rank": 141,
    "contract": "SP804CDG3KBN9M6E00AD744K8DC697G7HBCG520Q.sbtc-yield-rewards-v2",
    "calls": 186,
    "source": "(define-constant ERR_ACTIVATION_HEIGHT_NOT_MET (err u100))\n(define-constant ERR_ALREADY_ENROLLED (err u101))\n(define-constant ERR_USER_BLACKLISTED (err u102))\n(define-constant ERR_NOT_ENROLLED (err u103))\n(define-constant ERR_NOT_ADMIN (err u104))\n;; This should never be thrown\n(define-constant ERR_CYCLE_ENDED_2 (err u107))\n(define-constant ERR_NOT_REWARDED_ALL (err u108))\n(define-constant ERR_NOT_SNAPSHOTTED_ALL_PARTICIPANTS (err u109))\n(define-constant ERR_CYCLE_ENDED (err u110))\n(define-constant ERR_NOT_ALL_SNAPSHOTS (err u111))\n(define-constant ERR_CANNOT_DISTRIBUTE_REWARDS (err u112))\n(define-constant ERR_ALREADY_REWARDED (err u113))\n(define-constant ERR_STX_BLOCK_TOO_LOW (err u114))\n(define-constant ERR_STX_BLOCK_TOO_HIGH (err u115))\n(define-constant ERR_NOT_NEW_CYCLE_YET (err u116))\n(define-constant ERR_CONTRACT_ALREADY_ACTIVE (err u117))\n(define-constant ERR_CONTRACT_NOT_ACTIVE (err u118))\n(define-constant ERR_NOT_NEW_SNAPSHOT_YET (err u119))\n(define-constant ERR_STX_BLOCK_IN_FUTURE (err u120))\n(define-constant ERR_SNAPSHOTS_NOT_CONCLUDED (err u121))\n(define-constant ERR_SNAPSHOTS_ALREADY_CONCLUDED (err u122))\n(define-constant ERR_SET_CAN_DISTRIBUTE_ALREADY_CALLED (err u123))\n(define-constant ERR_ALREADY_FINALIZED (err u124))\n(define-constant ERR_REWARDS_NOT_SENT_YET (err u125))\n(define-constant ERR_CANNOT_FINALIZE (err u126))\n(define-constant ERR_ENROLL_MINIMUM_HOLD_NOT_MET (err u127))\n(define-constant ERR_APR_TOO_HIGH (err u998))\n(define-constant ERR_APR_TOO_LOW (err u999))\n\n\n(define-constant first_snapshot_new_cycle u1000)\n(define-constant average-burn-blocks-year u52560)\n(define-constant APR_DECIMALS u100000000)\n(define-constant MIN_APR_ONE_EIGHT u1000000) ;; 1% APR - 0,01 * 10^8\n(define-constant MAX_APR_ONE_EIGHT u6000000) ;; 6% APR - 0,1 * 10^8\n\n;; Modularize the variables for different networks\n\n(define-data-var is-contract-active bool false)\n(define-data-var cycle-id uint u0)\n\n(define-data-var current-cycle-stacks-block-height uint u0)\n(define-data-var current-snapshot-tenure-height uint u0)\n(define-data-var current-snapshot-stacks-block-height uint u0)\n(define-data-var concluded-snapshots bool false)\n\n;; For Testnet\n(define-data-var current-cycle-tenure-height uint u0)\n(define-data-var nr-blocks-snapshot uint u0)\n(define-data-var nr-snapshots-cycle uint u0) ;; last snapshot is: next-cycle-bitcoin-block - nr-blocks-snapshot\n\n(if is-in-mainnet \n  (begin \n    (var-set current-cycle-tenure-height u178780) \n    (var-set nr-snapshots-cycle u14)\n    (var-set nr-blocks-snapshot u140)\n  )\n  ;; simnet and testnet use the same chain-id\n  (begin \n    (var-set current-cycle-tenure-height u40) \n    (var-set nr-snapshots-cycle u14)\n    (var-set nr-blocks-snapshot u150)\n  )\n)\n\n(define-data-var next-nr-blocks-snapshot uint (var-get nr-blocks-snapshot))\n(define-data-var next-nr-snapshots-cycle uint (var-get nr-snapshots-cycle)) \n\n(define-data-var rewarded-count uint u0)\n(define-data-var participants-count uint u0)\n(define-data-var min-hold-for-enrollment uint u10000)\n\n;; Number of participants enrolled at the beginning of the current cycle\n(define-data-var current-cycle-participants-count uint u0)\n\n(define-data-var current-cycle-total uint u0)\n\n(define-data-var local-stx-id-header-hash (buff 32) 0x0000000000000000000000000000000000000000000000000000000000000000)\n\n(define-data-var current-snapshot-total uint u0)\n(define-data-var current-snapshot-count uint u0)\n(define-data-var current-snapshot-index uint u0)\n\n(define-data-var next-cycle-tenure-height uint (+ (var-get current-cycle-tenure-height) (* (var-get nr-blocks-snapshot) (var-get nr-snapshots-cycle))))\n(define-data-var can-distribute-rewards bool false)\n;; yield of the smart contract -> total rewards for this cycle\n;; if rewards_cycle/total_sbtc_cycle % > max-rate %\n;; rewards_cycle = max-rate% * total_sbtc_cycle, the remaining will be used for future cycles\n(define-data-var rewards-to-distribute uint u0)\n\n(define-data-var admin principal contract-caller)\n;; APR - annual percentage rate scaled by 10^8. This represents the maximum\n;; percentage of the sBTC yield contributors are ready to give away as rewards\n;; in a year.\n(define-data-var APR uint u6000000)\n(define-data-var next-APR uint u6000000)\n\n;; data maps\n;;\n;; when someone enrolls, gets added to the map\n;; when someone leaves, gets removed from the map\n;; verify at get-burn-block-info state of map when doing calculations\n(define-map participants \n  { address: principal } \n  { \n    rewarded-address: principal, ;; default contract-caller if not set\n  }\n)\n\n(define-map blacklist \n  { address: principal } \n  { \n    blacklisted: bool, ;; default true\n  }\n)\n;; (map-set blacklist {address: ST3NBRSFKX28FQ2ZJ1MAKX58HKHSDGNV5N7R21XCP} {blacklisted: true}) ;; wallet 8\n;; the Foundation and other sBTC holders, will not be taken into account by default as they haven't enrolled in the SC (and they should not enroll)\n\n(define-map participant-holding { cycle-id: uint, address: principal } { amount: uint, last-snapshot: uint, rewarded: bool, reward-amount: uint })\n(define-map rewards-holding { cycle-id: uint, rewarded-address: principal } { amount: uint })\n\n(define-map cycle-snapshot-to-stx-block-height\n  { cycle-id: uint, snapshot-id: uint }\n  { stx-block-height: uint, tenure-height-stored: uint }\n)\n\n(define-map distribution-finalized-stx-block-height-when-called { cycle-id: uint } { stx-block-height: uint })\n\n(define-public (update-initialize-block (new-tenure-height uint))\n  (begin \n    (asserts! (not (var-get is-contract-active)) ERR_CONTRACT_ALREADY_ACTIVE)\n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (ok (var-set current-cycle-tenure-height new-tenure-height)) \n  )\n)\n\n(define-public (compute-current-snapshot-balances (principals (list 900 principal)))\n  (let\n    ((stx-id-header-hash (unwrap! (get-stacks-block-info? id-header-hash (var-get current-snapshot-stacks-block-height)) ERR_STX_BLOCK_IN_FUTURE)))\n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (var-set local-stx-id-header-hash stx-id-header-hash)\n    (let ((snapshot-total (fold compute-and-update-balances-one-user principals u0)))  \n      (var-set current-snapshot-total (+ (var-get current-snapshot-total) snapshot-total))\n      (ok snapshot-total)\n    )\n  )\n)\n\n(define-private (compute-and-update-balances-one-user (address principal) (current-total uint))\n  (let\n    (\n      (cycle-id-current (var-get cycle-id))\n      (is-user-enrolled-this-cycle (is-enrolled-this-cycle address))\n      (balance (at-block\n        ;; nonexistent balance on that block height - should never happen\n        (var-get local-stx-id-header-hash)\n        (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance-available address))))\n      (new-total (+ current-total balance))\n      (participant-hold (map-get? participant-holding { cycle-id: cycle-id-current, address: address }))\n      (local-current-snapshot-index (var-get current-snapshot-index))\n    )\n    ;; only add those that are part of the pool and aren't already snapshotted\n    (if \n      (or \n        (not is-user-enrolled-this-cycle) \n        (and is-user-enrolled-this-cycle (is-eq (default-to first_snapshot_new_cycle (get last-snapshot participant-hold)) local-current-snapshot-index))\n      )\n      ;; don't count him\n      current-total\n      ;; count him\n      (begin \n        (var-set current-snapshot-count (+ (var-get current-snapshot-count) u1))\n        (map-set participant-holding \n          { cycle-id: cycle-id-current, address: address }\n          { \n            amount: (+ balance  (default-to u0 (get amount participant-hold))),\n            last-snapshot: local-current-snapshot-index,\n            rewarded: false,\n            reward-amount: u0\n          }\n        )\n        (print \n          {\n            cycle-id: cycle-id-current,\n            snapshot-index: local-current-snapshot-index,\n            balance: balance,\n            enrolled-address: address,\n            function-name: \"compute-current-snapshot-balance\"\n          }\n        )\n        new-total\n      )\n    )\n  )\n)\n\n(define-private (reset-state-for-cycle (stx-block-height uint)) \n  (begin \n    (var-set nr-blocks-snapshot (var-get next-nr-blocks-snapshot))\n    (var-set nr-snapshots-cycle (var-get next-nr-snapshots-cycle))\n    (var-set APR (var-get next-APR))\n    (var-set can-distribute-rewards false)\n    (var-set current-cycle-stacks-block-height stx-block-height)\n    (var-set current-cycle-total u0)\n    (var-set current-snapshot-total u0)\n    (var-set rewarded-count u0) \n    (var-set concluded-snapshots false)\n    (var-set current-cycle-participants-count \n      (at-block (unwrap-panic (get-stacks-block-info? id-header-hash stx-block-height)) (var-get participants-count)))\n  )\n)\n\n;; contract initialization\n(define-public (initialize-contract (stx-block-height uint))\n  (begin \n    (asserts! (>= tenure-height (var-get current-cycle-tenure-height)) ERR_ACTIVATION_HEIGHT_NOT_MET)\n    (asserts! (not (var-get is-contract-active)) ERR_CONTRACT_ALREADY_ACTIVE)\n    (asserts! (> (var-get current-cycle-tenure-height) (block-height-to-tenure-height (- stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (asserts! (is-eq (var-get current-cycle-tenure-height) (block-height-to-tenure-height stx-block-height)) ERR_STX_BLOCK_TOO_LOW)\n    \n    (reset-state-for-cycle stx-block-height)\n    (update-snapshot-for-new-cycle stx-block-height)\n    (map-set cycle-snapshot-to-stx-block-height \n      {cycle-id: (var-get cycle-id), snapshot-id: (var-get current-snapshot-index)}\n      {stx-block-height: stx-block-height, tenure-height-stored: (var-get current-cycle-tenure-height)}\n    )\n    (ok (var-set is-contract-active true))\n  )\n)\n\n;; enroll-for-rewards\n(define-public (enroll (rewarded-address (optional principal)))\n  (let ((rewards-recipient (default-to contract-caller rewarded-address)))\n    (asserts! (is-none (map-get? participants {address: contract-caller})) ERR_ALREADY_ENROLLED)\n    (asserts! (is-none (map-get? blacklist {address: contract-caller})) ERR_USER_BLACKLISTED)\n    (asserts! (>= (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance-available contract-caller)) (var-get min-hold-for-enrollment)) ERR_ENROLL_MINIMUM_HOLD_NOT_MET)\n    (var-set participants-count (+ (var-get participants-count) u1))\n    (print\n      {\n        tenure-height: tenure-height,\n        reward-address: rewards-recipient,\n        enrolled-address: contract-caller,\n        function-name: \"enroll\"\n      }\n    )\n    (ok \n      (map-set participants \n        {address: contract-caller} \n        {rewarded-address: rewards-recipient}\n      )\n    )\n  )\n)\n\n(define-public (enroll-defi (defi-contract principal) (rewarded-address (optional principal)))\n  (let ((rewards-recipient (default-to defi-contract rewarded-address)))\n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (asserts! (is-none (map-get? participants {address: defi-contract})) ERR_ALREADY_ENROLLED)\n    (asserts! (is-none (map-get? blacklist {address: defi-contract})) ERR_USER_BLACKLISTED)\n    (var-set participants-count (+ (var-get participants-count) u1))\n    (print\n      {\n        tenure-height: tenure-height,\n        reward-address: rewards-recipient,\n        enrolled-address: defi-contract,\n        function-name: \"enroll\"\n      }\n    )\n    (ok \n      (map-set participants \n        {address: defi-contract} \n        {rewarded-address: rewards-recipient}\n      )\n    )\n  )\n)\n\n(define-public (enroll-defi-batch (defi-contracts (list 900 {defi-contract: principal, rewarded-address: (optional principal)})))\n  (begin\n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (ok (map enroll-defi-one defi-contracts))\n  )\n)\n\n(define-private (enroll-defi-one (entry {defi-contract: principal, rewarded-address: (optional principal)}))\n  (let \n    (\n      (defi-contract (get defi-contract entry))\n      (rewarded-address (get rewarded-address entry))\n    )\n    (try! (enroll-defi defi-contract rewarded-address))\n    (ok true)\n  )\n)\n\n(define-public (change-reward-address (new-address principal)) \n  (let ((participant (map-get? participants {address: contract-caller})))\n    (asserts! (is-some participant) ERR_NOT_ENROLLED)\n    (ok \n      (map-set participants \n        {address: contract-caller} \n        (merge (unwrap-panic participant) {rewarded-address: new-address})\n      )\n    )\n  )\n)\n\n(define-public (change-reward-address-defi (defi-contract principal) (new-reward-address principal)) \n  (let ((participant (map-get? participants {address: defi-contract})))\n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (asserts! (is-some participant) ERR_NOT_ENROLLED)\n    (ok (map-set participants \n      {address: defi-contract} \n      (merge (unwrap-panic participant) {rewarded-address: new-reward-address})\n    ))\n  )\n)\n\n(define-private (remove-participant (address principal))\n  (begin \n    (print\n      {\n        tenure-height: tenure-height,\n        enrolled-address: address,\n        function-name: \"opt-out\"\n      }\n    )\n    (map-delete participants {address: address})\n    (var-set participants-count (- (var-get participants-count) u1))\n  )\n)\n\n(define-public (opt-out) \n  (begin \n    (asserts! (is-some (map-get? participants {address: contract-caller})) ERR_NOT_ENROLLED)\n    (ok (remove-participant contract-caller))\n  )\n)\n\n(define-public (opt-out-defi (defi-contract principal))\n  (begin \n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (asserts! (is-some (map-get? participants {address: defi-contract})) ERR_NOT_ENROLLED)\n    (ok (remove-participant defi-contract))\n  )\n)\n\n(define-public (add-blacklisted (address principal))\n  (begin \n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (if (is-some (map-get? participants {address: address}))\n      (begin \n        (remove-participant address)\n        (ok (map-set blacklist {address: address} {blacklisted: true}))\n      )\n      (ok (map-set blacklist {address: address} {blacklisted: true}))\n    )\n  )\n)\n\n(define-public (add-blacklisted-batch (addresses (list 200 principal)))\n  (begin\n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (ok (map add-blacklisted addresses))\n  )\n)\n\n(define-public (remove-blacklisted (address principal))\n  (begin \n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (ok (map-delete blacklist {address: address}))\n  )\n)\n\n(define-public (update-admin (new-admin-address principal)) \n  (begin \n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (ok (var-set admin new-admin-address))\n  )\n)\n\n(define-public (update-min-hold-for-enrollment (new-min-hold uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get admin)) ERR_NOT_ADMIN)\n    (ok (var-set min-hold-for-enrollment new-min-hold))\n  )\n)\n\n;; update cycle/snapshot rules - admin functions\n\n;; Update the number of blocks per snapshot. The new value will be picked up\n;; in the next cycle, after the head-to-next-cycle function is called.\n(define-public (update-snapshot-length (updated-nr-blocks-snapshot uint))\n  (begin\n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (ok (var-set next-nr-blocks-snapshot updated-nr-blocks-snapshot))\n  )\n)\n\n;; Update the number of snapshots per cycle. The new value will be picked up\n;; in the next cycle, after the head-to-next-cycle function is called.\n(define-public (update-nr-snapshots-cycle (updated-nr-snapshots-cycle uint))\n  (begin \n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (ok (var-set next-nr-snapshots-cycle updated-nr-snapshots-cycle))\n  )\n)\n\n;; Update the number of snapshots per cycle and the number of blocks per snapshot. \n;; The new value will be picked up in the next cycle, after the \n;; head-to-next-cycle function is called.\n(define-public (update-cycle-data (updated-nr-snapshots-cycle uint) (updated-nr-blocks-snapshot uint))\n  (begin\n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (var-set next-nr-snapshots-cycle updated-nr-snapshots-cycle)\n    (ok (var-set next-nr-blocks-snapshot updated-nr-blocks-snapshot))\n  )\n)\n\n(define-public (update-APR (new-apr-one-eight uint))\n  (begin \n    (asserts! (is-eq (var-get admin) contract-caller) ERR_NOT_ADMIN)\n    (asserts! (>= new-apr-one-eight MIN_APR_ONE_EIGHT) ERR_APR_TOO_LOW)\n    (asserts! (<= new-apr-one-eight MAX_APR_ONE_EIGHT) ERR_APR_TOO_HIGH)\n    (ok (var-set next-APR new-apr-one-eight))\n  )\n)\n\n\n(define-read-only (check-new-cycle-valid-stacks-block-height (stx-block-height uint)) \n  (begin\n    (asserts! (> (var-get current-cycle-tenure-height) (block-height-to-tenure-height (- stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (ok (asserts! (is-eq (var-get current-cycle-tenure-height) (block-height-to-tenure-height stx-block-height)) ERR_STX_BLOCK_TOO_LOW))\n  )\n)\n\n(define-read-only (check-new-snapshot-valid-stacks-block-height (stx-block-height uint)) \n  (begin\n    (asserts! (> (var-get current-snapshot-tenure-height) (block-height-to-tenure-height (- stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (ok (asserts! (is-eq (var-get current-snapshot-tenure-height) (block-height-to-tenure-height stx-block-height)) ERR_STX_BLOCK_TOO_LOW))\n  )\n)\n\n(define-public (head-to-next-snapshot (new-stx-block-height uint))\n  (let ((next-snapshot-tenure-height (+ (var-get current-snapshot-tenure-height) (var-get nr-blocks-snapshot))))\n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (>= tenure-height next-snapshot-tenure-height) ERR_NOT_NEW_SNAPSHOT_YET)\n    (asserts! (is-eq (var-get current-snapshot-count) (var-get current-cycle-participants-count)) ERR_NOT_SNAPSHOTTED_ALL_PARTICIPANTS)\n    (asserts! (not (is-eq (var-get nr-snapshots-cycle) (+ (var-get current-snapshot-index) u1))) ERR_CYCLE_ENDED)\n    (asserts! (< next-snapshot-tenure-height (var-get next-cycle-tenure-height)) ERR_CYCLE_ENDED_2)\n    (asserts! (> next-snapshot-tenure-height (block-height-to-tenure-height (- new-stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (asserts! (is-eq next-snapshot-tenure-height (block-height-to-tenure-height new-stx-block-height)) ERR_STX_BLOCK_TOO_LOW)\n\n    (var-set current-snapshot-tenure-height next-snapshot-tenure-height)\n    (var-set current-cycle-total (+ (var-get current-cycle-total) (var-get current-snapshot-total)))\n    (var-set current-snapshot-total u0)\n    (var-set current-snapshot-count u0)\n    (var-set current-snapshot-index (+ (var-get current-snapshot-index) u1))\n    (map-set cycle-snapshot-to-stx-block-height \n      { cycle-id: (var-get cycle-id), snapshot-id: (var-get current-snapshot-index)}\n      { stx-block-height: new-stx-block-height, tenure-height-stored: next-snapshot-tenure-height }\n    )\n    (ok (var-set current-snapshot-stacks-block-height new-stx-block-height))\n  )\n)\n\n(define-private (update-snapshot-for-new-cycle (stx-block-height uint))\n  (begin\n    (var-set current-snapshot-tenure-height (var-get current-cycle-tenure-height))\n    (var-set current-snapshot-count u0)\n    (var-set current-snapshot-index u0)\n    (var-set current-snapshot-stacks-block-height stx-block-height)\n  )\n)\n\n(define-public (finalize-reward-distribution) \n  (begin\n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (is-eq (var-get current-cycle-participants-count) (var-get rewarded-count)) ERR_NOT_REWARDED_ALL)\n    (asserts! (var-get can-distribute-rewards) ERR_CANNOT_FINALIZE)\n    (asserts! (is-none (map-get? distribution-finalized-stx-block-height-when-called {cycle-id: (var-get cycle-id)})) ERR_ALREADY_FINALIZED)\n\n    ;; Used by DeFi apps to call their rewards distribution afterward it is finalized here\n    (ok (map-set distribution-finalized-stx-block-height-when-called {cycle-id: (var-get cycle-id)} {stx-block-height: stacks-block-height}))\n  )\n)\n\n(define-public (head-to-next-cycle (stx-block-height uint)) \n  (begin\n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (>= tenure-height (var-get next-cycle-tenure-height)) ERR_NOT_NEW_CYCLE_YET)\n    (asserts! (is-eq (var-get current-cycle-participants-count) (var-get rewarded-count)) ERR_NOT_REWARDED_ALL) \n    (asserts! (is-some (map-get? distribution-finalized-stx-block-height-when-called {cycle-id: (var-get cycle-id)})) ERR_REWARDS_NOT_SENT_YET)\n    (asserts! (> (var-get next-cycle-tenure-height) (block-height-to-tenure-height (- stx-block-height u1))) ERR_STX_BLOCK_TOO_HIGH)\n    (asserts! (is-eq (var-get next-cycle-tenure-height) (block-height-to-tenure-height stx-block-height)) ERR_STX_BLOCK_TOO_LOW)\n  \n    (var-set current-cycle-tenure-height \n      (+ (var-get current-cycle-tenure-height) \n        (* (var-get nr-blocks-snapshot) (var-get nr-snapshots-cycle))))\n    (reset-state-for-cycle stx-block-height)\n    (var-set next-cycle-tenure-height \n      (+ (var-get current-cycle-tenure-height) \n        (* (var-get nr-blocks-snapshot) (var-get nr-snapshots-cycle))))\n    (var-set cycle-id (+ (var-get cycle-id) u1))\n    (update-snapshot-for-new-cycle stx-block-height)\n\n    (ok \n      (map-set cycle-snapshot-to-stx-block-height \n        { cycle-id: (var-get cycle-id), snapshot-id: (var-get current-snapshot-index)}\n        { stx-block-height: stx-block-height, tenure-height-stored: (var-get current-cycle-tenure-height) }\n      )\n    )\n  )\n)\n\n(define-public (distribute-rewards (principals (list 900 principal))) \n  (let \n    ((stx-id-header-hash (unwrap! (get-stacks-block-info? id-header-hash (var-get current-cycle-stacks-block-height)) ERR_STX_BLOCK_IN_FUTURE)))\n    (var-set local-stx-id-header-hash stx-id-header-hash)\n    (asserts! (var-get can-distribute-rewards) ERR_CANNOT_DISTRIBUTE_REWARDS)\n    (if \n      (is-eq (var-get current-cycle-total) u0)\n        (begin \n          (var-set rewarded-count (var-get current-cycle-participants-count))\n          (ok (list ))\n        )\n        (ok (map distribute-reward-user principals))\n    )\n  )\n)\n\n(define-private (distribute-reward-user (user principal)) \n  (let \n    (\n      (cycle-id-current (var-get cycle-id))\n      (holding-state (unwrap! (map-get? participant-holding {address: user, cycle-id: cycle-id-current}) ERR_NOT_ENROLLED))\n      (already-rewarded-amount (default-to u0 (get amount (map-get? rewards-holding {rewarded-address: user, cycle-id: cycle-id-current}))))\n      (participant-state (unwrap! (at-block (var-get local-stx-id-header-hash) (map-get? participants {address: user})) ERR_NOT_ENROLLED))\n      (rewarded-address (get rewarded-address participant-state))\n      (reward-amount \n        (/\n          (* \n            (get amount holding-state) \n            (var-get rewards-to-distribute)\n          ) \n          (* \n            (var-get current-cycle-total)\n            APR_DECIMALS\n          )\n        )\n      )\n    )\n    (if (get rewarded holding-state)\n      ERR_ALREADY_REWARDED\n      (begin\n        (var-set rewarded-count (+ (var-get rewarded-count) u1))\n        (map-set participant-holding \n          {address: user, cycle-id: cycle-id-current} \n          (merge holding-state {rewarded: true, reward-amount: reward-amount})\n        )\n        (map-set rewards-holding {rewarded-address: rewarded-address, cycle-id: cycle-id-current} \n          {amount: (+ already-rewarded-amount reward-amount)}\n        )\n        (if (> reward-amount u0) \n          (try! (as-contract (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token transfer \n            reward-amount\n            tx-sender rewarded-address none)))\n          false\n        )\n        (print\n          {\n            cycle-id: cycle-id-current,\n            enrolled-address: user,\n            reward-address: rewarded-address,\n            amount: reward-amount,\n            function-name: \"distribute-rewards\"\n          }\n        )\n        (ok true)\n      )\n    )\n  )\n)\n\n(define-public (conclude-cycle-snapshots) \n  (begin \n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (not (var-get concluded-snapshots)) ERR_SNAPSHOTS_ALREADY_CONCLUDED)\n    (asserts! (is-eq (+ (var-get current-snapshot-index) u1) (var-get nr-snapshots-cycle)) ERR_NOT_ALL_SNAPSHOTS)\n    (asserts! (is-eq (var-get current-snapshot-count) (var-get current-cycle-participants-count)) ERR_NOT_SNAPSHOTTED_ALL_PARTICIPANTS)\n    ;; add in the calculation the total amount from the last snapshot\n    (var-set current-cycle-total (+ (var-get current-cycle-total) (var-get current-snapshot-total)))\n    (print\n      {\n        cycle-id: (var-get cycle-id),\n        current-cycle-total: (var-get current-cycle-total),\n        function-name: \"conclude-cycle-snapshots\"\n      }\n    )\n    (ok (var-set concluded-snapshots true))\n  )\n)\n\n(define-public (set-can-distribute-rewards)\n  (begin \n    (asserts! (var-get is-contract-active) ERR_CONTRACT_NOT_ACTIVE)\n    (asserts! (not (var-get can-distribute-rewards)) ERR_SET_CAN_DISTRIBUTE_ALREADY_CALLED)\n    (asserts! (var-get concluded-snapshots) ERR_SNAPSHOTS_NOT_CONCLUDED)\n    (let ((pool-rewards (at-block \n                  (unwrap-panic (get-stacks-block-info? id-header-hash (var-get current-snapshot-stacks-block-height))) \n                  (unwrap-panic (contract-call? 'SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token get-balance-available (as-contract contract-caller)))))\n          ;; This is the real value\n          (max-cap-rewards (/ (* (cycle-percentage-rate) (var-get current-cycle-total)) (var-get nr-snapshots-cycle))) \n          (local-rewards-to-distribute \n            (if \n              (< (* APR_DECIMALS pool-rewards) max-cap-rewards) \n              (* APR_DECIMALS pool-rewards)\n              max-cap-rewards)))\n      (var-set rewards-to-distribute local-rewards-to-distribute)\n      (ok (var-set can-distribute-rewards true))\n    )\n  )\n)\n\n;; Number of cycles per year - average number of blocks in a year / number of\n;; blocks in a cycle. When nr-blocks-snapshot or next-nr-snapshots-cycle are\n;; updated, this value is recalculated.\n(define-read-only (nr-cycles-year) \n  (/ average-burn-blocks-year (* (var-get nr-blocks-snapshot) (var-get nr-snapshots-cycle)))\n)\n\n;; Cycle percentage rate scaled by 10^8. This represents the maximum\n;; percentage of the sBTC yield contributors are ready to give away as rewards\n;; in a cycle.\n;; CPR = APR / nr-cycles-per-year\n;; When APR or nr-cycles-per-year are updated, this value is recalculated.\n(define-read-only (cycle-percentage-rate) \n  (/ (var-get APR) (nr-cycles-year))\n)\n\n(define-read-only (block-height-to-tenure-height (stx-block-height uint)) \n  (at-block (unwrap-panic (get-stacks-block-info? id-header-hash stx-block-height)) tenure-height)\n)\n\n(define-read-only (is-enrolled-in-next-cycle (address principal)) \n  (is-some (map-get? participants {address: address}))\n)\n\n(define-read-only (is-enrolled-this-cycle (address principal)) \n  (is-some \n    (at-block \n      (unwrap-panic (get-stacks-block-info? id-header-hash (var-get current-cycle-stacks-block-height)))\n      (map-get? participants {address: address}))\n  )\n)\n\n(define-read-only (get-is-blacklisted (address principal)) \n  (is-some (map-get? blacklist {address: address}))\n)\n\n(define-read-only (get-is-blacklisted-list (addresses (list 900 principal)))\n  (map is-blacklisted addresses)\n)\n\n(define-private (is-blacklisted (address principal))\n  (is-some (map-get? blacklist {address: address}))\n)\n\n(define-read-only (cycle-data) \n  {\n    cycle-id: (var-get cycle-id),\n    current-cycle-tenure-height: (var-get current-cycle-tenure-height),\n    next-cycle-tenure-height: (var-get next-cycle-tenure-height),\n    current-cycle-stacks-block-height: (var-get current-cycle-stacks-block-height),\n    participants-count: (var-get current-cycle-participants-count),\n    nr-snapshots-cycle: (var-get nr-snapshots-cycle),\n    nr-blocks-snapshot: (var-get nr-blocks-snapshot),\n    current-snapshot-index: (var-get current-snapshot-index),\n  }\n)\n\n(define-read-only (current-cycle-id)\n  (var-get cycle-id)\n)\n\n(define-read-only (snapshot-data) \n  {\n    current-snapshot-tenure-height: (var-get current-snapshot-tenure-height),\n    current-snapshot-stacks-block-height: (var-get current-snapshot-stacks-block-height),\n    current-snapshot-count: (var-get current-snapshot-count),\n    current-snapshot-total: (var-get current-snapshot-total),\n    current-snapshot-index: (var-get current-snapshot-index),\n    nr-blocks-snapshot: (var-get nr-blocks-snapshot),\n  }\n)\n\n(define-read-only (rewarded-data) \n  {\n    rewarded-count: (var-get rewarded-count),\n    can-distribute-rewards: (var-get can-distribute-rewards),\n  }\n)\n\n(define-read-only (check-can-distribute-rewards) \n  (var-get can-distribute-rewards)\n)\n\n;; if SC not initialized, returns tenure block height for it\n;; else returns the tenure block height for next snapshot/cycle\n(define-read-only (tenure-height-for-next-state)\n  (if (var-get is-contract-active) \n    (+ (var-get current-snapshot-tenure-height) (var-get nr-blocks-snapshot))\n    (var-get current-cycle-tenure-height)\n  )\n)\n\n(define-read-only (current-overview-data) \n  {\n    cycle-id: (var-get cycle-id),\n    snapshot-index: (var-get current-snapshot-index),\n    nr-snapshots-cycle: (var-get nr-snapshots-cycle)\n  }\n)\n\n(define-read-only (get-admin)\n  (var-get admin))\n\n(define-read-only (get-is-contract-active)\n  (var-get is-contract-active))\n\n(define-read-only (get-current-tenure-height) \n  tenure-height)\n\n(define-read-only (get-latest-reward-address (address principal))\n  (get rewarded-address (map-get? participants {address: address})))\n\n(define-read-only (get-stacks-block-height-for-cycle-snapshot\n    (checked-cycle-id uint)\n    (checked-snapshot-id uint)\n  )\n  (get stx-block-height\n    (map-get? cycle-snapshot-to-stx-block-height\n      { \n        cycle-id: checked-cycle-id,\n        snapshot-id: checked-snapshot-id\n      }\n    )\n  )\n)\n\n(define-read-only (get-tenure-height-for-cycle-snapshot\n    (checked-cycle-id uint)\n    (checked-snapshot-id uint)\n  )\n  (get tenure-height-stored\n    (map-get? cycle-snapshot-to-stx-block-height\n      { \n        cycle-id: checked-cycle-id,\n        snapshot-id: checked-snapshot-id\n      }\n    )\n  )\n)\n\n(define-read-only (stx-block-height-distribution-finalized (wanted-cycle-id uint)) \n  (map-get? distribution-finalized-stx-block-height-when-called {cycle-id: wanted-cycle-id})\n)\n\n(define-read-only (reward-amount-for-cycle-and-address (wanted-cycle-id uint) (address principal)) \n  (get reward-amount (map-get? participant-holding {\n    cycle-id: wanted-cycle-id,\n    address: address\n  }))\n)\n\n(define-read-only (reward-amount-for-cycle-and-reward-address (wanted-cycle-id uint) (reward-address principal)) \n  (get amount (map-get? rewards-holding {\n    cycle-id: wanted-cycle-id,\n    rewarded-address: reward-address\n  }))\n)\n\n(define-read-only (get-cycle-current-state)\n  {\n    cycle-id: (var-get cycle-id),\n    first-tenure: (var-get current-cycle-tenure-height),\n    last-tenure: (- (var-get next-cycle-tenure-height) u1), \n  }\n)\n\n(define-read-only (get-min-hold-for-enrollment)\n  (var-get min-hold-for-enrollment)\n)\n",
    "analysis": {
      "summary": "This contract manages a reward distribution system based on snapshots of participants' holdings, with functionality for enrollment, snapshots, and reward distribution.",
      "explanation": "This Clarity smart contract is designed for managing a reward system that operates on a cycle basis, where each cycle consists of multiple snapshots. Participants can enroll to be part of the reward distribution, and their holdings are snapshotted at predetermined intervals. The contract includes error codes for various failure states, constants for APR calculation, and variables to track the state of the contract and cycles. Key functions include initializing the contract, enrolling participants, taking snapshots of holdings, distributing rewards, and managing administrative tasks such as updating the APR or cycle parameters. The contract uses several data maps to track participants, their holdings, and rewards, as well as a blacklist for excluding certain addresses. It ensures that only eligible participants are enrolled, calculates rewards based on snapshots of holdings, and distributes rewards accordingly. Administrative functions allow for updating critical parameters and managing the contract's state.",
      "tags": [
        "DeFi",
        "rewards",
        "snapshots",
        "enrollment",
        "administration"
      ]
    }
  },
  {
    "rank": 142,
    "contract": "SP2HM9F89Y24KRM6WE4NJ6QN5G929KP3WMJSGESQ4.ccd012-redemption-nyc",
    "calls": 183,
    "source": "(define-constant owner tx-sender)\n\n(define-constant D8 u100000000) \n\n(define-public (a1 (in uint))  \n    (begin \n        (asserts! (is-eq tx-sender owner) (err u444))\n        (let\n            (\n                (aa (stx-get-balance tx-sender))\n                (b1 (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wnyc D8 in none)))\n                (b2 (try! (contract-call? 'SP8A9HZ3PKST0S42VM9523Z9NV42SZ026V4K39WH.ccd012-redemption-nyc redeem-nyc)))\n                (ab (stx-get-balance tx-sender)))\n\n            (asserts! (>= ab aa) (err (- aa ab)))\n            (print { start: aa, finish: ab })\n\n            (ok (- ab aa))\n        )\n    )\n) \n\n\n(define-public (redeem-nyc (amount uint))\n    (let\n        ((a (list (a1 amount) (a1 amount))))\n        (ok a)\n    )\n)",
    "analysis": {
      "summary": "This contract defines operations for swapping tokens and redeeming a specific token, ensuring only the owner can initiate swaps and tracking the STX balance changes.",
      "explanation": "The contract is designed around two main functionalities: swapping tokens and redeeming a specific token, with an emphasis on access control and balance tracking. Here's a breakdown of its components:\n\n- **Constant Declarations**:\n  - `<L1>`: The `owner` constant is set to the `tx-sender` (the address that deploys the contract), ensuring that only this address can perform certain actions within the contract.\n  - `<L3>`: The `D8` constant represents a fixed amount (100,000,000 units) used in the token swap operation, likely to standardize the swap amount or serve as a minimum/required swap amount.\n\n- **Public Functions**:\n  - `<L5-22>`: The `a1` function allows the contract owner to swap tokens by calling an external contract's `swap-x-for-y` function and then attempt to redeem a specific token through another contract call. It checks the caller's balance before and after these operations, ensuring the balance does not decrease, and logs the balance changes.\n    - The use of `asserts!` ensures that only the contract owner can execute this function, enhancing security by preventing unauthorized access.\n    - The `try!` macro is used for calling external contracts, handling the case where these calls fail by stopping execution and returning an error.\n    - Balance checks and logging are implemented for tracking and debugging purposes, providing insights into the function's impact on the caller's STX balance.\n  - `<L24-29>`: The `redeem-nyc` function is designed to perform the redemption operation twice with the same amount, encapsulated in a list. This could be for redundancy, to ensure redemption success, or to fulfill specific operational requirements.\n\nOverall, the contract leverages Clarity's features for access control, external contract interactions, and state tracking to implement its token swap and redemption functionalities. It's a good example of how to structure contract calls and use assertions for security in Clarity smart contracts.",
      "tags": [
        "token-swap",
        "access-control",
        "balance-tracking",
        "external-contract-interaction"
      ]
    }
  },
  {
    "rank": 143,
    "contract": "SPN5AKG35QZSK2M8GAMR4AFX45659RJHDW353HSG.usdh-token-v1",
    "calls": 178,
    "source": "(impl-trait .sip-010-trait.sip-010-trait)\n(impl-trait .interim-token-trait-v1.interim-token-trait)\n(use-trait token-migration-trait .token-migration-trait-v1.token-migration-trait)\n\n(define-fungible-token usdh)\n\n(define-constant ERR_NOT_AUTHORIZED (err u1401))\n(define-constant ERR_DEPRECATED_TOKEN (err u1402))\n(define-constant ERR_NOT_MIGRATION_MANAGER (err u1403))\n\n;;-------------------------------------\n;; Const and vars\n;;-------------------------------------\n\n(define-data-var token-uri (string-utf8 256) u\"\")\n(define-data-var token-name (string-ascii 32) \"Hermetica USDh\")\n\n(define-data-var migration-start-height uint u0)\n(define-data-var migration-manager (optional principal) none)\n\n;;-------------------------------------\n;; SIP-010\n;;-------------------------------------\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply usdh))\n)\n\n(define-read-only (get-name)\n  (ok (var-get token-name))\n)\n\n(define-read-only (get-symbol)\n  (ok \"USDh\")\n)\n\n(define-read-only (get-decimals)\n  (ok u8)\n)\n\n(define-read-only (get-balance (account principal))\n  (ok (ft-get-balance usdh account))\n)\n\n(define-read-only (get-token-uri)\n  (ok (some (var-get token-uri)))\n)\n\n(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))\n  (begin\n    (try! (is-not-migrated))\n    (asserts! (or (is-eq sender tx-sender) (is-eq sender contract-caller)) ERR_NOT_AUTHORIZED)\n\n    (match (ft-transfer? usdh amount sender recipient)\n      response (begin\n        (print memo)\n        (print { action: \"transfer\", data: { sender: tx-sender, recipient: recipient, amount: amount, block-height: block-height } })\n        (ok response)\n      )\n      error (err error)\n    )\n  )\n)\n\n;;-------------------------------------\n;; Admin\n;;-------------------------------------\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (begin\n    (try! (contract-call? .hq-v1 check-is-protocol tx-sender))\n    (ok (var-set token-uri value))\n  )\n)\n\n(define-public (set-token-name (name (string-ascii 32)))\n  (begin\n    (try! (contract-call? .hq-v1 check-is-protocol tx-sender))\n    (ok (var-set token-name name))\n  )\n)\n\n;;-------------------------------------\n;; Mint / Burn\n;;-------------------------------------\n\n(define-public (mint-for-protocol (amount uint) (recipient principal))\n  (begin\n    (try! (is-not-migrated))\n    (try! (contract-call? .hq-v1 check-is-minting-contract contract-caller))\n    (ft-mint? usdh amount recipient)\n  )\n)\n\n(define-public (burn-for-protocol (amount uint) (sender principal))\n  (begin\n    (try! (is-not-migrated))\n    (try! (contract-call? .hq-v1 check-is-minting-contract contract-caller))\n    (ft-burn? usdh amount sender)\n  )\n)\n\n(define-public (burn (amount uint))\n  (ft-burn? usdh amount tx-sender)\n)\n\n;;-------------------------------------\n;; Migration\n;;-------------------------------------\n\n(define-read-only (is-not-migrated)\n\t(ok (asserts! (is-eq u0 (var-get migration-start-height)) ERR_DEPRECATED_TOKEN))\n)\n\n(define-public (start-migration (manager <token-migration-trait>))\n\t(begin\n\t\t(try! (is-not-migrated))\n\t\t(try! (contract-call? .hq-v1 check-is-owner contract-caller))\n\t\t(var-set migration-start-height burn-block-height)\n\t\t(var-set migration-manager (some (contract-of manager)))\n\t\t(contract-call? manager start-migration burn-block-height (ft-get-supply usdh))\n\t)\n)\n\n(define-public (migrate-balance (who principal))\n\t(let ((balance (ft-get-balance usdh who)))\n\t\t(asserts! (is-eq (var-get migration-manager) (some contract-caller)) ERR_NOT_MIGRATION_MANAGER)\n\t\t(asserts! (> balance u0) (ok u0))\n\t\t(try! (ft-burn? usdh balance who))\n\t\t(ok balance)\n\t)\n)",
    "analysis": {
      "summary": "This contract defines a fungible token named USDh with SIP-010 compliance, administrative functions, minting/burning capabilities, and a migration mechanism.",
      "explanation": "The contract implements the SIP-010 standard for fungible tokens on the Stacks blockchain, allowing for basic token interactions such as transfers and balance queries. It introduces administrative functions to set token metadata, minting and burning functions for token supply management, and a migration mechanism to transition to a new contract if necessary.\n\n- The `impl-trait` statements <L1-3> declare that this contract implements the SIP-010 standard and an interim token trait for compatibility and migration purposes.\n- `define-fungible-token` <L5> creates the USDh token.\n- Constants <L7-9> define error codes for unauthorized access, deprecated token, and unauthorized migration manager actions.\n- Data variables <L13-18> store token metadata, the migration start block height, and the migration manager's principal.\n- SIP-010 implementation <L22-45> provides standard methods for token information retrieval and transfer functionality, adhering to the trait's specifications.\n- Administrative functions <L49-62> allow protocol-authorized accounts to update token metadata.\n- Minting/Burning functions <L66-82> enable protocol-specific minting and burning, including a general burn function for token holders.\n- The migration mechanism <L86-111> includes a method to start the migration process, setting a migration manager and start height, and a function for migrating balances by burning tokens in this contract and presumably issuing equivalent tokens in a new contract.\n\nEach public function checks for migration status or proper authorization before proceeding, ensuring that only authorized entities can perform sensitive operations and that the contract can be effectively frozen during migration.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "DeFi",
        "protocol",
        "migration"
      ]
    }
  },
  {
    "rank": 144,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v181",
    "calls": 177,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait oabc2f5b3982b0123 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o318649a6b009833d 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait oeb241b403e5527bf 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (oc9bd3483422ecf0d (o5183708558b845a4 <oabc2f5b3982b0123>) (o5fea83bcb8e0304e <oabc2f5b3982b0123>) (o26a22f288488cc6a <oeb241b403e5527bf>) (oc53901217b812f93 <o318649a6b009833d>) (o977b01773ea33d9d uint)) (let ((o9808b37ac42bb57f (try! (as-contract (contract-call? o26a22f288488cc6a swap o5183708558b845a4 o5fea83bcb8e0304e oc53901217b812f93 o977b01773ea33d9d u1))))) (ok (get amt-out o9808b37ac42bb57f)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-b (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-c (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-e (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-f (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-g (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-i (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-j (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-k (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-l (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-m (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-n (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-p (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-q (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-r (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-s (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-t (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-u (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o61f60b1a41db3adf>) (o058a5af358019b66 <o61f60b1a41db3adf>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o2ee4fb2388ad5104 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53)))) (asserts! (> o24ee854d6599d6a5 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o24ee854d6599d6a5 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o24ee854d6599d6a5))))) (define-public (swap-helper-w (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-x (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-y (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-z (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115)))))",
    "analysis": {
      "summary": "This contract facilitates complex swap operations across various tokens and protocols on the Stacks blockchain.",
      "explanation": "The contract is designed to interact with multiple token standards and liquidity pool contracts to perform swaps. It uses the SIP-010 trait for fungible tokens and custom traits for liquidity pools and fees. The contract defines a series of private functions (<L8-L23>) that handle the logic for different swap scenarios, utilizing external contracts for the actual swap operations. Public functions (<L24-L49>) are entry points for users to initiate swaps, with each function tailored to specific swap paths and conditions. The contract ensures that only the contract deployer can call these public functions (<L24>, <L25>, etc.), and it includes mechanisms for calculating and transferring the swap amounts. It also tracks the number of swaps performed through a variable (<L7>), which is incremented with each successful swap. The contract's design allows for flexibility in adding new swap paths and adjusting to changes in the external contracts it interacts with.",
      "tags": [
        "swap",
        "liquidity-pool",
        "SIP-010",
        "fungible-token",
        "DeFi"
      ]
    }
  },
  {
    "rank": 145,
    "contract": "SPN5AKG35QZSK2M8GAMR4AFX45659RJHDW353HSG.staking-v1",
    "calls": 175,
    "source": ";; @contract Staking\n;; @version 1\n\n;;-------------------------------------\n;; Constants & Variables\n;;-------------------------------------\n\n(define-constant ERR_INVALID_AMOUNT (err u3001))\n(define-constant ERR_ALREADY_INITALIZED (err u3002))\n\n(define-constant usdh-base (pow u10 u8))\n\n(define-data-var initialized bool false)\n\n;;-------------------------------------\n;; Getters\n;;-------------------------------------\n\n(define-read-only (get-usdh-per-susdh) \n  (let (\n    (total-usdh-staked (unwrap-panic (contract-call? .usdh-token-v1 get-balance .staking-v1)))\n    (total-susdh-supply (unwrap-panic (contract-call? .susdh-token-v1 get-total-supply)))\n  )\n    (if (and (> total-usdh-staked u0) (> total-susdh-supply u0))\n      (/\n        (*\n          total-usdh-staked\n          usdh-base\n        )\n        total-susdh-supply\n      )\n      usdh-base\n    )\n  )\n)\n\n;;-------------------------------------\n;; User\n;;-------------------------------------\n\n(define-public (stake (amount uint))\n  (let (\n    (ratio (get-usdh-per-susdh))\n    (amount-susdh (/ (* amount usdh-base) ratio))\n  )\n    (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n    (try! (contract-call? .blacklist-susdh-v1 check-is-not-soft-blacklist tx-sender))\n    (try! (contract-call? .hq-v1 check-is-enabled))\n\n    (try! (contract-call? .usdh-token-v1 transfer amount tx-sender .staking-v1 none))\n    (try! (contract-call? .susdh-token-v1 mint-for-protocol amount-susdh tx-sender))\n    (print { amount-susdh: amount-susdh, amount-usdh: amount, ratio: ratio })\n    (ok true)\n  )\n)\n\n(define-public (unstake (amount uint))\n  (let (\n    (ratio (get-usdh-per-susdh))\n    (amount-usdh (/ (* amount ratio) usdh-base))\n  )\n    (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n    (try! (contract-call? .blacklist-susdh-v1 check-is-not-soft-blacklist tx-sender))\n    (try! (contract-call? .hq-v1 check-is-enabled))\n\n    (try! (contract-call? .susdh-token-v1 burn-for-protocol amount tx-sender))\n    (try! (contract-call? .staking-silo-v1 create-claim amount-usdh tx-sender))\n    (try! (contract-call? .usdh-token-v1 transfer amount-usdh (as-contract tx-sender) .staking-silo-v1 none))\n    (print { amount-susdh: amount, amount-usdh: amount-usdh, ratio: ratio })\n    (ok true)\n  )\n)\n\n;;-------------------------------------\n;; Init\n;;-------------------------------------\n\n(define-public (init-usdh-per-susdh (ratio uint)) \n  (let (\n    (susdh-amount (/ (* usdh-base usdh-base) ratio))\n  )\n    (asserts! (not (var-get initialized)) ERR_ALREADY_INITALIZED)\n    (asserts! (>= ratio usdh-base) ERR_INVALID_AMOUNT)\n    (try! (contract-call? .usdh-token-v1 mint-for-protocol usdh-base .staking-v1))\n    (try! (contract-call? .susdh-token-v1 mint-for-protocol susdh-amount .staking-v1))\n    (ok (var-set initialized true))\n  )\n)",
    "analysis": {
      "summary": "This contract implements a staking mechanism for USDH tokens, allowing users to stake USDH in exchange for sUSDH tokens and vice versa.",
      "explanation": "The contract defines a staking system where users can stake USDH tokens to receive sUSDH tokens based on a calculated ratio and unstake sUSDH to get back USDH tokens. It includes initialization logic to set the initial staking ratio, and mechanisms to stake and unstake tokens, ensuring users are not on a blacklist before allowing operations. The contract interacts with external contracts for token transfers and blacklist checks.\n\n- Constants <L3-6> define error codes for invalid operations.\n- A constant `usdh-base` <L8> is defined to adjust precision in calculations.\n- A variable `initialized` <L10> tracks if the contract's initial setup has been completed.\n- The `get-usdh-per-susdh` function <L14-26> calculates the current exchange rate between USDH and sUSDH tokens.\n- The `stake` function <L30-47> allows users to stake USDH tokens in exchange for sUSDH tokens. It checks for minimum amount, blacklist status, and system enablement before transferring tokens.\n- The `unstake` function <L49-66> enables users to convert sUSDH back to USDH, with similar checks and operations as staking.\n- The `init-usdh-per-susdh` function <L68-79> initializes the staking ratio and mints initial tokens for the protocol, ensuring it can only be done once.\n\nEach public function performs necessary checks and interacts with other contracts for token operations, ensuring system integrity and user eligibility.",
      "tags": [
        "staking",
        "token",
        "DeFi"
      ]
    }
  },
  {
    "rank": 146,
    "contract": "SPQ5CEHETP8K4Q2FSNNK9ANMPAVBSA9NN86YSN59.welsh-stone",
    "calls": 174,
    "source": ";; welsh-stone\n;; contractType: public\n\n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-non-fungible-token welsh-stone uint)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant COMM u1000)\n(define-constant COMM-ADDR 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S)\n\n(define-constant ERR-NO-MORE-NFTS u100)\n(define-constant ERR-NOT-ENOUGH-PASSES u101)\n(define-constant ERR-PUBLIC-SALE-DISABLED u102)\n(define-constant ERR-CONTRACT-INITIALIZED u103)\n(define-constant ERR-NOT-AUTHORIZED u104)\n(define-constant ERR-INVALID-USER u105)\n(define-constant ERR-LISTING u106)\n(define-constant ERR-WRONG-COMMISSION u107)\n(define-constant ERR-NOT-FOUND u108)\n(define-constant ERR-PAUSED u109)\n(define-constant ERR-MINT-LIMIT u110)\n(define-constant ERR-METADATA-FROZEN u111)\n(define-constant ERR-AIRDROP-CALLED u112)\n(define-constant ERR-NO-MORE-MINTS u113)\n(define-constant ERR-INVALID-PERCENTAGE u114)\n\n;; Internal variables\n(define-data-var mint-limit uint u500)\n(define-data-var last-id uint u1)\n(define-data-var total-price uint u6900000)\n(define-data-var artist-address principal 'SPQ5CEHETP8K4Q2FSNNK9ANMPAVBSA9NN86YSN59)\n(define-data-var ipfs-root (string-ascii 80) \"ipfs://ipfs/QmUatY92q2hmUrkSksD3C5ATU1RG79uNmB9vPvPxypJgtA/json/\")\n(define-data-var mint-paused bool false)\n(define-data-var premint-enabled bool false)\n(define-data-var sale-enabled bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var airdrop-called bool false)\n(define-data-var mint-cap uint u0)\n\n(define-map mints-per-user principal uint)\n(define-map mint-passes principal uint)\n\n(define-public (claim) \n  (mint (list true)))\n\n(define-public (claim-two) (mint (list true true)))\n\n(define-public (claim-three) (mint (list true true true)))\n\n(define-public (claim-four) (mint (list true true true true)))\n\n(define-public (claim-five) (mint (list true true true true true)))\n\n(define-public (claim-six) (mint (list true true true true true true)))\n\n(define-public (claim-seven) (mint (list true true true true true true true)))\n\n(define-public (claim-eight) (mint (list true true true true true true true true)))\n\n(define-public (claim-nine) (mint (list true true true true true true true true true)))\n\n(define-public (claim-ten) (mint (list true true true true true true true true true true)))\n\n(define-public (claim-fifteen) (mint (list true true true true true true true true true true true true true true true)))\n\n(define-public (claim-twenty) (mint (list true true true true true true true true true true true true true true true true true true true true)))\n\n(define-public (claim-twentyfive) (mint (list true true true true true true true true true true true true true true true true true true true true true true true true true)))\n\n;; Default Minting\n(define-private (mint (orders (list 25 bool)))\n  (mint-many orders))\n\n(define-private (mint-many (orders (list 25 bool )))  \n  (let \n    (\n      (last-nft-id (var-get last-id))\n      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))\n      (art-addr (var-get artist-address))\n      (id-reached (fold mint-many-iter orders last-nft-id))\n      (price (* (var-get total-price) (- id-reached last-nft-id)))\n      (total-commission (/ (* price COMM) u10000))\n      (current-balance (get-balance tx-sender))\n      (total-artist (- price total-commission))\n      (capped (> (var-get mint-cap) u0))\n      (user-mints (get-mints tx-sender))\n    )\n    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))\n    (asserts! (or (not capped) (is-eq tx-sender DEPLOYER) (is-eq tx-sender art-addr) (>= (var-get mint-cap) (+ (len orders) user-mints))) (err ERR-NO-MORE-MINTS))\n    (map-set mints-per-user tx-sender (+ (len orders) user-mints))\n    (if (or (is-eq tx-sender art-addr) (is-eq tx-sender DEPLOYER) (is-eq (var-get total-price) u0000000))\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n      )\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n        (try! (stx-transfer? total-artist tx-sender (var-get artist-address)))\n        (try! (stx-transfer? total-commission tx-sender COMM-ADDR))\n      )    \n    )\n    (ok id-reached)))\n\n(define-private (mint-many-iter (ignore bool) (next-id uint))\n  (if (<= next-id (var-get mint-limit))\n    (begin\n      (unwrap! (nft-mint? welsh-stone next-id tx-sender) next-id)\n      (+ next-id u1)    \n    )\n    next-id))\n\n(define-public (set-artist-address (address principal))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set artist-address address))))\n\n(define-public (set-price (price uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set total-price price))))\n\n(define-public (toggle-pause)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set mint-paused (not (var-get mint-paused))))))\n\n(define-public (set-mint-limit (limit uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))\n    (ok (var-set mint-limit limit))))\n\n(define-public (burn (token-id uint))\n  (begin \n    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))\n    (nft-burn? welsh-stone token-id tx-sender)))\n\n(define-private (is-owner (token-id uint) (user principal))\n    (is-eq user (unwrap! (nft-get-owner? welsh-stone token-id) false)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))\n    (print { notification: \"token-metadata-update\", payload: { token-class: \"nft\", contract-id: (as-contract tx-sender) }})\n    (var-set ipfs-root new-base-uri)\n    (ok true)))\n\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Non-custodial SIP-009 transfer function\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))\n    (trnsfr id sender recipient)))\n\n;; read-only functions\n(define-read-only (get-owner (token-id uint))\n  (ok (nft-get-owner? welsh-stone token-id)))\n\n(define-read-only (get-last-token-id)\n  (ok (- (var-get last-id) u1)))\n\n(define-read-only (get-token-uri (token-id uint))\n  (ok (some (concat (concat (var-get ipfs-root) \"{id}\") \".json\"))))\n\n(define-read-only (get-paused)\n  (ok (var-get mint-paused)))\n\n(define-read-only (get-price)\n  (ok (var-get total-price)))\n\n(define-read-only (get-artist-address)\n  (ok (var-get artist-address)))\n\n(define-read-only (get-mints (caller principal))\n  (default-to u0 (map-get? mints-per-user caller)))\n\n(define-read-only (get-mint-limit)\n  (ok (var-get mint-limit)))\n\n(define-data-var license-uri (string-ascii 80) \"\")\n(define-data-var license-name (string-ascii 40) \"\")\n\n(define-read-only (get-license-uri)\n  (ok (var-get license-uri)))\n  \n(define-read-only (get-license-name)\n  (ok (var-get license-name)))\n  \n(define-public (set-license-uri (uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-uri uri))))\n    \n(define-public (set-license-name (name (string-ascii 40)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-name name))))\n\n;; Non-custodial marketplace extras\n(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)\n\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal, royalty: uint})\n\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? welsh-stone id sender recipient)\n    success\n      (let\n        ((sender-balance (get-balance sender))\n        (recipient-balance (get-balance recipient)))\n          (map-set token-count\n            sender\n            (- sender-balance u1))\n          (map-set token-count\n            recipient\n            (+ recipient-balance u1))\n          (ok success))\n    error (err error)))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? welsh-stone id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? welsh-stone id) (err ERR-NOT-FOUND)))\n      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))\n      (price (get price listing))\n      (royalty (get royalty listing)))\n    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (pay-royalty price royalty))\n    (try! (contract-call? comm-trait pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))\n    \n(define-data-var royalty-percent uint u500)\n\n(define-read-only (get-royalty-percent)\n  (ok (var-get royalty-percent)))\n\n(define-public (set-royalty-percent (royalty uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))\n    (ok (var-set royalty-percent royalty))))\n\n(define-private (pay-royalty (price uint) (royalty uint))\n  (let (\n    (royalty-amount (/ (* price royalty) u10000))\n  )\n  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))))\n    (try! (stx-transfer? royalty-amount tx-sender (var-get artist-address)))\n    (print false)\n  )\n  (ok true)))\n  \n\n",
    "analysis": {
      "summary": "This contract implements a non-fungible token (NFT) collection with customizable minting, artist commission, and marketplace functionalities on the Stacks blockchain.",
      "explanation": "This Clarity smart contract defines a non-fungible token (NFT) collection named 'welsh-stone' with an extensive feature set including minting, setting artist addresses, toggling minting pause, setting mint limits, burning tokens, transferring tokens in a non-custodial manner, and marketplace functionalities. The contract uses the SIP-009 standard for NFTs and adds features for artist royalties, commission on sales, and a licensing system for the NFT metadata.\n\n- The contract starts by implementing the `nft-trait` from another contract, ensuring it adheres to the standard NFT interface on Stacks (<L1>).\n- It defines the `welsh-stone` NFT using a `uint` as the identifier (<L3>).\n- Constants like `DEPLOYER`, `COMM`, and error codes are defined for internal use (<L5-23>).\n- Several internal variables are declared to manage the mint limit, artist address, mint price, and other configurations (<L25-34>).\n- The contract includes multiple public functions for claiming/minting NFTs in varying quantities, from one to twenty-five tokens at a time (<L36-66>). The minting process checks if minting is paused, if there's a cap on the number of mints, and transfers the correct amount of STX to the artist and a commission address (<L68-103>).\n- Functions to set artist address, mint price, toggle mint pause, set mint limits, and update metadata URI are included, with checks to ensure only authorized users (like the artist or deployer) can call them (<L105-155>).\n- The contract allows for burning tokens, transferring tokens in a non-custodial manner, and setting up a simple marketplace where users can list their NFTs for sale in STX, unlist them, or buy listed NFTs (<L157-276>).\n- It also includes functions to set and get various configurations like the license URI and name, artist address, mint price, and mint limit (<L278-344>).\n- The marketplace functionality includes a commission trait for handling sales commissions, and functions for listing, unlisting, and buying NFTs, with a portion of sales going to the original artist as royalty (<L346-391>).",
      "tags": [
        "NFT",
        "marketplace",
        "royalties",
        "minting",
        "SIP-009"
      ]
    }
  },
  {
    "rank": 147,
    "contract": "SP2VG7S0R4Z8PYNYCAQ04HCBX1MH75VT11VXCWQ6G.built-on-bitcoin-stxcity-dex",
    "calls": 174,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant ERR-SELF-LISTING-FAIL (err u1005))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u100000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP2VG7S0R4Z8PYNYCAQ04HCBX1MH75VT11VXCWQ6G.built-on-bitcoin-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n            (xyk-pool-uri (default-to u\"https://bitflow.finance\" (try! (contract-call? token-trait get-token-uri)) ))\n            (xyk-burn-amount (- (sqrti (* remain-stx remain-tokens)) u1))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; Call XYK Core v-1-2 pool by Bitflow\n            (try! (as-contract (contract-call? 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-2 create-pool 'SP2VG7S0R4Z8PYNYCAQ04HCBX1MH75VT11VXCWQ6G.xyk-pool-stx-bob-v-1-1 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.token-stx-v-1-2 token-trait remain-stx remain-tokens xyk-burn-amount u10 u40 u10 u40 'SP31C60QVZKZ9CMMZX73TQ3F3ZZNS89YX2DCCFT8P xyk-pool-uri true)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  (var-set token-balance token-supply)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism to facilitate token trading, with features to buy, sell tokens, and initialize liquidity pools upon reaching target STX amounts.",
      "explanation": "The contract uses the bonding curve model to determine the price of tokens as they are bought and sold, aiming to provide a decentralized trading platform. Key components include handling of STX and token transfers, fee collection, and automatic liquidity pool creation upon reaching a target STX amount. Notable lines and blocks include:\n\n- <L1-L8> Metadata including title, notice, and developer notes.\n- <L10> SIP-010 trait usage for fungible token standards.\n- <L12-19> Error constants for handling various error states.\n- <L21-27> Constants defining the token supply, DEX address, and bonding curve configuration.\n- <L29-34> Wallet addresses for fees and token burning.\n- <L36-42> Data variables for managing trading state, balances, and percentages.\n- <L44-113> The `buy` function allows users to purchase tokens with STX, adjusting balances, collecting fees, and potentially initiating liquidity pool creation if the target STX amount is reached.\n- <L115-155> The `sell` function enables users to sell tokens back to the DEX in exchange for STX, with fee deductions.\n- <L157-184> `get-buyable-tokens` is a read-only function estimating the number of tokens one can buy with a specified STX amount, based on the current bonding curve.\n- <L186-212> `get-sellable-stx` provides an estimation of STX receivable for a given amount of tokens being sold.\n- <L214-216> `get-tradable` simply returns the current tradable state of the DEX.\n- <L218-226> Initialization sets up the contract's state, including virtual STX amount and token balance, and makes a token transfer to start the DEX.\n\nEach function and variable is designed to interact within the ecosystem of the DEX, ensuring that token trading is facilitated in a decentralized and automated manner, following the principles of a bonding curve.",
      "tags": [
        "DeFi",
        "DEX",
        "bonding-curve",
        "protocol",
        "trading",
        "liquidity-pool"
      ]
    }
  },
  {
    "rank": 148,
    "contract": "SP3M31QFF6S96215K4Y2Z9K5SGHJN384NV6YM6VM8.satoshai",
    "calls": 173,
    "source": "(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n(define-fungible-token satoshai)\n\n(define-constant contract-owner tx-sender)\n\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://domain-interactive-470.mypinata.cloud/ipfs/bafkreieyzcjx4nd7kmw3kda6g5ghjblit456eohyfvns2tzu643ewtlmgu\"))\n\n(define-constant ERR_UNAUTHORIZED (err u100))\n\n(define-public (transfer\n  (amount uint)\n  (sender principal)\n  (recipient principal)\n  (memo (optional (buff 34)))\n)\n  (begin\n    ;; #[filter(amount, recipient)]\n    (asserts! (is-eq tx-sender sender) ERR_UNAUTHORIZED)\n    (try! (ft-transfer? satoshai amount sender recipient))\n    (match memo to-print (print to-print) 0x)\n    (ok true)\n  )\n)\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance satoshai owner))\n)\n\n(define-read-only (get-name)\n  (ok \"SatoshAi\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"sAI\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply satoshai))\n)\n\n(define-read-only (get-token-uri)\n    (ok (var-get token-uri))\n)\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  ;; #[filter(value)]\n  (if (is-eq tx-sender contract-owner)\n    (ok (var-set token-uri (some value)))\n    (err ERR_UNAUTHORIZED)\n  )\n)\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n(begin\n  (try! (ft-mint? satoshai u2100000000000000 contract-owner)) \n)",
    "analysis": {
      "summary": "This contract implements a fungible token named SatoshAi on the Stacks blockchain, adhering to the SIP-010 standard for fungible tokens, with additional features for setting a token URI and bulk transfers.",
      "explanation": "The contract starts by implementing the SIP-010 trait for fungible tokens, ensuring compatibility with the Stacks ecosystem's standards for fungible tokens. It then defines the fungible token `satoshai` and sets the contract owner to the transaction sender at deployment.\n\nThe `token-uri` data variable is initialized with a default value, pointing to metadata stored on IPFS. This URI can be updated by the contract owner. The contract includes standard SIP-010 functions for transferring tokens, checking balances, and querying token details like name, symbol, decimals, and total supply. The `transfer` function includes an additional feature to optionally print a memo during transactions.\n\nUnique to this contract is the `send-many` function, allowing the contract owner to perform bulk transfers, which could be useful for airdrops or rewards distributions. The contract concludes with an initial minting of tokens to the contract owner's address.\n\nKey implementation details include:\n- Use of `define-fungible-token` to create `satoshai` token <L2>.\n- Security checks to ensure only the contract owner can update the token URI and perform bulk transfers <L31-33>, <L69-71>.\n- Implementation of SIP-010 required read-only functions for token details <L36-58>.\n- The `transfer` function's custom logic to handle memos <L19-25>.\n- The `send-many` function utilizes `fold` and `map` to iterate over a list of recipients, performing transfers in a loop <L63-67>.\n- Initial minting of a fixed supply to the contract owner upon contract deployment <L85>.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "metadata",
        "bulk-transfer"
      ]
    }
  },
  {
    "rank": 149,
    "contract": "SP3RQY2KAMTAAZWMAVEMFKC9QBX0MH91010MNBZ9E.ABC",
    "calls": 172,
    "source": ";; test www\n(define-constant owner tx-sender)\n(define-constant ERR-MIN-FAILED u101)\n(define-constant ERR-NOT-OWNER u200)\n\n\n\n(define-public (wl-v-a (in uint))\n  (begin\n    (let\n      (\n        (aa (stx-get-balance tx-sender)) \n\n        (b1 (try! (contract-call?\n        'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens \n        u27\n        'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token \n        'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token \n        'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to \n        in u1)))\n\n        (b2 (try! (contract-call?\n        'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n        'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n        'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n        (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))\n        u1 )))\n\n        (ab (stx-get-balance tx-sender)) \n      )\n      (asserts! (>= ab aa) (err (- aa ab)))\n      (asserts! (is-eq tx-sender owner) (err u0))\n      (ok (- ab aa))\n    )\n  )\n)\n\n(define-public (wl-a-v (in uint))\n  (begin\n    (let\n      (\n        (aa (stx-get-balance tx-sender)) \n\n        (b1 (try! (contract-call?\n        'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y \n        'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token \n        'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token \n        in u1)))\n\n        (b2 (try! (contract-call?\n        'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens \n        u27\n        'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token \n        'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx \n        'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to \n        (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) \n        u1 )))\n\n        (ab (stx-get-balance tx-sender)) \n      )\n      (asserts! (>= ab aa) (err (- aa ab)))\n      (asserts! (is-eq tx-sender owner) (err u0))\n      (ok (- ab aa))\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(define-public (USDA-Arkadiko-Stackswap (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender owner) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\ta0 u0)))\n\t\t(a1 (unwrap-panic (element-at b0 u1)))\n\t(b1 (try! (contract-call?\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l\n\t\ta1 u0)))\n\t(a2 (unwrap-panic (element-at b1 u0)))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n\t))))\n\n\n(define-public (USDA-Stackswap-Arkadiko (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender owner) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n    'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l\n\t\ta0 u0)))\n\t\t(a1 (unwrap-panic (element-at b0 u1)))\n\t(b1 (try! (contract-call?\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\ta1 u0)))\n\t(a2 (unwrap-panic (element-at b1 u0)))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n\t))))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(define-public (USDC-V4-Arkadiko (dx uint) (min uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-wstx-usda-arkadiko dx)))\n      (b2 (unwrap-panic (swap-usda-usdc-bitflow-v4 b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 min) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n\n(define-public (USDC-V2-Arkadiko (dx uint) (min uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-wstx-usda-arkadiko dx)))\n      (b2 (unwrap-panic (swap-usda-usdc-bitflow-v2 b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 min) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n(define-public (STX-V4-Arkadiko (dx uint) (min uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-usdc-usda-bitflow-v4 dx)))\n      (b2 (unwrap-panic (swap-usda-wstx-arkadiko b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 min) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n(define-public (STX-V2-Arkadiko (dx uint) (min uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-usdc-usda-bitflow-v2 dx)))\n      (b2 (unwrap-panic (swap-usda-wstx-arkadiko b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 min) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(define-public (USDC-V4-Stackswap (dx uint) (min uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-wstx-usda-stackswap dx)))\n      (b2 (unwrap-panic (swap-usda-usdc-bitflow-v4 b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 min) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n\n(define-public (USDC-V2-Stackswap (dx uint) (min uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-wstx-usda-stackswap dx)))\n      (b2 (unwrap-panic (swap-usda-usdc-bitflow-v2 b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 min) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n\n\n(define-public (STX-V4-Stackswap (dx uint) (min uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-usdc-usda-bitflow-v4 dx)))\n      (b2 (unwrap-panic (swap-usda-wstx-stackswap b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 min) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n(define-public (STX-V2-Stackswap (dx uint) (min uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-usdc-usda-bitflow-v2 dx)))\n      (b2 (unwrap-panic (swap-usda-wstx-stackswap b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 min) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(define-public (swap-v2-v4 (dx uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-usda-usdc-bitflow-v2 dx)))\n      (b2 (unwrap-panic (swap-usdc-usda-bitflow-v4 b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 dx) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n(define-public (swap-v4-v2 (dx uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-usda-usdc-bitflow-v4 dx)))\n      (b2 (unwrap-panic (swap-usdc-usda-bitflow-v2 b1)))   \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b2 dx) (err ERR-MIN-FAILED))\n    )\n    (ok b2)\n  )\n)\n\n\n\n\n\n\n\n\n(define-public (swap-x-for-y (dx uint) (min uint)) \n  (let\n    (\n      (b1 (unwrap-panic (swap-wstx-usda-arkadiko dx)))\n      (b2 (unwrap-panic (swap-usda-usdc-bitflow-v2 b1)))\n      (b3 (unwrap-panic (swap-usdc-usda-bitflow-v4 b2)))\n      (b4 (unwrap-panic (swap-usda-wstx-arkadiko b3)))     \n    )\n    (begin \n      (asserts! (is-eq tx-sender owner) (err ERR-NOT-OWNER))\n      (asserts! (> b4 min) (err ERR-MIN-FAILED))\n    )\n    (ok b4)\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;;stackswap\n(define-public (swap-wstx-usda-stackswap (dx uint))\n  (let ((r (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l dx u1))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-wstx-stackswap (dx uint))\n  (let ((r (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l dx u1))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n\n\n\n;; Arkadiko\n(define-public (swap-wstx-usda-arkadiko (dx uint))\n  (let ((r (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-wstx-arkadiko (dx uint))\n  (let ((r (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-diko-usda-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-diko-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-wstx-diko-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-diko-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-wstx-xbtc-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-xbtc-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-xbtc-usda-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-xbtc-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-wstx-welsh-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-welsh-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n\n\n;; Bitflow\n(define-public (swap-usda-usdc-bitflow-v2 (dx uint))\n  (let ((r (try! (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2 dx u0))))\n  (ok r))\n)\n\n(define-public (swap-usdc-usda-bitflow-v2 (dx uint))\n  (let ((r (try! (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-y-for-x 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2 dx u0))))\n  (ok r))\n)\n\n(define-public (swap-usda-usdc-bitflow-v4 (dx uint))\n  (let ((r (try! (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-4 dx u0))))\n  (ok r))\n)\n\n(define-public (swap-usdc-usda-bitflow-v4 (dx uint))\n  (let ((r (try! (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4 swap-y-for-x 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-4 dx u0))))\n  (ok r))\n)\n\n\n\n\n\n",
    "analysis": {
      "summary": "This contract facilitates various token swaps on the Stacks blockchain, integrating with different decentralized exchanges like Arkadiko, Stackswap, and Bitflow.",
      "explanation": "This Clarity smart contract is designed to interact with multiple decentralized finance (DeFi) protocols on the Stacks blockchain to perform token swaps. It includes functions for swapping between different tokens, such as STX, USDA, USDC, DIKO, xBTC, and Welsh Corgi Coin, utilizing services provided by Arkadiko, Stackswap, and Bitflow. The contract ensures that only the owner can initiate swaps and checks for successful completion of swaps by comparing balances before and after transactions. It also includes error handling for failed swaps and unauthorized access attempts.\n\n- The `define-constant` lines <L1-3> declare constants for the contract owner and error codes.\n- Functions `wl-v-a` and `wl-a-v` <L5-45> appear to be designed for specific swap operations but lack clear documentation on their purpose.\n- The `USDA-Arkadiko-Stackswap` and similar functions <L47-116> facilitate specific swap sequences between tokens using Arkadiko and Stackswap.\n- Functions like `USDC-V4-Arkadiko` and `STX-V2-Stackswap` <L118-257> are designed for swapping tokens through specific versioned paths on Arkadiko and Stackswap, with checks for minimum received amounts.\n- The `swap-x-for-y` function <L259-276> demonstrates a complex swap involving multiple tokens and platforms.\n- The latter part of the contract <L278-548> defines helper functions for interacting with the Arkadiko, Stackswap, and Bitflow protocols, encapsulating the contract calls and error handling within these functions.",
      "tags": [
        "DeFi",
        "token-swap",
        "Arkadiko",
        "Stackswap",
        "Bitflow"
      ]
    }
  },
  {
    "rank": 150,
    "contract": "SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity",
    "calls": 172,
    "source": "\n;; @title Bonding Curve Token by STX.CITY\n;; @version 2.0\n;; @hash IrAMj2uQgxn29nIIxeou1Q:xAHZm6mtYK65rsKYBKyWgA:PIoO2BnQGe8n_CJNLKM3Urx_LuTfEZbj0QE-OlaiWcRuwnex59R8og-iq_KHnT6n29_CDH8iq8qtx5bjg6yLtA\n\n;; Errors \n(define-constant ERR-UNAUTHORIZED u401)\n(define-constant ERR-NOT-OWNER u402)\n(define-constant ERR-INVALID-PARAMETERS u403)\n(define-constant ERR-NOT-ENOUGH-FUND u101)\n\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Constants\n(define-constant MAXSUPPLY u69000000000000000)\n\n;; Variables\n(define-fungible-token MEME MAXSUPPLY)\n(define-data-var contract-owner principal tx-sender) \n\n\n\n;; SIP-10 Functions\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender) (err ERR-UNAUTHORIZED))\n        (ft-transfer? MEME amount from to)\n    )\n)\n\n\n;; DEFINE METADATA\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://pdakhjpwkuwtadzmpnjm.supabase.co/storage/v1/object/public/uri/lOpesIoI-meme-0-decimals.json\"))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (begin\n        (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))\n        (var-set token-uri (some value))\n        (ok (print {\n              notification: \"token-metadata-update\",\n              payload: {\n                contract-id: (as-contract tx-sender),\n                token-class: \"ft\"\n              }\n            })\n        )\n    )\n)\n\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance MEME owner))\n)\n(define-read-only (get-name)\n  (ok \"MEME\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"MEME\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply MEME))\n)\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri))\n)\n\n;; transfer ownership\n(define-public (transfer-ownership (new-owner principal))\n  (begin\n    ;; Checks if the sender is the current owner\n    (if (is-eq tx-sender (var-get contract-owner))\n      (begin\n        ;; Sets the new owner\n        (var-set contract-owner new-owner)\n        ;; Returns success message\n        (ok \"Ownership transferred successfully\"))\n      ;; Error if the sender is not the owner\n      (err ERR-NOT-OWNER)))\n)\n\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n(define-private (send-stx (recipient principal) (amount uint))\n  (begin\n    (try! (stx-transfer? amount tx-sender recipient))\n    (ok true) \n  )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n    (try! (send-stx 'SP11WRT9TPPKP5492X3VE81CM1T74MD13SPFT527D u1000000))\n    (try! (ft-mint? MEME u63206106870229000 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity-dex))\n    (try! (ft-mint? MEME u5793893129771000 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA))\n    \n    (try! (send-stx 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity-dex u366666667))\n    (try! (send-stx 'SP1WTA0YBPC5R6GDMPPJCEDEA6Z2ZEPNMQ4C39W6M u183333333))\n \n)\n",
    "analysis": {
      "summary": "This contract implements a fungible token with a fixed supply, utilizing a bonding curve for distribution, and includes functionality for token metadata, ownership transfer, and batch transfers.",
      "explanation": "The contract defines a fungible token named MEME with a maximum supply of 69 trillion units. It adheres to the SIP-010 standard for fungible tokens on the Stacks blockchain, enabling basic token operations such as transfer and balance queries. The contract includes additional features like setting token metadata, transferring contract ownership, and performing batch token transfers. The minting process is initiated within the contract, distributing tokens to specific addresses and sending STX to others, indicating a pre-determined allocation or sale mechanism. Key implementation details include:\n\n- SIP-010 Implementation: Implements the SIP-010 trait for fungible tokens, ensuring compatibility with the standard <L8>.\n\n- Token Metadata: Allows the contract owner to update the token's metadata URI, which can be used to store and retrieve additional token information <L23-32>.\n\n- Ownership Transfer: Provides functionality for the current owner to transfer ownership of the contract to another principal <L70-80>.\n\n- Batch Transfers: Includes a 'send-many' function to perform multiple token transfers in a single transaction, optimizing for gas efficiency and usability in scenarios like airdrops or rewards distribution <L82-104>.\n\n- Minting and STX Sending: The contract mints the majority of the MEME token supply and distributes it to predefined addresses. It also sends STX to certain addresses, possibly for initial liquidity or as part of a fundraising mechanism <L106-112>.\n\nErrors and constants are defined at the beginning of the contract for clarity and ease of maintenance. The use of 'define-constant' and 'define-data-var' for error codes and the contract owner, respectively, allows for cleaner code and easier updates <L5-7, 13>.\n\nOverall, the contract is structured to facilitate the initial distribution and ongoing management of the MEME token, with considerations for expandability and compliance with established standards.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "token-metadata",
        "ownership-transfer",
        "batch-transfer",
        "minting"
      ]
    }
  },
  {
    "rank": 151,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-farming-distributor-1-v1_1_0-0001",
    "calls": 171,
    "source": ";;; Distributor: receive and distribute rewards.\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(impl-trait .farming-receive-trait.farming-receive-trait)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; errors\n(define-constant err-check-owner               (err u801))\n(define-constant err-receive-preconditions     (err u802))\n(define-constant err-distribute-preconditions  (err u803))\n(define-constant err-distribute-postconditions (err u804))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; constants\n(define-data-var REWARD-TOKEN principal tx-sender)\n(define-data-var REWARD-TOKEN-SET bool false)\n(define-public (set-reward-token (new-reward-token principal))\n  (begin\n   (asserts!\n    (and\n     (is-eq tx-sender 'SP1F22QY776V3B8YC5HB4P8D0G5HAQ5HF5AC8NHTG) ;;template\n     (not (var-get REWARD-TOKEN-SET)))\n     err-check-owner)\n   (var-set REWARD-TOKEN     new-reward-token)\n   (var-set REWARD-TOKEN-SET true)\n   (ok true) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; auth\n(define-data-var owner principal tx-sender)\n(define-read-only (get-owner) (var-get owner))\n(define-private (check-owner)\n  (ok (asserts! (is-eq tx-sender (get-owner)) err-check-owner)))\n(define-public (set-owner (new-owner principal))\n  (begin\n   (try! (check-owner))\n   (ok (var-set owner new-owner)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; accounting\n(define-map revenue uint uint) ;;epoch -> cumulative token rewards\n\n(define-read-only (get-revenue-at (epoch uint))\n  (default-to u0 (map-get? revenue epoch) ))\n\n;; Called by operator.\n;; MUST ALWAYS BE ACCOMPANIED BY A CORRECT TRANSFER!\n;; Could also store balance and compare to previous but that adds code.\n(define-data-var balance uint u0)\n\n(define-read-only (get-balance)\n  (var-get balance))\n\n(define-private (sync (new-balance uint))\n  (var-set balance new-balance))\n\n(define-public\n  (receive\n   (token <ft-trait>)\n   (amt   uint)\n   (from  principal))\n\n  (let ((epoch (contract-call? .curve-farming-core-v1_1_0-0001 current-epoch))\n        (r     (get-revenue-at epoch))\n        (bal   (unwrap-panic\n                (contract-call?\n                 token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n     (and\n      (is-eq (contract-of token) (var-get REWARD-TOKEN))\n    ;;(> amt u0)\n      (is-eq from (get-owner))\n      (>= bal (+ (get-balance) amt))\n      )\n      err-receive-preconditions)\n\n    (try! (check-owner))\n    (sync bal)\n    ;; (var-set balance (+ (var-get balance) amt))\n    (ok (map-set revenue epoch (+ r amt)) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; claims\n(define-map claims\n  {user: principal, epoch: uint}\n  uint) ;;block number claimed at\n\n(define-private\n  (do-claim\n   (user principal)\n   (epoch uint))\n  (map-set claims\n           {user: user, epoch: epoch}\n           block-height))\n\n(define-read-only\n  (has-claimed-epoch\n   (user principal)\n   (epoch uint))\n  (is-some (map-get? claims {user: user, epoch: epoch})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; low level API\n(define-private\n  (do-distribute\n   (user  principal)\n   (token <ft-trait>)\n   (amt   uint))\n\n  (let ((protocol (as-contract tx-sender)))\n    (ok (if (> amt u0)\n        (try!\n         (as-contract\n          (contract-call?\n           token transfer amt protocol user none)))\n        true)) ))\n\n(define-read-only\n  (calc-distribute\n   (share {staked: uint, total: uint})\n   (amt   uint))\n\n  (if (> (get total share) u0)\n      (/ (* amt (get staked share)) (get total share))\n      u0) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epoch\n(define-private\n  (distribute-epoch\n   (user   principal)\n   (token  <ft-trait>)\n   (epoch  uint))\n\n  (let ((reward (unwrap-panic (get-reward user epoch))))\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (not (has-claimed-epoch user epoch))\n    ;;(< epoch (current-epoch)) checked by get-share-at\n      (is-eq (contract-of token) (var-get REWARD-TOKEN))\n      )\n     err-distribute-preconditions)\n\n    ;; Update global state\n    (try! (do-distribute user token (get amt reward)))\n\n    ;; Update local state\n    (do-claim user epoch)\n\n    ;; Postconditions\n\n    (ok true)) )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; distribute-epochs\n(define-private\n  (distribute-epochs-step\n   (epoch uint)\n   (args  {user: principal, token: <ft-trait>}))\n\n  (let ((res_\n         (unwrap-panic\n          (distribute-epoch\n           (get user args)\n           (get token args)\n           epoch)) ))\n    args))\n\n(define-public\n  (distribute-epochs\n   (user   principal)\n   (token  <ft-trait>)\n   (epochs (list 10 uint))) ;;XXX: MAX-EPOCHS\n\n  (let ((args {user : user,\n               token: token})\n        (res_ (fold distribute-epochs-step epochs args))\n        (bal (unwrap-panic (contract-call? token get-balance (as-contract tx-sender)))))\n\n    (asserts!\n      (is-eq (contract-of token) (var-get REWARD-TOKEN))\n      err-distribute-preconditions)\n\n    ;; Update local state\n    (sync bal)\n\n    ;; Return\n    (let ((event\n           {op    : \"distribute-epochs\",\n            user  : user,\n            epochs: epochs\n            }))\n      (print event)\n      (ok event) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; compute reward epoch list\n\n;; Returns epochs starting at `start-epoch' for which `user' has\n;; non-zero rewards.\n;; Pagination via GENESIS-EPOCH and `end-epoch'.\n(define-read-only\n  (get-reward\n   (user principal)\n   (epoch uint))\n\n  (let ((share   (try! (contract-call? .curve-farming-core-v1_1_0-0001 get-share-at user epoch)))\n        (rev     (get-revenue-at epoch))\n        (calc    (calc-distribute share rev))\n        (claimed (default-to u0 (map-get? claims {user: user, epoch: epoch})))\n        (amt     (if (is-eq claimed u0) calc u0)))\n    (ok {share  : share,\n         rev    : rev,\n         calc   : calc,\n         claimed: claimed,\n         amt    : amt})))\n\n(define-read-only\n  (get-rewards-step\n   (epoch uint)\n   (state {user: principal,\n           acc : (list 10 ;;XXX: MAX-EPOCHS\n                       {epoch : uint,\n                        reward: uint}) }) )\n\n  (let ((reward (unwrap-panic\n                 (get-reward (get user state)\n                             epoch)))\n        (amt    (get amt reward)))\n\n    {user: (get user state),\n     acc : (if (> amt u0)\n               (unwrap-panic\n                (as-max-len?\n                 (append (get acc state) {epoch: epoch, reward: amt}) ;;FIXME: reward?\n                 u10))\n               (get acc state))\n     }))\n\n(define-read-only\n  (get-rewards\n   (user        principal)\n   (start-epoch uint))\n\n  (let ((end-epoch     (+ start-epoch MAX-EPOCHS)) ;;next\n        (epochs_       (mkepochs start-epoch))\n        (reward-epochs (fold get-rewards-step epochs_ {user: user, acc: (list)})))\n\n    {reward-epochs: (get acc reward-epochs),\n     end-epoch    : end-epoch} ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; epochs\n(define-constant OFFSETS (list u0 u1 u2 u3 u4 u5 u6 u7 u8 u9))\n(define-constant MAX-EPOCHS (len OFFSETS)) ;;10\n\n(define-private\n  (epochs-step\n   (i_    uint)\n   (state {epoch: uint, current: uint, acc: (list 10 uint)})) ;; XXX: MAX-EPOCHS\n  {epoch: (+ (get epoch state) u1),\n   current: (get current state),\n   acc  : (if (>= (get epoch state) (get current state))\n              (get acc state)\n              (unwrap-panic\n               (as-max-len?\n                (append (get acc state) (get epoch state))\n                u10)))\n   })\n\n(define-read-only (mkepochs (start-epoch uint))\n  (let ((current (contract-call? .curve-farming-core-v1_1_0-0001 current-epoch))\n        (state0  {epoch: start-epoch, current: current, acc: (list)})\n        (state   (fold epochs-step OFFSETS state0)))\n    (get acc state)))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract is designed to receive, track, and distribute reward tokens to users based on their participation in epochs.",
      "explanation": "The contract implements functionality to manage reward tokens, track revenue per epoch, and handle claims by users for their rewards. It uses the SIP-010 trait for fungible tokens and a custom trait for receiving rewards. Key functionalities include setting and getting the reward token, syncing and getting the current balance of rewards, receiving rewards, claiming rewards, and distributing rewards for specific epochs.\n\n- The `set-reward-token` function <L17-25> allows setting the reward token once by a specific principal.\n- Ownership management is handled through `set-owner` and `check-owner` functions <L29-43>, ensuring that only the owner can perform certain actions.\n- The `receive` function <L71-97> is called by an operator to add rewards for a specific epoch, which updates the `revenue` map and the `balance` variable.\n- The `distribute-epochs` function <L171-200> allows distributing rewards for a list of epochs to a user, updating their claim status.\n- Reward calculation is performed in `calc-distribute` <L146-152>, which calculates the amount of reward based on the user's share and the total amount.\n- The contract also includes functions for reading the reward state, such as `get-reward` and `get-rewards`, which provide information about rewards for specific epochs and users.\n\nThe contract uses maps for tracking revenue, claims, and epochs, and it employs various checks and balances to ensure that rewards are distributed correctly and securely.",
      "tags": [
        "DeFi",
        "rewards-distribution",
        "fungible-token",
        "epoch-tracking"
      ]
    }
  },
  {
    "rank": 152,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2",
    "calls": 171,
    "source": ";; Bitflow Stableswap Core Contract - v1.2\n;; This contract handles the core logic of the Stableswap protocol.\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;; Cons, Vars, & Maps ;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(use-trait sip-010-trait .sip-010-trait-ft-standard.sip-010-trait)\n(use-trait lp-trait .lp-trait.lp-trait)\n\n;;;;;;;;;;;;;;;\n;; Constants ;;\n;;;;;;;;;;;;;;;\n\n;; This contract address\n(define-constant this-contract (as-contract tx-sender))\n\n;; Deployment height\n(define-constant deployment-height burn-block-height)\n\n;; Cycle length in blocks (1 day = 144 blocks)\n(define-constant cycle-length u144)\n\n;; Index loop for using Newton-Raphson method to converge square root that goes up to u384\n(define-constant index-list (list u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20 u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31 u32 u33 u34 u35 u36 u37 u38 u39 u40 u41 u42 u43 u44 u45 u46 u47 u48 u49 u50 u51 u52 u53 u54 u55 u56 u57 u58 u59 u60 u61 u62 u63 u64 u65 u66 u67 u68 u69 u70 u71 u72 u73 u74 u75 u76 u77 u78 u79 u80 u81 u82 u83 u84 u85 u86 u87 u88 u89 u90 u91 u92 u93 u94 u95 u96 u97 u98 u99 u100 u101 u102 u103 u104 u105 u106 u107 u108 u109 u110 u111 u112 u113 u114 u115 u116 u117 u118 u119 u120 u121 u122 u123 u124 u125 u126 u127 u128 u129 u130 u131 u132 u133 u134 u135 u136 u137 u138 u139 u140 u141 u142 u143 u144 u145 u146 u147 u148 u149 u150 u151 u152 u153 u154 u155 u156 u157 u158 u159 u160 u161 u162 u163 u164 u165 u166 u167 u168 u169 u170 u171 u172 u173 u174 u175 u176 u177 u178 u179 u180 u181 u182 u183 u184 u185 u186 u187 u188 u189 u190 u191 u192 u193 u194 u195 u196 u197 u198 u199 u200 u201 u202 u203 u204 u205 u206 u207 u208 u209 u210 u211 u212 u213 u214 u215 u216 u217 u218 u219 u220 u221 u222 u223 u224 u225 u226 u227 u228 u229 u230 u231 u232 u233 u234 u235 u236 u237 u238 u239 u240 u241 u242 u243 u244 u245 u246 u247 u248 u249 u250 u251 u252 u253 u254 u255 u256 u257 u258 u259 u260 u261 u262 u263 u264 u265 u266 u267 u268 u269 u270 u271 u272 u273 u274 u275 u276 u277 u278 u279 u280 u281 u282 u283 u284 u285 u286 u287 u288 u289 u290 u291 u292 u293 u294 u295 u296 u297 u298 u299 u300 u301 u302 u303 u304 u305 u306 u307 u308 u309 u310 u311 u312 u313 u314 u315 u316 u317 u318 u319 u320 u321 u322 u323 u324 u325 u326 u327 u328 u329 u330 u331 u332 u333 u334 u335 u336 u337 u338 u339 u340 u341 u342 u343 u344 u345 u346 u347 u348 u349 u350 u351 u352 u353 u354 u355 u356 u357 u358 u359 u360 u361 u362 u363 u364 u365 u366 u367 u368 u369 u370 u371 u372 u373 u374 u375 u376 u377 u378 u379 u380 u381 u382 u383 u384))\n\n;; Number of tokens per pair\n(define-constant number-of-tokens u2)\n\n;; Contract deployer\n(define-constant contract-deployer tx-sender)\n\n;; Protocol Address\n(define-constant protocol-address 'SP31C60QVZKZ9CMMZX73TQ3F3ZZNS89YX2DCCFT8P)\n\n;; Contract for Stableswap Staking and Rewards\n(define-data-var staking-and-rewards-contract principal tx-sender)\n\n;; Define a variable to track whether the staking-and-rewards contract has been set\n(define-data-var staking-and-rewards-contract-is-set bool false)\n\n;;;;;;;;;;;;\n;; Errors ;;\n;;;;;;;;;;;;\n\n\n;;;;;;;;;;;;;;;\n;; Variables ;;\n;;;;;;;;;;;;;;;\n\n;; Admin Governance List\n(define-data-var admins (list 5 principal) (list tx-sender))\n\n;; Swap Fees (5 total bps initialized, 3 bps to LPs, 2 bps to protocol)\n(define-data-var swap-fees {lps: uint, protocol: uint} {lps: u3, protocol: u2})\n\n;; Liquidity Fees (3 bps initialized, all to protocol)\n(define-data-var liquidity-fees uint u3)\n\n;; Helper var to remove admin\n(define-data-var helper-principal principal tx-sender)\n\n;; Convergence Threshold\n(define-data-var convergence-threshold uint u2)\n\n\n;;;;;;;;;;\n;; Maps ;;\n;;;;;;;;;;\n\n(define-map PairsDataMap {x-token: principal, y-token: principal, lp-token: principal} {\n    approval: bool,\n    total-shares: uint,\n    x-decimals: uint,\n    y-decimals: uint,\n    balance-x: uint,\n    balance-y: uint,\n    d: uint,\n    amplification-coefficient: uint,\n})\n\n(define-map CycleDataMap {x-token: principal, y-token: principal, lp-token: principal, cycle-num: uint} {\n    cycle-fee-balance-x: uint,\n    cycle-fee-balance-y: uint,\n})\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Read-Only Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Get pair data\n(define-read-only (get-pair-data (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <sip-010-trait>)) \n    (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)})\n)\n\n;; Get cycle data\n(define-read-only (get-cycle-data (x-token principal) (y-token principal) (lp-token principal) (cycle-num uint)) \n    (map-get? CycleDataMap {x-token: x-token, y-token: y-token, lp-token: lp-token, cycle-num: cycle-num})\n)\n\n;; Get current cycle\n(define-read-only (get-current-cycle) \n    (/ (- burn-block-height deployment-height) cycle-length)\n)\n\n;; Get cycle from height\n(define-read-only (get-cycle-from-height (height uint)) \n    (/ (- height deployment-height) cycle-length)\n)\n\n;; Get starting height from cycle\n(define-read-only (get-starting-height-from-cycle (cycle uint)) \n    (+ deployment-height (* cycle cycle-length))\n)\n\n;; Get deployment height\n(define-read-only (get-deployment-height) \n    deployment-height\n)\n\n;; Get up to last 120 cycle rewards -> nice to have\n;; (define-read-only (get-cycle-rewards) body)\n\n;; Get DX\n(define-read-only (get-dx (y-token <sip-010-trait>) (x-token <sip-010-trait>) (lp-token <lp-trait>) (y-amount uint))\n    (let \n        (\n            (pair-data (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get swap-fees)))\n            (swap-fee-protocol (get protocol (var-get swap-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-protocol))\n\n            ;; Scale up balances to perform AMM calculations with get-x\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts u0 y-amount x-decimals y-decimals))\n            (y-amount-scaled (get scaled-y scaled-up-swap-amount))\n            (y-amount-fees-lps-scaled (/ (* y-amount-scaled swap-fee-lps) u10000))\n            (y-amount-fees-protocol-scaled (/ (* y-amount-scaled swap-fee-protocol) u10000))\n            (y-amount-total-fees-scaled (/ (* y-amount total-swap-fee) u10000))\n            (updated-y-amount-scaled (- y-amount-scaled y-amount-total-fees-scaled))\n            (updated-y-balance-scaled (+ current-balance-y-scaled updated-y-amount-scaled))\n            (new-x-scaled (get-x updated-y-balance-scaled current-balance-x-scaled updated-y-amount-scaled (* (get amplification-coefficient pair-data) number-of-tokens)))\n\n            ;; Scale down to precise amounts for x and dx, as well as y-amount-fee-lps, and y-amount-fee-protocol\n            (new-x (get scaled-x (get-scaled-down-token-amounts new-x-scaled u0 x-decimals y-decimals)))\n            (dx (- current-balance-x new-x))\n            (y-amount-fee-lps (get scaled-y (get-scaled-down-token-amounts u0 y-amount-fees-lps-scaled x-decimals y-decimals)))\n            (y-amount-fee-protocol (get scaled-y (get-scaled-down-token-amounts u0 y-amount-fees-protocol-scaled x-decimals y-decimals)))\n        )\n        (ok dx)\n    )\n)\n\n;; Get X\n;; Maybe move into get-dx?\n(define-read-only (get-x (y-bal uint) (x-bal uint) (y-amount uint) (ann uint))\n    (let \n        (\n            (y-bal-new (+ y-bal y-amount))\n            (current-D (get-D x-bal y-bal ann))\n            (c0 current-D)\n            (c1 (/ (* c0 current-D) (* number-of-tokens y-bal-new)))\n            (c2 (/ (* c1 current-D) (* ann number-of-tokens)))\n            (b (+ y-bal-new (/ current-D ann)))\n        )\n        (get converged (fold x-for-loop index-list {x: current-D, c: c2, b: b, D: current-D, converged: u0}))\n    )\n)\n\n;; Get X Helper\n(define-private (x-for-loop (n uint) (x-info {x: uint, c: uint, b: uint, D: uint, converged: uint})) \n    (let\n        (\n            (current-x (get x x-info))\n            (current-c (get c x-info))\n            (current-b (get b x-info))\n            (current-D (get D x-info))\n            (current-converged (get converged x-info))\n            (x-numerator (+ (* current-x current-x) current-c))\n            (x-denominator (- (+ (* u2 current-x) current-b) current-D))\n            (new-x (/ x-numerator x-denominator))\n            (threshold (var-get convergence-threshold))\n\n        )\n\n        (if (is-eq current-converged u0)\n            (if (> new-x  current-x)\n                (if (<= (- new-x current-x) threshold)\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: new-x}\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n                (if (<= (- current-x new-x) threshold)\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: new-x}\n                    {x: new-x, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n            )\n            x-info\n        )\n\n\n    )\n)\n\n;; Get DY\n(define-read-only (get-dy (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (x-amount uint))\n    (let \n        (\n            \n            (pair-data (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get swap-fees)))\n            (swap-fee-protocol (get protocol (var-get swap-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-protocol))\n\n\n            ;; Scale up balances to perform AMM calculations with get-y\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts x-amount u0 x-decimals y-decimals))\n            (x-amount-scaled (get scaled-x scaled-up-swap-amount))\n            (x-amount-fees-lps-scaled (/ (* x-amount-scaled swap-fee-lps) u10000))\n            (x-amount-fees-protocol-scaled (/ (* x-amount-scaled swap-fee-protocol) u10000))\n            (x-amount-total-fees-scaled (/ (* x-amount total-swap-fee) u10000))\n            (updated-x-amount-scaled (- x-amount-scaled x-amount-total-fees-scaled))\n            (updated-x-balance-scaled (+ current-balance-x-scaled updated-x-amount-scaled))\n            (new-y-scaled (get-y updated-x-balance-scaled current-balance-y-scaled updated-x-amount-scaled (* (get amplification-coefficient pair-data) number-of-tokens)))\n            \n            ;; Scale down to precise amounts for y and dy, as well as x-amount-fee-lps, and x-amount-fee-protocol\n            (new-y (get scaled-y (get-scaled-down-token-amounts u0 new-y-scaled x-decimals y-decimals)))\n            (dy (- current-balance-y new-y))\n            (x-amount-fee-lps (get scaled-x (get-scaled-down-token-amounts x-amount-fees-lps-scaled u0 x-decimals y-decimals)))\n            (x-amount-fee-protocol (get scaled-x (get-scaled-down-token-amounts x-amount-fees-protocol-scaled u0 x-decimals y-decimals)))\n        )\n        (ok dy)\n    )\n)\n\n;; Get Y\n;; Maybe move into get-dy?\n(define-read-only (get-y (x-bal uint) (y-bal uint) (x-amount uint) (ann uint))\n    (let \n        (\n            (x-bal-new (+ x-bal x-amount))\n            (current-D (get-D x-bal y-bal ann))\n            (c0 current-D)\n            (c1 (/ (* c0 current-D) (* number-of-tokens x-bal-new)))\n            (c2 (/ (* c1 current-D) (* ann number-of-tokens)))\n            (b (+ x-bal-new (/ current-D ann)))\n        )\n        (get converged (fold y-for-loop index-list {y: current-D, c: c2, b: b, D: current-D, converged: u0}))\n    )\n)\n\n;; Get Y Helper\n(define-private (y-for-loop (n uint) (y-info {y: uint, c: uint, b: uint, D: uint, converged: uint})) \n    (let\n        (\n            (current-y (get y y-info))\n            (current-c (get c y-info))\n            (current-b (get b y-info))\n            (current-D (get D y-info))\n            (current-converged (get converged y-info))\n            (y-numerator (+ (* current-y current-y) current-c))\n            (y-denominator (- (+ (* u2 current-y) current-b) current-D))\n            (new-y (/ y-numerator y-denominator))\n            (threshold (var-get convergence-threshold))\n\n        )\n\n        (if (is-eq current-converged u0)\n            (if (> new-y  current-y)\n                (if (<= (- new-y current-y) threshold)\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: new-y}\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n                (if (<= (- current-y new-y) threshold)\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: new-y}\n                    {y: new-y, c: current-c, b: current-b, D: current-D, converged: u0}\n                )\n            )\n            y-info\n        )\n\n    )\n)\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;\n;;; Swap Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;\n\n;; Swap X -> Y\n;; @desc: Swaps X token for Y token\n;; @params: x-token: principal, y-token: principal, lp-token: principal, x-amount: uint, min-y-amount: uint\n(define-public (swap-x-for-y (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (x-amount uint) (min-y-amount uint)) \n    (let \n        (\n            (swapper tx-sender)\n            (pair-data (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval pair-data))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get swap-fees)))\n            (swap-fee-protocol (get protocol (var-get swap-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-protocol))\n\n            ;; Scale up balances and the swap amount to perform AMM calculations with get-y\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts x-amount u0 x-decimals y-decimals))\n            (x-amount-scaled (get scaled-x scaled-up-swap-amount))\n            (x-amount-fees-lps-scaled (/ (* x-amount-scaled swap-fee-lps) u10000))\n            (x-amount-fees-protocol-scaled (/ (* x-amount-scaled swap-fee-protocol) u10000))\n            (updated-x-amount-scaled (- x-amount-scaled (+ x-amount-fees-lps-scaled x-amount-fees-protocol-scaled)))\n            (updated-x-balance-scaled (+ current-balance-x-scaled updated-x-amount-scaled))\n            (new-y-scaled (get-y updated-x-balance-scaled current-balance-y-scaled updated-x-amount-scaled (* (get amplification-coefficient pair-data) number-of-tokens)))\n            \n            ;; Scale down to precise amounts for y and dy, as well as x-amount-fee-lps, and x-amount-fee-protocol\n            (new-y (get scaled-y (get-scaled-down-token-amounts u0 new-y-scaled x-decimals y-decimals)))\n            (dy (- current-balance-y new-y))\n            (x-amount-fee-lps (get scaled-x (get-scaled-down-token-amounts x-amount-fees-lps-scaled u0 x-decimals y-decimals)))\n            (x-amount-fee-protocol (get scaled-x (get-scaled-down-token-amounts x-amount-fees-protocol-scaled u0 x-decimals y-decimals)))\n            (updated-x-amount (- x-amount (+ x-amount-fee-lps x-amount-fee-protocol)))\n            (updated-x-balance (+ current-balance-x updated-x-amount))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! current-approval (err \"err-pair-not-approved\"))\n\n        ;; Assert that x-amount is less than x10 of current-balance-x\n        (asserts! (< x-amount (* u10 current-balance-x)) (err \"err-x-amount-too-high\"))\n\n        ;; Assert that dy is greater than min-y-amount\n        (asserts! (> dy min-y-amount) (err \"err-min-y-amount\"))\n\n        ;; Transfer updated-x-balance tokens from tx-sender to this contract\n        (if (> updated-x-amount u0) \n            (unwrap! (contract-call? x-token transfer updated-x-amount swapper (as-contract tx-sender) none) (err \"err-transferring-token-x\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-lps tokens from tx-sender to staking-and-rewards-contract\n        (if (> x-amount-fee-lps u0) \n            (unwrap! (contract-call? x-token transfer x-amount-fee-lps swapper (var-get staking-and-rewards-contract) none) (err \"err-transferring-token-x-fee\"))\n            false\n        )\n\n        ;; Transfer x-amount-fee-protocol tokens from tx-sender to protocol-address\n        (if (> x-amount-fee-protocol u0) \n            (unwrap! (contract-call? x-token transfer x-amount-fee-protocol swapper protocol-address none) (err \"err-transferring-token-x-fee-protocol\"))\n            false\n        )\n\n        ;; Transfer dy tokens from this contract to tx-sender\n        (if (> dy u0) \n            (unwrap! (as-contract (contract-call? y-token transfer dy tx-sender swapper none)) (err \"err-transferring-token-y\")) \n            false\n        )\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            pair-data \n            {\n                balance-x: updated-x-balance,\n                balance-y: new-y,\n                d: (get-D updated-x-balance-scaled new-y-scaled (* (get amplification-coefficient pair-data) number-of-tokens))\n            }\n        ))\n\n        ;; Match if map-get? returns some for CycleDataMap\n        (match (map-get? CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)})\n            cycle-data\n                ;; Update CycleDataMap\n                (map-set CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} (merge \n                    cycle-data \n                    {\n                        cycle-fee-balance-x: (+ (get cycle-fee-balance-x cycle-data) x-amount-fee-lps)\n                    }\n                ))\n                ;; Create new CycleDataMap\n                (map-set CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} {\n                    cycle-fee-balance-x: x-amount-fee-lps,\n                    cycle-fee-balance-y: u0,\n                }) \n        )\n\n        ;; Return the number of y tokens returned from the swap\n        (ok dy)\n\n    )\n)\n;; Swap Y -> X\n;; @desc: Swaps Y token for X token\n;; @params: y-token: principal, x-token: principal, lp-token: principal, x-amount: uint, min-x-amount: uint\n(define-public (swap-y-for-x (y-token <sip-010-trait>) (x-token <sip-010-trait>) (lp-token <lp-trait>) (y-amount uint) (min-x-amount uint)) \n    (let \n        (\n            (swapper tx-sender)\n            (pair-data (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval pair-data))\n            (current-balance-x (get balance-x pair-data))\n            (current-balance-y (get balance-y pair-data))\n            (x-decimals (get x-decimals pair-data))\n            (y-decimals (get y-decimals pair-data))\n            (swap-fee-lps (get lps (var-get swap-fees)))\n            (swap-fee-protocol (get protocol (var-get swap-fees)))\n            (total-swap-fee (+ swap-fee-lps swap-fee-protocol))\n\n            ;; Scale up balances and the swap amount to perform AMM calculations with get-x\n            (scaled-up-balances (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x scaled-up-balances))\n            (current-balance-y-scaled (get scaled-y scaled-up-balances))\n            (scaled-up-swap-amount (get-scaled-up-token-amounts u0 y-amount x-decimals y-decimals))\n            (y-amount-scaled (get scaled-y scaled-up-swap-amount))\n            (y-amount-fees-lps-scaled (/ (* y-amount-scaled swap-fee-lps) u10000))\n            (y-amount-fees-protocol-scaled (/ (* y-amount-scaled swap-fee-protocol) u10000))\n            (updated-y-amount-scaled (- y-amount-scaled (+ y-amount-fees-lps-scaled y-amount-fees-protocol-scaled)))\n            (updated-y-balance-scaled (+ current-balance-y-scaled updated-y-amount-scaled))\n            (new-x-scaled (get-x updated-y-balance-scaled current-balance-x-scaled updated-y-amount-scaled (* (get amplification-coefficient pair-data) number-of-tokens)))\n            \n            ;; Scale down to precise amounts for y and dy, as well as y-amount-fee-lps, and y-amount-fee-protocol\n            (new-x (get scaled-x (get-scaled-down-token-amounts new-x-scaled u0 x-decimals y-decimals)))\n            (dx (- current-balance-x new-x))\n            (y-amount-fee-lps (get scaled-y (get-scaled-down-token-amounts u0 y-amount-fees-lps-scaled x-decimals y-decimals)))\n            (y-amount-fee-protocol (get scaled-y (get-scaled-down-token-amounts u0 y-amount-fees-protocol-scaled x-decimals y-decimals)))\n            (updated-y-amount (- y-amount (+ y-amount-fee-lps y-amount-fee-protocol)))\n            (updated-y-balance (+ current-balance-y updated-y-amount))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! current-approval (err \"err-pair-not-approved\"))\n\n        ;; Assert that y-amount is less than x10 of current-balance-y\n        (asserts! (< y-amount (* u10 current-balance-y)) (err \"err-y-amount-too-high\"))\n\n        ;; Assert that dx is greater than min-x-amount\n        (asserts! (> dx min-x-amount) (err \"err-min-x-amount\"))\n\n        ;; Transfer updated-y-balance tokens from tx-sender to this contract\n        (if (> updated-y-amount u0) \n            (unwrap! (contract-call? y-token transfer updated-y-amount swapper (as-contract tx-sender) none) (err \"err-transferring-token-y\"))\n            false\n        )\n\n        ;; Transfer y-amount-fee-lps tokens from tx-sender to staking-and-rewards-contract\n        (if (> y-amount-fee-lps u0) \n            (unwrap! (contract-call? y-token transfer y-amount-fee-lps swapper (var-get staking-and-rewards-contract) none) (err \"err-transferring-token-y-swap-fee\"))\n            false\n        )\n\n        ;; Transfer y-amount-fee-protocol tokens from tx-sender to protocol-address\n        (if (> y-amount-fee-protocol u0) \n            (unwrap! (contract-call? y-token transfer y-amount-fee-protocol swapper protocol-address none) (err \"err-transferring-token-y-protocol-fee\"))\n            false\n        )\n\n        ;; Transfer dx tokens from this contract to tx-sender\n        (if (> dx u0) \n            (unwrap! (as-contract (contract-call? x-token transfer dx tx-sender swapper none)) (err \"err-transferring-token-x\"))\n            false\n        )\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            pair-data \n            {\n                balance-x: new-x,\n                balance-y: updated-y-balance,\n                d: (get-D new-x-scaled updated-y-balance-scaled (* (get amplification-coefficient pair-data) number-of-tokens))\n            }\n        ))\n\n        ;; Match if map-get? returns some for CycleDataMap\n        (match (map-get? CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)})\n            cycle-data\n                ;; Update CycleDataMap\n                (map-set CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} (merge \n                    cycle-data \n                    {\n                        cycle-fee-balance-y: (+ (get cycle-fee-balance-y cycle-data) y-amount-fee-lps)\n                    }\n                ))\n                ;; Create new CycleDataMap\n                (map-set CycleDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token), cycle-num: (get-current-cycle)} {\n                    cycle-fee-balance-x: u0,\n                    cycle-fee-balance-y: y-amount-fee-lps,\n                }) \n        )\n\n        ;; Return the number of x tokens returned from the swap\n        (ok dx)\n\n    )\n)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Liquidity Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Add Liquidity\n;; @desc: Adds liquidity to a pair, mints the appropriate amount of LP tokens\n;; @params: x-token: principal, y-token: principal, lp-token: principal, x-amount-added: uint, y-amount-added: uint\n(define-public (add-liquidity (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (x-amount-added uint) (y-amount-added uint) (min-lp-amount uint) )\n    (let \n        (\n            ;; Grabbing all data from PairsDataMap\n            (liquidity-provider tx-sender)\n            (current-pair (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval current-pair))\n            (x-decimals (get x-decimals current-pair))\n            (y-decimals (get y-decimals current-pair))\n            (current-balance-x (get balance-x current-pair))\n            (new-balance-x (+ current-balance-x x-amount-added))\n            (current-balance-y (get balance-y current-pair))\n            (new-balance-y (+ current-balance-y y-amount-added))\n            (current-total-shares (get total-shares current-pair))\n            (current-amplification-coefficient (get amplification-coefficient current-pair))\n            \n            ;; Scale up for AMM calculations depending on decimal places assigned to tokens\n            (amounts-added-scaled (get-scaled-up-token-amounts x-amount-added y-amount-added x-decimals y-decimals))\n            (x-amount-added-scaled (get scaled-x amounts-added-scaled))\n            (y-amount-added-scaled (get scaled-y amounts-added-scaled))\n            (current-balances-scaled (get-scaled-up-token-amounts current-balance-x current-balance-y x-decimals y-decimals))\n            (current-balance-x-scaled (get scaled-x current-balances-scaled))\n            (current-balance-y-scaled (get scaled-y current-balances-scaled))\n            (new-balances-scaled (get-scaled-up-token-amounts new-balance-x new-balance-y x-decimals y-decimals))\n            (new-balance-x-scaled (get scaled-x new-balances-scaled))\n            (new-balance-y-scaled (get scaled-y new-balances-scaled))\n            \n            ;; Calculating the ideal balance\n            (d0 (get-D current-balance-x-scaled current-balance-y-scaled current-amplification-coefficient))\n            (d1 (get-D new-balance-x-scaled new-balance-y-scaled current-amplification-coefficient))\n            (ideal-balance-x-scaled (/ (* d1 current-balance-x-scaled) d0))\n            (ideal-balance-y-scaled (/ (* d1 current-balance-y-scaled) d0))\n            (x-difference (if (> ideal-balance-x-scaled new-balance-x-scaled) (- ideal-balance-x-scaled new-balance-x-scaled) (- new-balance-x-scaled ideal-balance-x-scaled)))\n            (y-difference (if (> ideal-balance-y-scaled new-balance-y-scaled) (- ideal-balance-y-scaled new-balance-y-scaled) (- new-balance-y-scaled ideal-balance-y-scaled)))\n            \n            ;; Fees applied if adding imbalanced liquidity\n            (ideal-x-fee-scaled (/ (* x-difference (var-get liquidity-fees)) u10000))\n            (ideal-y-fee-scaled (/ (* y-difference (var-get liquidity-fees)) u10000))\n            (x-fee-scaled (if (> x-amount-added-scaled ideal-x-fee-scaled) ideal-x-fee-scaled x-amount-added-scaled))\n            (y-fee-scaled (if (> y-amount-added-scaled ideal-y-fee-scaled) ideal-y-fee-scaled y-amount-added-scaled))\n            (x-amount-added-updated-scaled (- x-amount-added-scaled x-fee-scaled))\n            (y-amount-added-updated-scaled (- y-amount-added-scaled y-fee-scaled))\n            (new-balance-x-post-fee-scaled (+ current-balance-x-scaled x-amount-added-updated-scaled))\n            (new-balance-y-post-fee-scaled (+ current-balance-y-scaled y-amount-added-updated-scaled))\n            (d2 (get-D new-balance-x-post-fee-scaled new-balance-y-post-fee-scaled current-amplification-coefficient))\n\n            ;; Scale down for precise token balance updates and transfers\n            (precise-fees (get-scaled-down-token-amounts x-fee-scaled y-fee-scaled x-decimals y-decimals))\n            (x-fee (get scaled-x precise-fees))\n            (y-fee (get scaled-y precise-fees))\n            (amounts-added-scaled-down (get-scaled-down-token-amounts x-amount-added-updated-scaled y-amount-added-updated-scaled x-decimals y-decimals))\n            (x-amount-added-updated (get scaled-x amounts-added-scaled-down))\n            (y-amount-added-updated (get scaled-y amounts-added-scaled-down))\n            (balances-post-fee-scaled-down (get-scaled-down-token-amounts new-balance-x-post-fee-scaled new-balance-y-post-fee-scaled x-decimals y-decimals))\n            (new-balance-x-post-fee (get scaled-x balances-post-fee-scaled-down))\n            (new-balance-y-post-fee (get scaled-y balances-post-fee-scaled-down))\n        )\n\n        ;; Assert that pair is approved\n        (asserts! current-approval (err \"err-pair-not-approved\"))\n\n        ;; Assert that either x-amount-added or y-amount-added is greater than 0\n        (asserts! (or (> x-amount-added u0) (> y-amount-added u0)) (err \"err-x-or-y-amount-added-zero\"))\n\n        ;; Assert that d2 is greater than d0\n        (asserts! (> d2 d0) (err \"err-d2-less-than-d0\"))\n\n        ;; Assert that derived mint amount is greater than min-lp-amount\n        (asserts! (> (/ (* current-total-shares (- d2 d0)) d0) min-lp-amount) (err \"err-derived-amount-less-than-lp\"))\n\n        ;; ;; Transfer x-amount-added tokens from tx-sender to this contract\n        (if (> x-amount-added-updated u0) \n            (unwrap! (contract-call? x-token transfer x-amount-added-updated liquidity-provider (as-contract tx-sender) none) (err \"err-transferring-token-x-escrow\"))\n            false\n        )\n\n        ;; Transfer y-amount-added tokens from tx-sender to this contract\n        (if (> y-amount-added-updated u0)\n            (unwrap! (contract-call? y-token transfer y-amount-added-updated liquidity-provider (as-contract tx-sender) none) (err \"err-transferring-token-y\"))\n            false\n        )\n        \n        ;; Transfer x-fees tokens from tx-sender to protocol-address\n        (if (> x-fee u0)\n            (unwrap! (contract-call? x-token transfer x-fee liquidity-provider protocol-address none) (err \"err-transferring-token-x-protocol\"))\n            false\n        )\n         ;; Transfer y-fees tokens from tx-sender to protocol-address\n        (if (> y-fee u0)\n            (unwrap! (contract-call? y-token transfer y-fee liquidity-provider protocol-address none) (err \"err-transferring-token-y-protocol\"))\n            false\n        )\n\n        ;; Mint LP tokens to tx-sender\n        (unwrap! (as-contract (contract-call? lp-token mint liquidity-provider (/ (* current-total-shares (- d2 d0)) d0))) (err \"err-minting-lp-tokens\"))\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} \n            (merge \n                current-pair \n                {\n                    balance-x: new-balance-x-post-fee,\n                    balance-y: new-balance-y-post-fee,\n                    total-shares: (+ current-total-shares (/ (* current-total-shares (- d2 d0)) d0)),\n                    d: d2\n                }\n        ))\n\n        ;; Return the number of LP tokens minted\n        (ok (/ (* current-total-shares (- d2 d0)) d0))\n    )\n)\n\n;; Withdraw Liquidity\n;; @desc: Withdraws liquidity from both pairs & burns the appropriate amount of LP tokens\n;; @params: x-token: principal, y-token: principal, lp-token: principal, lp-amount: uint, min-x-amount: uint, min-y-amount: uint\n(define-public (withdraw-liquidity (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (lp-amount uint) (min-x-amount uint) (min-y-amount uint))\n    (let \n        (\n            ;; Grabbing all data from PairsDataMap\n            (current-pair (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-approval (get approval current-pair))\n            (x-decimals (get x-decimals current-pair))\n            (y-decimals (get y-decimals current-pair))\n            (current-balance-x (get balance-x current-pair))\n            (current-balance-y (get balance-y current-pair))\n            (current-total-shares (get total-shares current-pair))\n            (current-amplification-coefficient (get amplification-coefficient current-pair))\n            (withdrawal-balance-x (/ (* current-balance-x lp-amount) current-total-shares))\n            (withdrawal-balance-y (/ (* current-balance-y lp-amount) current-total-shares))\n            (new-balance-x (- current-balance-x withdrawal-balance-x))\n            (new-balance-y (- current-balance-y withdrawal-balance-y))\n            (liquidity-remover tx-sender)\n            ;; get-D using the new-balance-x and new-balance-y\n            (new-balances-scaled (get-scaled-up-token-amounts new-balance-x new-balance-y x-decimals y-decimals))\n            (new-balance-x-scaled (get scaled-x new-balances-scaled))\n            (new-balance-y-scaled (get scaled-y new-balances-scaled))\n            (new-d (get-D new-balance-x-scaled new-balance-y-scaled current-amplification-coefficient))\n        )\n\n        ;; Assert that withdrawal-balance-x is greater than min-x-amount\n        (asserts! (> withdrawal-balance-x min-x-amount) (err \"err-withdrawal-balance-x-less-than-min-x-amount\"))\n\n        ;; Assert that withdrawal-balance-y is greater than min-y-amount\n        (asserts! (> withdrawal-balance-y min-y-amount) (err \"err-withdrawal-balance-y-less-than-min-y-amount\"))\n\n        ;; Burn LP tokens from tx-sender\n        (unwrap! (contract-call? lp-token burn liquidity-remover lp-amount) (err \"err-burning-lp-tokens\"))\n\n        ;; Transfer withdrawal-balance-x tokens from this contract to liquidity-taker\n        (unwrap! (as-contract (contract-call? x-token transfer withdrawal-balance-x tx-sender liquidity-remover none)) (err \"err-transferring-token-x\"))\n\n        ;; Transfer withdrawal-balance-y tokens from this contract to liquidity-taker\n        (unwrap! (as-contract (contract-call? y-token transfer withdrawal-balance-y tx-sender liquidity-remover none)) (err \"err-transferring-token-y\"))\n\n        ;; Update all appropriate maps\n        ;; Update PairsDataMap\n        (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            current-pair \n            {\n                balance-x: new-balance-x,\n                balance-y: new-balance-y,\n                total-shares: (- current-total-shares lp-amount),\n                d: new-d\n            }\n        ))\n\n        ;; Return the number X tokens and Y tokens received after withdrawing from pool\n        (ok {withdrawal-x-balance: withdrawal-balance-x, withdrawal-y-balance: withdrawal-balance-y})\n    )\n)\n\n\n;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;\n;;; AMM Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;\n\n;; D for loop\n;; Get D\n(define-read-only (get-D (x-bal uint) (y-bal uint) (ann uint))\n    (get converged (fold D-for-loop index-list {D: (+ x-bal y-bal), x-bal: x-bal, y-bal: y-bal, ann: ann, converged: u0}))\n)\n\n;; Get D Helper\n(define-private (D-for-loop (n uint) (D-info {D: uint, x-bal: uint, y-bal: uint, ann: uint, converged: uint})) \n    (let \n        (\n            ;; Grabbing everything from D-info\n            (current-D-partial (get D D-info))\n            (current-D (get D D-info))\n            (current-x-bal (get x-bal D-info))\n            (current-y-bal (get y-bal D-info))\n            (current-S (+ current-x-bal current-y-bal))\n            (current-ann (get ann D-info))\n            (current-converged (get converged D-info))\n\n            ;; Start logic for calculating new D\n            ;; Calculate new partial D with respect to x\n            (new-D-partial-x (/ (* current-D current-D-partial) (* u2 current-x-bal)))\n            ;; Calculate new partial D with respect to now x & y\n            (new-D-partial (/ (* current-D new-D-partial-x ) (* u2 current-y-bal)))\n\n            (new-numerator (* (+ (* current-ann current-S) (* number-of-tokens new-D-partial)) current-D))\n            (new-denominator (+ (* (- current-ann u1) current-D) (* (+ number-of-tokens u1 ) new-D-partial)))\n\n            (new-D (/ new-numerator new-denominator))\n            (threshold (var-get convergence-threshold))\n\n            \n        )\n        \n        ;; Check if converged value / new D was already found\n        (if (is-eq current-converged u0)\n            (if (> new-D  current-D)\n                (if (<= (- new-D current-D) threshold)\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: new-D}\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: u0}\n                )\n                (if (<= (- current-D new-D) threshold)\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: new-D}\n                    {D: new-D, x-bal: current-x-bal, y-bal: current-y-bal, ann: current-ann, converged: u0}\n                )\n            )\n            D-info\n        )\n    \n    )\n)\n\n;; Scale up the token amounts to the same level of precision before performing AMM calculations\n;; @params: x-amount-unscaled: uint, y-amount-unscaled:uint, x-num-decimals: uint, y-num-decimals: uint\n(define-private (get-scaled-up-token-amounts (x-amount-unscaled uint) (y-amount-unscaled uint) (x-num-decimals uint) (y-num-decimals uint))\n    (let \n        (\n            (scaled-x \n                ;; if same number of decimals, set to x-amount-unscaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    x-amount-unscaled\n                    ;; if x has more decimals, set to x-amount-unscaled; otherwise scale up by the difference in decimals\n                    (if (> x-num-decimals y-num-decimals) x-amount-unscaled (* x-amount-unscaled (pow u10 (- y-num-decimals x-num-decimals))))\n                )\n            )\n            (scaled-y \n                ;; if same number of decimals, set to y-amount-unscaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    y-amount-unscaled\n                    ;; if y has more decimals, set to y-amount-unscaled; otherwise scale up by the difference in decimals\n                    (if (> y-num-decimals x-num-decimals) y-amount-unscaled (* y-amount-unscaled (pow u10 (- x-num-decimals y-num-decimals))))\n                )\n            )\n        )\n        {scaled-x: scaled-x, scaled-y: scaled-y}\n    )\n)\n\n;; Scale down the token amounts to their respective levels of precision before performing any transfers\n;; @params: x-amount-scaled: uint, y-amount-scaled:uint, x-num-decimals: uint, y-num-decimals: uint\n(define-private (get-scaled-down-token-amounts (x-amount-scaled uint) (y-amount-scaled uint) (x-num-decimals uint) (y-num-decimals uint))\n    (let \n        (\n            (scaled-x \n                ;; if same number of decimals, set to x-amount-scaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    x-amount-scaled\n                    ;; if x has more decimals, set to x-amount-scaled; otherwise scale down by the difference in decimals\n                    (if (> x-num-decimals y-num-decimals) x-amount-scaled (/ x-amount-scaled (pow u10 (- y-num-decimals x-num-decimals))))\n                )\n            )\n            (scaled-y \n                ;; if same number of decimals, set to y-amount-scaled\n                (if (is-eq x-num-decimals y-num-decimals)\n                    y-amount-scaled\n                    ;; if y has more decimals, set to y-amount-scaled; otherwise scale down by the difference in decimals\n                    (if (> y-num-decimals x-num-decimals) y-amount-scaled (/ y-amount-scaled (pow u10 (- x-num-decimals y-num-decimals))))\n                )\n            )\n        )\n        {scaled-x: scaled-x, scaled-y: scaled-y}\n    )\n)\n\n;; @desc - Helper function for removing a admin\n(define-private (is-not-removeable (admin principal))\n  (not (is-eq admin (var-get helper-principal)))\n)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Goverance Functions ;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Create Pair\n;; @desc: Creates a new pair for trading\n;; @params: x-token: principal, y-token: principal, lp-token: principal, amplification-coefficient: uint, pair-name: string, x-balance: uint, y-balance: uint\n;; initial-balance param is for TOTAL balance of x + y tokens (aka 2x or 2y or (x + y))\n(define-public (create-pair (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (amplification-coefficient uint) (pair-name (string-ascii 32)) (initial-x-bal uint) (initial-y-bal uint))\n    (let \n        (\n            (lp-owner tx-sender)\n            (x-decimals (unwrap! (contract-call? x-token get-decimals) (err \"err-getting-x-decimals\")))\n            (y-decimals (unwrap! (contract-call? y-token get-decimals) (err \"err-getting-y-decimals\")))\n            (scaled-up-balances (get-scaled-up-token-amounts initial-x-bal initial-y-bal x-decimals y-decimals))\n            (initial-x-bal-scaled (get scaled-x scaled-up-balances))\n            (initial-y-bal-scaled (get scaled-y scaled-up-balances))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of (var-get admins) tx-sender )) (err \"err-not-admin\"))\n\n        ;; Assert using and that the pair does not already exist using is-none & map-get?\n        (asserts! (and \n            (is-none (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}))\n            (is-none (map-get? PairsDataMap {x-token: (contract-of y-token), y-token: (contract-of x-token), lp-token: (contract-of lp-token)}))\n        )  (err \"err-pair-xy-or-yx-exists\"))\n\n        ;; Assert that both initial balances are greater than 0\n        (asserts! (or (> initial-x-bal u0) (> initial-y-bal u0)) (err \"err-initial-bal-zero\"))\n\n        ;; Assert that x & y tokens are the same\n        (asserts! (is-eq initial-x-bal-scaled initial-y-bal-scaled) (err \"err-initial-bal-odd\"))\n\n        ;; Mint LP tokens to tx-sender\n        (unwrap! (as-contract (contract-call? lp-token mint lp-owner (+ initial-x-bal-scaled initial-y-bal-scaled))) (err \"err-minting-lp-tokens\"))\n\n        ;; Transfer token x liquidity to this contract\n        (unwrap! (contract-call? x-token transfer initial-x-bal tx-sender (as-contract tx-sender) none) (err \"err-transferring-token-x\"))\n\n        ;; Transfer token y liquidity to this contract\n        (unwrap! (contract-call? y-token transfer initial-y-bal tx-sender (as-contract tx-sender) none) (err \"err-transferring-token-y\"))\n\n        ;; Update all appropriate maps\n        (ok (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} {\n            approval: true,\n            total-shares: (+ initial-x-bal-scaled initial-y-bal-scaled),\n            x-decimals: x-decimals,\n            y-decimals: y-decimals,\n            balance-x: initial-x-bal,\n            balance-y: initial-y-bal,\n            d: (+ initial-x-bal-scaled initial-y-bal-scaled),\n            amplification-coefficient: amplification-coefficient,\n        }))\n    )\n)\n\n\n;; Setting Pair Approval\n;; @desc: Sets the approval of a pair\n;; @params: x-token: principal, y-token: principal, lp-token: principal, approval: bool\n(define-public (set-pair-approval (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (approval bool))\n    (let \n        (\n            (current-pair (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of (var-get admins) tx-sender)) (err \"err-not-admin\"))\n\n        ;; Update all appropriate maps\n        (ok (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            current-pair\n            {\n                approval: approval\n            }\n        )))\n    )\n)\n\n;; Add Admin\n;; @desc: Adds an admin to the admins var list\n;; @params: admin: principal\n(define-public (add-admin (admin principal))\n    (let \n        (\n            (current-admins (var-get admins))\n            ;;(new-admins (unwrap! (as-max-len? (append current-admins admin) u5) (\"err-add-admin-overflow\")))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Assert that admin is not already an admin using is-none & index-of with the admins var\n        (asserts! (is-none (index-of current-admins admin)) (err \"err-already-admin\"))\n\n        ;; Update all appropriate maps\n        (ok (var-set admins (unwrap! (as-max-len? (append current-admins admin) u5) (err \"err-admin-overflow\"))))\n    )\n)\n\n;; Remove admin\n(define-public (remove-admin (admin principal))\n  (let\n    (\n      (current-admin-list (var-get admins))\n      (caller-principal-position-in-list (index-of current-admin-list tx-sender))\n      (removeable-principal-position-in-list (index-of current-admin-list admin))\n    )\n\n    ;; asserts tx-sender is an existing whitelist address\n    (asserts! (is-some caller-principal-position-in-list) (err \"err-not-auth\"))\n\n    ;; asserts param principal (removeable whitelist) already exist\n    (asserts! (is-some removeable-principal-position-in-list) (err \"err-not-whitelisted\"))\n\n    ;; asserts the initial contract deployer cannot be removed from admin list to protect against rogue admins\n    (asserts! (not (is-eq admin contract-deployer)) (err \"err-cannot-remove-contract-deployer\"))\n\n    ;; temporary var set to help remove param principal\n    (var-set helper-principal admin)\n\n    ;; filter existing whitelist address\n    (ok \n      (var-set admins (filter is-not-removeable current-admin-list))\n    )\n  )\n)\n\n;; Change Swap Fee\n(define-public (change-swap-fee (new-lps-fee uint) (new-protocol-fee uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set swap-fees {lps: new-lps-fee, protocol: new-protocol-fee}))\n    )\n)\n\n;; Change Liquidity Fee\n(define-public (change-liquidity-fee (new-liquidity-fee uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set liquidity-fees new-liquidity-fee))\n    )\n)\n\n;; Admins can change the amplification coefficient in PairsDataMap\n;; @params: x-token: principal, y-token: principal, lp-token: principal, amplification-coefficient: uint\n(define-public (change-amplification-coefficient (x-token <sip-010-trait>) (y-token <sip-010-trait>) (lp-token <lp-trait>) (amplification-coefficient uint))\n    (let \n        (\n            (current-pair (unwrap! (map-get? PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)}) (err \"err-no-pair-data\")))\n            (current-admins (var-get admins))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Update all appropriate maps\n        (ok (map-set PairsDataMap {x-token: (contract-of x-token), y-token: (contract-of y-token), lp-token: (contract-of lp-token)} (merge \n            current-pair\n            {\n                amplification-coefficient: amplification-coefficient\n            }\n        )))\n    )\n)\n\n;; Change Convergence Threshold \n(define-public (change-convergence-threshold (new-convergence-threshold uint)) \n    (let \n        (\n            (current-admins (var-get admins))\n        )\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        (ok (var-set convergence-threshold new-convergence-threshold))\n    )\n)\n\n;; Admins can set the contract for handling staking and rewards\n;; @params: staking-contract: principal\n(define-public (set-staking-contract (staking-contract principal))\n    (let \n        (\n            (current-admins (var-get admins))\n            (is-set (var-get staking-and-rewards-contract-is-set))\n        )\n\n        ;; Assert that tx-sender is an admin using is-some & index-of with the admins var\n        (asserts! (is-some (index-of current-admins tx-sender)) (err \"err-not-admin\"))\n\n        ;; Assert that the staking-and-rewards contract has not already been set\n        (asserts! (not is-set) (err \"err-staking-and-rewards-contract-already-assigned\"))\n\n        ;; Set contract for handling staking and rewards\n        (var-set staking-and-rewards-contract staking-contract)\n        (var-set staking-and-rewards-contract-is-set true)\n        \n        (ok staking-contract)\n    )\n)",
    "analysis": {
      "summary": "This contract implements the core logic for a Stableswap protocol on the Stacks blockchain, including liquidity provision, swaps, and governance.",
      "explanation": "The Bitflow Stableswap Core Contract is designed to facilitate stablecoin swaps with minimal slippage through an automated market maker (AMM) model, enhanced by an amplification coefficient and dynamic fees. It supports liquidity provision, token swaps (X for Y, Y for X), and governance functions to manage the protocol parameters and admin privileges.\n\n- Constants and Variables: The contract defines several constants like contract address, deployment height, and cycle length, alongside variables for managing swap fees, liquidity fees, admin governance, and more.\n\n- Maps: Utilizes maps to store pair data and cycle-specific data, enabling tracking of liquidity pools and fee accumulation over time.\n\n- Read-Only Functions: Provide data accessors for pair data, cycle data, current cycle calculation, and AMM-specific calculations like `get-dx` and `get-dy`.\n\n- Swap Functions: `swap-x-for-y` and `swap-y-for-x` allow users to swap tokens with dynamic pricing based on the AMM model, considering fees and the amplification coefficient.\n\n- Liquidity Functions: `add-liquidity` and `withdraw-liquidity` enable users to contribute to or withdraw from liquidity pools, with LP tokens representing their share.\n\n- AMM Functions: Core mathematical operations for the AMM, including the calculation of the invariant `D`, are implemented with precision to handle the amplification effect and ensure balanced swaps.\n\n- Governance Functions: Admins can manage the protocol by creating new pairs, setting pair approvals, adjusting fees, and modifying the amplification coefficient. Admin management functions allow adding or removing admins, ensuring decentralized control over the protocol's parameters.",
      "tags": [
        "Stableswap",
        "AMM",
        "DeFi",
        "Liquidity-Pools",
        "Governance",
        "Swap",
        "Stablecoin"
      ]
    }
  },
  {
    "rank": 153,
    "contract": "SP25K3XPVBNWXPMYDXBPSZHGC8APW0Z21CWJ3Y3B1.wen-nakamoto-stxcity",
    "calls": 170,
    "source": "\n;; @title Bonding Curve Token by STX.CITY\n;; @version 2.0\n;; @hash TB58DlAj1sFVNTj1VHUf7A:9RdLJlimctQ6ouSRp4jwHA:ANcWITYwsgxkH_I60rwqc3jmcOF8WdDY9GpAbMtuZLgzcyoCgtpni_B0pH149eTheNxqCDFOxWh2NaMCcgZXcHjDrYytaIXddoFOiEZCPUM\n\n;; Errors \n(define-constant ERR-UNAUTHORIZED u401)\n(define-constant ERR-NOT-OWNER u402)\n(define-constant ERR-INVALID-PARAMETERS u403)\n(define-constant ERR-NOT-ENOUGH-FUND u101)\n\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Constants\n(define-constant MAXSUPPLY u864864864000000)\n\n;; Variables\n(define-fungible-token WEN MAXSUPPLY)\n(define-data-var contract-owner principal tx-sender) \n\n\n\n;; SIP-10 Functions\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender) (err ERR-UNAUTHORIZED))\n        (ft-transfer? WEN amount from to)\n    )\n)\n\n\n;; DEFINE METADATA\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://pdakhjpwkuwtadzmpnjm.supabase.co/storage/v1/object/public/uri/vGYuKdXI-wen-nakamoto-0-decimals.json\"))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (begin\n        (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))\n        (var-set token-uri (some value))\n        (ok (print {\n              notification: \"token-metadata-update\",\n              payload: {\n                contract-id: (as-contract tx-sender),\n                token-class: \"ft\"\n              }\n            })\n        )\n    )\n)\n\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance WEN owner))\n)\n(define-read-only (get-name)\n  (ok \"WEN NAKAMOTO\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"WEN\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply WEN))\n)\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri))\n)\n\n;; transfer ownership\n(define-public (transfer-ownership (new-owner principal))\n  (begin\n    ;; Checks if the sender is the current owner\n    (if (is-eq tx-sender (var-get contract-owner))\n      (begin\n        ;; Sets the new owner\n        (var-set contract-owner new-owner)\n        ;; Returns success message\n        (ok \"Ownership transferred successfully\"))\n      ;; Error if the sender is not the owner\n      (err ERR-NOT-OWNER)))\n)\n\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n(define-private (send-stx (recipient principal) (amount uint))\n  (begin\n    (try! (stx-transfer? amount tx-sender recipient))\n    (ok true) \n  )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n    (try! (send-stx 'SP11WRT9TPPKP5492X3VE81CM1T74MD13SPFT527D u1000000))\n    (try! (ft-mint? WEN u780329200601503 'SP25K3XPVBNWXPMYDXBPSZHGC8APW0Z21CWJ3Y3B1.wen-nakamoto-stxcity-dex))\n    (try! (ft-mint? WEN u84535663398497 'SP25K3XPVBNWXPMYDXBPSZHGC8APW0Z21CWJ3Y3B1))\n    \n    (try! (send-stx 'SP25K3XPVBNWXPMYDXBPSZHGC8APW0Z21CWJ3Y3B1.wen-nakamoto-stxcity-dex u433333333))\n    (try! (send-stx 'SP1WTA0YBPC5R6GDMPPJCEDEA6Z2ZEPNMQ4C39W6M u216666667))\n \n)\n",
    "analysis": {
      "summary": "This contract implements a fungible token (WEN) with a fixed maximum supply, utilizing a bonding curve for distribution, and includes features for token transfer, metadata management, and ownership transfer.",
      "explanation": "The contract defines a fungible token named WEN NAKAMOTO with a maximum supply limit and implements the SIP-010 standard for fungible tokens on the Stacks blockchain. It includes functionalities for token transfer, querying token metadata, transferring contract ownership, and a unique feature for distributing tokens through a bonding curve mechanism.\n\n- Constants and Variables: Defines error codes, the maximum token supply, the WEN token, and the contract owner variable <L5-13>.\n- SIP-010 Implementation: Implements required SIP-010 functions for fungible tokens, including `transfer`, and read-only functions to get token details <L15-45>.\n- Metadata Management: Allows the contract owner to update the token's metadata URI <L47-57>.\n- Ownership Transfer: Provides a function for the current owner to transfer ownership to a new principal <L59-69>.\n- Utility Functions: Includes `send-many` for batch processing of token transfers and private helper functions for token transfer and STX transfer <L71-101>.\n- Minting and Initial Distribution: The contract attempts to mint tokens and distribute STX to specific addresses as part of its initialization. This is likely part of the bonding curve mechanism for initial token distribution <L103-111>.\n\nThe contract's unique approach to initial token distribution through a bonding curve, combined with standard fungible token functionalities and metadata management, makes it a comprehensive example for developers interested in creating advanced tokenomics on the Stacks blockchain.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "token-metadata",
        "ownership-transfer",
        "bonding-curve"
      ]
    }
  },
  {
    "rank": 154,
    "contract": "SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.stacking-dao-core-v1",
    "calls": 170,
    "source": ";; @contract Core\n;; @version 1\n\n(use-trait reserve-trait .reserve-trait-v1.reserve-trait)\n(use-trait commission-trait .commission-trait-v1.commission-trait)\n(use-trait staking-trait .staking-trait-v1.staking-trait)\n\n;;-------------------------------------\n;; Constants \n;;-------------------------------------\n\n(define-constant ERR_WRONG_CYCLE_ID u19001)\n(define-constant ERR_SHUTDOWN u19002)\n(define-constant ERR_WITHDRAW_NOT_NFT_OWNER u19004)\n(define-constant ERR_WITHDRAW_NFT_DOES_NOT_EXIST u19005)\n(define-constant ERR_MAX_COMMISSION u19006)\n(define-constant ERR_GET_OWNER u19007)\n\n(define-constant MAX_COMMISSION u2000) ;; 20% in basis points\n\n;;-------------------------------------\n;; Variables\n;;-------------------------------------\n\n(define-data-var commission uint u500) ;; 5% in basis points\n\n(define-data-var shutdown-deposits bool false)\n\n;;-------------------------------------\n;; Maps \n;;-------------------------------------\n\n(define-map cycle-info\n  { \n    cycle-id: uint \n  }\n  {\n    deposited: uint,        ;; STX\n    withdraw-init: uint,    ;; STX\n    withdraw-out: uint,     ;; STX\n    rewards: uint,          ;; STX\n    commission: uint        ;; STX\n  }\n)\n\n(define-map withdrawals-by-nft\n  { \n    nft-id: uint\n  }\n  {\n    cycle-id: uint, \n    stx-amount: uint,\n    ststx-amount: uint\n  }\n)\n\n;;-------------------------------------\n;; Getters \n;;-------------------------------------\n\n(define-read-only (get-commission)\n  (var-get commission)\n)\n\n(define-read-only (get-shutdown-deposits)\n  (var-get shutdown-deposits)\n)\n\n(define-read-only (get-cycle-info (cycle-id uint))\n  (default-to\n    {\n      deposited: u0,\n      withdraw-init: u0,\n      withdraw-out: u0,\n      rewards: u0,\n      commission: u0\n    }\n    (map-get? cycle-info { cycle-id: cycle-id })\n  )\n)\n\n(define-read-only (get-withdrawals-by-nft (nft-id uint))\n  (default-to\n    {\n      cycle-id: u0,\n      stx-amount: u0,\n      ststx-amount: u0\n    }\n    (map-get? withdrawals-by-nft { nft-id: nft-id })\n  )\n)\n\n(define-read-only (get-burn-height)\n  burn-block-height\n)\n\n(define-read-only (get-pox-cycle)\n  (contract-call? 'SP000000000000000000002Q6VF78.pox-3 current-pox-reward-cycle)\n)\n\n(define-read-only (get-stx-balance (address principal))\n  (stx-get-balance address)\n)\n\n;; Get first cycle in which user can withdraw\n;; It's the current cycle if prepare phase not started, otherwise the next cycle\n(define-read-only (get-next-withdraw-cycle)\n  (let (\n    (current-cycle (get-pox-cycle))\n    (prepare-length (get prepare-cycle-length (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-3 get-pox-info))))\n    (start-block-next-cycle (contract-call? 'SP000000000000000000002Q6VF78.pox-3 reward-cycle-to-burn-height (+ current-cycle u1)))\n  )\n    (if (> burn-block-height (- start-block-next-cycle prepare-length))\n      ;; Prepare phase\n      (+ current-cycle u2)\n      ;; Normal\n      (+ current-cycle u1)\n    )\n  )\n)\n\n;;-------------------------------------\n;; STX per stSTX  \n;;-------------------------------------\n\n(define-public (get-stx-per-ststx (reserve-contract <reserve-trait>))\n  (let (\n    (stx-amount (unwrap-panic (contract-call? reserve-contract get-total-stx)))\n  )\n    (try! (contract-call? .dao check-is-protocol (contract-of reserve-contract)))\n    (ok (get-stx-per-ststx-helper stx-amount))\n  )\n)\n\n(define-read-only (get-stx-per-ststx-helper (stx-amount uint))\n  (let (\n    (ststx-supply (unwrap-panic (contract-call? .ststx-token get-total-supply)))\n  )\n    (if (is-eq ststx-supply u0)\n      u1000000\n      (/ (* stx-amount u1000000) ststx-supply)\n    )\n  )\n)\n\n;;-------------------------------------\n;; User  \n;;-------------------------------------\n\n;; Deposit STX for stSTX\n(define-public (deposit (reserve-contract <reserve-trait>) (stx-amount uint) (referrer (optional principal)))\n  (let (\n    (cycle-id (get-pox-cycle))\n    (current-cycle-info (get-cycle-info cycle-id))\n\n    (stx-ststx (try! (get-stx-per-ststx reserve-contract)))\n    (ststx-to-receive (/ (* stx-amount u1000000) stx-ststx))\n  )\n    (try! (contract-call? .dao check-is-enabled))\n    (asserts! (not (get-shutdown-deposits)) (err ERR_SHUTDOWN))\n\n    (map-set cycle-info { cycle-id: cycle-id } (merge current-cycle-info { deposited: (+ (get deposited current-cycle-info) stx-amount) }))\n    (print { action: \"deposit\", data: { stacker: tx-sender, referrer: referrer, amount: ststx-to-receive, block-height: block-height } })\n\n    (try! (stx-transfer? stx-amount tx-sender (contract-of reserve-contract)))\n    (try! (contract-call? .ststx-token mint-for-protocol ststx-to-receive tx-sender))\n\n    (ok ststx-to-receive)\n  )\n)\n\n;; Initiate withdrawal, given stSTX amount. Can update amount as long as cycle not started.\n;; The stSTX tokens are transferred to this contract, and are burned on the actual withdrawal.\n;; An NFT is minted for the user as a token representation of the withdrawal.\n(define-public (init-withdraw (reserve-contract <reserve-trait>) (ststx-amount uint))\n  (let (\n    (sender tx-sender)\n    (withdrawal-cycle (get-next-withdraw-cycle))\n    (current-cycle-info (get-cycle-info withdrawal-cycle))\n\n    (stx-ststx (unwrap-panic (get-stx-per-ststx reserve-contract)))\n    (stx-to-receive (/ (* ststx-amount stx-ststx) u1000000))\n    (total-stx (unwrap-panic (contract-call? reserve-contract get-total-stx)))\n\n    (new-withdraw-init (+ (get withdraw-init current-cycle-info) stx-to-receive))\n\n    (nft-id (unwrap-panic (contract-call? .ststx-withdraw-nft get-last-token-id)))\n  )\n    (try! (contract-call? .dao check-is-enabled))\n    (try! (contract-call? .dao check-is-protocol (contract-of reserve-contract)))\n\n    ;; Transfer stSTX token to contract, only burn on actual withdraw\n    (try! (as-contract (contract-call? reserve-contract lock-stx-for-withdrawal stx-to-receive)))\n    (try! (contract-call? .ststx-token transfer ststx-amount tx-sender (as-contract tx-sender) none))\n    (try! (as-contract (contract-call? .ststx-withdraw-nft mint-for-protocol sender)))\n\n    (map-set withdrawals-by-nft { nft-id: nft-id } { stx-amount: stx-to-receive, ststx-amount: ststx-amount, cycle-id: withdrawal-cycle })\n    (map-set cycle-info { cycle-id: withdrawal-cycle } (merge current-cycle-info { withdraw-init: new-withdraw-init }))\n\n    (ok nft-id)\n  )\n)\n\n;; Actual withdrawal for given NFT. \n;; The NFT and stSTX tokens will be burned and the user will receive STX tokens.\n(define-public (withdraw (reserve-contract <reserve-trait>) (nft-id uint))\n  (let (\n    (receiver tx-sender)\n    (cycle-id (get-pox-cycle))\n\n    (withdrawal-entry (get-withdrawals-by-nft nft-id))\n    (withdrawal-cycle (get cycle-id withdrawal-entry))\n\n    (start-block-cycle (contract-call? 'SP000000000000000000002Q6VF78.pox-3 reward-cycle-to-burn-height withdrawal-cycle))\n    (pox-prepare-length (get prepare-cycle-length (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-3 get-pox-info))))\n    (unlock-burn-height (+ pox-prepare-length start-block-cycle))\n\n    (withdrawal-cycle-info (get-cycle-info withdrawal-cycle ))\n\n    (stx-to-receive (get stx-amount withdrawal-entry))\n    (nft-owner (unwrap! (contract-call? .ststx-withdraw-nft get-owner nft-id) (err ERR_GET_OWNER)))\n  )\n    (try! (contract-call? .dao check-is-enabled))\n    (try! (contract-call? .dao check-is-protocol (contract-of reserve-contract)))\n    (asserts! (is-some nft-owner) (err ERR_WITHDRAW_NFT_DOES_NOT_EXIST))\n    (asserts! (is-eq (unwrap! nft-owner (err ERR_GET_OWNER)) tx-sender) (err ERR_WITHDRAW_NOT_NFT_OWNER))\n    (asserts! (>= cycle-id withdrawal-cycle) (err ERR_WRONG_CYCLE_ID))\n    (asserts! (> burn-block-height unlock-burn-height) (err ERR_WRONG_CYCLE_ID))\n\n    ;; STX to user, burn stSTX\n    (try! (as-contract (contract-call? reserve-contract request-stx-for-withdrawal stx-to-receive receiver)))\n    (try! (contract-call? .ststx-token burn-for-protocol (get ststx-amount withdrawal-entry) (as-contract tx-sender)))\n    (try! (as-contract (contract-call? .ststx-withdraw-nft burn-for-protocol nft-id)))\n\n    ;; Update withdrawals maps so user can not withdraw again\n    (print { action: \"withdraw\", data: { stacker: tx-sender, amount: (get ststx-amount withdrawal-entry), block-height: block-height } })\n    (map-delete withdrawals-by-nft { nft-id: nft-id })\n    (map-set cycle-info { cycle-id: withdrawal-cycle } (merge withdrawal-cycle-info { \n      withdraw-out: (+ (get withdraw-out withdrawal-cycle-info) stx-to-receive),\n    }))\n\n    (ok stx-to-receive)\n  )\n)\n\n;; Add rewards in STX for given cycle.\n;; The stacking rewards will be swapped to STX and added via this method.\n;; Stacking rewards management is a manual process.\n(define-public (add-rewards \n  (commission-contract <commission-trait>) \n  (staking-contract <staking-trait>) \n  (reserve principal) \n  (stx-amount uint) \n  (cycle-id uint)\n)\n  (let (\n    (current-cycle-info (get-cycle-info cycle-id))\n    (commission-amount (/ (* stx-amount (var-get commission)) u10000))\n    (rewards-left (- stx-amount commission-amount))\n  )\n    (try! (contract-call? .dao check-is-enabled))\n    (try! (contract-call? .dao check-is-protocol reserve))\n    (try! (contract-call? .dao check-is-protocol (contract-of commission-contract)))\n    (try! (contract-call? .dao check-is-protocol (contract-of staking-contract)))\n\n    (map-set cycle-info { cycle-id: cycle-id } (merge current-cycle-info { \n      rewards: (+ (get rewards current-cycle-info) rewards-left),\n      commission: (+ (get commission current-cycle-info) commission-amount)\n    }))\n\n    (if (> commission-amount u0)\n      (try! (contract-call? commission-contract add-commission staking-contract commission-amount))\n      u0\n    )\n    (try! (stx-transfer? rewards-left tx-sender reserve))\n\n    (ok stx-amount)\n  )\n)\n\n;;-------------------------------------\n;; Admin\n;;-------------------------------------\n\n(define-public (set-commission (new-commission uint))\n  (begin\n    (try! (contract-call? .dao check-is-protocol tx-sender))\n    (asserts! (<= new-commission MAX_COMMISSION) (err ERR_MAX_COMMISSION))\n\n    (var-set commission new-commission)\n    (ok true)\n  )\n)\n\n(define-public (set-shutdown-deposits (shutdown bool))\n  (begin\n    (try! (contract-call? .dao check-is-protocol tx-sender))\n    \n    (var-set shutdown-deposits shutdown)\n    (ok true)\n  )\n)\n",
    "analysis": {
      "summary": "This contract manages deposits, withdrawals, and rewards for a staking protocol, including commission handling and shutdown mechanisms.",
      "explanation": "This Clarity smart contract is designed for a staking protocol on the Stacks blockchain, facilitating the deposit of STX tokens in exchange for stSTX (a staking token), the initiation and processing of withdrawals, and the addition of staking rewards. It interacts with other contracts through traits and includes mechanisms for handling commissions and shutting down deposits.\n\n- Constants <L8-14> define error codes and the maximum commission rate.\n- Variables <L18-21> set the initial commission rate and a shutdown flag for deposits.\n- Maps <L25-42> store information about staking cycles and withdrawals by NFT ID.\n- Getters <L46-85> provide read-only access to contract state, including commission rates, shutdown status, cycle information, and STX balances.\n- The `get-stx-per-ststx` function <L89-107> calculates the exchange rate between STX and stSTX, essential for deposits and withdrawals.\n- The `deposit` function <L111-140> allows users to deposit STX in exchange for stSTX, updating the cycle info and transferring STX to the reserve contract.\n- The `init-withdraw` function <L144-177> initiates a withdrawal process, locking the stSTX amount and minting a withdrawal NFT for the user.\n- The `withdraw` function <L181-228> processes the actual withdrawal, transferring STX to the user, burning the stSTX and the withdrawal NFT.\n- The `add-rewards` function <L232-265> allows adding STX rewards for a specific cycle, calculating and setting aside a commission.\n- Admin functions <L269-292> enable updating the commission rate and the shutdown status of deposits, ensuring only authorized users (checked via the DAO contract) can perform these actions.\n\nThroughout, the contract uses `try!` for critical external calls, ensuring that any failure in these calls will halt execution. It also employs `asserts!` to enforce various conditions, such as ownership checks and cycle timing.",
      "tags": [
        "staking",
        "DeFi",
        "protocol",
        "NFT",
        "commission"
      ]
    }
  },
  {
    "rank": 155,
    "contract": "SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-router-v1b",
    "calls": 167,
    "source": "(use-trait sip-010-token .sip-010-v1a.sip-010-trait)\n(use-trait liquidity-token .liquidity-token-trait-v4c.liquidity-token-trait)\n\n(define-constant ERR_INVALID_ROUTER (err u4162))\n(define-constant ERR_INEFFICIENT_AMOUNT_FROM  (err u90001))\n(define-constant ERR_INEFFICIENT_AMOUNT_BRIDGE  (err u90002))\n(define-constant ERR_INEFFICIENT_AMOUNT_TO  (err u90003))\n\n(define-public (router-swap\n  (from <sip-010-token>) \n  (bridge <sip-010-token>)\n  (to <sip-010-token>)\n  (from-lp <liquidity-token>)\n  (to-lp <liquidity-token>)\n  (from-type bool)\n  (to-type bool)\n  (from-amt uint)\n  (from-2-bridge-min-amt uint)\n  (bridge-2-to-min-amt uint)\n)\n  (let\n    (\n        (pre_from_amt (unwrap-panic (contract-call? from get-balance tx-sender)))\n        (pre_bridge_amt (unwrap-panic (contract-call? bridge get-balance tx-sender)))\n        (pre_to_amt (unwrap-panic (contract-call? to get-balance tx-sender)))\n    )\n    (asserts! (contract-call? .stackswap-security-list-v1a is-secure-router-or-user contract-caller) ERR_INVALID_ROUTER)\n    (asserts! (>= (unwrap-panic (contract-call? from get-balance tx-sender)) from-amt) ERR_INEFFICIENT_AMOUNT_FROM)\n    (if (and from-type true)\n        (begin\n            (try! (contract-call? .stackswap-swap-v5k swap-x-for-y from bridge from-lp from-amt from-2-bridge-min-amt))\n        )\n        (begin\n            (try! (contract-call? .stackswap-swap-v5k swap-y-for-x bridge from from-lp from-amt from-2-bridge-min-amt))\n        )\n    )\n    (let\n        (\n            (after_bridge_amt (unwrap-panic (contract-call? bridge get-balance tx-sender)))\n            (delta_bridge_amt (- after_bridge_amt pre_bridge_amt))\n        )\n        (if (and to-type true)\n            (begin\n                (try! (contract-call? .stackswap-swap-v5k swap-x-for-y bridge to to-lp delta_bridge_amt bridge-2-to-min-amt))\n            )\n            (begin\n                (try! (contract-call? .stackswap-swap-v5k swap-y-for-x to bridge to-lp delta_bridge_amt bridge-2-to-min-amt))\n            )\n        )\n        (let\n            (\n                (after_to_amt (unwrap-panic (contract-call? to get-balance tx-sender)))\n                (delta_to_amt (- after_to_amt pre_to_amt))\n            )\n\n            (ok (list from-amt delta_bridge_amt delta_to_amt))\n        )\n        \n    )\n  )\n)",
    "analysis": {
      "summary": "This contract facilitates a multi-step swap operation between different tokens on the Stacks blockchain, utilizing a bridge token as an intermediary.",
      "explanation": "The contract defines a public function `router-swap` that orchestrates a swap operation from one token to another through an intermediary (bridge) token. It involves liquidity pools and checks for secure routing.\n\n- **Use of Traits (<L1-2>):** It starts by declaring the use of two traits, `sip-010-token` for standard token operations and `liquidity-token` for liquidity pool interactions, ensuring that any tokens or liquidity pools interacted with adhere to these standards.\n\n- **Error Constants (<L4-7>):** Defines constants for various error conditions that might occur during the swap process.\n\n- **router-swap Function (<L9-46>):**\n  - **Parameter Definitions (<L10-18>):** Accepts parameters for the source (`from`), bridge, and destination (`to`) tokens, their corresponding liquidity pools (`from-lp`, `to-lp`), types indicating the direction of swap (`from-type`, `to-type`), and amounts related to the swap operation.\n  - **Balance Checks (<L20-22>):** Before proceeding with the swap, it checks the balances of the `from`, `bridge`, and `to` tokens in the caller's account to ensure they have enough funds.\n  - **Security Check (<L24>):** Verifies that the caller is a secure router or user by calling another contract, failing if not.\n  - **Sufficient Funds Assertion (<L25>):** Ensures the caller has enough of the `from` token to cover the swap amount.\n  - **Swap Execution (<L26-35>):** Depending on the `from-type`, it either swaps `from` to `bridge` or vice versa, using a specified liquidity pool and ensuring minimum amounts are met.\n  - **Bridge Amount Calculation (<L37-38>):** Calculates the change in the bridge token's balance to determine how much was effectively swapped.\n  - **Final Swap (<L39-48>):** Swaps the bridge token to the `to` token (or vice versa), again based on the `to-type` and using the delta from the bridge swap, concluding with the final token amounts swapped.\n\nThis function ultimately returns a list containing the original amount from the `from` token, the delta of the bridge token, and the delta of the `to` token, indicating the amounts involved in each step of the swap process.",
      "tags": [
        "DeFi",
        "swap",
        "liquidity-pool",
        "token",
        "router"
      ]
    }
  },
  {
    "rank": 156,
    "contract": "SP212Y5JKN59YP3GYG07K3S8W5SSGE4KH6B5STXER.sponsor-dex-v01",
    "calls": 167,
    "source": "(use-trait ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n\n(define-constant err-unauthorized (err u1000))\n\n(define-read-only (is-dao-or-extension)\n\t(ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) err-unauthorized)))\n\n(define-public (claim (token <ft-trait>) (amount uint) (recipient principal))\n\t(begin\n\t\t(try! (is-dao-or-extension))\n\t\t(as-contract (contract-call? token transfer amount tx-sender recipient none))\n\t)\n)\n\n(define-public (swap-helper (token-x <ft-trait>) (token-y <ft-trait>) (factor uint) (dx uint) (min-dy (optional uint)) (fee uint))\n\t(begin\n\t\t(try! (contract-call? token-x transfer fee tx-sender (as-contract tx-sender) none))\n\t\t(ok (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper token-x token-y factor dx min-dy))\n\t)\n)\n\n(define-public (swap-helper-a (token-x <ft-trait>) (token-y <ft-trait>) (token-z <ft-trait>) (factor-x uint) (factor-y uint) (dx uint) (min-dz (optional uint)) (fee uint))\n\t(begin\n\t\t(try! (contract-call? token-x transfer fee tx-sender (as-contract tx-sender) none))\n\t\t(ok (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-a token-x token-y token-z factor-x factor-y dx min-dz))\n\t)\n)\n\n(define-public (swap-helper-b\n\t\t(token-x <ft-trait>) (token-y <ft-trait>) (token-z <ft-trait>) (token-w <ft-trait>)\n\t\t(factor-x uint) (factor-y uint) (factor-z uint)\n\t\t(dx uint) (min-dw (optional uint)) (fee uint))\n\t(begin\n\t\t(try! (contract-call? token-x transfer fee tx-sender (as-contract tx-sender) none))\n\t\t(ok (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-b token-x token-y token-z token-w factor-x factor-y factor-z dx min-dw))\n\t)\n)\n\n(define-public (swap-helper-c\n\t\t(token-x <ft-trait>) (token-y <ft-trait>) (token-z <ft-trait>) (token-w <ft-trait>) (token-v <ft-trait>)\n\t\t(factor-x uint) (factor-y uint) (factor-z uint) (factor-w uint)\n\t\t(dx uint) (min-dv (optional uint)) (fee uint))\n\t(begin\n\t\t(try! (contract-call? token-x transfer fee tx-sender (as-contract tx-sender) none))\n\t\t(ok (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper-c token-x token-y token-z token-w token-v factor-x factor-y factor-z factor-w dx min-dv))\n\t)\n)",
    "analysis": {
      "summary": "This contract facilitates token operations such as claims and swaps, enforcing permissions through a DAO or its extensions.",
      "explanation": "The contract uses the SIP-010 Fungible Token Standard trait for token operations and introduces a permission model that restricts certain actions to a DAO or its extensions. Key functionalities include claiming tokens and assisting in token swaps with varying complexities.\n\n- The `use-trait` declaration <L1> imports the SIP-010 trait for fungible tokens, allowing this contract to interact with any token that implements this standard.\n\n- `err-unauthorized` <L3> defines a constant for an unauthorized access error, used across various functions to enforce permissions.\n\n- `is-dao-or-extension` <L5-7> is a read-only function that checks if the caller is the DAO or an approved extension, central to the contract's permission model.\n\n- `claim` <L9-13> allows the DAO or an extension to claim tokens on behalf of a recipient, showcasing the use of the `as-contract` call to execute token transfers.\n\n- `swap-helper`, `swap-helper-a`, `swap-helper-b`, and `swap-helper-c` <L15-37> are public functions designed to facilitate token swaps with increasing levels of complexity, from a simple swap between two tokens to more intricate swaps involving up to five tokens. These functions demonstrate advanced contract interactions, including transferring fees and calling another contract (`amm-pool-v2-01`) to perform the swap logic.\n\nEach swap function first transfers a fee from the caller to itself (as a contract) and then delegates the swap logic to the `amm-pool-v2-01` contract, passing through the necessary parameters. This pattern not only showcases inter-contract calls but also highlights the use of optional types for minimum return amounts in swaps, allowing users to specify slippage tolerance.\n\nOverall, the contract leverages Clarity's capabilities for creating secure, permissioned financial operations on the Stacks blockchain, utilizing traits, contract calls, and permission checks to ensure that only authorized entities can perform certain actions.",
      "tags": [
        "fungible-token",
        "DeFi",
        "DAO",
        "protocol",
        "swap"
      ]
    }
  },
  {
    "rank": 157,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.router-stx-ststx-bitflow-velar-v-1-2",
    "calls": 166,
    "source": ";; router-stx-ststx-bitflow-velar-v-1-2\n\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait)\n\n(define-constant ERR_NOT_AUTHORIZED (err u1001))\n(define-constant ERR_INVALID_AMOUNT (err u1002))\n(define-constant ERR_INVALID_PRINCIPAL (err u1003))\n(define-constant ERR_ALREADY_ADMIN (err u2001))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u2002))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u2003))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u2004))\n(define-constant ERR_SWAP_STATUS (err u4001))\n(define-constant ERR_MINIMUM_RECEIVED (err u4002))\n(define-constant ERR_SWAP_A (err u5001))\n(define-constant ERR_SWAP_B (err u5002))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var swap-status bool true)\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n(define-read-only (get-quote-a\n    (amount uint)\n    (id uint) (reversed bool)\n    (swap-fee (tuple (num uint) (den uint)))\n  )\n  (let (\n    (velar-pool (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-core do-get-pool id))\n    (r0 (if (is-eq reversed true)\n            (get reserve1 velar-pool)\n            (get reserve0 velar-pool)))\n    (r1 (if (is-eq reversed true)\n            (get reserve0 velar-pool)\n            (get reserve1 velar-pool)))\n    (quote-a (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-library get-amount-out\n                   amount\n                   r0 r1\n                   swap-fee)))\n    (quote-b (unwrap-panic (contract-call?\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 get-dy\n                           'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                           quote-a)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-read-only (get-quote-b\n    (amount uint)\n    (id uint) (reversed bool)\n    (swap-fee (tuple (num uint) (den uint)))\n  )\n  (let (\n    (velar-pool (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-core do-get-pool id))\n    (r0 (if (is-eq reversed true)\n            (get reserve1 velar-pool)\n            (get reserve0 velar-pool)))\n    (r1 (if (is-eq reversed true)\n            (get reserve0 velar-pool)\n            (get reserve1 velar-pool)))\n    (quote-a (unwrap-panic (contract-call?\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 get-dx\n                           'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                           'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                           amount)))\n    (quote-b (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-library get-amount-out\n                   quote-a\n                   r0 r1\n                   swap-fee)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (set-swap-status (status bool))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (var-set swap-status status)\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller-in-list (index-of admins-list tx-sender))\n    (admin-to-remove-in-list (index-of admins-list admin))\n    (caller tx-sender)\n  )\n    (asserts! (is-some caller-in-list) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some admin-to-remove-in-list) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removeable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (id uint)\n    (token0 <ft-trait>) (token1 <ft-trait>)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (unwrap! (velar-a id token0 token1 token-in token-out share-fee-to amount) ERR_SWAP_A))\n    (swap-b (unwrap! (bitflow-a swap-a) ERR_SWAP_B))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-a\",\n        caller: caller, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          id: id,\n          token0: (contract-of token0),\n          token1: (contract-of token1),\n          token-in: (contract-of token-in),\n          token-out: (contract-of token-out),\n          share-fee-to: (contract-of share-fee-to)\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (id uint)\n    (token0 <ft-trait>) (token1 <ft-trait>)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n  )\n  (let (\n    (swap-a (unwrap! (bitflow-b amount) ERR_SWAP_A))\n    (swap-b (unwrap! (velar-a id token0 token1 token-in token-out share-fee-to swap-a) ERR_SWAP_B))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-b\",\n        caller: caller, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          id: id,\n          token0: (contract-of token0),\n          token1: (contract-of token1),\n          token-in: (contract-of token-in),\n          token-out: (contract-of token-out),\n          share-fee-to: (contract-of share-fee-to)\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-private (bitflow-a (x-amount uint))\n  (let (\n    (swap-a (try! (contract-call?\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 swap-x-for-y\n                  'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                  x-amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (bitflow-b (y-amount uint))\n  (let (\n    (swap-a (try! (contract-call?\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-stx-ststx-v-1-2 swap-y-for-x\n                  'SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token\n                  'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stx-ststx-lp-token-v-1-2\n                  y-amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (velar-a\n    (id uint)\n    (token0 <ft-trait>) (token1 <ft-trait>)\n    (token-in <ft-trait>) (token-out <ft-trait>)\n    (share-fee-to <share-fee-to-trait>)\n    (amt-in uint)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n                  id \n                  token0 token1\n                  token-in token-out\n                  share-fee-to\n                  amt-in u1)))\n  )\n    (ok (get amt-out swap-a))\n  )\n)\n\n(define-private (admin-not-removeable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)\n",
    "analysis": {
      "summary": "This contract facilitates token swaps on the Stacks blockchain, managing swap operations, admin roles, and swap status.",
      "explanation": "The contract defines a decentralized exchange mechanism, allowing users to swap between different tokens. It includes administrative functions to manage swap settings and permissions.\n\n- **Use of Traits (<L1-2>)**: Implements SIP-010 for fungible tokens and a custom trait for sharing fees, ensuring compatibility with the Stacks token standard and fee sharing mechanism.\n- **Constants (<L4-14>)**: Defines error codes for various failure states, enhancing contract readability and debugging.\n- **Contract Deployer (<L16>)**: Stores the contract deployer's address for reference in admin management.\n- **Data Variables (<L18-22>)**: Holds the list of admins, a helper for admin removal, and the swap status flag.\n- **Admin Functions (<L24-84>)**: Include adding/removing admins and checking admin status. Notably, `add-admin` and `remove-admin` ensure only current admins can modify the list, with checks against the total admin limit and ensuring the contract deployer cannot be removed.\n- **Swap Status Management (<L86-97>)**: Allows admins to enable or disable swapping functionality, providing control over the contract's operational status.\n- **Quote Functions (<L99-144>)**: `get-quote-a` and `get-quote-b` calculate the output amount for a given input, using external contracts for price calculation. These functions demonstrate complex interactions with other smart contracts and the use of the `try!` and `unwrap-panic` patterns for error handling.\n- **Swap Helper Functions (<L146-216>)**: Facilitate the actual swap operations, calling into other contracts to perform the swaps and ensuring conditions such as minimum received amounts are met. These functions highlight the contract's core functionality, integrating multiple components of the Stacks DeFi ecosystem.\n- **Private Helper Functions (<L218-255>)**: `bitflow-a` and `bitflow-b` abstract the swap logic for different directions of swap, while `velar-a` handles the token swap logic, interfacing with a Uniswap-like router.\n- **Admin Helper (<L257-259>)**: A utility function for admin management, used in the process of removing an admin.\n\nOverall, this contract serves as a bridge in the DeFi ecosystem on Stacks, enabling token swaps while providing administrative controls over its operations.",
      "tags": [
        "DeFi",
        "token-swap",
        "admin-management",
        "protocol"
      ]
    }
  },
  {
    "rank": 158,
    "contract": "SPJAKB2ZMXJJJHTDJ6A7Q3A4P714H6CMGPERQ9M7.grinch-stole-christmas-stxcity-dex",
    "calls": 164,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u100000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP359XMJYWRDY24H7VDYJWKPAGHN75V8M0W1NBF3P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SPJAKB2ZMXJJJHTDJ6A7Q3A4P714H6CMGPERQ9M7.grinch-stole-christmas-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u99667774086378)\n    (var-set stx-balance u1333333)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX.",
      "explanation": "The contract facilitates the buying and selling of a predefined token using a bonding curve to determine prices. It has no owner privileges, ensuring decentralized operation. Key components include:\n\n- **SIP-010 Trait Usage (<L1>)**: Implements the SIP-010 Fungible Token Standard trait for token operations.\n- **Error Constants (<L4-11>)**: Defines various error codes for handling exceptions.\n- **Bonding Curve Configuration (<L15-18>)**: Sets parameters like target STX amount and fees.\n- **Fee and Wallet Addresses (<L20-23>)**: Specifies addresses for fees and token distribution.\n- **Data Variables (<L26-31>)**: Tracks the contract's state, including whether trading is enabled and balances of STX and tokens.\n- **Public Functions**: \n  - `buy` (<L33-85>): Allows users to purchase tokens with STX at the current bonding curve rate. It calculates fees, updates balances, and handles token distribution. If the STX target is reached, it triggers distribution of tokens and STX to specified addresses, adjusts supply, and disables further trading.\n  - `sell` (<L86-120>): Enables users to sell tokens back to the contract in exchange for STX, based on the current curve.\n- **Read-Only Functions**: \n  - `get-buyable-tokens` (<L121-144>): Calculates the amount of tokens one can buy with a specified amount of STX.\n  - `get-sellable-stx` (<L145-168>): Estimates the amount of STX one can receive for a given amount of tokens.\n  - `get-tradable` (<L169-171>): Checks if trading is currently enabled.\n\nThe contract initializes with predefined balances and settings (<L173-180>), including a mechanism to transfer STX to an address upon initialization. It's designed to automatically adjust its operations based on the STX and token balances, aiming to reach a target STX amount for successful completion of its bonding curve phase.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "protocol",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 159,
    "contract": "SP3YY9K5QF54W0KTHKNA3SEPMR1B3GTB75BBPJWH0.rocket-van-stxcity-dex",
    "calls": 164,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u152097701000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u10000000000)\n(define-constant VIRTUAL_STX_VALUE u2000000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u200000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP3YY9K5QF54W0KTHKNA3SEPMR1B3GTB75BBPJWH0.rocket-van-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u136889299792997)\n    (var-set stx-balance u222200000)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX.",
      "explanation": "The contract facilitates the buying and selling of a predefined token using a bonding curve to determine prices dynamically. It features a mechanism to transfer tokens and STX between users and the contract, calculate transaction fees, and manage the supply and demand through virtual balances. Notably, it includes a target STX amount that, once reached, triggers the distribution of assets to specified addresses and adjusts the contract's tradable status.\n\n- The contract uses the SIP-010 trait for token standards, ensuring compatibility with Stacks tokens <L1>.\n- Error constants define various failure states for transactions <L4-11>.\n- Constants are set for the token supply, DEX address, bonding curve configuration, fee structure, and specific wallets <L13-27>.\n- Tradable status, virtual STX amount, token and STX balances, and percentage values for burning and deployer shares are managed through data variables <L29-34>.\n- The `buy` function allows users to purchase tokens with STX, adjusting balances and fees, and checking for the completion of the bonding curve target <L36-80>.\n- The `sell` function facilitates the exchange of tokens for STX, with fee deductions and balance updates <L82-117>.\n- `get-buyable-tokens` and `get-sellable-stx` are read-only functions that calculate the exchange rates for buying and selling, respectively, based on the current state of the contract <L119-156>.\n- The contract initialization sets initial values and performs a token transfer as a setup action <L158-166>.\n\nThis contract is designed without ownership privileges, emphasizing a decentralized approach. It employs a unique mechanism where the trading functionality can be toggled and uses a bonding curve to dynamically adjust prices based on supply and demand.",
      "tags": [
        "DeFi",
        "DEX",
        "bonding-curve",
        "protocol",
        "trading",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 160,
    "contract": "SP1QMFV1W1T3CX70W6V95VWGSBJA3WFMVZRABE1FN.stableswap-usda-aeusdc-v-1-2",
    "calls": 160,
    "source": "(define-constant A tx-sender)\n\n\n;;usda-usdc\n(define-public (swap-x-for-y (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\ta0 u0)))\n\t(a1 (unwrap-panic (element-at b0 u1)))\n\t(a2 (unwrap-panic (contract-call?\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-x-for-y\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2\n\t\ta1 u0)))\n\t(b2 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu6\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta2 u1)))\n\t(a3 (get amt-out b2))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))\n\n(define-public (swap-y-for-x (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu6\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta0 u1)))\n\t(a1 (get amt-out b0))\n\t(a2 (unwrap-panic (contract-call?\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-y-for-x\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2\n\t\ta1 u0)))\n\t(b2 (try! (contract-call?\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\ta2 u0)))\n\t(a3 (unwrap-panic (element-at b2 u0)))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))\n\n(define-public (swap-helper (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l\n\t\ta0 u0)))\n\t(a1 (unwrap-panic (element-at b0 u1)))\n\t(a2 (unwrap-panic (contract-call?\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-x-for-y\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2\n\t\ta1 u0)))\n\t(b2 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu6\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta2 u1)))\n\t(a3 (get amt-out b2))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))\n\n(define-public (swap-helper-a (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\tu6\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\ta0 u1)))\n\t(a1 (get amt-out b0))\n\t(a2 (unwrap-panic (contract-call?\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-y-for-x\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2\n\t\ta1 u0)))\n\t(b2 (try! (contract-call?\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5k0yl5ot8l\n\t\ta2 u0)))\n\t(a3 (unwrap-panic (element-at b2 u0)))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))\n\n(define-public (add-liquidity (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\ta0 u0)))\n\t(a1 (unwrap-panic (element-at b0 u1)))\n\t(a2 (unwrap-panic (contract-call?\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-x-for-y\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2\n\t\ta1 u0)))\n\t(b2 (try! (contract-call?\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-waeusdc\n\t\tu100000000 (* a2 u100) none)))\n\t(a3 (/ (get dx b2) u100))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))\n\n(define-public (reduce-liquidity (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t(b0 (try! (contract-call?\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx\n\t\t'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-waeusdc\n\t\tu100000000 (* a0 u100) none)))\n\t(a1 (/ (get dy b0) u100))\n\t(a2 (unwrap-panic (contract-call?\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-y-for-x\n\t\t'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\t'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2\n\t\ta1 u0)))\n\t(b2 (try! (contract-call?\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token\n\t\ta2 u0)))\n\t(a3 (unwrap-panic (element-at b2 u0)))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t))))",
    "analysis": {
      "summary": "This contract facilitates the swapping and liquidity management of tokens on the Stacks blockchain, leveraging multiple decentralized finance (DeFi) protocols.",
      "explanation": "This Clarity smart contract is designed to interact with various DeFi protocols on the Stacks blockchain to perform token swaps and manage liquidity. It includes functions for swapping tokens, adding liquidity, and reducing liquidity. The contract uses `contract-call?` to interact with external contracts and `asserts!` to ensure that only the contract deployer can call its public functions.\n\n- The `swap-x-for-y`, `swap-y-for-x`, `swap-helper`, and `swap-helper-a` functions allow users to swap tokens through different routes, utilizing different DeFi protocols like Arkadiko, Stableswap, and a UniV2-like router. These functions ensure that the swap results in a favorable outcome by comparing the output amount with the input amount.\n\n- The `add-liquidity` and `reduce-liquidity` functions are designed to interact with liquidity pools, allowing users to add or remove liquidity. These functions also ensure that the operation is profitable by comparing the output amount with the input amount.\n\n- The contract uses `stx-transfer?` to handle STX transfers, ensuring that transactions are performed as contracts, which allows for more complex interactions and state changes within a single transaction.\n\n- The contract heavily relies on the `unwrap-panic` function to handle the responses from external contract calls. This approach assumes that the external calls will succeed and will cause the transaction to abort if they fail, ensuring that the contract state remains consistent.\n\n- The contract uses `element-at` to extract specific values from tuples returned by external contract calls, demonstrating how to handle complex data structures returned by Clarity functions.",
      "tags": [
        "DeFi",
        "token-swap",
        "liquidity-management",
        "protocol-interaction"
      ]
    }
  },
  {
    "rank": 161,
    "contract": "SPV8C2N59MA417HYQNG6372GCV0SEQE01EV4Z1RQ.rooooons-cash-out",
    "calls": 159,
    "source": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; This contract allow Stacks Invaders holders to check ROOOONS and transfer them\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Data declarations  \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n;;'SP14NS8MVBRHXMM96BQY0727AJ59SWPV7RMHC0NCG.pontis-bridge-ROONS\n;; SP253J64EGMH59TV32CQXXTVKH5TQVGN108TA5TND.fair-bonding-curve\n;; Constants and other data\n(define-constant DEPLOYER tx-sender )\n(define-data-var artist-address principal 'SP30MSY8NECE4SJJRQ5NVFZA58HF9Y93XX6E15WMG)\n(define-data-var burn-address principal 'SP000000000000000000002Q6VF78)\n\n\n;; error codes\n(define-constant ERR-NOT-AUTHORIZED u104)\n(define-constant ERR-INVALID-USER u105)\n(define-constant ERR-PAUSED u109)\n(define-constant ERR-BLOCK-NOT-FOUND-FOR-TOKEN u404)\n(define-constant ERR-BURNT-TOKEN u403)\n(define-constant ERR-TRANSFER-ERROR u500)\n(define-constant ERR-DOUBLE-SPEND u009)\n\n\n;; Internal variables\n\n(define-data-var claim-paused bool true)\n(define-map claimed-tokens\n    {token-id: uint}\n    {block-id: uint, miner: principal}\n)\n\n;; Functions\n;;; low-level functions\n(define-private\n  (transfer-call\n   (user  principal)\n   (amt   uint))\n\n  (let ((protocol (as-contract tx-sender)))\n    (ok (if (> amt u0)\n        (try!\n         (as-contract\n          (contract-call?\n           'SP14NS8MVBRHXMM96BQY0727AJ59SWPV7RMHC0NCG.pontis-bridge-ROONS transfer amt protocol user none)))\n        true)) )\n)\n\n;; fund the contract with ROOOONS\n(define-public (fund-rooons (amt   uint))\n    (begin       \n        (try!\n          (contract-call?\n           'SP14NS8MVBRHXMM96BQY0727AJ59SWPV7RMHC0NCG.pontis-bridge-ROONS transfer amt tx-sender .rooooons-cash-out none))\n      (ok true)\n    )\n)\n\n;; Claim ROOOONS\n(define-public (claim-rooons (token-id uint) )\n  (let \n    (\n      (token-uri (default-to \"NOT_FOUND\" (unwrap! (contract-call? 'SPV8C2N59MA417HYQNG6372GCV0SEQE01EV4Z1RQ.stacks-invaders-v0 get-token-uri token-id) (err ERR-BLOCK-NOT-FOUND-FOR-TOKEN))))\n     ;; (token-uri  \"ipfs://ipfs/QmeLBGNTKeUYU6bxxVWh5A2BPxjvweVZddSCVEfR7jWBXr/153184.json\")\n      (uri_found (asserts! ( is-eq false (is-eq token-uri \"NOT_FOUND\")) (err ERR-BLOCK-NOT-FOUND-FOR-TOKEN)))\n      (owner-principal (default-to (var-get burn-address) (unwrap! (contract-call? 'SPV8C2N59MA417HYQNG6372GCV0SEQE01EV4Z1RQ.stacks-invaders-v0 get-owner token-id) (err ERR-BLOCK-NOT-FOUND-FOR-TOKEN))))\n      (owner_found (asserts! ( is-eq false (is-eq owner-principal (var-get burn-address))) (err ERR-BURNT-TOKEN)))\n      (block-id (default-to u100 (get block-id (map-get? claimed-tokens (tuple ( token-id token-id ))))))\n      (token_claimed (asserts! ( is-eq true (is-eq block-id u100)) (err ERR-DOUBLE-SPEND)))\n    )\n    (asserts! (or (is-eq false (var-get claim-paused)) (is-eq tx-sender DEPLOYER) (is-eq tx-sender (var-get artist-address))) (err ERR-PAUSED)) ;; check if claim is on/off\n    (asserts! (is-eq owner-principal tx-sender) (err ERR-NOT-AUTHORIZED))  ;; check NFT ownership\n    (asserts! ( is-eq true (is-eq block-id u100)) (err ERR-DOUBLE-SPEND))  ;; check if token already claimed\n  ;; Change data from here on:\n    (begin       \n    ;;(if (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER))  \n    (try! (transfer-call owner-principal u1000000000)) ;;  (err ERR-TRANSFER-ERROR)\n    (map-set claimed-tokens { token-id: token-id } { block-id: block-height , miner: tx-sender })   \n    (print { notification: \"rooons-claim-successful\", payload: { token-id: token-id }})\n    (ok true)\n    )    \n)\n)\n\n\n;; Claim ROOOONS 10 IDs\n(define-public (claim-rooons-10 (token-id-01 uint) (token-id-02 uint) (token-id-03 uint) (token-id-04 uint) (token-id-05 uint) (token-id-06 uint) (token-id-07 uint) (token-id-08 uint) (token-id-09 uint) (token-id-10 uint) )\n    (begin       \n    (try! (claim-rooons token-id-01 )) \n    (try! (claim-rooons token-id-02 ))\n    (try! (claim-rooons token-id-03 ))\n    (try! (claim-rooons token-id-04 ))\n    (try! (claim-rooons token-id-05 ))\n    (try! (claim-rooons token-id-06 ))\n    (try! (claim-rooons token-id-07 ))\n    (try! (claim-rooons token-id-08 ))\n    (try! (claim-rooons token-id-09 ))\n    (try! (claim-rooons token-id-10 ))\n    (ok true)\n    )    \n)\n\n;; check ROOOONS balance\n(define-read-only (check-rooons-balance (token-id uint))\n    (let\n        (\n            (block-id (default-to u1000 (get block-id (map-get? claimed-tokens (tuple ( token-id token-id ))))))\n            (roooons (if (is-eq block-id u1000) u1000 u0))   \n        )\n        (begin\n            (ok roooons)\n        )\n    )\n)\n;; On/Off and other variable settings\n;; Pause contract\n(define-public (pause-contract)\n  (begin\n  (asserts! (is-eq tx-sender DEPLOYER) (err ERR-INVALID-USER))\n  (var-set claim-paused true)\n  (ok true)\n)\n)\n;; Unpause contract\n(define-public (unpause-contract)\n    (begin\n  (asserts! (is-eq tx-sender DEPLOYER) (err ERR-INVALID-USER))\n  (var-set claim-paused false)\n  (ok true)\n)\n)\n(define-read-only (get-paused)\n  (ok (var-get claim-paused)))",
    "analysis": {
      "summary": "This contract enables Stacks Invaders NFT holders to claim and transfer a specific token (ROOOONS) associated with their NFTs.",
      "explanation": "This Clarity smart contract is designed for the Stacks blockchain, specifically for holders of Stacks Invaders NFTs to claim and transfer ROOOONS tokens. It utilizes the SIP-010 Fungible Token Standard for Stacks. The contract includes data declarations, error codes, internal variables, and functions for transferring tokens, funding the contract with ROOOONS, claiming ROOOONS, checking ROOOONS balance, and pausing or unpausing the contract.\n\n- The `use-trait` declaration <L3> imports the SIP-010 Fungible Token Standard trait, which ensures the contract adheres to the standard's interface for fungible tokens.\n- Constants and data variables <L7-15> define the contract deployer, artist address, burn address, and various error codes for handling exceptions.\n- The `claimed-tokens` map <L17> tracks which tokens have been claimed, associating token IDs with block IDs and the claimer's principal.\n- `transfer-call` <L20-30> is a private function that facilitates the transfer of ROOOONS tokens from the contract to a user.\n- `fund-rooons` <L32-39> allows funding the contract with ROOOONS tokens for future claims.\n- `claim-rooons` <L41-71> enables NFT holders to claim ROOOONS tokens by verifying ownership and whether the token has already been claimed. It also checks if the contract is paused and if the claimant is authorized.\n- `claim-rooons-10` <L73-86> allows claiming ROOOONS for 10 NFTs in one transaction, improving efficiency.\n- `check-rooons-balance` <L88-99> is a read-only function that checks the balance of ROOOONS tokens for a given token ID, indicating whether they have been claimed.\n- `pause-contract` and `unpause-contract` <L101-114> are administrative functions that allow the contract deployer to pause or unpause the claiming functionality, providing control over the contract's operation.\n- `get-paused` <L116-119> is a read-only function that returns the current pause state of the contract.\n\nOverall, this contract provides a mechanism for NFT holders to interact with associated tokens, incorporating checks for ownership, claim status, and administrative control.",
      "tags": [
        "NFT",
        "fungible-token",
        "DeFi",
        "token-claim"
      ]
    }
  },
  {
    "rank": 162,
    "contract": "SPGYCP878RYFVT03ZT8TWGPKNYTSQB1578VVXHGE.loupsi-dexterity",
    "calls": 158,
    "source": ";; LOUPSI - LP Token, AMM DEX and Hold-to-Earn Engine\n;; SPGYCP878RYFVT03ZT8TWGPKNYTSQB1578VVXHGE.loupsi-dexterity\n\n;; Implement SIP-010 trait\n(impl-trait 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-traits-v1.sip010-ft-trait)\n\n;; Define the LP token\n(define-fungible-token index)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant CONTRACT (as-contract tx-sender))\n(define-constant ERR_UNAUTHORIZED (err u401))\n(define-constant ERR_INVALID_FEE (err u402))\n(define-constant MAX_SWAP_FEE u50000) ;; 5%\n(define-constant FEE_DENOMINATION u1000000)\n(define-constant PRECISION u1000000)\n(define-constant MAX_ALPHA u1000000) ;; 1.0 in fixed point\n(define-constant MIN_ALPHA u0)       ;; 0.0 = constant sum (stableswap)\n                                     ;; 1.0 = constant product\n;; Storage\n(define-data-var owner principal DEPLOYER)\n(define-data-var alpha uint u1000000) ;; Default to constant product\n(define-data-var swap-fee uint u50000) ;; Default to 5%\n(define-data-var token-uri (optional (string-utf8 256)) \n  (some u\"https://charisma.rocks/api/v0/indexes/SPGYCP878RYFVT03ZT8TWGPKNYTSQB1578VVXHGE.loupsi-dexterity\"))\n(define-data-var first-start-block uint stacks-block-height)\n(define-map last-tap-block principal uint)\n\n;; Configuration functions\n(define-public (set-owner (new-owner principal))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set owner new-owner))))\n\n(define-public (set-swap-fee (new-fee uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (asserts! (<= new-fee MAX_SWAP_FEE) ERR_UNAUTHORIZED)\n    (ok (var-set swap-fee new-fee))))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if (is-eq contract-caller (var-get owner))\n    (ok (var-set token-uri (some value))) \n    ERR_UNAUTHORIZED))\n\n;; Core AMM operations\n(define-private (calculate-output-amount (x uint) (y uint) (dx uint) (amp uint))\n  (let (\n    ;; Constant sum portion (better for similar values)\n    (sum-term (/ (* dx y) x))\n    ;; Constant product portion (better for different values)\n    (product-term (/ (* dx y) (+ x dx)))\n    ;; Weighted sum of both terms\n    (weighted-output (+ (* (- PRECISION amp) sum-term) (* amp product-term))))\n    (/ weighted-output PRECISION)))\n\n(define-public (swap (forward bool) (amt-in uint))\n  (let (\n    (sender tx-sender)\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    (paid-energy (match (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 exhaust u10000000 sender) success true error false))\n    ;; Calculate effective input amount\n    (effective-in (if paid-energy amt-in (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION)))\n    ;; Calculate output with hybrid curve\n    (amt-out (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha))))\n    (try! (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-in sender CONTRACT none) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx transfer amt-in sender CONTRACT none)))\n    (try! (as-contract (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx transfer amt-out CONTRACT sender none)\n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-out CONTRACT sender none))))\n    (ok {amt-in: amt-in, amt-out: amt-out})))\n\n(define-public (mint (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (if (is-eq total-supply u0) amount (/ (* amount reserve0) total-supply)))\n    (token1-amount (if (is-eq total-supply u0) amount (/ (* amount reserve1) total-supply))))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token0-amount who CONTRACT none))\n    (try! (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx transfer token1-amount who CONTRACT none))\n    (try! (ft-mint? index amount who))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n(define-public (burn (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (/ (* amount reserve0) total-supply))\n    (token1-amount (/ (* amount reserve1) total-supply)))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (ft-burn? index amount who))\n    (try! (as-contract (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token0-amount CONTRACT who none)))\n    (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx transfer token1-amount CONTRACT who none)))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n;; Read functions\n(define-read-only (get-owner)\n  (ok (var-get owner)))\n\n(define-read-only (get-alpha)\n  (ok (var-get alpha)))\n\n(define-read-only (get-tokens)\n  (ok {token0: 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token, token1: 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx}))\n\n(define-read-only (get-swap-fee)\n  (ok (var-get swap-fee)))\n\n(define-read-only (get-reserves)\n  (ok {\n    token0: (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)),\n    token1: (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx get-balance CONTRACT))\n  }))\n\n(define-read-only (get-quote (forward bool) (amt-in uint) (apply-fee bool))\n  (let (\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-stx get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    (effective-in (if apply-fee (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION) amt-in)))\n    (ok (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha)))))\n\n;; SIP-010 Implementation\n(define-read-only (get-name)\n  (ok \"LOUPSI\"))\n\n(define-read-only (get-symbol)\n  (ok \"LPSi\"))\n\n(define-read-only (get-decimals)\n  (ok u6))\n\n(define-read-only (get-balance (who principal))\n  (ok (ft-get-balance index who)))\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply index)))\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri)))\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender from) ERR_UNAUTHORIZED)\n    (ft-transfer? index amount from to)))\n\n;; Hold-to-Earn functions\n(define-private (get-balance-at (data { address: principal, block: uint }))\n    (let ((target-block (get block data)))\n        (if (< target-block stacks-block-height)\n            (let ((block-hash (unwrap-panic (get-stacks-block-info? id-header-hash target-block))))\n                (at-block block-hash (unwrap-panic (get-balance (get address data)))))\n                (unwrap-panic (get-balance (get address data))))))\n\n(define-private (calculate-trapezoid-areas-39 (balances (list 39 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u18)) (unwrap-panic (element-at balances u19))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u19)) (unwrap-panic (element-at balances u20))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u20)) (unwrap-panic (element-at balances u21))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u21)) (unwrap-panic (element-at balances u22))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u22)) (unwrap-panic (element-at balances u23))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u23)) (unwrap-panic (element-at balances u24))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u24)) (unwrap-panic (element-at balances u25))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u25)) (unwrap-panic (element-at balances u26))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u26)) (unwrap-panic (element-at balances u27))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u27)) (unwrap-panic (element-at balances u28))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u28)) (unwrap-panic (element-at balances u29))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u29)) (unwrap-panic (element-at balances u30))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u30)) (unwrap-panic (element-at balances u31))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u31)) (unwrap-panic (element-at balances u32))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u32)) (unwrap-panic (element-at balances u33))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u33)) (unwrap-panic (element-at balances u34))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u34)) (unwrap-panic (element-at balances u35))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u35)) (unwrap-panic (element-at balances u36))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u36)) (unwrap-panic (element-at balances u37))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u37)) (unwrap-panic (element-at balances u38))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-19 (balances (list 19 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-9 (balances (list 9 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-5 (balances (list 5 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-2 (balances (list 2 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)))\n\n(define-private (calculate-balance-integral-39 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-39 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u38))\n        (areas (calculate-trapezoid-areas-39 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-19 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-19 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u18))\n        (areas (calculate-trapezoid-areas-19 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-9 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-9 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u8))\n        (areas (calculate-trapezoid-areas-9 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-5 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-5 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u4))\n        (areas (calculate-trapezoid-areas-5 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-2 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-2 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u1))\n        (areas (calculate-trapezoid-areas-2 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral (address principal) (start-block uint) (end-block uint))\n    (let (\n        (block-difference (- end-block start-block))\n        (thresholds (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 get-thresholds))))\n        (if (>= block-difference (get threshold-39-point thresholds)) (calculate-balance-integral-39 address start-block end-block)\n        (if (>= block-difference (get threshold-19-point thresholds)) (calculate-balance-integral-19 address start-block end-block)\n        (if (>= block-difference (get threshold-9-point thresholds)) (calculate-balance-integral-9 address start-block end-block)\n        (if (>= block-difference (get threshold-5-point thresholds)) (calculate-balance-integral-5 address start-block end-block)\n        (calculate-balance-integral-2 address start-block end-block)))))))\n\n(define-read-only (get-last-tap-block (address principal))\n    (default-to (var-get first-start-block) (map-get? last-tap-block address)))\n\n(define-public (tap)\n  (let (\n    (sender tx-sender)\n    (end-block stacks-block-height)\n    (start-block (get-last-tap-block sender))\n    (balance-integral (calculate-balance-integral sender start-block end-block))\n    (incentive-score (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.aura get-incentive-score CONTRACT))\n    (circulating-supply (unwrap-panic (get-total-supply)))\n    (potential-energy (/ (* balance-integral incentive-score) circulating-supply)))\n    (map-set last-tap-block sender end-block)\n    (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 energize potential-energy sender)))\n    \n(begin\n  (mint DEPLOYER u100000000)\n)    \n",
    "analysis": {
      "summary": "This contract implements a hybrid Automated Market Maker (AMM) and a Hold-to-Earn mechanism on the Stacks blockchain, leveraging SIP-010 for fungible token standards.",
      "explanation": "The contract defines a fungible token (LP token) for liquidity providers, implements swap functionality with a hybrid constant product and constant sum formula for price determination, and includes features for minting, burning, and transferring LP tokens. It also integrates a hold-to-earn system that rewards users based on their LP token holdings over time. Key components include:\n\n- **SIP-010 Implementation**: Ensures compatibility with the Stacks fungible token standard, facilitating interoperability with other contracts and wallets.\n\n- **LP Token Management**: Functions for minting (<L120-140>), burning (<L142-162>), and transferring (<L164-167>) LP tokens allow users to interact with the liquidity pool, providing liquidity or removing it.\n\n- **Swap Functionality**: A core feature (<L88-96>) that allows users to swap between two tokens. It calculates the output amount using a hybrid formula that balances between constant product and constant sum models, depending on the 'alpha' parameter which adjusts the weight given to each model.\n\n- **Dynamic Swap Fee**: The contract allows the owner to adjust the swap fee (<L70-73>), offering flexibility in how transaction costs are managed within the ecosystem.\n\n- **Hold-to-Earn Mechanism**: Through a series of complex calculations (<L169-277>), the contract measures the 'energy' a user has contributed to the ecosystem by holding tokens over time. This is then used to distribute rewards, encouraging long-term holding.\n\n- **Owner Privileges**: Several functions (<L58-67>) are restricted to the contract owner, including setting the swap fee, the token URI, and transferring ownership. This centralizes certain controls for administrative purposes.\n\nOverall, the contract is designed to incentivize liquidity provision and long-term holding within its ecosystem, while providing a flexible and adjustable AMM model.",
      "tags": [
        "AMM",
        "DEX",
        "DeFi",
        "Hold-to-Earn",
        "SIP-010",
        "fungible-token"
      ]
    }
  },
  {
    "rank": 163,
    "contract": "SP17Y3F4K7MTJH4724RMTZFZ2V15AJFWGJSAJP2YZ.amm-swap-pool-v1-1",
    "calls": 157,
    "source": ";; hello-world contract\n\n(define-constant sender 'SP3F287FKZM88HN3W1QEWR7GG8YMECV7A4EKDCQGP)\n(define-constant recipient 'SP28ADSCPCT4FF6SJQA5MZJXA1GRBWBKNAZK6X7ES)\n\n(define-constant ERR-NOT-AUTHORIZED u401)\n(define-constant ERR-ALL-MINTED u101)\n(define-constant ERR-COOLDOWN u102)\n\n(define-constant CONTRACT-OWNER tx-sender)\n\n;; two\n(define-public (borrow (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-welsh-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-welsh-wstx-alex-amm (* b1 u100))))\n  )\n    (begin\n      (asserts! (> b2 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (mint (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-welsh-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-welsh-wstx-arkadiko (/ b1 u100))))\n  )\n    (begin\n      (asserts! (> (* b2 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-x-for-y (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-alex-wstx-alex-amm b1)))\n  )\n    (begin\n      (asserts! (> b2 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-y-for-x (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-alex-wstx-alex-fixed b1)))\n  )\n    (begin\n      (asserts! (> b2 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-x-for-z (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-alex-amm b1)))\n  )\n    (begin\n      (asserts! (> b2 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-z-for-x (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-arkadiko b1)))\n  )\n    (begin\n      (asserts! (> (* b2 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-y-for-z (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-alex-fixed b1)))\n  )\n    (begin\n      (asserts! (> b2 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-z-for-y (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-arkadiko b1)))\n  )\n    (begin\n      (asserts! (> (* b2 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-helper (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-alex-fixed b1)))\n  )\n    (begin\n      (asserts! (> b2 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n(define-public (swap-helper-a (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-wstx-alex-amm b1)))\n  )\n    (begin\n      (asserts! (> b2 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2))\n  )\n)\n\n;;three\n\n(define-public (swap-helper-b (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-alex-usda-alex-simple b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko (/ b2 u100))))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (swap-helper-c (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-alex-alex-simple (* b1 u100))))\n    (b3 (unwrap-panic (swap-alex-wstx-alex-fixed b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (add-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-alex-usda-alex-simple b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko (/ b2 u100))))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (reduce-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-alex-alex-simple (* b1 u100))))\n    (b3 (unwrap-panic (swap-alex-wstx-alex-amm b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (swap-helper-to-amm (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-alex-diko-alex-amm b1)))\n    (b3 (unwrap-panic (swap-diko-wstx-arkadiko (/ b2 u100))))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (swap-helper-from-amm (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-diko-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-diko-alex-alex-amm (* b1 u100))))\n    (b3 (unwrap-panic (swap-alex-wstx-alex-fixed b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (add-to-position (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-alex-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-alex-diko-alex-amm b1)))\n    (b3 (unwrap-panic (swap-diko-wstx-arkadiko (/ b2 u100))))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (reduce-position (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-diko-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-diko-alex-alex-amm (* b1 u100))))\n    (b3 (unwrap-panic (swap-alex-wstx-alex-amm b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (deposit (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-usda-arkadiko b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> b3 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (burn (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-xbtc-arkadiko b1)))\n    (b3 (unwrap-panic (swap-xbtc-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> b3 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (create-pool (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-amm amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-usda-arkadiko b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (allow-deposit (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-xbtc-arkadiko b1)))\n    (b3 (unwrap-panic (swap-xbtc-wstx-alex-amm b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (claim (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-xbtc-alex-fixed amountIn)))\n    (b2 (unwrap-panic (swap-xbtc-usda-arkadiko b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> (* b3 u100) amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (claim-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-xbtc-arkadiko b1)))\n    (b3 (unwrap-panic (swap-xbtc-wstx-alex-fixed b2)))\n  )\n    (begin\n      (asserts! (> b3 (* amountIn u100)) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (withdraw-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-diko-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-diko-usda-arkadiko b1)))\n    (b3 (unwrap-panic (swap-usda-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> b3 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n(define-public (deposit-liquidity (amountIn uint))\n  (let (\n    (b1 (unwrap-panic (swap-wstx-usda-arkadiko amountIn)))\n    (b2 (unwrap-panic (swap-usda-diko-arkadiko b1)))\n    (b3 (unwrap-panic (swap-diko-wstx-arkadiko b2)))\n  )\n    (begin\n      (asserts! (> b3 amountIn) (err ERR-COOLDOWN))\n      (asserts! (is-eq CONTRACT-OWNER tx-sender) (err ERR-ALL-MINTED))\n    )\n    (ok (list amountIn b1 b2 b3))\n  )\n)\n\n\n\n;; Arkadiko\n(define-public (swap-wstx-usda-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-diko-usda-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-diko-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-wstx-diko-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-diko-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-wstx-xbtc-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-xbtc-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-xbtc-usda-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u1))))\n)\n\n(define-public (swap-usda-xbtc-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-wstx-welsh-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n(define-public (swap-welsh-wstx-arkadiko (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token dx u0))))\n  (ok (unwrap-panic (element-at r u0))))\n)\n\n;;Alex\n;;fixed\n(define-public (swap-wstx-xbtc-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u50000000 u50000000 dx (some u0)))))\n  (ok (get dy r)))\n)\n\n(define-public (swap-xbtc-wstx-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u50000000 u50000000 dx (some u0)))))\n  (ok (get dx r)))\n)\n\n(define-public (swap-wstx-alex-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u50000000 u50000000 dx (some u0)))))\n  (ok (get dy r)))\n)\n\n(define-public (swap-alex-wstx-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u50000000 u50000000 dx (some u0)))))\n  (ok (get dx r)))\n)\n\n(define-public (swap-wstx-xusd-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u50000000 u50000000 dx (some u0)))))\n  (ok (get dy r)))\n)\n\n(define-public (swap-xusd-wstx-alex-fixed (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u50000000 u50000000 dx (some u0)))))\n  (ok (get dx r)))\n)\n\n;;simple\n(define-public (swap-alex-usda-alex-simple (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.simple-weight-pool-alex swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda dx (some u0)))))\n  (ok (get dy r)))\n)\n\n(define-public (swap-usda-alex-alex-simple (dx uint))\n  (let ((r (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.simple-weight-pool-alex swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda dx (some u0)))))\n  (ok (get dx r)))\n)\n\n;;AMM Swap Pool\n(define-public (swap-wstx-welsh-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-welsh-wstx-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 dx (some u0)))))\n  (ok r))\n)\n\n\n;;AMM Swap Pool-v1-1\n(define-public (swap-wstx-alex-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-alex-wstx-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-wstx-xbtc-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-xbtc-wstx-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-wstx-susdt-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-susdt-wstx-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-alex-diko-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-diko-alex-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u100000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-susdt-xusd-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u5000000 dx (some u0)))))\n  (ok r))\n)\n\n(define-public (swap-xusd-susdt-alex-amm (dx uint))\n  (let ((r (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt u5000000 dx (some u0)))))\n  (ok r))\n)",
    "analysis": {
      "summary": "This contract facilitates various token swaps, liquidity operations, and other financial transactions between different tokens on the Stacks blockchain, leveraging the Arkadiko and Alex protocols.",
      "explanation": "The contract defines a series of public functions to perform swaps and liquidity operations between tokens, utilizing the Arkadiko and Alex decentralized finance protocols. Each function generally follows a pattern of swapping an input amount of one token for another, asserting conditions, and returning the swap results. The contract uses `unwrap-panic` to ensure successful calls to external contracts and `asserts!` to enforce conditions like transaction sender authorization and swap efficiency. Notably, it defines constants for error codes and the contract owner at the beginning. The swap functions interact with external contracts by specifying the exact method and tokens involved in the swap, and they handle the results within the Stacks blockchain's Clarity smart contract language framework.",
      "tags": [
        "DeFi",
        "swap",
        "liquidity-operations",
        "Arkadiko",
        "Alex",
        "token"
      ]
    }
  },
  {
    "rank": 164,
    "contract": "SP3CMTKSJQDEPDA735FWTZS517AMHQ13WTQM4CT1A.stableswap-abtc-xbtc-v2-4",
    "calls": 157,
    "source": "(define-constant A tx-sender)\n\n(define-public (swap-x-for-y (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n        (b0 (try! (contract-call?\n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y\n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc\n            u100000000 (* a0 u100) none)))\n        (a1 (get dy b0))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x\n\t\t\t'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc\n\t\t\tu5000000 a1 none)))\n\t\t(a2 (get dx b1))\n\t\t(b2 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n\t\t\t'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc\n\t\t\tu100000000 a2 none)))\n\t\t(a3 (/ (get dx b2) u100))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t)\n\t)\n))\n\n(define-public (swap-y-for-x (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n        (b0 (try! (contract-call?\n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y\n            'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n            'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc\n            u100000000 (* a0 u100) none)))\n        (a1 (get dy b0))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y\n\t\t\t'SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.token-abtc\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc\n\t\t\tu5000000 a1 none)))\n\t\t(a2 (get dy b1))\n\t\t(b2 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wxbtc\n\t\t\tu100000000 a2 none)))\n\t\t(a3 (/ (get dx b2) u100))\n\t)\n\t\t(asserts! (> a3 a0) (err a3))\n\t\t(try! (stx-transfer? a3 tx-sender sender))\n\t\t(ok (list a0 a1 a2 a3))\n\t)\n\t)\n))",
    "analysis": {
      "summary": "This smart contract facilitates the swapping of tokens through a series of automated market maker (AMM) pools on the Stacks blockchain, ensuring the final amount received is greater than the amount sent.",
      "explanation": "The contract contains two public functions, `swap-x-for-y` and `swap-y-for-x`, each designed to swap tokens in a multi-step process involving AMM pools. Both functions follow a similar pattern: validate the sender, transfer STX to the contract, perform a series of swaps through AMM pools, and finally, transfer the resulting amount back to the sender if it's greater than the initial amount. \n\n- <L1> A constant `A` is defined as the `tx-sender`, which restricts contract operations to the deploying address for security. \n- <L3-35> In `swap-x-for-y`, the function starts by ensuring the caller is the authorized address (<L5>). It then transfers STX from the sender to the contract as an initial step (<L6>). The core of the function lies in a nested `let` block where multiple swaps are performed through external contract calls to AMM pools (<L8-16>). Each swap's result is checked, and the process continues only if the previous step succeeded. The final amount is compared to the initial, and if beneficial, transferred back to the sender (<L32-34>). \n- <L37-69> The `swap-y-for-x` function mirrors `swap-x-for-y` but targets a different token swap direction. It follows the same validation, transfer, swap, and return pattern, ensuring that the user ends with more tokens than they started with. \n\nBoth functions utilize `as-contract` to execute transactions as if they were originating from the contract itself, which is necessary for certain token transfers and interactions with other contracts on the Stacks blockchain. The use of `try!` ensures that if any of the contract calls fail, the entire transaction is aborted, protecting users from partial execution states.",
      "tags": [
        "AMM",
        "token-swap",
        "DeFi",
        "protocol",
        "Stacks"
      ]
    }
  },
  {
    "rank": 165,
    "contract": "SP3E8B51MF5E28BD82FM95VDSQ71VK4KFNZX7ZK2R.frog-faktory-dex",
    "calls": 156,
    "source": "\n;; 733b6edf5105f51bb44da8205a0ffe88c1fdbb29fa02523edcce0eef75ab19e1\n;; Faktory.Fun @version 1.0\n  \n(impl-trait 'SP3XXMS38VTAWTVPE5682XSBFXPTH7XCPEBTX8AN2.faktory-dex-trait-v1.dex-trait)\n(use-trait faktory-token 'SP3XXMS38VTAWTVPE5682XSBFXPTH7XCPEBTX8AN2.faktory-trait-v1.sip-010-trait) \n\n(define-constant ERR-MARKET-CLOSED (err u1001))\n(define-constant ERR-STX-NON-POSITIVE (err u1002))\n(define-constant ERR-STX-BALANCE-TOO-LOW (err u1003))\n(define-constant ERR-FT-NON-POSITIVE (err u1004))\n\n(define-constant ERR-TOKEN-NOT-AUTH (err u401))\n(define-constant ERR-UNAUTHORIZED-CALLER (err u402))\n\n(define-constant FEE-RECEIVER 'SMHAVPYZ8BVD0BHBBQGY5AQVVGNQY4TNHAKGPYP)\n(define-constant G-RECEIVER 'SM3NY5HXXRNCHS1B65R78CYAC1TQ6DEMN3C0DN74S)\n(define-constant AMM-RECEIVER 'SP3DX9KDA8AMX5BHW5QJ68W39V7YHZE696PHXFR20)\n(define-constant CANT-BE-EVIL 'SP000000000000000000002Q6VF78)\n(define-constant DEV tx-sender)\n(define-constant DEX-TOKEN 'SP3E8B51MF5E28BD82FM95VDSQ71VK4KFNZX7ZK2R.frog-faktory)\n(define-constant AUTHORIZED-CONTRACT 'SPV9K21TBFAK4KNRJXF5DFP8N7W46G4V9RCJDC22.buy-with-velar-faktory)\n\n;; token constants\n(define-constant TARGET_STX u6000000000)\n(define-constant FAK_STX u1500000000)\n(define-constant GRAD-FEE u120000000)\n\n;; data vars\n(define-data-var open bool false)\n(define-data-var fak-ustx uint u0)\n(define-data-var ft-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-rate uint u20)\n(define-data-var dev-premium uint u10)\n\n;; Helper function to check if caller is authorized\n(define-private (is-valid-caller)\n  (or \n    (is-eq contract-caller tx-sender)\n    (is-eq contract-caller AUTHORIZED-CONTRACT)\n  ))\n\n(define-public (buy (ft <faktory-token>) (ustx uint))\n  (begin\n    (asserts! (is-eq DEX-TOKEN (contract-of ft)) ERR-TOKEN-NOT-AUTH)\n    (asserts! (is-valid-caller) ERR-UNAUTHORIZED-CALLER)\n    (asserts! (var-get open) ERR-MARKET-CLOSED)\n    (asserts! (> ustx u0) ERR-STX-NON-POSITIVE)\n    (let ((total-stx (var-get stx-balance))\n          (total-stk (+ total-stx (var-get fak-ustx)))\n          (total-ft (var-get ft-balance))\n          (k (* total-ft total-stk))\n          (fee (/ (* ustx u2) u100))\n          (stx-in (- ustx fee))\n          (new-stk (+ total-stk stx-in))\n          (new-ft (/ k new-stk))\n          (tokens-out (- total-ft new-ft))\n          (new-stx (+ total-stx stx-in))\n          (ft-receiver tx-sender))\n      (try! (stx-transfer? fee tx-sender FEE-RECEIVER))\n      (try! (stx-transfer? stx-in tx-sender (as-contract tx-sender)))\n      (try! (as-contract (contract-call? ft transfer tokens-out tx-sender ft-receiver none)))\n      (if (>= new-stx TARGET_STX)\n        (begin\n          (let ((grad-amount (/ (* new-ft (var-get burn-rate)) u100))\n              (dev-amount (/ (* grad-amount (var-get dev-premium)) u100))\n              (burn-amount (- grad-amount dev-amount))\n              (bonus-amount (/ (* new-ft u69) u10000)) \n              (amm-amount (- new-ft (+ grad-amount bonus-amount)))\n              (amm-ustx (- new-stx GRAD-FEE)))\n            (try! (as-contract (contract-call? ft transfer burn-amount tx-sender CANT-BE-EVIL none)))\n            (try! (as-contract (contract-call? ft transfer dev-amount tx-sender DEV none)))\n            (try! (as-contract (contract-call? ft transfer bonus-amount tx-sender G-RECEIVER none)))\n               (try! (as-contract (contract-call? ft transfer amm-amount tx-sender AMM-RECEIVER none)))\n      (try! (as-contract (stx-transfer? amm-ustx tx-sender AMM-RECEIVER)))\n            (try! (as-contract (stx-transfer? GRAD-FEE tx-sender G-RECEIVER)))\n            (var-set open false)\n            (var-set stx-balance u0)\n            (var-set ft-balance u0)\n            (print {type: \"buy\", ft: (contract-of ft),tokens-out: tokens-out, ustx: ustx, burn-amount: burn-amount, amm-amount: amm-amount,\n                    amm-ustx: amm-ustx,\n                    stx-balance: u0, ft-balance: u0,\n                    fee: fee, grad-fee: GRAD-FEE, maker: tx-sender,\n                    open: false})\n            (ok true)))\n        (begin\n          (var-set stx-balance new-stx)\n          (var-set ft-balance new-ft)\n          (print {type: \"buy\", ft: (contract-of ft), tokens-out: tokens-out, ustx: ustx, maker: tx-sender,\n                  stx-balance: new-stx, ft-balance: new-ft,\n                  fee: fee,\n                  open: true})\n          (ok true))))))\n\n(define-read-only (get-in (ustx uint))\n  (let ((total-stx (var-get stx-balance))\n        (total-stk (+ total-stx (var-get fak-ustx)))\n        (total-ft (var-get ft-balance))\n        (k (* total-ft total-stk))\n        (fee (/ (* ustx u2) u100))\n        (stx-in (- ustx fee))\n        (new-stk (+ total-stk stx-in))\n        (new-ft (/ k new-stk))\n        (tokens-out (- total-ft new-ft))\n        (raw-to-grad (- TARGET_STX total-stx))\n        (stx-to-grad (/ (* raw-to-grad u103) u100)))\n    (ok {stx-in: stx-in,\n         fee: fee,\n         tokens-out: tokens-out,\n         ft-balance: total-ft,\n         new-ft: new-ft,\n         total-stx: total-stx,\n         new-stx: (+ total-stx stx-in),\n         stx-to-grad: stx-to-grad})))\n\n(define-public (sell (ft <faktory-token>) (amount uint))\n  (begin\n    (asserts! (is-eq DEX-TOKEN (contract-of ft)) ERR-TOKEN-NOT-AUTH)\n    (asserts! (is-valid-caller) ERR-UNAUTHORIZED-CALLER)\n    (asserts! (var-get open) ERR-MARKET-CLOSED)\n    (asserts! (> amount u0) ERR-FT-NON-POSITIVE)\n    (let ((total-stx (var-get stx-balance))\n          (total-stk (+ total-stx (var-get fak-ustx)))\n          (total-ft (var-get ft-balance))\n          (k (* total-ft total-stk))\n          (new-ft (+ total-ft amount))\n          (new-stk (/ k new-ft))\n          (stx-out (- (- total-stk new-stk) u1))\n          (fee (/ (* stx-out u2) u100))\n          (stx-to-receiver (- stx-out fee))\n          (new-stx (- total-stx stx-out))\n          (stx-receiver tx-sender))\n      (asserts! (>= total-stx stx-out) ERR-STX-BALANCE-TOO-LOW)\n      (try! (contract-call? ft transfer amount tx-sender (as-contract tx-sender) none))\n      (try! (as-contract (stx-transfer? stx-to-receiver tx-sender stx-receiver)))\n      (try! (as-contract (stx-transfer? fee tx-sender FEE-RECEIVER)))\n      (var-set stx-balance new-stx)\n      (var-set ft-balance new-ft)\n      (print {type: \"sell\", ft: (contract-of ft), amount: amount, stx-to-receiver: stx-to-receiver, maker: tx-sender,\n              stx-balance: new-stx, ft-balance: new-ft,\n              fee: fee,\n              open: true})\n      (ok true))))\n\n(define-read-only (get-out (amount uint))\n  (let ((total-stx (var-get stx-balance))\n        (total-stk (+ total-stx (var-get fak-ustx)))\n        (total-ft (var-get ft-balance))\n        (k (* total-ft total-stk))\n        (new-ft (+ total-ft amount))\n        (new-stk (/ k new-ft))\n        (stx-out (- (- total-stk new-stk) u1))\n        (fee (/ (* stx-out u2) u100))\n        (stx-to-receiver (- stx-out fee)))\n    (ok {amount-in: amount,\n         stx-out: stx-out,\n         fee: fee,\n         stx-to-receiver: stx-to-receiver,\n         total-stx: total-stx,\n         new-stx: (- total-stx stx-out),\n         ft-balance: total-ft,\n         new-ft: new-ft})))\n\n(define-read-only (get-open)\n  (ok (var-get open)))\n\n;; boot dex\n  (begin\n    (var-set fak-ustx FAK_STX)\n    (var-set ft-balance u978260869139887)\n    (var-set stx-balance u33333334)\n    (var-set open true)\n    (try! (stx-transfer? u1000000 tx-sender 'SMH8FRN30ERW1SX26NJTJCKTDR3H27NRJ6W75WQE))\n      (print { \n          type: \"faktory-dex-trait-v1\", \n          dexContract: (as-contract tx-sender),\n          ammReceiver: 'SP3DX9KDA8AMX5BHW5QJ68W39V7YHZE696PHXFR20,\n     })\n    (ok true))",
    "analysis": {
      "summary": "This contract implements a decentralized exchange (DEX) mechanism for trading between STX (the native cryptocurrency of the Stacks blockchain) and a specific fungible token (FT), with dynamic pricing based on supply and demand, and includes a mechanism for fees and rewards.",
      "explanation": "The contract starts by implementing a DEX trait and using a token trait for interactions with a specific fungible token. It defines several constants for error handling, addresses of fee receivers, and token-related constants. The contract initializes with the market closed and sets initial balances for tokens and STX, along with a burn rate and a developer premium.\n\nThe `buy` function allows users to exchange STX for the fungible token at a dynamically calculated rate, deducting a fee, and potentially triggering a distribution of tokens and STX to predefined addresses if certain conditions are met. The `sell` function enables the reverse operation, with users exchanging the fungible token back to STX, again with a fee. Both functions ensure the caller is authorized, the market is open, and the transaction amounts are positive. They also adjust the total balances of STX and the fungible token within the contract based on the transaction.\n\nThe `get-in` and `get-out` read-only functions provide information on the amount of tokens or STX one would receive for a given input amount, including fees. The `get-open` function reports the current status of the market (open or closed).\n\nThe contract concludes with an initialization sequence that sets initial values for the DEX's operation, including balances and market status, and transfers STX to a specified address.",
      "tags": [
        "DEX",
        "DeFi",
        "fungible-token",
        "trading",
        "protocol"
      ]
    }
  },
  {
    "rank": 166,
    "contract": "SP1BM5Z901962821ZWXSRZVPKFRWF76C6E9AYG0HN.stacks-maxi-biz-ogs",
    "calls": 155,
    "source": ";; stacks-maxi-biz-ogs\n;; contractType: public\n\n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n\n(define-non-fungible-token stacks-maxi-biz-ogs uint)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant COMM u1000)\n(define-constant COMM-ADDR 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S)\n\n(define-constant ERR-NO-MORE-NFTS u100)\n(define-constant ERR-NOT-ENOUGH-PASSES u101)\n(define-constant ERR-PUBLIC-SALE-DISABLED u102)\n(define-constant ERR-CONTRACT-INITIALIZED u103)\n(define-constant ERR-NOT-AUTHORIZED u104)\n(define-constant ERR-INVALID-USER u105)\n(define-constant ERR-LISTING u106)\n(define-constant ERR-WRONG-COMMISSION u107)\n(define-constant ERR-NOT-FOUND u108)\n(define-constant ERR-PAUSED u109)\n(define-constant ERR-MINT-LIMIT u110)\n(define-constant ERR-METADATA-FROZEN u111)\n(define-constant ERR-AIRDROP-CALLED u112)\n(define-constant ERR-NO-MORE-MINTS u113)\n(define-constant ERR-INVALID-PERCENTAGE u114)\n\n;; Internal variables\n(define-data-var mint-limit uint u2300)\n(define-data-var last-id uint u1)\n(define-data-var total-price uint u3330000)\n(define-data-var artist-address principal 'SP1BM5Z901962821ZWXSRZVPKFRWF76C6E9AYG0HN)\n(define-data-var ipfs-root (string-ascii 80) \"ipfs://ipfs/QmUNTLUQh9gMcFqpsExCwPYQ9XznCXDA5zWs9WvYnwV2ap/json/\")\n(define-data-var mint-paused bool false)\n(define-data-var premint-enabled bool false)\n(define-data-var sale-enabled bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var airdrop-called bool false)\n(define-data-var mint-cap uint u5)\n\n(define-map mints-per-user principal uint)\n(define-map mint-passes principal uint)\n\n(define-public (claim) \n  (mint (list true)))\n\n(define-public (claim-two) (mint (list true true)))\n\n(define-public (claim-three) (mint (list true true true)))\n\n(define-public (claim-four) (mint (list true true true true)))\n\n(define-public (claim-five) (mint (list true true true true true)))\n\n;; Default Minting\n(define-private (mint (orders (list 25 bool)))\n  (mint-many orders))\n\n(define-private (mint-many (orders (list 25 bool )))  \n  (let \n    (\n      (last-nft-id (var-get last-id))\n      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))\n      (art-addr (var-get artist-address))\n      (id-reached (fold mint-many-iter orders last-nft-id))\n      (price (* (var-get total-price) (- id-reached last-nft-id)))\n      (total-commission (/ (* price COMM) u10000))\n      (current-balance (get-balance tx-sender))\n      (total-artist (- price total-commission))\n      (capped (> (var-get mint-cap) u0))\n      (user-mints (get-mints tx-sender))\n    )\n    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))\n    (asserts! (or (not capped) (is-eq tx-sender DEPLOYER) (is-eq tx-sender art-addr) (>= (var-get mint-cap) (+ (len orders) user-mints))) (err ERR-NO-MORE-MINTS))\n    (map-set mints-per-user tx-sender (+ (len orders) user-mints))\n    (if (or (is-eq tx-sender art-addr) (is-eq tx-sender DEPLOYER) (is-eq (var-get total-price) u0000000))\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n      )\n      (begin\n        (var-set last-id id-reached)\n        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))\n        (try! (stx-transfer? total-artist tx-sender (var-get artist-address)))\n        (try! (stx-transfer? total-commission tx-sender COMM-ADDR))\n      )    \n    )\n    (ok id-reached)))\n\n(define-private (mint-many-iter (ignore bool) (next-id uint))\n  (if (<= next-id (var-get mint-limit))\n    (begin\n      (unwrap! (nft-mint? stacks-maxi-biz-ogs next-id tx-sender) next-id)\n      (+ next-id u1)    \n    )\n    next-id))\n\n(define-public (set-artist-address (address principal))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set artist-address address))))\n\n(define-public (set-price (price uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set total-price price))))\n\n(define-public (toggle-pause)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (ok (var-set mint-paused (not (var-get mint-paused))))))\n\n(define-public (set-mint-limit (limit uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))\n    (ok (var-set mint-limit limit))))\n\n(define-public (burn (token-id uint))\n  (begin \n    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))\n    (nft-burn? stacks-maxi-biz-ogs token-id tx-sender)))\n\n(define-private (is-owner (token-id uint) (user principal))\n    (is-eq user (unwrap! (nft-get-owner? stacks-maxi-biz-ogs token-id) false)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))\n    (print { notification: \"token-metadata-update\", payload: { token-class: \"nft\", contract-id: (as-contract tx-sender) }})\n    (var-set ipfs-root new-base-uri)\n    (ok true)))\n\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Non-custodial SIP-009 transfer function\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))\n    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))\n    (trnsfr id sender recipient)))\n\n;; read-only functions\n(define-read-only (get-owner (token-id uint))\n  (ok (nft-get-owner? stacks-maxi-biz-ogs token-id)))\n\n(define-read-only (get-last-token-id)\n  (ok (- (var-get last-id) u1)))\n\n(define-read-only (get-token-uri (token-id uint))\n  (ok (some (concat (concat (var-get ipfs-root) \"{id}\") \".json\"))))\n\n(define-read-only (get-paused)\n  (ok (var-get mint-paused)))\n\n(define-read-only (get-price)\n  (ok (var-get total-price)))\n\n(define-read-only (get-artist-address)\n  (ok (var-get artist-address)))\n\n(define-read-only (get-mints (caller principal))\n  (default-to u0 (map-get? mints-per-user caller)))\n\n(define-read-only (get-mint-limit)\n  (ok (var-get mint-limit)))\n\n(define-data-var license-uri (string-ascii 80) \"https://arweave.net/zmc1WTspIhFyVY82bwfAIcIExLFH5lUcHHUN0wXg4W8/1\")\n(define-data-var license-name (string-ascii 40) \"EXCLUSIVE\")\n\n(define-read-only (get-license-uri)\n  (ok (var-get license-uri)))\n  \n(define-read-only (get-license-name)\n  (ok (var-get license-name)))\n  \n(define-public (set-license-uri (uri (string-ascii 80)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-uri uri))))\n    \n(define-public (set-license-name (name (string-ascii 40)))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))\n    (ok (var-set license-name name))))\n\n;; Non-custodial marketplace extras\n(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)\n\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal, royalty: uint})\n\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? stacks-maxi-biz-ogs id sender recipient)\n    success\n      (let\n        ((sender-balance (get-balance sender))\n        (recipient-balance (get-balance recipient)))\n          (map-set token-count\n            sender\n            (- sender-balance u1))\n          (map-set token-count\n            recipient\n            (+ recipient-balance u1))\n          (ok success))\n    error (err error)))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? stacks-maxi-biz-ogs id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? stacks-maxi-biz-ogs id) (err ERR-NOT-FOUND)))\n      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))\n      (price (get price listing))\n      (royalty (get royalty listing)))\n    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (pay-royalty price royalty))\n    (try! (contract-call? comm-trait pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))\n    \n(define-data-var royalty-percent uint u500)\n\n(define-read-only (get-royalty-percent)\n  (ok (var-get royalty-percent)))\n\n(define-public (set-royalty-percent (royalty uint))\n  (begin\n    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))\n    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))\n    (ok (var-set royalty-percent royalty))))\n\n(define-private (pay-royalty (price uint) (royalty uint))\n  (let (\n    (royalty-amount (/ (* price royalty) u10000))\n  )\n  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))))\n    (try! (stx-transfer? royalty-amount tx-sender (var-get artist-address)))\n    (print false)\n  )\n  (ok true)))\n  \n\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a non-fungible token (NFT) collection with minting, burning, and marketplace functionalities, following the SIP-009 standard for NFTs on the Stacks blockchain.",
      "explanation": "The contract defines an NFT collection named 'stacks-maxi-biz-ogs' with unique features such as minting limits, artist commission, and a marketplace for buying and selling NFTs. Key functionalities include minting NFTs with a cap, setting and updating artist and minting details, pausing minting, and managing NFT ownership transfers in a non-custodial manner. The contract also supports listing NFTs for sale, unlisting, and buying through a custom marketplace mechanism, including commission and royalty handling.\n\n- The contract starts by implementing the 'nft-trait' from a specified address, ensuring compatibility with the SIP-009 standard <L1>.\n- It defines the NFT using 'define-non-fungible-token' with a 'uint' identifier <L3>.\n- Constants such as 'DEPLOYER', 'COMM', and error codes are defined for internal use <L5-18>.\n- Internal variables like 'mint-limit', 'last-id', and 'total-price' are set to manage minting and pricing <L20-28>.\n- The 'mint' functions (<L30-34>) allow batch minting of NFTs based on boolean lists representing the minting order.\n- 'mint-many' and 'mint-many-iter' handle the actual minting logic, ensuring mint limits are respected and transferring STX for NFTs <L36-81>.\n- Administrative functions allow updating critical contract parameters such as artist address, mint price, and pausing or resuming minting <L83-134>.\n- The 'burn' function allows NFT owners to permanently remove their NFT from the collection <L136-141>.\n- Marketplace functionalities are introduced, enabling listing, unlisting, and buying NFTs with handling for commissions and royalties <L143-233>.\n- Read-only functions provide access to contract state information like NFT ownership and minting status <L235-288>.",
      "tags": [
        "NFT",
        "marketplace",
        "SIP-009",
        "minting",
        "royalties",
        "commission"
      ]
    }
  },
  {
    "rank": 167,
    "contract": "SP20KBF1FZAXDEH5D64FVYF9EYD8Y2Q8XPFNF381M.mana",
    "calls": 155,
    "source": "\n;;  ---------------------------------------------------------\n;; $MANA by @StxDevs on twitter. StxDevs is the worlds first Stacks inscription collection. $MANA will be used for ######## ## ###### ### ####### #### and #######. \n;; ---------------------------------------------------------\n\n;; Errors \n(define-constant ERR-UNAUTHORIZED u401)\n(define-constant ERR-NOT-OWNER u402)\n(define-constant ERR-INVALID-PARAMETERS u403)\n(define-constant ERR-NOT-ENOUGH-FUND u101)\n\n(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n\n;; Constants\n(define-constant MAXSUPPLY u31415926535)\n\n;; Variables\n(define-fungible-token MANA MAXSUPPLY)\n(define-data-var contract-owner principal tx-sender) \n\n\n\n;; SIP-10 Functions\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n    (begin\n        (asserts! (is-eq from tx-sender)\n            (err ERR-UNAUTHORIZED))\n        ;; Perform the token transfer\n        (ft-transfer? MANA amount from to)\n    )\n)\n\n\n;; DEFINE METADATA\n(define-data-var token-uri (optional (string-utf8 256)) (some u\"https://gaia.hiro.so/hub/1J4Wswh8LRRK9L6DP8QNpL7hX23gk3gcXp/mana-0-decimals.json\"))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n    (begin\n        (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))\n        (var-set token-uri (some value))\n        (ok (print {\n              notification: \"token-metadata-update\",\n              payload: {\n                contract-id: (as-contract tx-sender),\n                token-class: \"ft\"\n              }\n            })\n        )\n    )\n)\n\n\n(define-read-only (get-balance (owner principal))\n  (ok (ft-get-balance MANA owner))\n)\n(define-read-only (get-name)\n  (ok \"MANA\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"MANA\")\n)\n\n(define-read-only (get-decimals)\n  (ok u0)\n)\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply MANA))\n)\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri))\n)\n\n;; transfer ownership\n(define-public (transfer-ownership (new-owner principal))\n  (begin\n    ;; Checks if the sender is the current owner\n    (if (is-eq tx-sender (var-get contract-owner))\n      (begin\n        ;; Sets the new owner\n        (var-set contract-owner new-owner)\n        ;; Returns success message\n        (ok \"Ownership transferred successfully\"))\n      ;; Error if the sender is not the owner\n      (err ERR-NOT-OWNER)))\n)\n\n\n;; ---------------------------------------------------------\n;; Utility Functions\n;; ---------------------------------------------------------\n(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))\n  (fold check-err (map send-token recipients) (ok true))\n)\n\n(define-private (check-err (result (response bool uint)) (prior (response bool uint)))\n  (match prior ok-value result err-value (err err-value))\n)\n\n(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))\n  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))\n)\n\n(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))\n  (let ((transferOk (try! (transfer amount tx-sender to memo))))\n    (ok transferOk)\n  )\n)\n\n(define-private (send-stx (recipient principal) (amount uint))\n  (begin\n    (try! (stx-transfer? amount tx-sender recipient))\n    (ok true) \n  )\n)\n\n;; ---------------------------------------------------------\n;; Mint\n;; ---------------------------------------------------------\n(begin\n    (try! (send-stx 'SP1FQ3DQDR5N9HJX3XC5DNKFCG4DHH48EFJQV6QH0 u5000000))\n    (try! (ft-mint? MANA MAXSUPPLY (var-get contract-owner)))\n)\n",
    "analysis": {
      "summary": "This contract implements a fungible token named $MANA with a fixed supply, ownership transfer capabilities, and SIP-010 compliance for Stacks blockchain.",
      "explanation": "The contract defines a fungible token ($MANA) with a maximum supply and includes functions for transferring tokens, managing token metadata, and transferring contract ownership. It implements the SIP-010 standard for fungible tokens on the Stacks blockchain, ensuring compatibility with wallets and exchanges that support this standard.\n\n- <L5-8> Error codes are defined for unauthorized access, ownership issues, invalid parameters, and insufficient funds.\n- <L10> Implements the SIP-010 trait for fungible tokens, ensuring standard interface for fungible tokens.\n- <L13> Sets the maximum supply of $MANA tokens.\n- <L15> Initializes the fungible token with a defined maximum supply.\n- <L16> Sets the contract's owner to the transaction sender upon deployment.\n- <L19-26> Defines a public function for transferring $MANA tokens, ensuring only the token owner can initiate the transfer.\n- <L29-36> Allows updating the token's metadata URI, restricted to the contract owner.\n- <L38-56> Read-only functions provide token information like balance, name, symbol, decimals, total supply, and token URI, following the SIP-010 standard.\n- <L58-70> Enables the contract owner to transfer ownership to another principal.\n- <L73-93> Includes a utility function for sending $MANA to multiple recipients in a single transaction.\n- <L95-102> A private utility function to assist in token transfers with optional memo support.\n- <L104-109> Another private function for sending STX, Stacks' native token.\n- <L112-115> The contract attempts to mint the maximum supply of $MANA to the contract owner and sends a fixed amount of STX to a specified address upon deployment, demonstrating an initial distribution or funding mechanism.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "DeFi",
        "protocol"
      ]
    }
  },
  {
    "rank": 168,
    "contract": "SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.megapont-ape-club-nft",
    "calls": 152,
    "source": ";; use the SIP090 interface (testnet)\n;;live (impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n;;test (impl-trait 'ST1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE.nft-trait.nft-trait)\n(impl-trait .nft-trait.nft-trait)\n(use-trait commission-trait .commission-trait.commission)\n\n(define-non-fungible-token Megapont-Ape-Club uint)\n\n;; Storage\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal})\n\n;; Define Constants\n(define-constant CONTRACT-OWNER tx-sender)\n(define-constant ERR-SOLD-OUT (err u300))\n(define-constant ERR-WRONG-COMMISSION (err u301))\n(define-constant ERR-NOT-AUTHORIZED (err u401))\n(define-constant ERR-NOT-FOUND (err u404))\n(define-constant ERR-METADATA-FROZEN (err u505))\n(define-constant ERR-MINT-ALREADY-SET (err u506))\n(define-constant ERR-LISTING (err u507))\n(define-constant APE-LIMIT u2500)\n\n;; Withdraw wallets\n;; Megapont 1 47.5%\n(define-constant WALLET_1 'SP39E0V32MC31C5XMZEN1TQ3B0PW2RQSJB8TKQEV9)\n;; Megapont 2 45%\n(define-constant WALLET_2 'SP1C39PEYB976REP9B19QMFDJHHF27A63WANDGTX4)\n;; Megapont 3 5%\n(define-constant WALLET_3 'SP11QRBEVACSP2MAYB1FE64PZGXXRWE4R3HY5E68H)\n;; Security Audit 2.5%\n(define-constant WALLET_4 'SP2J56JG0SMAVW0DXXJ7W18W2CQHD1FE83FZCFV26)\n\n;; Define Variables\n(define-data-var last-id uint u0)\n(define-data-var mintpass-sale-active bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var base-uri (string-ascii 80) \"ipfs://Qmad43sssgNbG9TpC6NfeiTi9X6f9vPYuzgW2S19BEi49m/{id}\")\n(define-constant contract-uri \"ipfs://QmSeXmYpkaxvH3xv8ikwDodJZjp9pqxooVvqLHq3Gvg6So\")\n(define-constant proof-hash \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\")\n(define-map mint-address bool principal)\n\n;; Token count for account\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? Megapont-Ape-Club id sender recipient)\n        success\n          (let\n            ((sender-balance (get-balance sender))\n            (recipient-balance (get-balance recipient)))\n              (map-set token-count\n                    sender\n                    (- sender-balance u1))\n              (map-set token-count\n                    recipient\n                    (+ recipient-balance u1))\n              (ok success))\n        error (err error)))\n\n;; SIP009: Transfer token to a specified principal\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) ERR-NOT-AUTHORIZED)\n    (asserts! (is-none (map-get? market id)) ERR-LISTING)\n    (trnsfr id sender recipient)))\n\n;; SIP009: Get the owner of the specified token ID\n(define-read-only (get-owner (id uint))\n  ;; Make sure to replace Megapont-Ape-Club\n  (ok (nft-get-owner? Megapont-Ape-Club id)))\n\n;; SIP009: Get the last token ID\n(define-read-only (get-last-token-id)\n  (ok (var-get last-id)))\n\n;; SIP009: Get the token URI. You can set it to any other URI\n(define-read-only (get-token-uri (id uint))\n  (ok (some (var-get base-uri))))\n\n(define-read-only (get-contract-uri)\n  (ok contract-uri))\n\n;; Mint new NFT\n;; can only be called from the Mint\n(define-public (mint (new-owner principal))\n    (let ((next-id (+ u1 (var-get last-id))))\n      (asserts! (called-from-mint) ERR-NOT-AUTHORIZED)\n      (asserts! (< (var-get last-id) APE-LIMIT) ERR-SOLD-OUT)\n      (match (nft-mint? Megapont-Ape-Club next-id new-owner)\n        success\n        (let\n        ((current-balance (get-balance new-owner)))\n          (begin\n            (try! (stx-transfer? u23750000 tx-sender WALLET_1))\n            (try! (stx-transfer? u22500000 tx-sender WALLET_2))\n            (try! (stx-transfer?  u2500000 tx-sender WALLET_3))\n            (try! (stx-transfer?  u1250000 tx-sender WALLET_4))\n            (var-set last-id next-id)\n            (map-set token-count\n              new-owner\n              (+ current-balance u1)\n            )\n            (ok true)))\n        error (err (* error u10000)))))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? Megapont-Ape-Club id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm)}))\n    (asserts! (is-sender-owner id) ERR-NOT-AUTHORIZED)\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) ERR-NOT-AUTHORIZED)\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? Megapont-Ape-Club id) ERR-NOT-FOUND))\n      (listing (unwrap! (map-get? market id) ERR-LISTING))\n      (price (get price listing)))\n    (asserts! (is-eq (contract-of comm) (get commission listing)) ERR-WRONG-COMMISSION)\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (contract-call? comm pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))\n\n;; Set base uri\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (asserts! (not (var-get metadata-frozen)) ERR-METADATA-FROZEN)\n    (var-set base-uri new-base-uri)\n    (ok true)))\n\n;; Freeze metadata\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Manage the Mint\n(define-private (called-from-mint)\n  (let ((the-mint\n          (unwrap! (map-get? mint-address true)\n                    false)))\n    (is-eq contract-caller the-mint)))\n\n;; can only be called once\n(define-public (set-mint-address)\n  (let ((the-mint (map-get? mint-address true)))\n    (asserts! (and (is-none the-mint)\n              (map-insert mint-address true tx-sender))\n                ERR-MINT-ALREADY-SET)\n    (ok tx-sender)))\n",
    "analysis": {
      "summary": "This contract implements an NFT collection named Megapont-Ape-Club with a marketplace, allowing minting, transferring, listing, and buying NFTs, along with managing NFT metadata.",
      "explanation": "The contract defines a non-fungible token (NFT) collection using the `define-non-fungible-token` construct, allowing the creation and tracking of unique tokens identified by `uint`. It utilizes the SIP009 standard for NFT functionality, including transferring and querying ownership. The contract includes features for minting new NFTs, transferring them, listing them for sale, buying listed NFTs, and managing metadata URI. Key implementation details include:\n\n- **Token Minting**: The `mint` function allows creating a new NFT and assigning it to an owner. It involves transferring STX to predefined wallets as part of the minting process <L92-108>.\n\n- **Transferring NFTs**: The `transfer` function implements the SIP009 standard for transferring ownership of an NFT from one principal to another, with checks to ensure the sender is authorized and the token is not listed for sale <L72-79>.\n\n- **Marketplace**: The contract allows listing NFTs for sale with a specified price and commission address (using a trait for commission logic), and buying listed NFTs, transferring ownership and handling payments according to the listing details <L121-143>, <L145-168>.\n\n- **Metadata Management**: The contract allows setting and freezing the base URI for NFT metadata, ensuring that metadata can be updated until it is explicitly frozen, preventing further changes <L170-182>, <L184-191>.\n\n- **Access Control**: Several operations are restricted to the contract owner or the current NFT owner, using assertions to check caller privileges <L70>, <L120>, <L170>, <L184>.\n\n- **Storage**: Uses `define-map` and `define-data-var` to store NFT ownership counts, market listings, and contract-wide settings like the last minted NFT ID and metadata URI <L8-15>, <L17-23>.\n\nOverall, the contract is designed to manage an NFT collection with an integrated marketplace, providing a comprehensive suite of features for NFT owners and creators.",
      "tags": [
        "NFT",
        "marketplace",
        "metadata-management",
        "SIP009"
      ]
    }
  },
  {
    "rank": 169,
    "contract": "SP3T54N6G4HN7GPBCYMSDKP4W00C45X19GQ4VT13Y.skullcoin-storyline-g1-base",
    "calls": 150,
    "source": ";; Skullcoin | Storyline | Chapter #1 | v.1.0.0\n;; skullco.in\n\n;; Constants and Errors\n(define-constant CONTRACT-OWNER tx-sender)\n(define-constant BURN-WALLET 'SP5EDWN88FN8Q6A1MQ0N7SKKAG0VZ0ZQ9MFZ6RS8)\n(define-constant ERR-NOT-AUTHORIZED (err u100))\n(define-constant ERR-SALE-NOT-ACTIVE (err u101))\n(define-constant ERR-NOT-OWNER (err u102))\n(define-constant ERR-NOT-TREASURE (err u103))\n(define-constant REACHED-BLOCK-PICK-LIMIT (err u104))\n\n;; Variables\n(define-data-var sale-active bool false)\n(define-data-var factor uint u1)\n(define-data-var last-block uint u0)\n(define-data-var byte-id uint u0)\n(define-data-var picked-id uint u0)\n(define-data-var last-vrf (buff 64) 0x00)\n\n;; Maps\n(define-map treasure-phase-1 { id: uint} {claim: bool})\n(define-map treasure-phase-2 { id: uint} {claim: bool})\n(define-map treasure-phase-3 { id: uint} {claim: bool})\n(define-map treasure-phase-4 { id: uint} {claim: bool})\n(define-map treasure-phase-5 { id: uint} {claim: bool})\n\n;; Set public sale flag (only contract owner)\n(define-public (flip-sale)\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (var-set sale-active (not (var-get sale-active)))\n    (ok (var-get sale-active))))\n\n;; Set factor (only contract owner)\n(define-public (set-factor (value uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (var-set factor value)\n    (ok true)))\n\n;; Deposit STX in contract (only contract owner)\n(define-public (deposit-stx (amount uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (try! (stx-transfer? amount tx-sender (as-contract tx-sender)))\n  (ok true)))\n\n;; Withdrawal STX from contract (only contract owner)\n(define-public (withdraw-stx (amount uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (try! (as-contract (stx-transfer? amount tx-sender CONTRACT-OWNER)))\n  (ok true)))\n\n;; Send STX to player (only contract owner)\n(define-public (send-stx (amount uint) (player principal))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (try! (as-contract (stx-transfer? amount tx-sender player)))\n  (ok true)))\n\n;; Set treasures ids / Phase 1 (only contract owner)\n(define-public (set-treasure-phase-1 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set treasure-phase-1 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set treasures ids / Phase 2 (only contract owner)\n(define-public (set-treasure-phase-2 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set treasure-phase-2 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set treasures ids / Phase 3 (only contract owner)\n(define-public (set-treasure-phase-3 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set treasure-phase-3 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set treasures ids / Phase 4 (only contract owner)\n(define-public (set-treasure-phase-4 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set treasure-phase-4 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Set treasures ids / Phase 5 (only contract owner)\n(define-public (set-treasure-phase-5 (nft-id uint) (status bool))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (map-set treasure-phase-5 { id: nft-id } { claim: status})\n  (ok true)))\n\n;; Claim 5 NFT\n(define-public (claim-five)\n  (begin\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (try! (claim))\n    (ok true)))\n\n;; Claim treasure / Phase 1\n(define-public (claim-treasure-phase-1 (id uint))\n  (let ((fx (var-get factor)))\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase1 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (mod id u5) u0) ERR-NOT-TREASURE)\n    (try! (pick-id))\n        (if (is-eq (mod (var-get picked-id) u2) u0)\n          (begin\n            (asserts! (is-eq (get claim (unwrap-panic (map-get? treasure-phase-1 { id: id }))) true) ERR-NOT-TREASURE)\n            (try! (send-stx-to-winner (* fx u1) tx-sender))\n            (map-set treasure-phase-1 { id: id } { claim: false})\n            (print \"Congrats\")\n            (ok (var-get picked-id)))\n          (begin\n            (map-set treasure-phase-1 { id: id } { claim: false})\n            (print \"Not this time\")\n            (ok (var-get picked-id))))))\n\n;; Claim treasure / Phase 2\n(define-public (claim-treasure-phase-2 (id uint))\n  (let ((fx (var-get factor)))\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase2 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (mod id u5) u0) ERR-NOT-TREASURE)\n    (try! (pick-id))\n        (if (is-eq (mod (var-get picked-id) u2) u0)\n          (begin\n            (asserts! (is-eq (get claim (unwrap-panic (map-get? treasure-phase-2 { id: id }))) true) ERR-NOT-TREASURE)\n            (try! (send-stx-to-winner (* fx u2) tx-sender))\n            (map-set treasure-phase-2 { id: id } { claim: false})\n            (print \"Congrats\")\n            (ok (var-get picked-id)))\n          (begin\n            (map-set treasure-phase-2 { id: id } { claim: false})\n            (print \"Not this time\")\n            (ok (var-get picked-id))))))\n\n;; Claim treasure / Phase 3\n(define-public (claim-treasure-phase-3 (id uint))\n  (let ((fx (var-get factor)))\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase3 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (mod id u5) u0) ERR-NOT-TREASURE)\n    (try! (pick-id))\n        (if (is-eq (mod (var-get picked-id) u2) u0)\n          (begin\n            (asserts! (is-eq (get claim (unwrap-panic (map-get? treasure-phase-3 { id: id }))) true) ERR-NOT-TREASURE)\n            (try! (send-stx-to-winner (* fx u3) tx-sender))\n            (map-set treasure-phase-3 { id: id } { claim: false})\n            (print \"Congrats\")\n            (ok (var-get picked-id)))\n          (begin\n            (map-set treasure-phase-3 { id: id } { claim: false})\n            (print \"Not this time\")\n            (ok (var-get picked-id))))))\n\n;; Claim treasure / Phase 4\n(define-public (claim-treasure-phase-4 (id uint))\n  (let ((fx (var-get factor)))\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase4 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (mod id u5) u0) ERR-NOT-TREASURE)\n    (try! (pick-id))\n        (if (is-eq (mod (var-get picked-id) u2) u0)\n          (begin\n            (asserts! (is-eq (get claim (unwrap-panic (map-get? treasure-phase-4 { id: id }))) true) ERR-NOT-TREASURE)\n            (try! (send-stx-to-winner (* fx u4) tx-sender))\n            (map-set treasure-phase-4 { id: id } { claim: false})\n            (print \"Congrats\")\n            (ok (var-get picked-id)))\n          (begin\n            (map-set treasure-phase-4 { id: id } { claim: false})\n            (print \"Not this time\")\n            (ok (var-get picked-id))))))\n\n;; Claim treasure / Phase 5\n(define-public (claim-treasure-phase-5 (id uint))\n  (let ((fx (var-get factor)))\n    (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase5 get-owner id) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n    (asserts! (is-eq (mod id u5) u0) ERR-NOT-TREASURE)\n    (try! (pick-id))\n        (if (is-eq (mod (var-get picked-id) u2) u0)\n          (begin\n            (asserts! (is-eq (get claim (unwrap-panic (map-get? treasure-phase-5 { id: id }))) true) ERR-NOT-TREASURE)\n            (try! (send-stx-to-winner (* fx u5) tx-sender))\n            (map-set treasure-phase-5 { id: id } { claim: false})\n            (print \"Congrats\")\n            (ok (var-get picked-id)))\n          (begin\n            (map-set treasure-phase-5 { id: id } { claim: false})\n            (print \"Not this time\")\n            (ok (var-get picked-id))))))\n\n;; Burn 5 NFTs / Phase 1\n(define-public (burn-phase-1 (id1 uint) (id2 uint) (id3 uint) (id4 uint) (id5 uint))\n  (begin\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase1 get-owner id1) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase1 get-owner id2) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase1 get-owner id3) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase1 get-owner id4) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase1 get-owner id5) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (try! (contract-call? .skullcoin-storyline-g1-phase1 transfer id1 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase1 transfer id2 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase1 transfer id3 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase1 transfer id4 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase1 transfer id5 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 mint tx-sender))\n      (ok true)))\n\n;; Burn 5 NFTs / Phase 2\n(define-public (burn-phase-2 (id1 uint) (id2 uint) (id3 uint) (id4 uint) (id5 uint))\n  (begin\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase2 get-owner id1) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase2 get-owner id2) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase2 get-owner id3) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase2 get-owner id4) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase2 get-owner id5) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 transfer id1 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 transfer id2 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 transfer id3 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 transfer id4 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase2 transfer id5 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 mint tx-sender))\n      (ok true)))\n\n;; Burn 5 NFTs / Phase 3\n(define-public (burn-phase-3 (id1 uint) (id2 uint) (id3 uint) (id4 uint) (id5 uint))\n  (begin\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase3 get-owner id1) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase3 get-owner id2) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase3 get-owner id3) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase3 get-owner id4) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase3 get-owner id5) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 transfer id1 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 transfer id2 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 transfer id3 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 transfer id4 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase3 transfer id5 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 mint tx-sender))\n      (ok true)))\n\n;; Burn 5 NFTs / Phase 4\n(define-public (burn-phase-4 (id1 uint) (id2 uint) (id3 uint) (id4 uint) (id5 uint))\n  (begin\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase4 get-owner id1) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase4 get-owner id2) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase4 get-owner id3) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase4 get-owner id4) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase4 get-owner id5) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 transfer id1 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 transfer id2 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 transfer id3 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 transfer id4 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase4 transfer id5 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 mint tx-sender))\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 mint tx-sender))\n      (ok true)))\n\n;; Burn 5 NFTs / Phase 5\n(define-public (burn-phase-5 (id1 uint) (id2 uint) (id3 uint) (id4 uint) (id5 uint))\n  (begin\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase5 get-owner id1) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase5 get-owner id2) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase5 get-owner id3) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase5 get-owner id4) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (asserts! (is-eq (unwrap! (unwrap! (contract-call? .skullcoin-storyline-g1-phase5 get-owner id5) ERR-NOT-OWNER) ERR-NOT-OWNER) tx-sender) ERR-NOT-OWNER)\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 transfer id1 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 transfer id2 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 transfer id3 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 transfer id4 tx-sender BURN-WALLET))\n      (try! (contract-call? .skullcoin-storyline-g1-phase5 transfer id5 tx-sender BURN-WALLET))\n      (ok true)))\n\n;; Claim NFT\n(define-private (claim)\n  (begin\n    (mint tx-sender)))\n\n;; Internal - Mint NFT\n(define-private (mint (new-owner principal))\n  (begin\n    (asserts! (var-get sale-active) ERR-SALE-NOT-ACTIVE)\n    (try! (contract-call? .skullcoin-storyline-g1-phase1 mint new-owner))\n    (ok true)))\n\n;; Send STX to winner player in claim treasure function\n(define-private (send-stx-to-winner (amount uint) (player principal))\n  (begin\n    (try! (as-contract (stx-transfer? amount tx-sender player)))\n  (ok true)))\n\n;; Pick id with RNG based on VRF\n(define-private (pick-id)\n  (let ((vrf (var-get last-vrf))\n        (b-idx (var-get byte-id)))\n    (if (is-eq (var-get last-block) block-height)\n      (begin\n        (asserts! (< b-idx u63) REACHED-BLOCK-PICK-LIMIT)\n        (var-set picked-id (buff-to-uint-be (unwrap-panic (element-at vrf b-idx))))\n        (var-set byte-id (+ b-idx u1))\n        (ok (var-get picked-id)))\n      (begin\n        (set-vrf)\n        (var-set last-block block-height)\n        (var-set picked-id (buff-to-uint-be (unwrap-panic (element-at vrf b-idx))))\n        (var-set byte-id u1)\n        (ok (var-get picked-id))))))\n\n;; Set VRF from previous block\n(define-private (set-vrf)    \n    (var-set last-vrf (sha512 (unwrap-panic (get-block-info? vrf-seed (- block-height u1))))))\n\n;; Register this contract as allowed to mint\n(as-contract (contract-call? .skullcoin-storyline-g1-phase1 set-mint-address))\n(as-contract (contract-call? .skullcoin-storyline-g1-phase2 set-mint-address))\n(as-contract (contract-call? .skullcoin-storyline-g1-phase3 set-mint-address))\n(as-contract (contract-call? .skullcoin-storyline-g1-phase4 set-mint-address))\n(as-contract (contract-call? .skullcoin-storyline-g1-phase5 set-mint-address))",
    "analysis": {
      "summary": "This smart contract manages a gamified NFT collection process across multiple phases, allowing users to claim, burn, and mint NFTs while interacting with a storyline.",
      "explanation": "The contract is designed for a multi-phase NFT game, where users can claim treasures, burn NFTs to progress through phases, and mint new NFTs. It uses a combination of public and private functions to manage game mechanics, including toggling the sale status, setting treasure claims, and handling STX transactions.\n\n- Constants like `CONTRACT-OWNER` and `BURN-WALLET` define the contract owner and a burn address for NFTs. Error codes are also defined for various failure states <L3-7>.\n- Variables and maps are declared to keep track of the sale status, a factor for STX rewards, and treasure claims across different phases <L9-19>.\n- Public functions allow the contract owner to toggle the sale, set factors, deposit/withdraw STX, and set treasure statuses. These include checks to ensure only the contract owner can execute them <L21-66>.\n- The `claim-treasure-phase-x` functions allow users to claim treasures in different phases if they meet certain conditions, such as owning the NFT and the NFT being unclaimed treasure. Rewards are given based on a factor multiplied by the phase number <L68-157>.\n- `burn-phase-x` functions enable users to burn a set of NFTs to mint new ones in the next phase, facilitating progression through the game's storyline <L159-259>.\n- Private functions handle the minting of NFTs, sending STX to winners, and picking an ID using a pseudo-random number generator (RNG) based on the VRF of the previous block. This RNG mechanism is crucial for the treasure claiming process, introducing an element of chance <L261-316>.\n- The contract concludes with calls to set this contract as an allowed minter for NFTs in all phases, ensuring it can mint NFTs as part of the game mechanics <L318-322>.\n\nThis contract combines NFT gaming with strategic elements and chance, offering a unique interactive experience on the Stacks blockchain.",
      "tags": [
        "NFT",
        "gaming",
        "DeFi",
        "storyline"
      ]
    }
  },
  {
    "rank": 170,
    "contract": "SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.native-stacking-pool-v1",
    "calls": 146,
    "source": ";; @contract pox-4 wrapper contract for stacking pools\n;; @version 3\n;; Changelog: fix decrease error, add stacking stats for this pool, add metadata for users\n\n;; User calls delegate-stx at first and provides a btc address to receive rewards.\n;; Pool operators lock the user's delegated STX tokens according to their rules.\n;; Some pools require a minimum amount. Most pool operators lock the delegated STX\n;; for the next cycle only.\n;; Users can delegate more stx by calling delegate-stx with a higher amount for the next cycle.\n\n;;\n;; Data storage\n;;\n(define-constant err-not-found (err u404))\n(define-constant err-non-positive-amount (err u500))\n(define-constant err-no-stacker-info (err u501))\n(define-constant err-no-user-info (err u502))\n(define-constant err-decrease-forbidden (err u503))\n;; Error code 3 is used by pox-4 contract for already stacking errors\n(define-constant err-already-stacking (err u603))\n;; Error code 9 is used by pox-4 contract for stacking-permission-denied\n(define-constant err-stacking-permission-denied (err u609))\n\n(define-constant pox-info (unwrap-panic (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-pox-info)))\n\n;; Allowed contract-callers handling a user's stacking activity.\n(define-map allowance-contract-callers\n  { sender: principal, contract-caller: principal}\n  { until-burn-ht: (optional uint)})\n\n;; Keep track of the last delegation\n;; pox-addr: raw bytes of user's account to receive rewards, can be encoded as btc or stx address\n;; cycle: cycle id of time of delegation\n(define-map user-data principal {pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint})\n\n;; more metadata for each stacker\n(define-map metadata {stacker: principal, key: (string-ascii 8)} (string-ascii 80))\n\n;; Keep track of stackers grouped by pool and reward-cycle id\n;; \"grouped-stackers-len\" returns the number of lists for the given group\n;; \"grouped-stackers\" returns the actual list\n(define-map grouped-stackers {pool: principal, reward-cycle: uint, index: uint}\n  (list 30 {lock-amount: uint, stacker: principal, unlock-burn-height: uint, pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint}))\n(define-map grouped-stackers-len {pool: principal, reward-cycle: uint} uint)\n\n;; Keep track of total stxs stacked grouped by pool and reward-cycle id\n(define-map grouped-totals {pool: principal, reward-cycle: uint} uint)\n\n;;\n;; Helper functions for \"grouped-stackers\" map\n;;\n\n(define-private (merge-details (stacker {lock-amount: uint, stacker: principal, unlock-burn-height: uint}) (user {pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint}))\n  {lock-amount: (get lock-amount stacker),\n   stacker: (get stacker stacker),\n   unlock-burn-height: (get unlock-burn-height stacker),\n   pox-addr: (get pox-addr user),\n   cycle: (get cycle user)})\n\n(define-private (insert-in-new-list (pool principal) (reward-cycle uint) (last-index uint) (details {lock-amount: uint, stacker: principal, unlock-burn-height: uint, pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint}))\n  (let ((index (+ last-index u1)))\n    (map-insert grouped-stackers (print {pool: pool, reward-cycle: reward-cycle, index: index}) (list details))\n    (map-set grouped-stackers-len {pool: pool, reward-cycle: reward-cycle} index)))\n\n(define-private (map-set-details (pool principal) (details {lock-amount: uint, stacker: principal, unlock-burn-height: uint, pox-addr: {hashbytes: (buff 32), version: (buff 1)}, cycle: uint}))\n  (let ((reward-cycle (+ (current-pox-reward-cycle) u1))\n        (last-index (get-status-lists-last-index pool reward-cycle))\n        (stacker-key {pool: pool, reward-cycle: reward-cycle, index: last-index}))\n    (match (map-get? grouped-stackers stacker-key)\n      stackers (match (as-max-len? (append stackers details) u30)\n                 updated-list (map-set grouped-stackers stacker-key updated-list)\n                 (insert-in-new-list pool reward-cycle last-index details))\n      (map-insert grouped-stackers stacker-key (list details)))\n    (map-set grouped-totals {pool: pool, reward-cycle: reward-cycle} \n      (+ (get-total pool reward-cycle) (get lock-amount details)))))\n\n;;\n;; Helper functions for pox-4 calls\n;;\n\n;; Get stacker info\n(define-private (pox-get-stacker-info (user principal))\n  (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-stacker-info user))\n\n;; Revokes and delegates stx\n(define-private (delegate-stx-inner (amount-ustx uint) (delegate-to principal) (until-burn-ht (optional uint)))\n  (let ((result-revoke\n            ;; Calls revoke and ignores result\n          (contract-call? 'SP000000000000000000002Q6VF78.pox-4 revoke-delegate-stx)))\n    ;; Calls delegate-stx, converts any error to uint\n    (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stx amount-ustx delegate-to until-burn-ht none)\n      success (ok success)\n      error (err (* u1000 (to-uint error))))))\n\n\n;; Calls pox-4 delegate-stack-extend and delegate-stack-increase.\n;; parameter amount-ustx must be lower or equal the stx balance and the delegated amount\n;; returns the new unlock height and the new total locked stx amount\n(define-private (delegate-stack-extend-increase (user principal)\n                  (amount-ustx uint)\n                  (pox-address {hashbytes: (buff 32), version: (buff 1)}))\n  (let ((status (stx-account user))\n        (locked-amount (get locked status)))\n    (asserts! (>= amount-ustx locked-amount) err-decrease-forbidden)\n    (match (maybe-extend-for-next-cycle user pox-address status)\n      success-extend (let ((unlock-burn-height (get unlock-burn-height success-extend)))\n            (if (is-eq amount-ustx locked-amount)\n                ;; do not increase\n                (begin\n                  (asserts! (> unlock-burn-height (get unlock-height status)) err-already-stacking)\n                  (ok {lock-amount: (get locked status),\n                      stacker: user,\n                      unlock-burn-height: unlock-burn-height}))\n                ;; else increase\n                (let ((increase-by (- amount-ustx locked-amount)))\n                  (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-increase\n                          user pox-address increase-by)\n                    success-increase (ok {lock-amount: increase-by,\n                                          stacker: user,\n                                          unlock-burn-height: unlock-burn-height})\n                    error-increase (err (* u1000000000 (to-uint error-increase)))))))\n      error (err (* u1000000 (to-uint error))))))\n\n;; Tries to extend the user's locking to the next cycle\n;; if not yet locked until the end of the next cycle.\n(define-private (maybe-extend-for-next-cycle\n                  (user principal)\n                  (pox-address {hashbytes: (buff 32), version: (buff 1)})\n                  (status {locked: uint, unlocked: uint, unlock-height: uint})\n                )\n  (let ((current-cycle (current-pox-reward-cycle))\n        (unlock-height (get unlock-height status)))\n    (if (not-locked-for-cycle unlock-height (+ u1 current-cycle))\n      (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-extend\n             user pox-address u1)\n      (ok {stacker: user, unlock-burn-height: unlock-height}))))\n\n;; Stacks given amount of delegated stx tokens.\n;; Stores the result in \"grouped-stackers\".\n(define-private (delegate-stack-stx-fold (details {user: principal, amount-ustx: uint})\n                  (context {pox-address: {hashbytes: (buff 32), version: (buff 1)},\n                            start-burn-ht: uint,\n                            result: (list 30 (response {lock-amount: uint, stacker: principal, unlock-burn-height: uint} uint))}))\n  (let ((user (get user details))\n        (user-account (stx-account user))\n        (amount-ustx (min (get amount-ustx details) (+ (get locked user-account) (get unlocked user-account)))))\n    (pox-delegate-stack-stx-amount user amount-ustx context)))\n\n;; Stacks maximal amount of delegated stx tokens.\n;; Stores the result in \"grouped-stackers\".\n(define-private (delegate-stack-stx-simple-fold (user principal)\n                  (context {pox-address: {hashbytes: (buff 32), version: (buff 1)},\n                            start-burn-ht: uint,\n                            result: (list 30 (response {lock-amount: uint, stacker: principal, unlock-burn-height: uint} uint))}))\n  (let ((buffer-amount u1000000)\n        (user-account (stx-account user))\n        (allowed-amount (min (get-delegated-amount user) (+ (get locked user-account) (get unlocked user-account))))\n        ;; Amount to lock must be leq allowed-amount and geq locked amount.\n        ;; Increase the locked amount if possible, but leave a buffer for revoke tx fees if possible.\n        ;; Decreasing the locked amount requires a cool down cycle.\n        (amount-ustx (if (> allowed-amount buffer-amount)\n                            (max (get locked user-account) (- allowed-amount buffer-amount))\n                            allowed-amount)))\n    (pox-delegate-stack-stx-amount user amount-ustx context)))\n\n;; Stacks the given amount of delegated stx tokens\n(define-private (pox-delegate-stack-stx-amount (user principal) (amount-ustx uint)\n                  (context {pox-address: {hashbytes: (buff 32), version: (buff 1)},\n                            start-burn-ht: uint,\n                            result: (list 30 (response {lock-amount: uint, stacker: principal, unlock-burn-height: uint} uint))}))\n  (let ((pox-address (get pox-address context))\n        (start-burn-ht (get start-burn-ht context))\n        (stack-result\n          (if (> amount-ustx u0)\n            (match (map-get? user-data user)\n              user-details\n                ;; Call delegate-stack-stx\n                ;; On failure, call delegate-stack-extend and increase\n                (match (contract-call? 'SP000000000000000000002Q6VF78.pox-4 delegate-stack-stx\n                        user amount-ustx\n                        pox-address start-burn-ht u1)\n                  stacker-details  (begin\n                                    ;; Store result on success\n                                    (map-set-details tx-sender (merge-details stacker-details user-details))\n                                    (ok stacker-details))\n                  error (if (is-eq error 3) ;; Check whether user is already stacked\n                          (match (delegate-stack-extend-increase user amount-ustx pox-address)\n                            stacker-details-2 (begin\n                                    ;; Store result on success\n                                    (map-set-details tx-sender (merge-details stacker-details-2 user-details))\n                                    (ok stacker-details-2))\n                            error-extend-increase (err error-extend-increase))\n                          (err (* u1000 (to-uint error)))))\n              err-not-found)\n            err-non-positive-amount)))\n        ;; Return a tuple even if delegate-stack-stx call failed\n    {pox-address: pox-address,\n     start-burn-ht: start-burn-ht,\n     result: (unwrap-panic (as-max-len? (append (get result context) stack-result) u30))}))\n;;\n;; Public functions\n;;\n\n;; @desc User calls this function to delegate the stacking rights to a pool.\n;; Users can revoke delegation and stx tokens will unlock at the end of the locking period.\n;;\n;; @param amount-ustx; amount to delegate. Can be higher than current stx balance.\n;; @param delegate-to; the pool's Stacks address.\n;; @param until-burn-ht; optional maximal duration of the pool membership. Can be none for undetermined membership.\n;; @param pool-pox-addr; the optional pool's bitcoin reward address. Can be none, so that the pool operator can choose different addresses.\n;; @param user-pox-addr; raw bytes of user's address that should be used for payout of rewards by pool admins.\n(define-public (delegate-stx (amount-ustx uint) (delegate-to principal) (until-burn-ht (optional uint))\n                 (pool-pox-addr (optional {hashbytes: (buff 32), version: (buff 1)}))\n                 (user-pox-addr {hashbytes: (buff 32), version: (buff 1)})\n                 (user-metadata (optional {keys: (list 30 (string-ascii 8)), values: (list 30 (string-ascii 80))})))\n  (begin\n    ;; Must be called directly by the tx-sender or by an allowed contract-caller\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (match user-metadata\n      md (map set-metadata-internal (get keys md) (get values md))\n      (list true))\n    (map-set user-data tx-sender\n      {pox-addr: user-pox-addr, cycle: (current-pox-reward-cycle)})\n    (delegate-stx-inner amount-ustx delegate-to until-burn-ht)))\n\n;; @desc Pool admins call this function to lock stacks of their pool members in batches for 1 cycle.\n;; @param users; list of users with amounts to lock.\n;; @param pox-address; the pool's bitcoin reward address.\n;; @param start-burn-ht; a future bitcoin height of the current cycle.\n(define-public (delegate-stack-stx (users (list 30 {user: principal, amount-ustx: uint}))\n                 (pox-address { version: (buff 1), hashbytes: (buff 32)})\n                 (start-burn-ht uint))\n  (begin\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (ok (get result\n          (fold delegate-stack-stx-fold users {start-burn-ht: start-burn-ht, pox-address: pox-address, result: (list)})))))\n\n;; @desc Pool admins call this function to lock stacks of their pool members in batches for a lock period of 1 cycle.\n;; The locking amount is determined from the delegated amount and the users balances.\n;; @param users; list of current pool members.\n;; @param pox-address; the pool's bitcoin reward address.\n;; @param start-burn-ht; a future bitcoin height of the current cycle.\n(define-public (delegate-stack-stx-simple (users (list 30 principal))\n                 (pox-address { version: (buff 1), hashbytes: (buff 32)})\n                 (start-burn-ht uint))\n  (begin\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (ok (get result\n          (fold delegate-stack-stx-simple-fold users {start-burn-ht: start-burn-ht, pox-address: pox-address, result: (list)})))))\n;;\n;; Read-only functions\n;;\n\n\n;; What's the reward cycle number of the burnchain block height?\n;; Will runtime-abort if height is less than the first burnchain block (this is intentional)\n(define-read-only (burn-height-to-reward-cycle (height uint))\n    (/ (- height (get first-burnchain-block-height pox-info)) (get reward-cycle-length pox-info)))\n\n;; What's the block height at the start of a given reward cycle?\n(define-read-only (reward-cycle-to-burn-height (cycle uint))\n    (+ (get first-burnchain-block-height pox-info) (* cycle (get reward-cycle-length pox-info))))\n\n;; What's the current PoX reward cycle?\n(define-read-only (current-pox-reward-cycle)\n    (burn-height-to-reward-cycle burn-block-height))\n\n\n;; Returns the user's stacking details from pox contract,\n;; the user's delegation details from \"user-data\" and the\n;; total locked stacks for the given pool and cycle-id.\n(define-read-only (get-status (pool principal) (user principal) (cycle-id uint))\n  (let ((stacker-info (unwrap! (pox-get-stacker-info user) err-no-stacker-info)))\n    (ok {stacker-info: stacker-info,\n         user-info: (unwrap! (map-get? user-data user) err-no-user-info),\n         total: (get-total pool cycle-id)})))\n\n;; Returns the number of lists of stackers that have locked their stx for the given pool and cycle.\n(define-read-only (get-status-lists-last-index (pool principal) (reward-cycle uint))\n  (default-to u0 (map-get? grouped-stackers-len {pool: pool, reward-cycle: reward-cycle})))\n\n;; Returns a list of stackers that have locked their stx for the given pool and cycle.\n;; index: must be smaller than get-status-lists-last-index\n(define-read-only (get-status-list (pool principal) (reward-cycle uint) (index uint))\n  {total: (get-total pool reward-cycle),\n   status-list: (map-get? grouped-stackers {pool: pool, reward-cycle: reward-cycle, index: index})})\n\n;; Returns currently delegated amount for a given user\n(define-read-only (get-delegated-amount (user principal))\n  (default-to u0 (get amount-ustx (contract-call? 'SP000000000000000000002Q6VF78.pox-4 get-delegation-info user))))\n\n;; Returns information about last delegation call for a given user\n;; This information can be obsolete due to a normal revoke call\n(define-read-only (get-user-data (user principal))\n  (map-get? user-data user))\n\n;; Returns locked and unlocked amount for given user\n(define-read-only (get-stx-account (user principal))\n  (stx-account user))\n\n;; Returns total stacks locked by given pool, reward-cycle.\n;; The total for a given reward cycle needs to be calculated off-chain\n;; depending on the pool's policy.\n(define-read-only (get-total (pool principal) (reward-cycle uint))\n  (default-to u0 (map-get? grouped-totals {pool: pool, reward-cycle: reward-cycle})))\n\n;; Returns true if the given burn chain height is smaller\n;; than the start of the given reward cycle id.\n(define-read-only (not-locked-for-cycle (unlock-burn-height uint) (cycle uint))\n  (<= unlock-burn-height (reward-cycle-to-burn-height cycle)))\n\n;;\n;; Functions to handle metadata\n;;\n\n(define-read-only (get-metadata (key {stacker: principal, key: (string-ascii 8)}))\n  (map-get? metadata key))\n\n(define-read-only (get-metadata-many (keys (list 30 {stacker: principal, key: (string-ascii 8)})))\n  (map get-metadata keys))\n\n(define-public (set-metadata (key (string-ascii 8)) (value (string-ascii 80)))\n  (begin\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (ok (set-metadata-internal key value))))\n\n(define-public (set-metadata-many (keys (list 30 (string-ascii 8))) (values (list 30 (string-ascii 80))))\n  (begin\n    (asserts! (check-caller-allowed) err-stacking-permission-denied)\n    (ok (map set-metadata-internal keys values))))\n\n(define-private (set-metadata-internal (key (string-ascii 8)) (value (string-ascii 80)))\n  (map-set metadata {stacker: tx-sender, key: key} value))\n\n;; Returns minimum\n(define-private (min (amount-1 uint) (amount-2 uint))\n  (if (< amount-1 amount-2)\n    amount-1\n    amount-2))\n\n;; Returns maximum\n(define-private (max (amount-1 uint) (amount-2 uint))\n  (if (> amount-1 amount-2)\n    amount-1\n    amount-2))\n\n;;\n;; Functions about allowance of delegation/stacking contract calls\n;;\n\n;; Give a contract-caller authorization to call stacking methods\n;;  normally, stacking methods may only be invoked by _direct_ transactions\n;;   (i.e., the tx-sender issues a direct contract-call to the stacking methods)\n;;  by issuing an allowance, the tx-sender may call through the allowed contract\n(define-public (allow-contract-caller (caller principal) (until-burn-ht (optional uint)))\n  (begin\n    (asserts! (is-eq tx-sender contract-caller) err-stacking-permission-denied)\n    (ok (map-set allowance-contract-callers\n          { sender: tx-sender, contract-caller: caller}\n          { until-burn-ht: until-burn-ht}))))\n\n;; Revokes contract-caller authorization to call stacking methods\n(define-public (disallow-contract-caller (caller principal))\n  (begin\n    (asserts! (is-eq tx-sender contract-caller) err-stacking-permission-denied)\n    (ok (map-delete allowance-contract-callers { sender: tx-sender, contract-caller: caller}))))\n\n;; Verifies that the contract caller has allowance to handle the tx-sender's stacking\n(define-read-only (check-caller-allowed)\n  (or (is-eq tx-sender contract-caller)\n    (let ((caller-allowed\n                 ;; if not in the caller map, return false\n            (unwrap! (map-get? allowance-contract-callers\n                       { sender: tx-sender, contract-caller: contract-caller})\n              false))\n          (expires-at\n               ;; if until-burn-ht not set, then return true (because no expiry)\n            (unwrap! (get until-burn-ht caller-allowed) true)))\n          ;; is the caller allowance still valid\n      (< burn-block-height expires-at))))\n\n;; Returns the burn height at which a particular contract is allowed to stack for a particular principal.\n;; The result is (some (some X)) if X is the burn height at which the allowance terminates.\n;; The result is (some none) if the caller is allowed indefinitely.\n;; The result is none if there is no allowance record.\n(define-read-only (get-allowance-contract-callers (sender principal) (calling-contract principal))\n  (map-get? allowance-contract-callers { sender: sender, contract-caller: calling-contract}))\n",
    "analysis": {
      "summary": "This contract acts as a wrapper for the Stacks blockchain's PoX (Proof of Transfer) stacking feature, enabling users to delegate their STX tokens to a stacking pool, managed by pool operators, to participate in stacking and earn Bitcoin rewards.",
      "explanation": "The contract provides a comprehensive interface for managing delegated stacking operations. It allows users to delegate their STX tokens to a pool, specifying a Bitcoin address for receiving rewards. Pool operators can then lock these tokens according to the pool's rules, typically for participation in the next reward cycle. The contract includes error handling, data storage for user and pool information, and functions for delegating STX, extending stacking duration, and handling metadata.\n\nKey components include:\n- Error codes for various failure states <L5-12>.\n- A constant for interacting with the PoX contract <L14>.\n- Data maps for tracking allowances, user data, metadata, stackers by pool, and total STX stacked per pool <L16-34>.\n- Helper functions for managing stacker details and interacting with the PoX contract <L36-144>.\n- Public functions for users to delegate STX to pools, and for pool admins to lock delegated STX for stacking <L146-221>.\n- Read-only functions for querying stacking status, user data, and metadata <L223-335>.\n\nThe contract leverages the `contract-call?` feature extensively to interact with the official PoX contract, ensuring that operations like delegating STX, revoking delegation, and querying stacker information are executed as intended. It also uses Clarity's data maps to store and manage the complex relationships between users, their delegation preferences, and the stacking operations performed by pools.",
      "tags": [
        "DeFi",
        "Stacking",
        "PoX",
        "Token-Delegation",
        "Rewards"
      ]
    }
  },
  {
    "rank": 171,
    "contract": "SP4SZE494VC2YC5JYG7AYFQ44F5Q4PYV7DVMDPBG.ststx-token",
    "calls": 146,
    "source": "(impl-trait .sip-010-trait-ft-standard.sip-010-trait)\n\n;; Defines the Stacked STX according to the SIP010 Standard\n(define-fungible-token ststx)\n\n(define-constant ERR_NOT_AUTHORIZED u1401)\n\n;;-------------------------------------\n;; Variables\n;;-------------------------------------\n\n(define-data-var token-uri (string-utf8 256) u\"\")\n\n;;-------------------------------------\n;; SIP-010 \n;;-------------------------------------\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply ststx))\n)\n\n(define-read-only (get-name)\n  (ok \"Stacked STX Token\")\n)\n\n(define-read-only (get-symbol)\n  (ok \"stSTX\")\n)\n\n(define-read-only (get-decimals)\n  (ok u6)\n)\n\n(define-read-only (get-balance (account principal))\n  (ok (ft-get-balance ststx account))\n)\n\n(define-read-only (get-token-uri)\n  (ok (some (var-get token-uri)))\n)\n\n(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender sender) (err ERR_NOT_AUTHORIZED))\n\n    (match (ft-transfer? ststx amount sender recipient)\n      response (begin\n        (print memo)\n        (print { action: \"transfer\", data: { sender: tx-sender, recipient: recipient, amount: amount, block-height: block-height } })\n        (ok response)\n      )\n      error (err error)\n    )\n  )\n)\n\n;;-------------------------------------\n;; Admin\n;;-------------------------------------\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (begin\n    (try! (contract-call? .dao check-is-protocol tx-sender))\n    (ok (var-set token-uri value))\n  )\n)\n\n;;-------------------------------------\n;; Mint / Burn\n;;-------------------------------------\n\n;; Mint method\n(define-public (mint-for-protocol (amount uint) (recipient principal))\n  (begin\n    (try! (contract-call? .dao check-is-protocol contract-caller))\n    (ft-mint? ststx amount recipient)\n  )\n)\n\n;; Burn method\n(define-public (burn-for-protocol (amount uint) (sender principal))\n  (begin\n    (try! (contract-call? .dao check-is-protocol contract-caller))\n    (ft-burn? ststx amount sender)\n  )\n)\n\n;; Burn external\n(define-public (burn (amount uint))\n  (begin\n    (ft-burn? ststx amount tx-sender)\n  )\n)\n",
    "analysis": {
      "summary": "This contract implements a fungible token named Stacked STX (stSTX) following the SIP-010 standard for fungible tokens on the Stacks blockchain.",
      "explanation": "The contract begins by implementing the SIP-010 trait for fungible tokens, ensuring it adheres to a standardized interface for fungible tokens on Stacks. The `define-fungible-token` command <L3> creates the stSTX token. A constant for an error code is defined <L5>, indicating unauthorized actions. The contract includes a variable for the token's URI <L9>, which can be updated by an authorized account. The SIP-010 standard functions are implemented to provide basic token information and operations: `get-total-supply` <L13-15>, `get-name` <L17-19>, `get-symbol` <L21-23>, `get-decimals` <L25-27>, `get-balance` <L29-31>, and `get-token-uri` <L33-35> allow reading token metadata and balances. The `transfer` function <L37-51> enables token transfers, requiring the sender to be the transaction initiator and logging the transfer details. The `set-token-uri` function <L55-59> allows updating the token's URI, restricted to an authorized account verified by a call to a `.dao` contract. Minting and burning functions <L63-79> are provided for protocol-level operations, also restricted to authorized accounts. An additional `burn` function <L81-85> allows any holder to burn their tokens.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "DeFi",
        "protocol"
      ]
    }
  },
  {
    "rank": 172,
    "contract": "SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S.change-price-v1",
    "calls": 145,
    "source": "(use-trait nft-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n(use-trait tradables-trait .tradable-trait.tradables-trait)\n\n(define-trait marketplace-unlist-type-a \n  (\n    (unlist-asset (<tradables-trait> uint) (response bool uint))\n  )\n)\n  \n(define-trait marketplace-unlist-type-b \n  (\n    (unlist-item (<nft-trait> uint uint) (response bool uint))\n  )\n)\n  \n(define-trait marketplace-unlist-type-c \n  (\n    (unlist-item (<nft-trait> (string-ascii 256) uint) (response bool uint))\n  )\n)\n\n(define-trait marketplace-list \n  (\n    (list-asset (<tradables-trait> uint uint uint) (response bool uint))\n  )\n)\n  \n(define-public (change-price-a (first-marketplace <marketplace-unlist-type-a>) (second-marketplace <marketplace-list>)  \n                               (tradables <tradables-trait>) (tradable-id uint) (new-price uint) (commission uint))\n  (begin\n    (try! (contract-call? first-marketplace unlist-asset tradables tradable-id))\n    (contract-call? second-marketplace list-asset tradables tradable-id new-price commission)\n  )\n)\n\n(define-public (change-price-b (first-marketplace <marketplace-unlist-type-b>) (second-marketplace <marketplace-list>) \n                               (collection <nft-trait>) (collection-id uint) (item-id uint)\n                               (tradables <tradables-trait>) (new-price uint) (commission uint))\n  (begin\n    (try! (contract-call? first-marketplace unlist-item collection collection-id item-id))\n    (contract-call? second-marketplace list-asset tradables item-id new-price commission)\n  )\n)\n\n(define-public (change-price-c (first-marketplace <marketplace-unlist-type-c>) (second-marketplace <marketplace-list>) \n                               (collection <nft-trait>) (collection-id (string-ascii 256)) (item-id uint)\n                               (tradables <tradables-trait>) (new-price uint) (commission uint))\n  (begin\n    (try! (contract-call? first-marketplace unlist-item collection collection-id item-id))\n    (contract-call? second-marketplace list-asset tradables item-id new-price commission)\n  )\n)\n",
    "analysis": {
      "summary": "This contract provides functionality for changing the price of assets on a marketplace, supporting different types of assets including tradables and NFTs.",
      "explanation": "The contract integrates with external traits to interact with tradable assets and NFTs, allowing assets to be unlisted from one marketplace and relisted on another with a new price and commission. The contract defines three traits for unlisting assets from marketplaces ('marketplace-unlist-type-a', 'marketplace-unlist-type-b', and 'marketplace-unlist-type-c') and one trait for listing assets ('marketplace-list'). Each unlist trait corresponds to a different asset type or method of identification, and the list trait is used for adding assets to a marketplace.\n\n- <L1-2> Import external traits for NFTs and tradables to interact with these asset types.\n- <L4-9> Define a trait for unlisting tradable assets by ID.\n- <L11-16> Define a trait for unlisting NFTs by numeric ID.\n- <L18-23> Define a trait for unlisting NFTs by string ID.\n- <L25-29> Define a trait for listing assets with price and commission.\n- <L31-38> Implement a function to change the price of a tradable asset by unlisting it from one marketplace and listing it on another with a new price.\n- <L40-49> Similar to 'change-price-a', but for NFTs identified by numeric IDs, allowing their price to be changed across marketplaces.\n- <L51-60> Extend the functionality to NFTs identified by string IDs, enabling price changes in a similar manner.\n\nEach 'change-price' function uses 'contract-call?' to interact with other contracts, first to unlist the asset and then to list it again with a new price. The 'try!' construct ensures that if the unlist operation fails, the transaction is aborted before attempting to list the asset again.",
      "tags": [
        "marketplace",
        "NFT",
        "fungible-token",
        "DeFi",
        "protocol"
      ]
    }
  },
  {
    "rank": 173,
    "contract": "SP1JTCR202ECC6333N7ZXD7MK7E3ZTEEE1MJ73C60.name-registrar",
    "calls": 144,
    "source": ";; Contract for registering a new BNS name.\n;; \n;; This contract follows the \"single-tx\" registration flow,\n;; instead of using separate name-preorder and name-register\n;; transactions. Under the hood, both contract methods are called.\n\n;; Register a new name\n;; \n;; This function is designed to be as cost-efficient as possible. Because of this,\n;; it requires all params (like price, hashed name) to be pre-computed.\n;; \n;; To compute the `hashed-fqn` parameter, use:\n;; `hash160(${name}.${namespace}${salt})`\n(define-public (name-register \n    (name (buff 48)) \n    (namespace (buff 20)) \n    (amount uint)\n    (hashed-fqn (buff 20))\n    (salt (buff 20))\n  )\n  (begin\n    (try! (contract-call? 'SP000000000000000000002Q6VF78.bns name-preorder hashed-fqn amount))\n    (try! (contract-call? 'SP000000000000000000002Q6VF78.bns name-register namespace name salt 0x))\n    (print {\n      topic: \"name-registered\",\n      name: name,\n      namespace: namespace,\n      amount: amount,\n    })\n    (ok true)\n  )\n)\n",
    "analysis": {
      "summary": "This contract provides a single-transaction method for registering a new BNS (Blockchain Name Service) name on the Stacks blockchain, combining the preorder and register steps into one operation.",
      "explanation": "The contract introduces a streamlined approach to BNS name registration, encapsulating the complexity of the two-step registration process (preorder and register) into a single transaction. This method is designed to be cost-efficient by requiring users to pre-compute parameters such as the price, hashed name, and salt. The contract leverages the `contract-call?` function to interact with the BNS contract (`SP000000000000000000002Q6VF78.bns`) for both the preorder and registration steps.\n\n- The `name-register` function accepts five parameters: `name`, `namespace`, `amount`, `hashed-fqn`, and `salt`. The `name` and `namespace` are buffers of maximum lengths 48 and 20 bytes, respectively, representing the BNS name being registered. The `amount` is a uint indicating the price paid for the name. The `hashed-fqn` is a 20-byte buffer representing the hash of the fully qualified name (FQN) concatenated with the salt, used to ensure the uniqueness and secrecy of the preorder phase. The `salt` is a 20-byte buffer used in hashing to prevent front-running attacks.\n\n- The function begins by calling the `name-preorder` method of the BNS contract, passing `hashed-fqn` and `amount` as arguments <L9>. This step is necessary to reserve the name and demonstrate the commitment to purchase it.\n\n- Next, it calls the `name-register` method on the BNS contract, providing `namespace`, `name`, and `salt` as arguments, with a zero-byte buffer (`0x`) for the zone file <L10>. This step completes the registration process, associating the name with the caller's account.\n\n- Finally, the function prints a structured message containing the `topic` 'name-registered' and details of the registration (name, namespace, and amount) <L11-15>. This serves as a public record of the event.\n\n- The function returns `(ok true)` upon successful completion, indicating that the name registration was successful <L16>.\n\nThis contract simplifies the BNS name registration process by reducing the required transactions and pre-computing parameters to save on transaction fees and execution costs.",
      "tags": [
        "BNS",
        "registration",
        "single-tx",
        "cost-efficient",
        "blockchain-name-service"
      ]
    }
  },
  {
    "rank": 174,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v196",
    "calls": 143,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait oabc2f5b3982b0123 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o318649a6b009833d 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait oeb241b403e5527bf 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (oc9bd3483422ecf0d (o5183708558b845a4 <oabc2f5b3982b0123>) (o5fea83bcb8e0304e <oabc2f5b3982b0123>) (o26a22f288488cc6a <oeb241b403e5527bf>) (oc53901217b812f93 <o318649a6b009833d>) (o977b01773ea33d9d uint)) (let ((o9808b37ac42bb57f (try! (as-contract (contract-call? o26a22f288488cc6a swap o5183708558b845a4 o5fea83bcb8e0304e oc53901217b812f93 o977b01773ea33d9d u1))))) (ok (get amt-out o9808b37ac42bb57f)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-b (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-c (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-e (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-f (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-g (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-i (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-j (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-k (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-l (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-m (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-n (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-p (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-q (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-r (o87c7a796c552562f <oabc2f5b3982b0123>) (od1e16e39c3ae077e <oabc2f5b3982b0123>) (o2ab088a181982c9d <oeb241b403e5527bf>) (ob1b2fec632f83e7b <o318649a6b009833d>) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (oc9bd3483422ecf0d o87c7a796c552562f od1e16e39c3ae077e o2ab088a181982c9d ob1b2fec632f83e7b o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-s (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53)))) (asserts! (> o24ee854d6599d6a5 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o24ee854d6599d6a5 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o24ee854d6599d6a5))))) (define-public (swap-helper-t (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-u (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-w (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-x (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-y (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-z (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <od3fe56900a57147c>) (o058a5af358019b66 <od3fe56900a57147c>) (o8e253e1c5481596b <o376172857413743a>) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (ob865e08a0fc1d9be o6222ee5620048475 o058a5af358019b66 o8e253e1c5481596b o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115)))))",
    "analysis": {
      "summary": "This contract facilitates token swaps across different liquidity pools on the Stacks blockchain.",
      "explanation": "The contract defines a series of public functions (swap-helper-a to swap-helper-z) that interact with various liquidity pools and swap protocols on the Stacks blockchain. Each function is designed to handle a specific swap scenario, utilizing different tokens and pools, as indicated by the use of multiple `use-trait` declarations at the beginning of the contract. These traits represent interfaces for SIP-010 standard fungible tokens and custom liquidity pool traits. The contract employs a combination of arithmetic operations, contract calls, and asset transfers to execute the swaps. Key operations include calculating swap amounts, transferring tokens between users and pools, and incrementing a counter variable to track swap operations. The contract ensures that only a specific principal (likely the contract deployer or a trusted entity) can initiate swaps, adding a layer of security. Error handling is implemented to manage unsuccessful operations gracefully.",
      "tags": [
        "swap",
        "liquidity-pool",
        "fungible-token",
        "DeFi",
        "protocol"
      ]
    }
  },
  {
    "rank": 175,
    "contract": "SP2XD7417HGPRTREMKF748VNEQPDRR0RMANB7X1NK.migrate-legacy-v2",
    "calls": 141,
    "source": "(impl-trait .extension-trait.extension-trait)\n(impl-trait .proposal-trait.proposal-trait)\n(define-constant err-unauthorised (err u1000))\n(define-public (migrate)\n\t(let (\n\t\t\t(sender tx-sender)\n\t\t\t(abtc-bal (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc get-balance-fixed sender)))\n\t\t\t(susdt-bal (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt get-balance-fixed sender)))\n\t\t\t(ssko-bal (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-ssko get-balance-fixed sender)))\n\t\t)\n\t\t(and (> abtc-bal u0)\n\t\t\t(begin\n\t\t\t\t(as-contract (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc burn-fixed abtc-bal sender)))\n\t\t\t\t(as-contract (try! (contract-call? .token-abtc mint-fixed abtc-bal sender)))))\n\t\t(and (> susdt-bal u0)\n\t\t\t(begin\n\t\t\t\t(as-contract (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt burn-fixed susdt-bal sender)))\n\t\t\t\t(as-contract (try! (contract-call? .token-susdt mint-fixed susdt-bal sender)))))\n\t\t(and (> ssko-bal u0)\n\t\t\t(begin\n\t\t\t\t(as-contract (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-ssko burn-fixed ssko-bal sender)))\n\t\t\t\t(as-contract (try! (contract-call? .token-ssko mint-fixed ssko-bal sender)))))\n\t\t(ok true)))\n(define-public (callback (sender principal) (payload (buff 2048)))\n\t(ok true))\n(define-public (execute (sender principal))\n\t(begin\t\t\n\t\t(try! (contract-call? .executor-dao set-extensions (list\n\t\t\t{ extension: .migrate-legacy, enabled: false }\n\t\t\t{ extension: .migrate-legacy-v2, enabled: true }\n\t\t)))\n\t\t(ok true)\n\t)\n)",
    "analysis": {
      "summary": "This contract facilitates the migration of balances from legacy tokens to new versions by burning the old tokens and minting equivalent amounts of the new ones for the same owner.",
      "explanation": "The contract implements traits from extension and proposal systems, allowing it to interact with other contracts within a governed framework. It defines a single error constant for unauthorized actions. The main functionality is provided by the `migrate` function, which checks the balances of three specific tokens (ABTC, SUSDT, SSKO) for the caller, burns any existing balances in the old contracts, and mints equivalent balances in the new contracts. The `callback` and `execute` functions seem to be placeholders for further integration with a DAO or executor contract, allowing for governance-controlled migration processes.\n\n- <L1-2> Import traits for extension and proposal mechanisms, indicating this contract's compatibility with a broader system or protocol.\n- <L3> Defines a constant for unauthorized access errors.\n- <L4-24> The `migrate` function encapsulates the migration logic. It retrieves the caller's balances for three tokens, burns those balances in the old contracts, and mints equivalent amounts in the new contracts. This is done using `contract-call?` to interact with external contracts and `as-contract` to execute these calls as if they were made by the contract itself, not the user, to ensure proper authorization.\n- <L25-27> A `callback` function is defined but only returns `ok true`, likely intended for future use where a callback mechanism is required for asynchronous operations or inter-contract communication.\n- <L28-34> The `execute` function is designed to interact with a DAO or executor contract, updating the status of migration-related extensions. This demonstrates an advanced use case where contract functionality can be dynamically adjusted based on governance decisions.",
      "tags": [
        "migration",
        "token",
        "DAO",
        "governance",
        "DeFi"
      ]
    }
  },
  {
    "rank": 176,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v184",
    "calls": 141,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait oabc2f5b3982b0123 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o318649a6b009833d 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait oeb241b403e5527bf 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (oc9bd3483422ecf0d (o5183708558b845a4 <oabc2f5b3982b0123>) (o5fea83bcb8e0304e <oabc2f5b3982b0123>) (o26a22f288488cc6a <oeb241b403e5527bf>) (oc53901217b812f93 <o318649a6b009833d>) (o977b01773ea33d9d uint)) (let ((o9808b37ac42bb57f (try! (as-contract (contract-call? o26a22f288488cc6a swap o5183708558b845a4 o5fea83bcb8e0304e oc53901217b812f93 o977b01773ea33d9d u1))))) (ok (get amt-out o9808b37ac42bb57f)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-b (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-c (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-e (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-f (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-g (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-i (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-j (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-k (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-l (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-m (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-n (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <oabc2f5b3982b0123>) (o308ebec51bfd0456 <oabc2f5b3982b0123>) (ofc23d2fa81147ace <oeb241b403e5527bf>) (odd0e9a739735577f <o318649a6b009833d>) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (oc9bd3483422ecf0d ofddb7909dc88b496 o308ebec51bfd0456 ofc23d2fa81147ace odd0e9a739735577f o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-p (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-q (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-r (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-s (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-t (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-u (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-w (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-x (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-y (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-z (o87c7a796c552562f <o61f60b1a41db3adf>) (od1e16e39c3ae077e <o61f60b1a41db3adf>) (oacd4b9a0a83a3697 uint) (oa9556f6ebeee1aa6 bool) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o2ee4fb2388ad5104 o87c7a796c552562f od1e16e39c3ae077e oacd4b9a0a83a3697 oa9556f6ebeee1aa6 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115)))))",
    "analysis": {
      "summary": "This contract provides a comprehensive suite of swap-helper functions to facilitate token swaps across different protocols on the Stacks blockchain.",
      "explanation": "This Clarity smart contract is designed to interact with various token swap protocols on the Stacks blockchain, enabling users to swap tokens across different platforms. It utilizes multiple `use-trait` declarations to interface with SIP-010 compliant tokens and specific protocol traits, ensuring compatibility and standardization. The contract defines a series of `swap-helper` functions, each tailored to interact with different protocols or token standards, facilitating token swaps by calling the appropriate contract functions on those protocols. Each `swap-helper` function performs a series of operations, including balance checks, contract calls to perform the swaps, and transferring the resulting tokens back to the user, ensuring a seamless swap experience. The contract employs rigorous error handling and asserts to ensure transaction validity and security. It's a complex integration layer between users and multiple DeFi protocols on Stacks, abstracting the intricacies of individual protocol interactions.",
      "tags": [
        "DeFi",
        "token-swap",
        "protocol-interaction",
        "SIP-010",
        "multi-protocol"
      ]
    }
  },
  {
    "rank": 177,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.xyk-staking-sbtc-stx-v-1-1",
    "calls": 140,
    "source": ";; xyk-staking-sbtc-stx-v-1-1\n\n(define-constant ERR_NOT_AUTHORIZED (err u4001))\n(define-constant ERR_INVALID_AMOUNT (err u4002))\n(define-constant ERR_INVALID_PRINCIPAL (err u4003))\n(define-constant ERR_ALREADY_ADMIN (err u4004))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u4005))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u4006))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u4007))\n(define-constant ERR_STAKING_DISABLED (err u4008))\n(define-constant ERR_EARLY_UNSTAKE_DISABLED (err u4009))\n(define-constant ERR_TOKEN_TRANSFER_FAILED (err u4010))\n(define-constant ERR_INVALID_STAKING_DURATION (err u4011))\n(define-constant ERR_INVALID_MIN_STAKING_DURATION (err u4012))\n(define-constant ERR_INVALID_MAX_STAKING_DURATION (err u4013))\n(define-constant ERR_CYCLES_STAKED_OVERFLOW (err u4014))\n(define-constant ERR_CYCLES_TO_UNSTAKE_OVERFLOW (err u4015))\n(define-constant ERR_NO_USER_DATA (err u4016))\n(define-constant ERR_NO_EARLY_LP_TO_UNSTAKE (err u4017))\n(define-constant ERR_INVALID_FEE (err u4018))\n(define-constant ERR_HEIGHT_BEFORE_DEPLOYMENT (err u4019))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-constant CYCLES_LIST (list u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u13 u14 u15 u16 u17 u18 u19 u20\n                             u21 u22 u23 u24 u25 u26 u27 u28 u29 u30 u31 u32 u33 u34 u35 u36 u37 u38 u39 u40\n                             u41 u42 u43 u44 u45 u46 u47 u48 u49 u50 u51 u52 u53 u54 u55 u56 u57 u58 u59 u60\n                             u61 u62 u63 u64 u65 u66 u67 u68 u69 u70 u71 u72 u73 u74 u75 u76 u77 u78 u79 u80\n                             u81 u82 u83 u84 u85 u86 u87 u88 u89 u90 u91 u92 u93 u94 u95 u96 u97 u98 u99 u100\n                             u101 u102 u103 u104 u105 u106 u107 u108 u109 u110 u111 u112 u113 u114 u115 u116\n                             u117 u118 u119 u120))\n\n(define-constant DEPLOYMENT_HEIGHT u875097)\n(define-constant CYCLE_LENGTH u144)\n\n(define-constant BPS u10000)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var helper-value uint u0)\n(define-data-var helper-list (list 12000 uint) (list ))\n\n(define-data-var staking-status bool true)\n(define-data-var early-unstake-status bool true)\n\n(define-data-var early-unstake-fee-address principal tx-sender)\n(define-data-var early-unstake-fee uint u50)\n\n(define-data-var minimum-staking-duration uint u1)\n(define-data-var maximum-staking-duration uint u120)\n\n(define-data-var total-lp-staked uint u0)\n\n(define-map lp-staked-at-cycle uint uint)\n\n(define-map user-data principal {\n  cycles-staked: (list 12000 uint),\n  cycles-to-unstake: (list 12000 uint),\n  lp-staked: uint\n})\n\n(define-map user-data-at-cycle {user: principal, cycle: uint} {\n  lp-staked: uint,\n  lp-to-unstake: uint\n})\n\n(define-read-only (get-deployment-height) \n  (ok DEPLOYMENT_HEIGHT)\n)\n\n(define-read-only (get-current-cycle) \n  (/ (- burn-block-height DEPLOYMENT_HEIGHT) CYCLE_LENGTH)\n)\n\n(define-read-only (get-cycle-from-height (height uint)) \n  (begin\n    (asserts! (>= height DEPLOYMENT_HEIGHT) ERR_HEIGHT_BEFORE_DEPLOYMENT)\n    (ok (/ (- height DEPLOYMENT_HEIGHT) CYCLE_LENGTH))\n  )\n)\n\n(define-read-only (get-starting-height-from-cycle (cycle uint)) \n  (ok (+ DEPLOYMENT_HEIGHT (* cycle CYCLE_LENGTH)))\n)\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-helper-value)\n  (ok (var-get helper-value))\n)\n\n(define-read-only (get-helper-list)\n  (ok (var-get helper-list))\n)\n\n(define-read-only (get-staking-status)\n  (ok (var-get staking-status))\n)\n\n(define-read-only (get-early-unstake-status)\n  (ok (var-get early-unstake-status))\n)\n\n(define-read-only (get-early-unstake-fee-address)\n  (ok (var-get early-unstake-fee-address))\n)\n\n(define-read-only (get-early-unstake-fee)\n  (ok (var-get early-unstake-fee))\n)\n\n(define-read-only (get-minimum-staking-duration)\n  (ok (var-get minimum-staking-duration))\n)\n\n(define-read-only (get-maximum-staking-duration)\n  (ok (var-get maximum-staking-duration))\n)\n\n(define-read-only (get-total-lp-staked)\n  (ok (var-get total-lp-staked))\n)\n\n(define-read-only (get-lp-staked-at-cycle (cycle uint))\n  (ok (map-get? lp-staked-at-cycle cycle))\n)\n\n(define-read-only (get-user (user principal))\n  (ok (map-get? user-data user))\n)\n\n(define-read-only (get-user-at-cycle (user principal) (cycle uint))\n  (ok (map-get? user-data-at-cycle {user: user, cycle: cycle}))\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some (index-of admins-list admin)) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (set-staking-status (status bool))\n  (let (\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (var-set staking-status status)\n      (print {action: \"set-staking-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (set-early-unstake-status (status bool))\n  (let (\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (var-set early-unstake-status status)\n      (print {action: \"set-early-unstake-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (set-early-unstake-fee-address (address principal))\n  (let (\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (is-standard address) ERR_INVALID_PRINCIPAL)\n      (var-set early-unstake-fee-address address)\n      (print {action: \"set-early-unstake-fee-address\", caller: caller, data: {address: address}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (set-early-unstake-fee (fee uint))\n  (let (\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (< fee BPS) ERR_INVALID_FEE)\n      (var-set early-unstake-fee fee)\n      (print {action: \"set-early-unstake-fee\", caller: caller, data: {fee: fee}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (set-staking-duration (min-duration uint) (max-duration uint))\n  (let (\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of (var-get admins) caller)) ERR_NOT_AUTHORIZED)\n      (asserts! (and (> min-duration u0) (<= min-duration max-duration)) ERR_INVALID_MIN_STAKING_DURATION)\n      (asserts! (< max-duration u121) ERR_INVALID_MAX_STAKING_DURATION)\n      (var-set minimum-staking-duration min-duration)\n      (var-set maximum-staking-duration max-duration)\n      (print {\n        action: \"set-staking-duration\",\n        caller: caller,\n        data: {\n          min-duration: min-duration,\n          max-duration: max-duration\n        }\n      })\n      (ok true)\n    )\n  )\n)\n\n(define-public (stake-lp-tokens (amount uint) (cycles uint))\n  (let (\n    (caller tx-sender)\n    (current-user-data (map-get? user-data caller))\n    (user-cycles-staked (default-to (list ) (get cycles-staked current-user-data)))\n    (user-cycles-to-unstake (default-to (list ) (get cycles-to-unstake current-user-data)))\n    (helper-value-for-filter (var-set helper-value cycles))\n    (filtered-cycles-list (filter filter-values-lte-helper-value CYCLES_LIST))\n    (current-cycle (get-current-cycle))\n    (helper-value-for-map (var-set helper-value current-cycle))\n    (next-cycles (map sum-with-helper-value filtered-cycles-list))\n    (helper-list-for-filter (var-set helper-list user-cycles-staked))\n    (filtered-next-cycles-list (filter filter-out-values-contained-in-helper-list next-cycles))\n    (cycle-to-unstake (+ u1 current-cycle cycles))\n    (user-data-at-unstaking-cycle (map-get? user-data-at-cycle {user: caller, cycle: cycle-to-unstake}))\n    (updated-total-lp-staked (+ (var-get total-lp-staked) amount))\n    (updated-user-lp-staked (+ (default-to u0 (get lp-staked current-user-data)) amount))\n  )\n    (begin\n      (asserts! (is-eq (var-get staking-status) true) ERR_STAKING_DISABLED)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (and (>= cycles (var-get minimum-staking-duration)) (<= cycles (var-get maximum-staking-duration))) ERR_INVALID_STAKING_DURATION)\n      (try! (transfer-lp-token amount caller (as-contract tx-sender)))\n      (fold fold-user-data-per-cycle next-cycles {amount: amount, cycles-staked: user-cycles-staked})\n      (var-set total-lp-staked updated-total-lp-staked)\n      (if (is-some current-user-data)\n        (map-set user-data caller {\n          cycles-staked: (unwrap! (as-max-len? (concat user-cycles-staked filtered-next-cycles-list) u12000) ERR_CYCLES_STAKED_OVERFLOW),\n          cycles-to-unstake: (if (is-some (index-of user-cycles-to-unstake cycle-to-unstake))\n            user-cycles-to-unstake\n            (unwrap! (as-max-len? (concat user-cycles-to-unstake (list cycle-to-unstake)) u12000) ERR_CYCLES_TO_UNSTAKE_OVERFLOW)\n          ),\n          lp-staked: updated-user-lp-staked\n        })\n        (map-set user-data caller {\n          cycles-staked: next-cycles,\n          cycles-to-unstake: (list cycle-to-unstake),\n          lp-staked: amount\n        })\n      )\n      (if (is-some user-data-at-unstaking-cycle)\n        (map-set user-data-at-cycle {user: caller, cycle: cycle-to-unstake} (merge \n          (default-to {lp-staked: u0, lp-to-unstake: u0} user-data-at-unstaking-cycle)\n          {lp-to-unstake: (+ amount (default-to u0 (get lp-to-unstake user-data-at-unstaking-cycle)))}\n        ))\n        (map-set user-data-at-cycle {user: caller, cycle: cycle-to-unstake} { \n          lp-staked: u0,\n          lp-to-unstake: amount\n        })\n      )\n      (print {\n        action: \"stake-lp-tokens\",\n        caller: caller,\n        data: {\n          current-cycle: current-cycle,\n          total-lp-staked: updated-total-lp-staked,\n          amount: amount,\n          cycles: cycles,\n          cycle-to-unstake: cycle-to-unstake,\n          user-lp-staked: updated-user-lp-staked\n        }\n      })\n      (ok {amount: amount, cycles: cycles})\n    )   \n  )\n)\n\n(define-public (unstake-lp-tokens)\n  (let (\n    (caller tx-sender)\n    (current-cycle (get-current-cycle))\n    (helper-value-current-cycle (var-set helper-value current-cycle))\n    (current-user-data (unwrap! (map-get? user-data caller) ERR_NO_USER_DATA))\n    (user-cycles-to-unstake (get cycles-to-unstake current-user-data))\n    (filtered-user-cycles-to-unstake (filter filter-values-lte-helper-value user-cycles-to-unstake))\n    (user-lp-staked (get lp-staked current-user-data))\n    (unstake-data (fold fold-cycles-to-unstakeable-cycles filtered-user-cycles-to-unstake {lp-to-unstake: u0, cycles-to-unstake: filtered-user-cycles-to-unstake}))\n    (lp-to-unstake (get lp-to-unstake unstake-data))\n    (updated-user-lp-staked (- user-lp-staked lp-to-unstake))\n    (updated-total-lp-staked (- (var-get total-lp-staked) lp-to-unstake))\n  )\n    (begin\n      (if (> lp-to-unstake u0)\n        (begin\n          (try! (as-contract (transfer-lp-token lp-to-unstake tx-sender caller)))\n          (var-set total-lp-staked updated-total-lp-staked)\n          (map-set user-data caller (merge\n            current-user-data\n            {lp-staked: updated-user-lp-staked, cycles-to-unstake: (get cycles-to-unstake unstake-data)}\n          )))\n        false\n      )\n      (print {\n        action: \"unstake-lp-tokens\",\n        caller: caller,\n        data: {\n          current-cycle: current-cycle,\n          total-lp-staked: updated-total-lp-staked,\n          amount: lp-to-unstake,\n          cycles-to-unstake: (get cycles-to-unstake unstake-data),\n          user-lp-staked: updated-user-lp-staked\n        }\n      })\n      (ok lp-to-unstake)\n    )\n  )\n)\n\n(define-public (early-unstake-lp-tokens)\n  (let (\n    (caller tx-sender)\n    (unstake-matured-user-lp (try! (unstake-lp-tokens)))\n    (current-cycle (get-current-cycle))\n    (current-user-data (unwrap! (map-get? user-data caller) ERR_NO_USER_DATA))\n    (user-cycles-staked (get cycles-staked current-user-data))\n    (unstake-data (fold fold-early-unstake-per-cycle user-cycles-staked {current-cycle: current-cycle, lp-to-unstake: u0}))\n    (early-lp-to-unstake-total (get lp-staked current-user-data))\n    (early-lp-to-unstake-fees (/ (* early-lp-to-unstake-total (var-get early-unstake-fee)) BPS))\n    (early-lp-to-unstake-user (- early-lp-to-unstake-total early-lp-to-unstake-fees))\n    (updated-total-lp-staked (- (var-get total-lp-staked) early-lp-to-unstake-total))\n  )\n    (begin\n      (asserts! (is-eq (var-get early-unstake-status) true) ERR_EARLY_UNSTAKE_DISABLED)\n      (asserts! (> early-lp-to-unstake-total u0) ERR_NO_EARLY_LP_TO_UNSTAKE)\n      (try! (as-contract (transfer-lp-token early-lp-to-unstake-user tx-sender caller)))\n      (if (> early-lp-to-unstake-fees u0)\n        (try! (as-contract (transfer-lp-token early-lp-to-unstake-fees tx-sender (var-get early-unstake-fee-address))))\n        false\n      )\n      (var-set total-lp-staked updated-total-lp-staked)\n      (map-set user-data caller (merge \n        current-user-data\n        {cycles-to-unstake: (list ), lp-staked: u0}\n      ))\n      (print {\n        action: \"early-unstake-lp-tokens\",\n        caller: caller,\n        data: {\n          current-cycle: current-cycle,\n          total-lp-staked: updated-total-lp-staked,\n          matured-lp-to-unstake-user: unstake-matured-user-lp,\n          early-lp-to-unstake-total: early-lp-to-unstake-total,\n          early-lp-to-unstake-fees: early-lp-to-unstake-fees,\n          early-lp-to-unstake-user: early-lp-to-unstake-user,\n          cycles-to-unstake: user-cycles-staked,\n          user-lp-staked: u0\n        }\n      })\n      (ok {matured-lp-to-unstake-user: unstake-matured-user-lp, early-lp-to-unstake-user: early-lp-to-unstake-user})\n    )\n  )\n)\n\n(define-private (admin-not-removable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)\n\n(define-private (filter-values-lte-helper-value (value uint)) \n  (<= value (var-get helper-value))\n)\n\n(define-private (filter-out-values-contained-in-helper-list (value uint)) \n  (not (is-some (index-of (var-get helper-list) value)))\n)\n\n(define-private (filter-out-values-eq-to-helper-value (value uint)) \n  (not (is-eq value (var-get helper-value)))\n)\n\n(define-private (sum-with-helper-value (value uint)) \n  (+ (var-get helper-value) value)\n)\n\n(define-private (fold-user-data-per-cycle (next-cycle uint) (static-data {amount: uint, cycles-staked: (list 12000 uint)}))\n  (let (\n    (caller tx-sender)\n    (amount-static (get amount static-data))\n    (user-cycle-data (default-to {lp-staked: u0, lp-to-unstake: u0} (map-get? user-data-at-cycle {user: caller, cycle: next-cycle})))\n    (cycle-lp-data (map-get? lp-staked-at-cycle next-cycle))\n  )\n    (if (is-some (index-of (get cycles-staked static-data) next-cycle))\n      (map-set user-data-at-cycle {user: caller, cycle: next-cycle} (merge \n        user-cycle-data\n        {lp-staked: (+ amount-static (get lp-staked user-cycle-data))}\n      ))\n      (map-set user-data-at-cycle {user: caller, cycle: next-cycle} (merge \n        user-cycle-data\n        {lp-staked: amount-static}\n      ))\n    )\n    (if (is-some cycle-lp-data)\n      (map-set lp-staked-at-cycle next-cycle (+ amount-static (default-to u0 cycle-lp-data)))\n      (map-set lp-staked-at-cycle next-cycle amount-static)\n    )\n    static-data\n  )\n)\n\n(define-private (fold-cycles-to-unstakeable-cycles (cycle uint) (static-data {lp-to-unstake: uint, cycles-to-unstake: (list 12000 uint)})) \n  (let (\n    (caller tx-sender)\n    (lp-to-unstake-static (get lp-to-unstake static-data))\n    (user-cycle-data (default-to {lp-staked: u0, lp-to-unstake: u0} (map-get? user-data-at-cycle {user: caller, cycle: cycle})))\n    (user-lp-to-unstake (get lp-to-unstake user-cycle-data))\n    (helper-value-for-filter (var-set helper-value cycle))\n    (filtered-cycles-to-unstake (filter filter-out-values-eq-to-helper-value (get cycles-to-unstake static-data)))\n  )\n    (if (> user-lp-to-unstake u0)\n      (begin \n        (map-set user-data-at-cycle {user: caller, cycle: cycle} (merge \n          user-cycle-data\n          {lp-to-unstake: u0}\n        ))\n        {lp-to-unstake: (+ user-lp-to-unstake lp-to-unstake-static), cycles-to-unstake: filtered-cycles-to-unstake}\n      )\n      static-data\n    )\n  )\n)\n\n(define-private (fold-early-unstake-per-cycle (cycle uint) (static-data {current-cycle: uint, lp-to-unstake: uint})) \n  (let (\n    (caller tx-sender)\n    (current-cycle-static (get current-cycle static-data))\n    (lp-to-unstake-static (get lp-to-unstake static-data))\n    (user-cycle-data (default-to {lp-staked: u0, lp-to-unstake: u0} (map-get? user-data-at-cycle {user: caller, cycle: cycle})))\n    (cycle-lp-data (map-get? lp-staked-at-cycle cycle))\n    (user-lp-staked (get lp-staked user-cycle-data))\n  )\n    (if (and (> user-lp-staked u0) (> cycle current-cycle-static))\n      (begin\n        (map-delete user-data-at-cycle {user: caller, cycle: cycle})\n        (if (is-some cycle-lp-data)\n          (map-set lp-staked-at-cycle cycle (- (default-to u0 cycle-lp-data) user-lp-staked))\n          false\n        )\n        {current-cycle: current-cycle-static, lp-to-unstake: (+ user-lp-staked lp-to-unstake-static)}\n      )\n      static-data\n    )\n  )\n)\n\n(define-private (transfer-lp-token (amount uint) (sender principal) (recipient principal))\n  (let (\n    (call-a (unwrap! (contract-call?\n                     'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-sbtc-stx-v-1-1 transfer\n                     amount sender recipient none) ERR_TOKEN_TRANSFER_FAILED))\n  )\n    (ok call-a)\n  )\n)",
    "analysis": {
      "summary": "This contract implements a staking mechanism for LP tokens, allowing users to stake LP tokens for specified cycles, with options for early unstaking subject to fees.",
      "explanation": "The contract defines a staking system for liquidity provider (LP) tokens, where users can stake their tokens for a predetermined number of cycles. It includes features such as adding/removing admins, setting staking parameters, and handling LP tokens staking and unstaking, including an early unstake option with a fee. Key elements include:\n\n- Error codes for various failure states <L1-19>.\n- Constants for contract deployer, cycle list, deployment height, cycle length, and basis points for fee calculations <L21-28>.\n- State variables for admins, staking status, fees, and total LP staked <L30-42>.\n- Maps for tracking staked LP tokens by cycle and user-specific staking data <L44-49>.\n- Functions to get contract state, such as deployment height, current cycle, and admin list <L51-88>.\n- Admin functions to manage contract settings and parameters, like adding/removing admins, setting staking status, and configuring staking durations and fees <L90-159>.\n- The `stake-lp-tokens` function allows users to stake LP tokens for a specified number of cycles, updating user and global staking data accordingly <L161-239>.\n- The `unstake-lp-tokens` function enables users to unstake their LP tokens after their staking duration has matured <L241-288>.\n- The `early-unstake-lp-tokens` function provides an option for users to unstake their LP tokens before the maturity date, incurring a fee <L290-343>.\n- Private helper functions are used for data manipulation and validation, such as filtering lists, summing values, and transferring LP tokens <L345-423>.\n\nEach function is designed to modify the contract's state securely, ensuring that only authorized users can perform sensitive operations and that all staking actions adhere to the defined rules and constraints.",
      "tags": [
        "staking",
        "LP-token",
        "DeFi",
        "protocol"
      ]
    }
  },
  {
    "rank": 178,
    "contract": "SP2C1WREHGM75C7TGFAEJPFKTFTEGZKF6DFT6E2GE.kangaroo",
    "calls": 140,
    "source": ";; Please note and agreed with these before interacting with this contract\n;; this is an experimental token\n;; these tokens dont hold any financial value\n;; no one is asking for any moneys or offering any services\n;; this is not an ICO, IDO, IPO, or any similar instrument\n;; this is for fun and enjoyment of the crypto community, provide as is on a experimental stage\n;; there is no promise of financial returns or any kind\n;; we dont control the market and have no idea what people will do with this token\n;; you are free to do whatever you want with the tokens\n;; the intention is for people to have fun with it and, after all fun is had, simply swap it back\n;; there are risks involved on any sort of trading when using crypto\n;; all tokens are at risk and may not be returned in case something goes wrong, including the ones used for the original swap\n;; dont swap more than the indicated amount, and dont use tokens that you may need later\n;; we can not guarantee any tokens used on this swap\n;; the liquidity pool is designed for swapping back, not for buying more tokens\n;; if you buy more tokens from the liquidity pool, you are likely to become exit liquidity for someone using the token in the wrong\n;; way\n;; these tokens are for fun. They are not a financial product, are not backed by any assets or goods, and have no utility\n;; please be aware of your own country regulations, we dont recommend anyone using this token if that is not allowed by any\n;; goverment body they may be subject to\n;; by using this contract you agree the neither the developer nor and deployer have any liability for missing funds, damage, harm, loss, opportunity cost\n\n;; This contract implements the SIP-010 community-standard Fungible Token trait.\n(impl-trait .traits.ft-trait)\n\n\n\n;; Define errors\n(define-constant ERR_NOT_MINTER (err u200))\n(define-constant ERR_AMOUNT_ZERO (err u201))\n(define-constant ERR_NOT_TOKEN_OWNER (err u203))\n(define-constant PRICE u10000000)\n\n;; Define constants for contract\n(define-constant MINTER 'SP2C1WREHGM75C7TGFAEJPFKTFTEGZKF6DFT6E2GE) ;;central wallet\n(define-constant TOKEN_NAME \"Kangaroo the Jumping Coin\")\n(define-constant TOKEN_SYMBOL \"$ROO\")\n(define-constant TOKEN_DECIMALS u6) ;; 6 units displayed past decimal, e.g. 1.000_000 = 1 token\n\n\n;; Define the FT, with maximum supply\n(define-fungible-token kangaroo u42000000000000)\n\n(define-data-var TOKEN_URI (optional (string-utf8 256)) none)\n\n;; SIP-010 function: Get the token balance of a specified principal\n(define-read-only (get-balance (user principal))\n  (ok (ft-get-balance kangaroo user))\n)\n\n;; SIP-010 function: Returns the total supply of fungible token\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply kangaroo))\n)\n\n;; SIP-010 function: Returns the human-readable token name\n(define-read-only (get-name)\n  (ok TOKEN_NAME)\n)\n\n;; SIP-010 function: Returns the symbol or \"ticker\" for this token\n(define-read-only (get-symbol)\n  (ok TOKEN_SYMBOL)\n)\n\n;; SIP-010 function: Returns number of decimals to display\n(define-read-only (get-decimals)\n  (ok TOKEN_DECIMALS)\n)\n\n(define-read-only (get-token-uri)\n  (ok (var-get TOKEN_URI))\n)\n\n(define-public (transfer (amount uint) (sender principal) (receiver principal) (memo (optional (buff 34)))) \n    (begin\n    ;; #[allow(unchecked_data)]\n        (asserts! (is-eq tx-sender sender) ERR_NOT_TOKEN_OWNER)\n        (try! (ft-transfer? kangaroo amount sender receiver))\n        (match memo to-print (print to-print) 0x)\n        (ok true)\n    )\n)\n\n(define-public (mint (amount uint) (user principal))\n  (begin\n    ;; #[allow(unchecked_data)]\n    (asserts! (is-eq tx-sender MINTER) ERR_NOT_MINTER)\n    (asserts! (> amount u0) ERR_AMOUNT_ZERO)\n    (ft-mint? kangaroo amount user)\n  )\n)\n\n(define-public (mint_one (user principal))\n  (begin\n    (try! (stx-transfer? PRICE tx-sender MINTER))\n    (try! (ft-mint? kangaroo u1000000 user))\n    (ok true)\n  )\n)\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if\n    (is-eq tx-sender MINTER)\n    (ok (var-set TOKEN_URI (some value)))\n    (err ERR_NOT_MINTER)\n  )\n)\n\n;; To be used later [kangaroo -> *** -> ***]\n(define-public (burn (amount uint))\n  (ft-burn? kangaroo amount tx-sender)\n)\n\n;;",
    "analysis": {
      "summary": "This contract is a playful, experimental fungible token named 'Kangaroo the Jumping Coin' with a fixed supply, designed for fun within the crypto community without financial promises.",
      "explanation": "The contract implements the SIP-010 standard for fungible tokens on the Stacks blockchain, providing basic functionality such as transferring tokens, minting new tokens, and querying balances and total supply. It defines a specific token ('Kangaroo') with a humorous and experimental intent, as outlined in the preamble comments. Key features include a central minter, a fixed maximum supply, and functions adhering to the SIP-010 standard for fungible tokens.\n\n- <L1-L28> Preamble comments clarify the non-financial, experimental nature of the token.\n- <L29> Implements the SIP-010 trait for fungible tokens, ensuring standard interface compatibility.\n- <L32-L35> Error codes and a constant price for minting tokens are defined.\n- <L37-L40> Constants define the token's minter, name, symbol, and decimals.\n- <L42> The fungible token 'kangaroo' is defined with a maximum supply.\n- <L42-44> An optional token URI variable is defined for metadata.\n- <L46-63> SIP-010 standard read-only functions provide token information and balances.\n- <L65-76> The `transfer` function allows token holders to transfer tokens, including an optional memo feature.\n- <L78-85> The `mint` function enables the designated minter to create new tokens, restricted by the minter's address and a non-zero amount condition.\n- <L87-93> The `mint_one` function allows users to mint a fixed amount of tokens (1 million units) in exchange for a set STX price, transferring the STX to the minter.\n- <L95-101> The `set-token-uri` function allows the minter to update the token's metadata URI.\n- <L103-105> A `burn` function enables token holders to destroy tokens, reducing the total supply.",
      "tags": [
        "fungible-token",
        "SIP-010",
        "experimental",
        "crypto-community",
        "non-financial"
      ]
    }
  },
  {
    "rank": 179,
    "contract": "SP2892G9YED28VAQWV6B3SRXHC3WY4X1N2YN1X6J3.screenfiends-nft",
    "calls": 139,
    "source": ";; traits\n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n(use-trait commission-trait .screenfiends-commission.commission)\n\n;; token definitions\n(define-non-fungible-token ScreenFiends uint)\n\n;; constants\n(define-constant CONTRACT-OWNER tx-sender)\n(define-constant ERR-SOLD-OUT (err u300))\n(define-constant ERR-WRONG-COMMISSION (err u301))\n(define-constant ERR-NOT-AUTHORIZED (err u401))\n(define-constant ERR-NOT-FOUND (err u404))\n(define-constant ERR-LISTING (err u406))\n\n;; data vars\n(define-data-var base-uri (string-ascii 80) \"ipfs://QmZWqHBTo5nsBSbSe43wH3JZY6fwop5uHNJZ9RTLbhnYtW/{id}.json\")\n(define-data-var contract-uri (string-ascii 80) \"ipfs://bafkreigotvx5wjswq6ppnoscciqyphqmdsygxpu44s5tlkanw6v6rjhgq4\")\n(define-data-var last-id uint u0)\n(define-data-var max-supply uint u5000)\n\n;; data maps\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal})\n(define-data-var trusted-contract principal 'SP2892G9YED28VAQWV6B3SRXHC3WY4X1N2YN1X6J3.screenfiends-nft-minter)\n\n;; public functions\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n    (begin\n        (asserts! (is-eq tx-sender sender) ERR-NOT-AUTHORIZED)\n        (asserts! (is-none (map-get? market id)) ERR-LISTING)\n        (try! (trnsfr id sender recipient))\n        (ok true)))\n\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n    (begin\n        (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n        (var-set base-uri new-base-uri)\n        (ok true)))\n\n(define-public (set-contract-uri (new-contract-uri (string-ascii 80)))\n    (begin\n        (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n        (var-set contract-uri new-contract-uri)\n        (ok true)))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm <commission-trait>))\n    (let ((listing  {price: price, commission: (contract-of comm)}))\n        (asserts! (is-sender-owner id) ERR-NOT-AUTHORIZED)\n        (map-set market id listing)\n        (print (merge listing {action: \"list-in-ustx\", id: id}))\n        (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n    (begin\n        (asserts! (is-sender-owner id) ERR-NOT-AUTHORIZED)\n        (map-delete market id)\n        (print {action: \"unlist-in-ustx\", id: id})\n        (ok true)))\n\n(define-public (buy-in-ustx (id uint) (comm <commission-trait>))\n    (let ((owner (unwrap! (nft-get-owner? ScreenFiends id) ERR-NOT-FOUND))\n        (listing (unwrap! (map-get? market id) ERR-LISTING))\n        (price (get price listing)))\n    (asserts! (is-eq (contract-of comm) (get commission listing)) ERR-WRONG-COMMISSION)\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (contract-call? comm pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {action: \"buy-in-ustx\", id: id})\n    (ok true)))\n\n\n(define-public (set-max-supply (new-supply uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (var-set max-supply new-supply)\n    (ok new-supply)))\n\n\n(define-read-only (get-max-supply)\n  (ok (var-get max-supply)))\n\n\n(define-public (set-trusted-contract (contract principal))\n    (begin\n        (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n        (var-set trusted-contract contract)\n        (ok true)))\n\n\n(define-public (mint (new-owner principal))\n    (let ((next-id (+ u1 (var-get last-id)))\n          (total-supply (var-get max-supply)))\n\n        (asserts! (called-from-mint) ERR-NOT-AUTHORIZED)\n        (asserts! (< (var-get last-id) total-supply) ERR-SOLD-OUT)\n        (match (nft-mint? ScreenFiends next-id new-owner)\n            success\n                (let ((current-balance (get-balance new-owner)))\n                    (begin\n                        (var-set last-id next-id)\n                        (map-set token-count new-owner (+ current-balance u1))\n                        (ok next-id)))\n            error (err (* error u10000)))))\n\n;; read only functions\n(define-read-only (get-balance (account principal))\n    (default-to u0\n        (map-get? token-count account)))\n\n(define-read-only (get-owner (id uint))\n    (ok (nft-get-owner? ScreenFiends id)))\n\n(define-read-only (get-last-token-id)\n    (ok (var-get last-id)))\n\n(define-read-only (get-token-uri (id uint))\n    (ok (some (var-get base-uri))))\n\n(define-read-only (get-contract-uri)\n    (ok (var-get contract-uri)))\n\n(define-read-only (get-listing-in-ustx (id uint))\n    (map-get? market id))\n\n;; private functions\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n    (match (nft-transfer? ScreenFiends id sender recipient)\n    success\n          (let\n            ((sender-balance (get-balance sender))\n            (recipient-balance (get-balance recipient)))\n              (map-set token-count\n                    sender\n                    (- sender-balance u1))\n              (map-set token-count\n                    recipient\n                    (+ recipient-balance u1))\n              (ok success))\n        error (err error)))\n\n(define-private (is-sender-owner (id uint))\n    (let ((owner (unwrap! (nft-get-owner? ScreenFiends id) false)))\n        (and\n            (is-eq tx-sender contract-caller)\n            (is-eq tx-sender owner))))\n\n(define-private (called-from-mint)\n    (is-eq (var-get trusted-contract) contract-caller))\n",
    "analysis": {
      "summary": "This contract manages a collection of non-fungible tokens (NFTs) named ScreenFiends, allowing for minting, transferring, and listing for sale in microSTX. It includes features for setting metadata URIs and managing supply.",
      "explanation": "The contract implements a non-fungible token system using the Clarity programming language for the Stacks blockchain. It defines a new NFT called ScreenFiends and includes functionalities for minting new tokens, transferring ownership, listing tokens for sale, and modifying contract parameters such as base URI and max supply. Key aspects include:\n\n- **Token Definition**: <L5> Defines the ScreenFiends NFT using a unique identifier of type `uint`.\n\n- **Constants and Data Vars**: <L8-19> Sets immutable contract constants like `CONTRACT-OWNER` and mutable data variables like `base-uri` and `max-supply`.\n\n- **Data Maps**: <L21-23> Uses maps to track token ownership counts and market listings, including price and commission details.\n\n- **Public Functions**:\n  - `transfer`: <L25-31> Allows token owners to transfer their tokens unless the token is listed in the market.\n  - `set-base-uri` and `set-contract-uri`: <L33-41> Enable the contract owner to update metadata URIs.\n  - `list-in-ustx` and `unlist-in-ustx`: <L43-56> Facilitate listing tokens for sale and removing listings, with commission settings.\n  - `buy-in-ustx`: <L58-73> Enables buying listed tokens, transferring the sale amount to the owner and paying commission.\n  - `set-max-supply` and `mint`: <L75-99> Allow modifying the maximum supply of tokens and minting new tokens, ensuring the supply limit is not exceeded.\n\n- **Read-Only Functions**: <L101-119> Provide information about token balances, ownership, and listings without altering the state.\n\n- **Private Functions**: <L121-143> Include helper functions for transferring tokens and checking conditions like ownership and authorization for minting.\n\nThroughout, the contract uses Clarity's features such as `asserts!` for condition checks, `map-get?` and `map-set` for interacting with maps, and `nft-mint?` and `nft-transfer?` for NFT operations. It demonstrates patterns for managing NFTs, including minting controls, ownership management, and marketplace functionalities.",
      "tags": [
        "NFT",
        "marketplace",
        "metadata-management",
        "ownership-transfer"
      ]
    }
  },
  {
    "rank": 180,
    "contract": "SPGYCP878RYFVT03ZT8TWGPKNYTSQB1578VVXHGE.isabelle-dexterity",
    "calls": 139,
    "source": ";; ISABELLE - LP Token, AMM DEX and Hold-to-Earn Engine\n;; SPGYCP878RYFVT03ZT8TWGPKNYTSQB1578VVXHGE.isabelle-dexterity\n\n;; Implement SIP-010 trait\n(impl-trait 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-traits-v1.sip010-ft-trait)\n\n;; Define the LP token\n(define-fungible-token index)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant CONTRACT (as-contract tx-sender))\n(define-constant ERR_UNAUTHORIZED (err u401))\n(define-constant ERR_INVALID_FEE (err u402))\n(define-constant MAX_SWAP_FEE u50000) ;; 5%\n(define-constant FEE_DENOMINATION u1000000)\n(define-constant PRECISION u1000000)\n(define-constant MAX_ALPHA u1000000) ;; 1.0 in fixed point\n(define-constant MIN_ALPHA u0)       ;; 0.0 = constant sum (stableswap)\n                                     ;; 1.0 = constant product\n;; Storage\n(define-data-var owner principal DEPLOYER)\n(define-data-var alpha uint u1000000) ;; Default to constant product\n(define-data-var swap-fee uint u50000) ;; Default to 5%\n(define-data-var token-uri (optional (string-utf8 256)) \n  (some u\"https://charisma.rocks/api/v0/indexes/SPGYCP878RYFVT03ZT8TWGPKNYTSQB1578VVXHGE.isabelle-dexterity\"))\n(define-data-var first-start-block uint stacks-block-height)\n(define-map last-tap-block principal uint)\n\n;; Configuration functions\n(define-public (set-owner (new-owner principal))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set owner new-owner))))\n\n(define-public (set-swap-fee (new-fee uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (asserts! (<= new-fee MAX_SWAP_FEE) ERR_UNAUTHORIZED)\n    (ok (var-set swap-fee new-fee))))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if (is-eq contract-caller (var-get owner))\n    (ok (var-set token-uri (some value))) \n    ERR_UNAUTHORIZED))\n\n;; Core AMM operations\n(define-private (calculate-output-amount (x uint) (y uint) (dx uint) (amp uint))\n  (let (\n    ;; Constant sum portion (better for similar values)\n    (sum-term (/ (* dx y) x))\n    ;; Constant product portion (better for different values)\n    (product-term (/ (* dx y) (+ x dx)))\n    ;; Weighted sum of both terms\n    (weighted-output (+ (* (- PRECISION amp) sum-term) (* amp product-term))))\n    (/ weighted-output PRECISION)))\n\n(define-public (swap (forward bool) (amt-in uint))\n  (let (\n    (sender tx-sender)\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT))))\n    (paid-energy (match (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 exhaust u10000000 sender) success true error false))\n    ;; Calculate effective input amount\n    (effective-in (if paid-energy amt-in (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION)))\n    ;; Calculate output with hybrid curve\n    (amt-out (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha))))\n    (try! (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl transfer amt-in sender CONTRACT none) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh transfer amt-in sender CONTRACT none)))\n    (try! (as-contract (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh transfer amt-out CONTRACT sender none)\n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl transfer amt-out CONTRACT sender none))))\n    (ok {amt-in: amt-in, amt-out: amt-out})))\n\n(define-public (mint (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (if (is-eq total-supply u0) amount (/ (* amount reserve0) total-supply)))\n    (token1-amount (if (is-eq total-supply u0) amount (/ (* amount reserve1) total-supply))))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl transfer token0-amount who CONTRACT none))\n    (try! (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh transfer token1-amount who CONTRACT none))\n    (try! (ft-mint? index amount who))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n(define-public (burn (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (/ (* amount reserve0) total-supply))\n    (token1-amount (/ (* amount reserve1) total-supply)))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (ft-burn? index amount who))\n    (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl transfer token0-amount CONTRACT who none)))\n    (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh transfer token1-amount CONTRACT who none)))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n;; Read functions\n(define-read-only (get-owner)\n  (ok (var-get owner)))\n\n(define-read-only (get-alpha)\n  (ok (var-get alpha)))\n\n(define-read-only (get-tokens)\n  (ok {token0: 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl, token1: 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh}))\n\n(define-read-only (get-swap-fee)\n  (ok (var-get swap-fee)))\n\n(define-read-only (get-reserves)\n  (ok {\n    token0: (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT)),\n    token1: (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh get-balance CONTRACT))\n  }))\n\n(define-read-only (get-quote (forward bool) (amt-in uint) (apply-fee bool))\n  (let (\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.synthetic-welsh get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT))))\n    (effective-in (if apply-fee (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION) amt-in)))\n    (ok (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha)))))\n\n;; SIP-010 Implementation\n(define-read-only (get-name)\n  (ok \"ISABELLE\"))\n\n(define-read-only (get-symbol)\n  (ok \"iSBL\"))\n\n(define-read-only (get-decimals)\n  (ok u6))\n\n(define-read-only (get-balance (who principal))\n  (ok (ft-get-balance index who)))\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply index)))\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri)))\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender from) ERR_UNAUTHORIZED)\n    (ft-transfer? index amount from to)))\n\n;; Hold-to-Earn functions\n(define-private (get-balance-at (data { address: principal, block: uint }))\n    (let ((target-block (get block data)))\n        (if (< target-block stacks-block-height)\n            (let ((block-hash (unwrap-panic (get-stacks-block-info? id-header-hash target-block))))\n                (at-block block-hash (unwrap-panic (get-balance (get address data)))))\n                (unwrap-panic (get-balance (get address data))))))\n\n(define-private (calculate-trapezoid-areas-39 (balances (list 39 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u18)) (unwrap-panic (element-at balances u19))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u19)) (unwrap-panic (element-at balances u20))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u20)) (unwrap-panic (element-at balances u21))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u21)) (unwrap-panic (element-at balances u22))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u22)) (unwrap-panic (element-at balances u23))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u23)) (unwrap-panic (element-at balances u24))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u24)) (unwrap-panic (element-at balances u25))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u25)) (unwrap-panic (element-at balances u26))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u26)) (unwrap-panic (element-at balances u27))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u27)) (unwrap-panic (element-at balances u28))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u28)) (unwrap-panic (element-at balances u29))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u29)) (unwrap-panic (element-at balances u30))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u30)) (unwrap-panic (element-at balances u31))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u31)) (unwrap-panic (element-at balances u32))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u32)) (unwrap-panic (element-at balances u33))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u33)) (unwrap-panic (element-at balances u34))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u34)) (unwrap-panic (element-at balances u35))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u35)) (unwrap-panic (element-at balances u36))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u36)) (unwrap-panic (element-at balances u37))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u37)) (unwrap-panic (element-at balances u38))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-19 (balances (list 19 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-9 (balances (list 9 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-5 (balances (list 5 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-2 (balances (list 2 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)))\n\n(define-private (calculate-balance-integral-39 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-39 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u38))\n        (areas (calculate-trapezoid-areas-39 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-19 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-19 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u18))\n        (areas (calculate-trapezoid-areas-19 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-9 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-9 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u8))\n        (areas (calculate-trapezoid-areas-9 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-5 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-5 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u4))\n        (areas (calculate-trapezoid-areas-5 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-2 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-2 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u1))\n        (areas (calculate-trapezoid-areas-2 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral (address principal) (start-block uint) (end-block uint))\n    (let (\n        (block-difference (- end-block start-block))\n        (thresholds (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 get-thresholds))))\n        (if (>= block-difference (get threshold-39-point thresholds)) (calculate-balance-integral-39 address start-block end-block)\n        (if (>= block-difference (get threshold-19-point thresholds)) (calculate-balance-integral-19 address start-block end-block)\n        (if (>= block-difference (get threshold-9-point thresholds)) (calculate-balance-integral-9 address start-block end-block)\n        (if (>= block-difference (get threshold-5-point thresholds)) (calculate-balance-integral-5 address start-block end-block)\n        (calculate-balance-integral-2 address start-block end-block)))))))\n\n(define-read-only (get-last-tap-block (address principal))\n    (default-to (var-get first-start-block) (map-get? last-tap-block address)))\n\n(define-public (tap)\n  (let (\n    (sender tx-sender)\n    (end-block stacks-block-height)\n    (start-block (get-last-tap-block sender))\n    (balance-integral (calculate-balance-integral sender start-block end-block))\n    (incentive-score (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.aura get-incentive-score CONTRACT))\n    (circulating-supply (unwrap-panic (get-total-supply)))\n    (potential-energy (/ (* balance-integral incentive-score) circulating-supply)))\n    (map-set last-tap-block sender end-block)\n    (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 energize potential-energy sender)))\n\n(begin (mint DEPLOYER u1000000))  \n",
    "analysis": {
      "summary": "This contract implements a liquidity pool (LP) token, an Automated Market Maker (AMM) for decentralized exchange (DEX) operations, and a hold-to-earn mechanism, leveraging the SIP-010 standard for fungible tokens.",
      "explanation": "The contract begins by implementing the SIP-010 trait for fungible tokens, ensuring compatibility with the broader Stacks ecosystem. It defines a fungible token called 'index' to represent liquidity pool shares. Constants like DEPLOYER, CONTRACT, and various error codes and parameters for the AMM logic are set up initially. The contract includes variables for the owner, the AMM's alpha parameter (which adjusts the trade curve), the swap fee, a token URI, and a record of the first start block for timing-based operations.\n\nConfiguration functions allow the owner to update critical parameters such as the owner address, swap fee, and token URI. The core AMM operations are facilitated through a private function that calculates output amounts for trades and public functions for swapping tokens, minting, and burning LP tokens. These operations adjust based on the AMM's reserves and the specified fees.\n\nThe contract also includes read-only functions to retrieve the AMM's configuration and state, such as the owner, alpha parameter, swap fee, reserves, and token information. SIP-010 standard functions provide token name, symbol, decimals, balance, total supply, and token URI.\n\nA unique feature of this contract is its hold-to-earn mechanism, which calculates a 'balance integral' over time for users holding the LP token. This mechanism encourages users to hold onto their tokens to earn rewards, calculated through a series of private functions that estimate the area under a curve representing token balance over time. The 'tap' function allows users to claim their earned rewards based on their holding period and the calculated balance integral.\n\nThe contract concludes with an initial minting to the DEPLOYER for bootstrapping liquidity.",
      "tags": [
        "AMM",
        "DEX",
        "LP-Token",
        "SIP-010",
        "Hold-to-Earn"
      ]
    }
  },
  {
    "rank": 181,
    "contract": "SP3C7508XY726X7Z4DECMDAGMD85MYPGF9GE5RQ12.mechaowl-dexterity",
    "calls": 139,
    "source": ";; Mecha-Owl - LP Token, AMM DEX and Hold-to-Earn Engine\n;; SP3C7508XY726X7Z4DECMDAGMD85MYPGF9GE5RQ12.mechaowl-dexterity\n\n;; Implement SIP-010 trait\n(impl-trait 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-traits-v1.sip010-ft-trait)\n\n;; Define the LP token\n(define-fungible-token index)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant CONTRACT (as-contract tx-sender))\n(define-constant ERR_UNAUTHORIZED (err u403))\n(define-constant MAX_SWAP_FEE u250000) ;; 25%\n(define-constant PRECISION u1000000)\n(define-constant ALPHA u950000)\n\n;; Storage\n(define-data-var owner principal DEPLOYER)\n(define-data-var energy-burn-amount uint u10000000)\n(define-data-var swap-fee uint u27958) ;; Default to 2.8%\n(define-data-var token-uri (optional (string-utf8 256)) \n  (some u\"https://charisma.rocks/api/v0/indexes/SP3C7508XY726X7Z4DECMDAGMD85MYPGF9GE5RQ12.mechaowl-dexterity\"))\n(define-data-var first-start-block uint stacks-block-height)\n(define-map last-tap-block principal uint)\n\n;; Configuration functions\n(define-public (set-owner (new-owner principal))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set owner new-owner))))\n\n(define-public (set-swap-fee (new-fee uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (asserts! (<= new-fee MAX_SWAP_FEE) ERR_UNAUTHORIZED)\n    (ok (var-set swap-fee new-fee))))\n\n(define-public (set-energy-burn-amount (new-amount uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set energy-burn-amount new-amount))))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if (is-eq contract-caller (var-get owner))\n    (ok (var-set token-uri (some value))) \n    ERR_UNAUTHORIZED))\n\n;; Core AMM operations\n(define-private (calculate-output-amount (x uint) (y uint) (dx uint) (amp uint))\n  (let (\n    ;; Constant sum portion (better for similar values)\n    (sum-term (/ (* dx y) x))\n    ;; Constant product portion (better for different values)\n    (product-term (/ (* dx y) (+ x dx)))\n    ;; Weighted sum of both terms\n    (weighted-output (+ (* (- PRECISION amp) sum-term) (* amp product-term))))\n    (/ weighted-output PRECISION)))\n\n(define-public (swap (forward bool) (amt-in uint))\n  (let (\n    (sender tx-sender)\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT) \n      (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity get-balance CONTRACT))))\n    ;; Calculate raw output amount first\n    (raw-out (calculate-output-amount reserve-in reserve-out amt-in ALPHA))\n    ;; Check if energy was paid and apply fees to output amount\n    (paid-energy (match (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 exhaust (var-get energy-burn-amount) sender) success true error false))\n    (amt-out (if paid-energy raw-out (/ (* raw-out (- PRECISION (var-get swap-fee))) PRECISION))))\n    ;; Execute the swap\n    (try! (if forward (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity transfer amt-in sender CONTRACT none) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl transfer amt-in sender CONTRACT none)))\n    (try! (as-contract (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl transfer amt-out CONTRACT sender none)\n      (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity transfer amt-out CONTRACT sender none))))\n    (ok {amt-in: amt-in, amt-out: amt-out})))\n\n(define-public (mint (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (if (is-eq total-supply u0) amount (/ (* amount reserve0) total-supply)))\n    (token1-amount (if (is-eq total-supply u0) amount (/ (* amount reserve1) total-supply))))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity transfer token0-amount who CONTRACT none))\n    (try! (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl transfer token1-amount who CONTRACT none))\n    (try! (ft-mint? index amount who))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n(define-public (burn (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (/ (* amount reserve0) total-supply))\n    (token1-amount (/ (* amount reserve1) total-supply)))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (ft-burn? index amount who))\n    (try! (as-contract (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity transfer token0-amount CONTRACT who none)))\n    (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl transfer token1-amount CONTRACT who none)))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n;; Read functions\n(define-read-only (get-owner)\n  (ok (var-get owner)))\n\n(define-read-only (get-alpha)\n  (ok ALPHA))\n\n(define-read-only (get-tokens)\n  (ok {token0: 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity, token1: 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl}))\n\n(define-read-only (get-swap-fee)\n  (ok (var-get swap-fee)))\n\n(define-read-only (get-reserves)\n  (ok {\n    token0: (unwrap-panic (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity get-balance CONTRACT)),\n    token1: (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT))\n  }))\n\n(define-read-only (get-quote (forward bool) (amt-in uint) (apply-fee bool))\n  (let (\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.hooter-the-owl get-balance CONTRACT) \n      (contract-call? 'SP3HNEXSXJK2RYNG5P6YSEE53FREX645JPJJ5FBFA.meme-stxcity get-balance CONTRACT))))\n    (raw-out (calculate-output-amount reserve-in reserve-out amt-in ALPHA))\n    (output-amount (if apply-fee (/ (* raw-out (- PRECISION (var-get swap-fee))) PRECISION) raw-out)))\n    (ok output-amount)))\n\n;; SIP-010 Implementation\n(define-read-only (get-name)\n  (ok \"Mecha-Owl\"))\n\n(define-read-only (get-symbol)\n  (ok \"MOWL\"))\n\n(define-read-only (get-decimals)\n  (ok u6))\n\n(define-read-only (get-balance (who principal))\n  (ok (ft-get-balance index who)))\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply index)))\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri)))\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender from) ERR_UNAUTHORIZED)\n    (ft-transfer? index amount from to)))\n\n;; Hold-to-Earn functions\n(define-private (get-balance-at (data { address: principal, block: uint }))\n    (let ((target-block (get block data)))\n        (if (< target-block stacks-block-height)\n            (let ((block-hash (unwrap-panic (get-stacks-block-info? id-header-hash target-block))))\n                (at-block block-hash (unwrap-panic (get-balance (get address data)))))\n                (unwrap-panic (get-balance (get address data))))))\n\n(define-private (calculate-trapezoid-areas-39 (balances (list 39 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u18)) (unwrap-panic (element-at balances u19))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u19)) (unwrap-panic (element-at balances u20))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u20)) (unwrap-panic (element-at balances u21))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u21)) (unwrap-panic (element-at balances u22))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u22)) (unwrap-panic (element-at balances u23))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u23)) (unwrap-panic (element-at balances u24))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u24)) (unwrap-panic (element-at balances u25))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u25)) (unwrap-panic (element-at balances u26))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u26)) (unwrap-panic (element-at balances u27))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u27)) (unwrap-panic (element-at balances u28))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u28)) (unwrap-panic (element-at balances u29))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u29)) (unwrap-panic (element-at balances u30))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u30)) (unwrap-panic (element-at balances u31))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u31)) (unwrap-panic (element-at balances u32))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u32)) (unwrap-panic (element-at balances u33))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u33)) (unwrap-panic (element-at balances u34))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u34)) (unwrap-panic (element-at balances u35))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u35)) (unwrap-panic (element-at balances u36))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u36)) (unwrap-panic (element-at balances u37))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u37)) (unwrap-panic (element-at balances u38))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-19 (balances (list 19 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-9 (balances (list 9 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-5 (balances (list 5 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-2 (balances (list 2 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)))\n\n(define-private (calculate-balance-integral-39 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-39 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u38))\n        (areas (calculate-trapezoid-areas-39 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-19 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-19 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u18))\n        (areas (calculate-trapezoid-areas-19 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-9 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-9 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u8))\n        (areas (calculate-trapezoid-areas-9 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-5 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-5 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u4))\n        (areas (calculate-trapezoid-areas-5 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-2 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-2 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u1))\n        (areas (calculate-trapezoid-areas-2 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral (address principal) (start-block uint) (end-block uint))\n    (let (\n        (block-difference (- end-block start-block))\n        (thresholds (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 get-thresholds))))\n        (if (>= block-difference (get threshold-39-point thresholds)) (calculate-balance-integral-39 address start-block end-block)\n        (if (>= block-difference (get threshold-19-point thresholds)) (calculate-balance-integral-19 address start-block end-block)\n        (if (>= block-difference (get threshold-9-point thresholds)) (calculate-balance-integral-9 address start-block end-block)\n        (if (>= block-difference (get threshold-5-point thresholds)) (calculate-balance-integral-5 address start-block end-block)\n        (calculate-balance-integral-2 address start-block end-block)))))))\n\n(define-read-only (get-last-tap-block (address principal))\n    (default-to (var-get first-start-block) (map-get? last-tap-block address)))\n\n(define-public (tap)\n  (let (\n    (sender tx-sender)\n    (end-block stacks-block-height)\n    (start-block (get-last-tap-block sender))\n    (balance-integral (calculate-balance-integral sender start-block end-block))\n    (incentive-score (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.aura get-incentive-score CONTRACT))\n    (circulating-supply (unwrap-panic (get-total-supply)))\n    (potential-energy (/ (* balance-integral incentive-score) circulating-supply)))\n    (map-set last-tap-block sender end-block)\n    (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 energize potential-energy sender)))\n\n(begin (mint DEPLOYER u1000000))  \n",
    "analysis": {
      "summary": "This contract implements a liquidity pool (LP) token, an automated market maker (AMM) for decentralized exchange (DEX) functionality, and a hold-to-earn mechanism, all centered around the 'Mecha-Owl' ecosystem.",
      "explanation": "The contract begins by implementing the SIP-010 trait for fungible tokens, indicating it follows the standard interface for fungible tokens on the Stacks blockchain. It defines a fungible token named 'index' which likely represents the LP token for participating in the liquidity pool. Constants such as DEPLOYER, CONTRACT, and various error codes and parameters like MAX_SWAP_FEE and ALPHA are set for internal use. The contract stores several variables including the contract owner, energy burn amount for transactions, swap fee, token URI, and the block at which the contract starts operating. It provides configuration functions allowing the owner to update contract parameters such as ownership, swap fee, energy burn amount, and token URI. Core AMM operations are defined for swapping tokens, minting, and burning LP tokens, with fees applied based on whether energy was 'paid' during a swap. The contract includes read-only functions to get contract state information and implements SIP-010 standard functions for fungible tokens like getting the name, symbol, decimals, balance, total supply, and token URI. Additionally, it features a unique hold-to-earn mechanism that calculates users' balance integrals over time to distribute rewards based on their holding patterns and interactions with the contract. This mechanism utilizes complex calculations involving trapezoidal integration to determine the 'energy' a user has generated by holding tokens, which can then be 'tapped' into for rewards.",
      "tags": [
        "LP-token",
        "AMM",
        "DEX",
        "hold-to-earn",
        "SIP-010",
        "fungible-token"
      ]
    }
  },
  {
    "rank": 182,
    "contract": "SP12JCJYJJ31C59MV94SNFFM4687H9A04Q3BHTAJM.NoCodeClarity-Token",
    "calls": 138,
    "source": "(impl-trait 'SP20X3DC5R091J8B6YPQT638J8NR1W83KN6TN5BJY.ft-trait.ft-trait)\n\n  (define-constant MAX_SUPPLY (* u1000000000 (pow u10 u3)))\n\n  (define-fungible-token NoCodeClarity-Token MAX_SUPPLY)\n\n  (define-constant err-check-owner (err u1))\n  (define-constant err-transfer    (err u4))\n\n  (define-data-var owner principal tx-sender)\n\n  (define-private (check-owner)\n    (ok (asserts! (is-eq tx-sender (var-get owner)) err-check-owner)))\n\n  (define-public (set-owner (new-owner principal))\n    (begin\n    (try! (check-owner))\n    (ok (var-set owner new-owner)) ))\n\n  (define-public\n    (transfer\n      (amt  uint)\n      (from principal)\n      (to   principal)\n      (memo (optional (buff 34))))\n    (begin\n      (asserts! (is-eq tx-sender from) err-transfer)\n      (ft-transfer? NoCodeClarity-Token amt from to)))\n\n\n  (define-public (mint (amt uint) (to principal))\n    (begin\n      (try! (check-owner))\n      (ft-mint? NoCodeClarity-Token amt to) ))\n\n  (define-read-only (get-name)                   (ok \"NoCodeClarity-Token\"))\n  (define-read-only (get-symbol)                 (ok \"NOCC\"))\n  (define-read-only (get-decimals)               (ok u3))\n  (define-read-only (get-balance (of principal)) (ok (ft-get-balance NoCodeClarity-Token of)))\n  (define-read-only (get-total-supply)           (ok (ft-get-supply NoCodeClarity-Token)))\n  (define-read-only (get-max-supply)             (ok MAX_SUPPLY))\n  (define-read-only (get-token-uri)              (ok (some u\"https://ipfs.io/ipfs/QmREqqK1eJ8QJg3ciVKqSZqNQpLiWto7A3DHhMgkNTdUgb\")))\n  ",
    "analysis": {
      "summary": "This contract implements a fungible token with a fixed maximum supply, ownership control, and basic token functionalities such as transfer and minting.",
      "explanation": "The contract starts by implementing a trait from another contract, ensuring it adheres to a predefined interface for fungible tokens. The maximum supply of the token is defined as 1 billion, scaled by 10^3 to accommodate decimal places, indicated by <L2>. The fungible token `NoCodeClarity-Token` is then declared with this maximum supply <L4>. Error constants are defined for owner verification and transfer errors <L6-7>. The contract owner is stored in a data variable, initialized to the transaction sender <L9>. A private function `check-owner` is used to verify that the caller is the contract owner <L11-13>. Public functions include `set-owner` for changing the contract's owner <L15-19>, `transfer` for moving tokens between accounts with an optional memo <L21-27>, and `mint` for creating new tokens within the maximum supply limit <L29-33>. Read-only functions provide token information and account balances <L35-43>. The contract ensures that only the owner can mint new tokens and change ownership, while allowing token holders to transfer their tokens freely.",
      "tags": [
        "fungible-token",
        "ownership",
        "Clarity",
        "Stacks"
      ]
    }
  },
  {
    "rank": 183,
    "contract": "SP1HMPMXQCHXC5X8D12MJEB6XFW8YQNBQRH1N51HT.univ2-router",
    "calls": 134,
    "source": "(define-constant A tx-sender)\n\n(define-public (swap-x-for-y (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\ta0 u0)))\n\t\t(a1 (unwrap-panic (element-at b0 u1)))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta1 u1)))\n\t\t(a2 (get amt-out b1))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (swap-y-for-x (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta0 u1)))\n\t\t(a1 (get amt-out b0))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x\n\t\t\t'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\ta1 u0)))\n\t\t(a2 (unwrap-panic (element-at b1 u0)))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (add-to-position (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta0 u1)))\n\t\t(a1 (get amt-out b0))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi\n\t\t\tu100000000 (* a1 u100) none)))\n\t\t(a2 (/ (get dx b1) u100))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))\n\n(define-public (reduce-position (a0 uint))\n(let ((sender tx-sender))\n\t(asserts! (is-eq tx-sender A) (err u0))\n\t(try! (stx-transfer? a0 sender (as-contract tx-sender)))\n\t(as-contract\n\t(let (\n\t\t(b0 (try! (contract-call?\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2\n\t\t\t'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi\n\t\t\tu100000000 (* a0 u100) none)))\n\t\t(a1 (/ (get dy b0) u100))\n\t\t(b1 (try! (contract-call?\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens\n\t\t\tu27\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx\n\t\t\t'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to\n\t\t\ta1 u1)))\n\t\t(a2 (get amt-out b1))\n\t)\n\t\t(asserts! (> a2 a0) (err a2))\n\t\t(try! (stx-transfer? a2 tx-sender sender))\n\t\t(ok (list a0 a1 a2))\n))))",
    "analysis": {
      "summary": "This contract facilitates swapping and position management between different tokens on the Stacks blockchain.",
      "explanation": "The contract consists of four public functions: swap-x-for-y, swap-y-for-x, add-to-position, and reduce-position. Each function performs token swaps and position adjustments within decentralized finance (DeFi) protocols on Stacks, specifically targeting liquidity pools and swap functionalities.\n\n- <L1> A constant 'A' is defined as the transaction sender, essentially locking the contract to be operable by the deployer or a specific address.\n\n- <L3-23> swap-x-for-y allows swapping token X for token Y by calling external contracts, ensuring the caller is the authorized address, transferring STX, and interacting with other contracts for the swap. It verifies if the output amount is greater than the input before completing the transaction.\n\n- <L25-45> swap-y-for-x is similar to swap-x-for-y but in the opposite direction, swapping token Y for token X.\n\n- <L47-67> add-to-position uses the input amount to add to a liquidity position by swapping tokens and adding liquidity to a pool, again verifying the transaction sender and ensuring the output is greater than the input.\n\n- <L69-89> reduce-position decreases a liquidity position by swapping tokens in the reverse order compared to adding to a position, with the same checks for sender authorization and output amount.\n\nEach function utilizes 'asserts!' to ensure the transaction sender is the authorized address, 'try!' for attempting STX transfers and contract calls, and 'unwrap-panic' to handle potential errors from contract calls. The contract interacts with external DeFi protocols by specifying their addresses and calling their functions, such as swap-exact-tokens-for-tokens.",
      "tags": [
        "DeFi",
        "swap",
        "liquidity-management",
        "protocol-interaction"
      ]
    }
  },
  {
    "rank": 184,
    "contract": "SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.router-xyk-alex-v-1-2",
    "calls": 134,
    "source": ";; router-xyk-alex-v-1-2\n\n(use-trait x-ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait a-ft-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait)\n(use-trait x-pool-trait 'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-pool-trait-v-1-1.xyk-pool-trait)\n\n(define-constant ERR_NOT_AUTHORIZED (err u1001))\n(define-constant ERR_INVALID_AMOUNT (err u1002))\n(define-constant ERR_INVALID_PRINCIPAL (err u1003))\n(define-constant ERR_ALREADY_ADMIN (err u2001))\n(define-constant ERR_ADMIN_LIMIT_REACHED (err u2002))\n(define-constant ERR_ADMIN_NOT_IN_LIST (err u2003))\n(define-constant ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER (err u2004))\n(define-constant ERR_SWAP_STATUS (err u4001))\n(define-constant ERR_MINIMUM_RECEIVED (err u4002))\n(define-constant ERR_SWAP_A (err u5001))\n(define-constant ERR_SWAP_B (err u5002))\n(define-constant ERR_SCALED_AMOUNT_A (err u6001))\n(define-constant ERR_QUOTE_A (err u7001))\n(define-constant ERR_QUOTE_B (err u7002))\n\n(define-constant CONTRACT_DEPLOYER tx-sender)\n\n(define-data-var admins (list 5 principal) (list tx-sender))\n(define-data-var admin-helper principal tx-sender)\n\n(define-data-var swap-status bool true)\n\n(define-read-only (get-admins)\n  (ok (var-get admins))\n)\n\n(define-read-only (get-admin-helper)\n  (ok (var-get admin-helper))\n)\n\n(define-read-only (get-swap-status)\n  (ok (var-get swap-status))\n)\n\n(define-public (add-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n    (asserts! (is-none (index-of admins-list admin)) ERR_ALREADY_ADMIN)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admins (unwrap! (as-max-len? (append admins-list admin) u5) ERR_ADMIN_LIMIT_REACHED))\n    (print {action: \"add-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (remove-admin (admin principal))\n  (let (\n    (admins-list (var-get admins))\n    (caller-in-list (index-of admins-list tx-sender))\n    (admin-to-remove-in-list (index-of admins-list admin))\n    (caller tx-sender)\n  )\n    (asserts! (is-some caller-in-list) ERR_NOT_AUTHORIZED)\n    (asserts! (is-some admin-to-remove-in-list) ERR_ADMIN_NOT_IN_LIST)\n    (asserts! (not (is-eq admin CONTRACT_DEPLOYER)) ERR_CANNOT_REMOVE_CONTRACT_DEPLOYER)\n    (asserts! (is-standard admin) ERR_INVALID_PRINCIPAL)\n    (var-set admin-helper admin)\n    (var-set admins (filter admin-not-removeable admins-list))\n    (print {action: \"remove-admin\", caller: caller, data: {admin: admin}})\n    (ok true)\n  )\n)\n\n(define-public (set-swap-status (status bool))\n  (let (\n    (admins-list (var-get admins))\n    (caller tx-sender)\n  )\n    (begin\n      (asserts! (is-some (index-of admins-list caller)) ERR_NOT_AUTHORIZED)\n      (var-set swap-status status)\n      (print {action: \"set-swap-status\", caller: caller, data: {status: status}})\n      (ok true)\n    )\n  )\n)\n\n(define-public (get-quote-a\n    (amount uint)\n    (pool-trait <x-pool-trait>)\n    (x-token-trait <x-ft-trait>) (y-token-trait <x-ft-trait>)\n    (xyk-reversed bool)\n    (token-x-trait <a-ft-trait>) (token-y-trait <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (quote-a (if (is-eq xyk-reversed false)\n                 (unwrap! (contract-call? pool-trait get-dy amount) ERR_QUOTE_A)\n                 (unwrap! (contract-call? pool-trait get-dx amount) ERR_QUOTE_A)))\n    (xyk-token-out (if (is-eq xyk-reversed false) y-token-trait x-token-trait))\n    (scaled-amount (unwrap! (scale-xyk-amount quote-a xyk-token-out token-x-trait) ERR_SCALED_AMOUNT_A))           \n    (quote-b (unwrap! (contract-call?\n                      'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper\n                      (contract-of token-x-trait) (contract-of token-y-trait)\n                      factor\n                      scaled-amount) ERR_QUOTE_B))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (get-quote-b\n    (amount uint)\n    (pool-trait <x-pool-trait>)\n    (x-token-trait <x-ft-trait>) (y-token-trait <x-ft-trait>)\n    (xyk-reversed bool)\n    (token-x-trait <a-ft-trait>) (token-y-trait <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (quote-a (unwrap! (contract-call?\n                      'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-helper\n                      (contract-of token-x-trait) (contract-of token-y-trait)\n                      factor\n                      amount) ERR_QUOTE_A))\n    (xyk-token-in (if (is-eq xyk-reversed false) x-token-trait y-token-trait))\n    (scaled-amount (unwrap! (scale-alex-amount quote-a token-y-trait xyk-token-in) ERR_SCALED_AMOUNT_A))\n    (quote-b (if (is-eq xyk-reversed false)\n                 (unwrap! (contract-call? pool-trait get-dy scaled-amount) ERR_QUOTE_B)\n                 (unwrap! (contract-call? pool-trait get-dx scaled-amount) ERR_QUOTE_B)))\n  )\n    (ok quote-b)\n  )\n)\n\n(define-public (swap-helper-a\n    (amount uint) (min-received uint)\n    (pool-trait <x-pool-trait>)\n    (x-token-trait <x-ft-trait>) (y-token-trait <x-ft-trait>)\n    (xyk-reversed bool)\n    (token-x-trait <a-ft-trait>) (token-y-trait <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (swap-a (if (is-eq xyk-reversed false)\n                (unwrap! (xyk-sa amount pool-trait x-token-trait y-token-trait) ERR_SWAP_A)\n                (unwrap! (xyk-sb amount pool-trait x-token-trait y-token-trait) ERR_SWAP_A)))\n    (xyk-token-out (if (is-eq xyk-reversed false) y-token-trait x-token-trait))\n    (scaled-amount (unwrap! (scale-xyk-amount swap-a xyk-token-out token-x-trait) ERR_SCALED_AMOUNT_A))\n    (swap-b (unwrap! (alex-sa scaled-amount token-x-trait token-y-trait factor) ERR_SWAP_B))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-a\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          xyk-data: {\n            x-pool: (contract-of pool-trait),\n            x-tokens: {\n              a: (contract-of x-token-trait),\n              b: (contract-of y-token-trait)\n            },\n            x-reversed: xyk-reversed,\n            x-swap: swap-a\n          },\n          alex-data: {\n            a-tokens: {\n              a: (contract-of token-x-trait),\n              b: (contract-of token-y-trait)\n            },\n            a-factors: {\n              a: factor\n            },\n            a-swap: swap-b\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-public (swap-helper-b\n    (amount uint) (min-received uint)\n    (pool-trait <x-pool-trait>)\n    (x-token-trait <x-ft-trait>) (y-token-trait <x-ft-trait>)\n    (xyk-reversed bool)\n    (token-x-trait <a-ft-trait>) (token-y-trait <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (swap-a (unwrap! (alex-sa amount token-x-trait token-y-trait factor) ERR_SWAP_A))\n    (xyk-token-in (if (is-eq xyk-reversed false) x-token-trait y-token-trait))\n    (scaled-amount (unwrap! (scale-alex-amount swap-a token-y-trait xyk-token-in) ERR_SCALED_AMOUNT_A))\n    (swap-b (if (is-eq xyk-reversed false)\n                (unwrap! (xyk-sa scaled-amount pool-trait x-token-trait y-token-trait) ERR_SWAP_B)\n                (unwrap! (xyk-sb scaled-amount pool-trait x-token-trait y-token-trait) ERR_SWAP_B)))\n  )\n    (begin\n      (asserts! (is-eq (var-get swap-status) true) ERR_SWAP_STATUS)\n      (asserts! (> amount u0) ERR_INVALID_AMOUNT)\n      (asserts! (>= swap-b min-received) ERR_MINIMUM_RECEIVED)\n      (print {\n        action: \"swap-helper-b\",\n        caller: tx-sender, \n        data: {\n          amount: amount,\n          min-received: min-received,\n          received: swap-b,\n          xyk-data: {\n            x-pool: (contract-of pool-trait),\n            x-tokens: {\n              a: (contract-of x-token-trait),\n              b: (contract-of y-token-trait)\n            },\n            x-reversed: xyk-reversed,\n            x-swap: swap-b\n          },\n          alex-data: {\n            a-tokens: {\n              a: (contract-of token-x-trait),\n              b: (contract-of token-y-trait)\n            },\n            a-factors: {\n              a: factor\n            },\n            a-swap: swap-a\n          }\n        }\n      })\n      (ok swap-b)\n    )\n  )\n)\n\n(define-private (xyk-sa\n    (amount uint)\n    (pool-trait <x-pool-trait>)\n    (a-token <x-ft-trait>) (b-token <x-ft-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-x-for-y\n                  pool-trait\n                  a-token b-token\n                  amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (xyk-sb\n    (amount uint)\n    (pool-trait <x-pool-trait>)\n    (a-token <x-ft-trait>) (b-token <x-ft-trait>)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SM1793C4R5PZ4NS4VQ4WMP7SKKYVH8JZEWSZ9HCCR.xyk-core-v-1-1 swap-y-for-x\n                  pool-trait\n                  a-token b-token\n                  amount u1)))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (alex-sa\n    (amount uint)\n    (a-token <a-ft-trait>) (b-token <a-ft-trait>)\n    (factor uint)\n  )\n  (let (\n    (swap-a (try! (contract-call?\n                  'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper\n                  a-token b-token\n                  factor\n                  amount (some u1))))\n  )\n    (ok swap-a)\n  )\n)\n\n(define-private (scale-xyk-amount (amount uint) (x-token <x-ft-trait>) (a-token <a-ft-trait>))\n  (let (\n    (x-decimals (unwrap-panic (contract-call? x-token get-decimals)))\n    (a-decimals (unwrap-panic (contract-call? a-token get-decimals)))\n    (scaled-amount\n      (if (is-eq x-decimals a-decimals)\n        amount\n        (if (> x-decimals a-decimals)\n          (/ amount (pow u10 (- x-decimals a-decimals)))\n          (* amount (pow u10 (- a-decimals x-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n(define-private (scale-alex-amount (amount uint) (a-token <a-ft-trait>) (x-token <x-ft-trait>))\n  (let (\n    (a-decimals (unwrap-panic (contract-call? a-token get-decimals)))\n    (x-decimals (unwrap-panic (contract-call? x-token get-decimals)))\n    (scaled-amount\n      (if (is-eq a-decimals x-decimals)\n        amount\n        (if (> a-decimals x-decimals)\n          (/ amount (pow u10 (- a-decimals x-decimals)))\n          (* amount (pow u10 (- x-decimals a-decimals)))\n        )\n      )\n    )\n  )\n    (ok scaled-amount)\n  )\n)\n\n(define-private (admin-not-removeable (admin principal))\n  (not (is-eq admin (var-get admin-helper)))\n)",
    "analysis": {
      "summary": "This contract facilitates token swaps using an XYK model and admin management for a decentralized exchange platform.",
      "explanation": "The contract defines a decentralized exchange mechanism with XYK (constant product) model for swapping tokens and an administrative layer for managing permissions. It uses external contracts for token and pool interactions, adhering to SIP-010 fungible token standards.\n\n- The contract starts by declaring necessary traits from other contracts for fungible tokens and pool interactions (<L1-3>).\n- It defines constants for error codes (<L5-17>), setting a standard for error handling across various functions.\n- `CONTRACT_DEPLOYER` is set to the transaction sender, establishing the deployer as a privileged entity (<L19>).\n- Administrative functions allow adding and removing admins, with checks to ensure only existing admins can add others and certain restrictions on removals (<L21-73>).\n- `swap-status` is a toggleable state variable controlling the ability to perform swaps, enhancing security or maintenance control (<L75-92>).\n- The contract provides functions to get quotes for swaps (`get-quote-a` and `get-quote-b`) and to execute swaps (`swap-helper-a` and `swap-helper-b`), incorporating complex logic for price calculation and execution based on the XYK model and custom scaling for token amounts (<L94-235>).\n- Private helper functions handle the core logic of swapping tokens within the XYK model and scaling token amounts to account for different decimal places in token contracts (<L237-317>).\n\nEach public function includes authorization checks, error handling, and logging for transparency. The contract cleverly integrates with external token and pool contracts, showcasing a modular and interoperable design.",
      "tags": [
        "DeFi",
        "XYK",
        "token-swap",
        "admin-management",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 185,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.farming-wstx-roo-core",
    "calls": 132,
    "source": ";;; Core: maintains a historical distribution of stake shares.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; errors\n(define-constant err-stake-preconditions    (err u901))\n(define-constant err-stake-postconditions   (err u902))\n(define-constant err-unstake-preconditions  (err u903))\n(define-constant err-unstake-postconditions (err u904))\n(define-constant err-share-preconditions    (err u905))\n(define-constant err-share-postconditions   (err u906))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; constants\n(define-constant MIN-STAKE u1)\n(define-constant STAKING-TOKEN .wstx-roo)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Map blocks to epochs\n(define-constant EPOCH-LENGTH  u500) ;; ~1 week at ~10min/block\n(define-constant GENESIS-BLOCK block-height)\n(define-constant GENESIS-EPOCH (calc-epoch GENESIS-BLOCK)) ;;zero\n\n(define-read-only (current-epoch) (calc-epoch block-height))\n\n;; Crash on block in the past.\n(define-read-only (calc-epoch (block uint))\n  (/ (- block GENESIS-BLOCK) EPOCH-LENGTH))\n\n(define-read-only (calc-epoch-start (epoch uint))\n  (+ GENESIS-BLOCK (* EPOCH-LENGTH epoch)))\n\n(define-read-only (calc-epoch-end (epoch uint))\n  (- (+ GENESIS-BLOCK (* EPOCH-LENGTH (+ epoch u1))) u1))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; state\n(define-data-var total-staked\n  {epoch: uint, ;;last state change\n   min  : uint, ;;minimum staked during current epoch\n   end  : uint} ;;total staked during current epoch\n  {epoch: GENESIS-EPOCH,\n   min  : u0,\n   end  : u0})\n\n(define-map user-staked\n  principal\n  {epoch: uint,\n   min  : uint,\n   end  : uint})\n\n(define-read-only (get-total-staked) (var-get total-staked))\n\n(define-read-only (get-user-staked (user principal))\n  (default-to\n    {epoch: GENESIS-EPOCH, min: u0, end: u0}\n    (map-get? user-staked user)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; stake\n(define-public (stake (amt uint))\n  (let ((user      tx-sender)\n        (protocol  (as-contract tx-sender))\n\n        (epoch     (current-epoch))\n\n        (t-staked  (get-total-staked))\n        (u-staked  (get-user-staked user))\n        (t-end1    (+ (get end t-staked) amt))\n        (u-end1    (+ (get end u-staked) amt)) )\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (>= epoch GENESIS-EPOCH)\n      (>= epoch (get epoch t-staked))\n      (>= epoch (get epoch u-staked))\n      (>= (get epoch t-staked) (get epoch u-staked))\n      (>  amt u0)\n      (>= u-end1 MIN-STAKE)\n      )\n     err-stake-preconditions)\n\n    ;; Update global state\n    (try! (contract-call? .wstx-roo transfer amt user protocol none))\n\n    ;; Update local state\n    ;; N.B. during the genesis epoch, min is always zero.\n    (if (is-eq epoch (get epoch t-staked))\n        (var-set total-staked\n                 (merge t-staked {end: t-end1}))\n        (var-set total-staked\n                 {epoch: epoch,\n                  min  : (get end t-staked),\n                  end  : t-end1}))\n\n    (if (is-eq epoch (get epoch u-staked))\n        (map-set user-staked user (merge u-staked {end: u-end1}))\n        (map-set user-staked user\n                 {epoch: epoch,\n                  min  : (get end u-staked),\n                  end  : u-end1}))\n\n    ;; Postconditions\n    (asserts!\n      (>= (unwrap-panic (contract-call? .wstx-roo get-balance protocol))\n          (get end (get-total-staked)))\n     err-stake-postconditions)\n\n    ;; Return\n    (let ((event\n           {op       : \"stake\",\n            user     : user,\n            amt      : amt,\n            epoch    : epoch,\n            total-old: t-staked,\n            user-old : u-staked,\n            total-new: (get-total-staked),\n            user-new : (get-user-staked user)\n           }))\n      (print event)\n      (ok event)\n      )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; unstake\n(define-public (unstake (amt uint))\n  (let ((user      tx-sender)\n        (protocol  (as-contract tx-sender))\n\n        (epoch     (current-epoch))\n\n        (t-staked  (get-total-staked))\n        (u-staked  (get-user-staked user))\n        (t-end1    (- (get end t-staked) amt))\n        (u-end1    (- (get end u-staked) amt))\n        (t-min1    (min t-end1 (get min t-staked))) ;;unstake most recent first\n        (u-min1    (min u-end1 (get min u-staked))) )\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (>= epoch GENESIS-EPOCH)\n      (>= epoch (get epoch t-staked))\n      (>= epoch (get epoch u-staked))\n      (>= (get epoch t-staked) (get epoch u-staked))\n      (>  amt u0)\n    ;;(<= amt (get end u-staked))\n      (or (>= u-end1 MIN-STAKE)\n          (is-eq u-end1 u0))\n      )\n     err-unstake-preconditions)\n\n    ;; Update global state\n    (try! (as-contract (contract-call? .wstx-roo transfer amt protocol user none)))\n\n    ;; Update local state\n    ;; N.B. during the genesis epoch, min is always zero.\n    (if (is-eq epoch (get epoch t-staked))\n        (var-set total-staked (merge t-staked {min: t-min1, end: t-end1}))\n        (var-set total-staked\n                 {epoch: epoch,\n                  min  : t-end1,\n                  end  : t-end1}))\n\n    (if (is-eq epoch (get epoch u-staked))\n        (map-set user-staked user (merge u-staked {min: u-min1, end: u-end1}))\n        (map-set user-staked user\n                 {epoch: epoch,\n                  min  : u-end1,\n                  end  : u-end1}))\n\n    ;; Postconditions\n    (asserts!\n     (and\n      (>= (unwrap-panic (contract-call? .wstx-roo get-balance protocol))\n          (get end (get-total-staked)))\n      )\n     err-unstake-postconditions)\n\n    ;; Return\n    (let ((event\n           {op       : \"unstake\",\n            user     : user,\n            amt      : amt,\n            epoch    : epoch,\n            total-old: t-staked,\n            user-old : u-staked,\n            total-new: (get-total-staked),\n            user-new : (get-user-staked user)\n           }))\n      (print event)\n      (ok event) )))\n\n(define-read-only (min (x uint) (y uint)) (if (<= x y) x y))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; staking distribution over time\n\n;; convenience/testing\n(define-read-only\n  (get-unstable-share-at\n     (user  principal)\n     (epoch uint))\n  (if (< epoch (current-epoch))\n      (get-share-at user epoch)\n      (let ((t     (get-total-staked))\n            (u     (get-user-staked user))\n            (t-amt (get end t))\n            (u-amt (get end u))\n            (share {staked: u-amt, total: t-amt}))\n        (ok share))))\n\n(define-read-only\n  (get-share-at\n   (user  principal)\n   (epoch uint))\n\n  (let ((last-block (calc-epoch-end epoch))\n        (header     (unwrap-panic (get-block-info? id-header-hash last-block)))\n        (t-at       (at-block header (get-total-staked)))\n        (u-at       (at-block header (get-user-staked user)))\n        (t-amt      (eligible-amount epoch t-at))\n        (u-amt      (eligible-amount epoch u-at))\n        (share      {staked: u-amt, total: t-amt}) )\n\n    ;; Preconditions\n    (asserts!\n     (and\n      (< epoch (current-epoch))\n      (<= (get epoch t-at) epoch)\n      (<= (get epoch u-at) epoch)\n      )\n     err-share-preconditions)\n\n      (ok share) ))\n\n(define-read-only\n  (eligible-amount\n   (goal  uint)\n   (entry {epoch: uint, min: uint, end: uint}))\n\n  (if (is-eq goal (get epoch entry))\n      ;; If the specific epoch we are looking at had interactions,\n      ;; only the minimum amount staked continuously during that\n      ;; period counts.\n      (get min entry)\n      ;; Otherwise carry over staked amount from previous active epoch.\n      (get end entry)) )\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract manages a staking system, tracking stakes over time and calculating users' shares per epoch.",
      "explanation": "The contract is designed to maintain a historical distribution of stake shares across epochs, where an epoch represents a fixed number of blocks. It allows users to stake and unstake tokens, updating their stakes and the total staked amount accordingly. The contract also provides functions to calculate a user's share of the total stake at any given epoch.\n\n- Errors (<L2-7>): Defines constants for various error conditions related to staking and unstaking operations.\n- Constants (<L10-14>): Sets the minimum stake amount, the staking token contract, and epoch-related constants.\n- State Variables (<L17-29>): Includes variables for tracking the total staked amount and individual user stakes, both structured to track changes over epochs.\n- Stake Function (<L32-85>): Allows users to stake tokens, updating both the global and user-specific staking state. It checks several preconditions to ensure the operation is valid, transfers tokens from the user to the protocol, and logs the operation.\n- Unstake Function (<L88-143>): Enables users to withdraw their stake, with similar logic to the stake function but in reverse, including transferring tokens back to the user.\n- Share Calculation (<L145-196>): Provides functions to calculate the share of the total stake for a given user at a specific epoch, taking into account the minimum amount staked during that epoch if the user was active.\n\nEach function includes preconditions to ensure the integrity of operations and postconditions to validate the outcome. The contract employs Clarity's features such as `asserts!`, `try!`, `let`, `if`, `map-set`, and `var-set` to manage state and enforce rules.",
      "tags": [
        "staking",
        "token-distribution",
        "epoch-tracking"
      ]
    }
  },
  {
    "rank": 186,
    "contract": "SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charismatic-shark-dexterity",
    "calls": 132,
    "source": ";; Charismatic Shark - LP Token, AMM DEX and Hold-to-Earn Engine\n;; SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charismatic-shark-dexterity\n\n;; Implement SIP-010 trait\n;; (impl-trait 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-traits-v1.sip010-ft-trait)\n\n;; Define the LP token\n(define-fungible-token index)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant CONTRACT (as-contract tx-sender))\n(define-constant ERR_UNAUTHORIZED (err u401))\n(define-constant ERR_INVALID_FEE (err u402))\n(define-constant MAX_SWAP_FEE u50000) ;; 5%\n(define-constant FEE_DENOMINATION u1000000)\n(define-constant PRECISION u1000000)\n(define-constant MAX_ALPHA u1000000) ;; 1.0 in fixed point\n(define-constant MIN_ALPHA u0)       ;; 0.0 = constant sum (stableswap)\n                                     ;; 1.0 = constant product\n;; Storage\n(define-data-var owner principal DEPLOYER)\n(define-data-var alpha uint u1000000) ;; Default to constant product\n(define-data-var swap-fee uint u50000) ;; Default to 5%\n(define-data-var token-uri (optional (string-utf8 256)) \n  (some u\"https://charisma.rocks/api/v0/indexes/SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charismatic-shark-dexterity\"))\n(define-data-var first-start-block uint stacks-block-height)\n(define-map last-tap-block principal uint)\n\n;; Configuration functions\n(define-public (set-owner (new-owner principal))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set owner new-owner))))\n\n(define-public (set-swap-fee (new-fee uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (asserts! (<= new-fee MAX_SWAP_FEE) ERR_UNAUTHORIZED)\n    (ok (var-set swap-fee new-fee))))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if (is-eq contract-caller (var-get owner))\n    (ok (var-set token-uri (some value))) \n    ERR_UNAUTHORIZED))\n\n;; Core AMM operations\n(define-private (calculate-output-amount (x uint) (y uint) (dx uint) (amp uint))\n  (let (\n    ;; Constant sum portion (better for similar values)\n    (sum-term (/ (* dx y) x))\n    ;; Constant product portion (better for different values)\n    (product-term (/ (* dx y) (+ x dx)))\n    ;; Weighted sum of both terms\n    (weighted-output (+ (* (- PRECISION amp) sum-term) (* amp product-term))))\n    (/ weighted-output PRECISION)))\n\n(define-public (swap (forward bool) (amt-in uint))\n  (let (\n    (sender tx-sender)\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT) \n      (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT))))\n    (paid-energy (match (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 exhaust u10000000 sender) success true error false))\n    ;; Calculate effective input amount\n    (effective-in (if paid-energy amt-in (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION)))\n    ;; Calculate output with hybrid curve\n    (amt-out (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha))))\n    (try! (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer amt-in sender CONTRACT none) \n      (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity transfer amt-in sender CONTRACT none)))\n    (try! (as-contract (if forward (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity transfer amt-out CONTRACT sender none)\n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer amt-out CONTRACT sender none))))\n    (ok {amt-in: amt-in, amt-out: amt-out})))\n\n(define-public (mint (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (if (is-eq total-supply u0) amount (/ (* amount reserve0) total-supply)))\n    (token1-amount (if (is-eq total-supply u0) amount (/ (* amount reserve1) total-supply))))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer token0-amount who CONTRACT none))\n    (try! (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity transfer token1-amount who CONTRACT none))\n    (try! (ft-mint? index amount who))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n(define-public (burn (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (/ (* amount reserve0) total-supply))\n    (token1-amount (/ (* amount reserve1) total-supply)))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (ft-burn? index amount who))\n    (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer token0-amount CONTRACT who none)))\n    (try! (as-contract (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity transfer token1-amount CONTRACT who none)))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n;; Read functions\n(define-read-only (get-owner)\n  (ok (var-get owner)))\n\n(define-read-only (get-alpha)\n  (ok (var-get alpha)))\n\n(define-read-only (get-tokens)\n  (ok {token0: 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token, token1: 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity}))\n\n(define-read-only (get-swap-fee)\n  (ok (var-get swap-fee)))\n\n(define-read-only (get-reserves)\n  (ok {\n    token0: (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT)),\n    token1: (unwrap-panic (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity get-balance CONTRACT))\n  }))\n\n(define-read-only (get-quote (forward bool) (amt-in uint) (apply-fee bool))\n  (let (\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT) \n      (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP1KMAA7TPZ5AZZ4W67X74MJNFKMN576604CWNBQS.shark-coin-stxcity get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT))))\n    (effective-in (if apply-fee (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION) amt-in)))\n    (ok (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha)))))\n\n;; SIP-010 Implementation\n(define-read-only (get-name)\n  (ok \"Charismatic Shark\"))\n\n(define-read-only (get-symbol)\n  (ok \"cSHARK\"))\n\n(define-read-only (get-decimals)\n  (ok u6))\n\n(define-read-only (get-balance (who principal))\n  (ok (ft-get-balance index who)))\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply index)))\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri)))\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender from) ERR_UNAUTHORIZED)\n    (ft-transfer? index amount from to)))\n\n;; Hold-to-Earn functions\n(define-private (get-balance-at (data { address: principal, block: uint }))\n    (let ((target-block (get block data)))\n        (if (< target-block stacks-block-height)\n            (let ((block-hash (unwrap-panic (get-stacks-block-info? id-header-hash target-block))))\n                (at-block block-hash (unwrap-panic (get-balance (get address data)))))\n                (unwrap-panic (get-balance (get address data))))))\n\n(define-private (calculate-trapezoid-areas-39 (balances (list 39 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u18)) (unwrap-panic (element-at balances u19))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u19)) (unwrap-panic (element-at balances u20))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u20)) (unwrap-panic (element-at balances u21))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u21)) (unwrap-panic (element-at balances u22))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u22)) (unwrap-panic (element-at balances u23))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u23)) (unwrap-panic (element-at balances u24))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u24)) (unwrap-panic (element-at balances u25))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u25)) (unwrap-panic (element-at balances u26))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u26)) (unwrap-panic (element-at balances u27))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u27)) (unwrap-panic (element-at balances u28))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u28)) (unwrap-panic (element-at balances u29))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u29)) (unwrap-panic (element-at balances u30))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u30)) (unwrap-panic (element-at balances u31))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u31)) (unwrap-panic (element-at balances u32))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u32)) (unwrap-panic (element-at balances u33))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u33)) (unwrap-panic (element-at balances u34))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u34)) (unwrap-panic (element-at balances u35))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u35)) (unwrap-panic (element-at balances u36))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u36)) (unwrap-panic (element-at balances u37))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u37)) (unwrap-panic (element-at balances u38))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-19 (balances (list 19 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-9 (balances (list 9 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-5 (balances (list 5 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-2 (balances (list 2 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)))\n\n(define-private (calculate-balance-integral-39 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-39 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u38))\n        (areas (calculate-trapezoid-areas-39 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-19 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-19 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u18))\n        (areas (calculate-trapezoid-areas-19 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-9 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-9 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u8))\n        (areas (calculate-trapezoid-areas-9 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-5 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-5 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u4))\n        (areas (calculate-trapezoid-areas-5 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-2 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-2 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u1))\n        (areas (calculate-trapezoid-areas-2 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral (address principal) (start-block uint) (end-block uint))\n    (let (\n        (block-difference (- end-block start-block))\n        (thresholds (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 get-thresholds))))\n        (if (>= block-difference (get threshold-39-point thresholds)) (calculate-balance-integral-39 address start-block end-block)\n        (if (>= block-difference (get threshold-19-point thresholds)) (calculate-balance-integral-19 address start-block end-block)\n        (if (>= block-difference (get threshold-9-point thresholds)) (calculate-balance-integral-9 address start-block end-block)\n        (if (>= block-difference (get threshold-5-point thresholds)) (calculate-balance-integral-5 address start-block end-block)\n        (calculate-balance-integral-2 address start-block end-block)))))))\n\n(define-read-only (get-last-tap-block (address principal))\n    (default-to (var-get first-start-block) (map-get? last-tap-block address)))\n\n(define-public (tap)\n  (let (\n    (sender tx-sender)\n    (end-block stacks-block-height)\n    (start-block (get-last-tap-block sender))\n    (balance-integral (calculate-balance-integral sender start-block end-block))\n    (incentive-score (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.aura get-incentive-score CONTRACT))\n    (circulating-supply (unwrap-panic (get-total-supply)))\n    (potential-energy (/ (* balance-integral incentive-score) circulating-supply)))\n    (map-set last-tap-block sender end-block)\n    (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 energize potential-energy sender)))\n    \n;;(begin\n;;  (mint DEPLOYER u100000000)\n;;)    \n",
    "analysis": {
      "summary": "This contract implements a liquidity pool (LP) token, an Automated Market Maker (AMM) for decentralized exchange (DEX) operations, and a hold-to-earn mechanism, leveraging the SIP-010 fungible token standard.",
      "explanation": "The contract begins by declaring its adherence to the SIP-010 standard for fungible tokens, defining constants for the contract deployer, contract itself, error codes, fees, and other operational parameters. It defines a fungible token 'index' for the LP token and several state variables including the contract owner, the swap fee, and the token URI. The contract features configuration functions allowing the owner to update the contract's state variables, such as the owner, swap fee, and token URI.\n\nCore AMM operations are implemented, including a private function to calculate output amounts for trades, and public functions for swapping tokens, minting, and burning LP tokens. These functions interact with external contracts for token balances and transfers, and adjust the LP token supply accordingly.\n\nRead-only functions provide access to contract state, such as owner, alpha (AMM curve parameter), token reserves, and swap fee. The contract also implements the SIP-010 interface for fungible tokens, including functions for transferring tokens and querying balances and supply.\n\nHold-to-earn functions calculate a user's earned rewards based on their token holding duration and amount, using a series of private functions to calculate the balance integral over a set of blocks. The 'tap' function allows users to claim their rewards based on this calculation.\n\nThe contract concludes with a commented-out initialization call to mint LP tokens to the deployer, indicating a potential mechanism for initial liquidity provision.",
      "tags": [
        "LP-token",
        "AMM",
        "DEX",
        "hold-to-earn",
        "SIP-010",
        "fungible-token"
      ]
    }
  },
  {
    "rank": 187,
    "contract": "SP3T54N6G4HN7GPBCYMSDKP4W00C45X19GQ4VT13Y.skullcoin-competitive-g1-phase1",
    "calls": 131,
    "source": ";; Skullcoin | Competitive | Game #1 | v.1.0.0\n;; skullco.in\n\n;; Traits\n(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)\n(use-trait commission-trait 'SP2ESPYE74G94D2HD9X470426W1R6C2P22B4Z1Q5.commission-trait.commission)\n\n;; Define NFT token\n(define-non-fungible-token skullcoin_competitive_g1_p1 uint)\n\n;; Storage\n(define-map token-count principal uint)\n(define-map market uint {price: uint, commission: principal})\n(define-map mint-address bool principal)\n\n;; Constants and Errors\n(define-constant CONTRACT-OWNER tx-sender)\n(define-constant WALLET 'SP224YKZ55F25SBYVR8HZXQ7G89CC8WYKAGMZHQ0A)\n(define-constant ERR-SOLD-OUT (err u200))\n(define-constant ERR-WRONG-COMMISSION (err u201))\n(define-constant ERR-NOT-AUTHORIZED (err u202))\n(define-constant ERR-NOT-FOUND (err u203))\n(define-constant ERR-METADATA-FROZEN (err u204))\n(define-constant ERR-MINT-ALREADY-SET (err u205))\n(define-constant ERR-LISTING (err u206))\n\n;; Variables\n(define-data-var last-id uint u0)\n(define-data-var mint-limit uint u1000)\n(define-data-var mint-price-phase1 uint u3000000)\n(define-data-var wl-sale-active bool false)\n(define-data-var metadata-frozen bool false)\n(define-data-var base-uri (string-ascii 80) \"ipfs://CID1/\")\n\n;; Get balance\n(define-read-only (get-balance (account principal))\n  (default-to u0\n    (map-get? token-count account)))\n\n;; Transfer token to a specified principal\n(define-public (transfer (id uint) (sender principal) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender sender) ERR-NOT-AUTHORIZED)\n    (asserts! (is-none (map-get? market id)) ERR-LISTING)\n    (trnsfr id sender recipient)))\n\n;; Get the owner of the specified token ID\n(define-read-only (get-owner (id uint))\n  (ok (nft-get-owner? skullcoin_competitive_g1_p1 id)))\n\n;; Get the last token ID\n(define-read-only (get-last-token-id)\n  (ok (var-get last-id)))\n\n;; Get the token URI\n(define-read-only (get-token-uri (token-id uint))\n  (ok (some (concat (concat (var-get base-uri) \"{id}\") \".json\"))))\n\n;; Get the mint limit\n(define-read-only (get-mint-limit)\n  (ok (var-get mint-limit)))\n\n;; Get the mint price\n(define-read-only (get-mint-price)\n  (ok (var-get mint-price-phase1)))\n\n;; Change the base uri (only contract owner)\n(define-public (set-base-uri (new-base-uri (string-ascii 80)))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (asserts! (not (var-get metadata-frozen)) ERR-METADATA-FROZEN)\n    (var-set base-uri new-base-uri)\n    (ok true)))\n\n;; Set mint limit (only contract owner)\n(define-public (set-mint-limit (limit uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (var-set mint-limit limit)\n    (ok true)))\n\n;; Set mint price in uSTX (only contract owner)\n(define-public (set-mint-price-in-ustx (price1 uint))\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (var-set mint-price-phase1 price1)\n    (ok (var-get mint-price-phase1))))\n\n;; Freeze metadata\n(define-public (freeze-metadata)\n  (begin\n    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)\n    (var-set metadata-frozen true)\n    (ok true)))\n\n;; Manage the Mint\n(define-private (called-from-mint)\n  (let ((the-mint\n          (unwrap! (map-get? mint-address true)\n                    false)))\n    (is-eq contract-caller the-mint)))\n\n;; Set mint address\n(define-public (set-mint-address)\n  (let ((the-mint (map-get? mint-address true)))\n    (asserts! (and (is-none the-mint)\n              (map-insert mint-address true tx-sender))\n                ERR-MINT-ALREADY-SET)\n    (ok tx-sender)))\n\n;; Mint new NFT (called from mint contract)\n(define-public (mint (new-owner principal))\n    (let ((next-id (+ u1 (var-get last-id))))\n      (asserts! (called-from-mint) ERR-NOT-AUTHORIZED)\n      (asserts! (< (var-get last-id) (var-get mint-limit)) ERR-SOLD-OUT)\n      (match (nft-mint? skullcoin_competitive_g1_p1 next-id new-owner)\n        success\n        (let\n        ((current-balance (get-balance new-owner)))\n          (begin\n            (try! (stx-transfer? (var-get mint-price-phase1) tx-sender WALLET))\n            (var-set last-id next-id)\n            (map-set token-count\n              new-owner\n              (+ current-balance u1)\n            )\n            (ok true)))\n        error (err (* error u10002)))))\n\n;; Non-custodial marketplace\n(define-private (trnsfr (id uint) (sender principal) (recipient principal))\n  (match (nft-transfer? skullcoin_competitive_g1_p1 id sender recipient)\n        success\n          (let\n            ((sender-balance (get-balance sender))\n            (recipient-balance (get-balance recipient)))\n              (map-set token-count\n                    sender\n                    (- sender-balance u1))\n              (map-set token-count\n                    recipient\n                    (+ recipient-balance u1))\n              (ok success))\n        error (err error)))\n\n(define-private (is-sender-owner (id uint))\n  (let ((owner (unwrap! (nft-get-owner? skullcoin_competitive_g1_p1 id) false)))\n    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))\n\n(define-read-only (get-listing-in-ustx (id uint))\n  (map-get? market id))\n\n(define-public (list-in-ustx (id uint) (price uint) (comm <commission-trait>))\n  (let ((listing  {price: price, commission: (contract-of comm)}))\n    (asserts! (is-sender-owner id) ERR-NOT-AUTHORIZED)\n    (map-set market id listing)\n    (print (merge listing {a: \"list-in-ustx\", id: id}))\n    (ok true)))\n\n(define-public (unlist-in-ustx (id uint))\n  (begin\n    (asserts! (is-sender-owner id) ERR-NOT-AUTHORIZED)\n    (map-delete market id)\n    (print {a: \"unlist-in-ustx\", id: id})\n    (ok true)))\n\t\n(define-public (buy-in-ustx (id uint) (comm <commission-trait>))\n  (let ((owner (unwrap! (nft-get-owner? skullcoin_competitive_g1_p1 id) ERR-NOT-FOUND))\n      (listing (unwrap! (map-get? market id) ERR-LISTING))\n      (price (get price listing)))\n    (asserts! (is-eq (contract-of comm) (get commission listing)) ERR-WRONG-COMMISSION)\n    (try! (stx-transfer? price tx-sender owner))\n    (try! (contract-call? comm pay id price))\n    (try! (trnsfr id owner tx-sender))\n    (map-delete market id)\n    (print {a: \"buy-in-ustx\", id: id})\n    (ok true)))",
    "analysis": {
      "summary": "This contract defines a non-fungible token (NFT) for a competitive game, including minting, ownership management, and a non-custodial marketplace with commission support.",
      "explanation": "The contract implements an NFT called 'skullcoin_competitive_g1_p1' with functionality for minting, transferring, and listing tokens on a marketplace. It uses Clarity's native NFT support, maps for storing data, and traits for interoperability.\n\n- Traits are used to ensure that certain contracts implement required functions. This contract implements an NFT trait and uses a commission trait for marketplace transactions <L3-4>.\n- The NFT is defined with a unique identifier type of `uint` <L6>.\n- Maps are used to track the number of tokens owned by each principal, marketplace listings, and whether a principal is authorized to mint <L8-10>.\n- Constants define the contract owner, a wallet address for receiving STX from minting, and various error codes <L12-21>.\n- Variables include the last minted token ID, mint limit, mint price, and flags for sale status and metadata immutability <L23-28>.\n- The contract includes functions for getting token balance <L30-33>, transferring tokens with checks for authorization and listing status <L35-41>, and managing token metadata and minting parameters <L43-76>.\n- Minting is restricted to a specific address, and the mint price is transferred to a designated wallet <L78-96>.\n- The marketplace allows listing and buying tokens with commission payments to a specified address. Listings include a price and a commission contract <L98-134>.\n\nEach function includes checks for authorization and proper state before proceeding with operations, ensuring security and correctness of actions like transferring or minting tokens.",
      "tags": [
        "NFT",
        "marketplace",
        "minting",
        "commission"
      ]
    }
  },
  {
    "rank": 188,
    "contract": "SPW2CWKC61DTT1PBD6V0R7P81V5RJ2DX3FYSE8YK.alien-poop-stxcity-dex",
    "calls": 129,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u1000000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u5000000000)\n(define-constant VIRTUAL_STX_VALUE u1000000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u100000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SPW2CWKC61DTT1PBD6V0R7P81V5RJ2DX3FYSE8YK.alien-poop-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u900090009000900)\n    (var-set stx-balance u111000000)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u1000000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX.",
      "explanation": "The contract allows users to buy and sell a predefined token in exchange for STX, adjusting prices according to a bonding curve formula. It does not grant any special privileges to the deployer post-deployment, ensuring a decentralized operation.\n\n- The contract uses the SIP-010 trait for token standards, ensuring compatibility with the broader Stacks ecosystem (<L1>).\n- Error constants are defined for handling various error states (<L4-11>).\n- Constants are set for the token's supply, DEX address, bonding curve configuration, fee structure, and specific wallets (<L13-24>).\n- Tradable status, virtual STX amount, token balance, STX balance, burn percent, and deployer percent are stored as data variables, allowing their values to be changed only by the contract's functions (<L26-31>).\n- The `buy` function allows users to purchase tokens with STX, adjusting the token and STX balances within the contract, and applying fees. It also handles the scenario where the STX target amount is reached, triggering distribution of tokens and STX to predefined addresses and adjusting the contract's state (<L33-75>).\n- The `sell` function enables users to sell tokens back to the contract in exchange for STX, again adjusting balances and applying fees (<L76-106>).\n- `get-buyable-tokens` and `get-sellable-stx` are read-only functions that estimate the amount of tokens or STX that can be received for a given amount of STX or tokens, respectively, based on the current state of the contract and the bonding curve formula (<L107-132>, <L133-158>).\n- The contract initializes with predefined values for virtual STX amount, token balance, STX balance, tradable status, burn percent, and deployer percent. It also performs an initial STX transfer to a specified address (<L160-167>).\n\nThis contract is a comprehensive example of a DEX utilizing a bonding curve for price determination, with mechanisms for fees, and a clear separation from deployer control post-deployment.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "protocol",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 189,
    "contract": "SPAE4SFGGSKKH7NC49KQCHJFY9159DG24YHQCJVX.xtremely-retarded-people-stxcity-dex",
    "calls": 129,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u100000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SPAE4SFGGSKKH7NC49KQCHJFY9159DG24YHQCJVX.xtremely-retarded-people-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u92307692307692)\n    (var-set stx-balance u33333333)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading a specific token against STX, with features like automated fee collection and token burning.",
      "explanation": "The contract starts by declaring its use of the SIP-010 fungible token standard trait for token operations. It defines several error constants for handling unauthorized access, trading status, and balance checks. The contract sets up constants for the token's supply, DEX address, bonding curve configuration, fee, and wallet addresses for fee collection and token burning. It also initializes variables for trading status, virtual STX amount, token, and STX balances, and percentages for burning and deployer rewards.\n\nThe `buy` function allows users to purchase tokens with STX, calculating fees, and adjusting balances accordingly. If the STX target amount is reached, it triggers token burning, fee distribution, and disables further trading. The `sell` function enables users to sell tokens back to the DEX in exchange for STX, also handling fees and balance updates.\n\nThe `get-buyable-tokens` and `get-sellable-stx` read-only functions provide estimates for trade outcomes based on the current state of the contract's balances and the bonding curve. Finally, the contract initializes with predefined values for balances and trading status, and performs an initial STX transfer as part of its setup.\n\nKey lines include:\n- Use of SIP-010 trait <L1>\n- Definition of constants and error codes <L4-17>\n- Initial variable settings <L19-26>\n- The `buy` function logic <L28-76>, particularly the use of `asserts!` for checks and `try!` for state-changing operations\n- The `sell` function logic <L78-117>, with similar use of assertions and error handling\n- Calculation logic within `get-buyable-tokens` <L119-141> and `get-sellable-stx` <L143-165> for trading estimates\n- Contract initialization and setup <L167-174>, including a mandatory STX transfer",
      "tags": [
        "DEX",
        "bonding-curve",
        "trading",
        "fee-management",
        "token-burning"
      ]
    }
  },
  {
    "rank": 190,
    "contract": "SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-apower-helper-v3",
    "calls": 128,
    "source": "(impl-trait .proposal-trait.proposal-trait)\n(define-constant ERR-NOT-AUTHORIZED (err u1000))\n(define-constant ERR-ALREADY-PROCESSED (err u1409))\n(define-constant ONE_8 (pow u10 u8))\n(define-map approved-operators principal bool)\n(define-map processed-batches { cycle: uint, batch: uint } bool)\n(define-read-only (is-dao-or-extension)\n    (ok (asserts! (or (is-eq tx-sender .executor-dao) (contract-call? .executor-dao is-extension contract-caller)) ERR-NOT-AUTHORIZED)))\n(define-read-only (is-cycle-batch-processed (cycle uint) (batch uint))\n  (default-to false (map-get? processed-batches { cycle: cycle, batch: batch })))\n(define-public (set-approved-operator (new-approved-operator principal) (approved bool))\n  (begin\n    (try! (is-dao-or-extension))\n    (ok (map-set approved-operators new-approved-operator approved))))\n(define-public (execute (sender principal))\n\t(begin\n\t\t(try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-apower add-approved-contract .auto-alex-apower-helper-v3))\n\t\t(try! (set-approved-operator 'SP1A6F9ABHQMVP92GH7T9ZBF029T1WG3SHPNMKT0D true))\n\t\t(ok true)))\n(define-public (mint-and-burn-apower (cycle uint) (batch uint) (recipients (list 200 {recipient: principal, amount: uint})))\n\t(let (\n      (minted (try! (fold mint-apower-iter recipients (ok u0)))))\n\t\t(asserts! (or (is-ok (is-dao-or-extension)) (is-ok (check-is-approved))) ERR-NOT-AUTHORIZED)\n    (asserts! (is-eq (is-cycle-batch-processed cycle batch) false) ERR-ALREADY-PROCESSED)\n    (map-set processed-batches { cycle: cycle, batch: batch } true)\n    (as-contract (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-apower burn-fixed minted 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.auto-alex-v3))))\n(define-private (mint-apower-iter (recipient {recipient: principal, amount: uint}) (prior (response uint uint)))\n  (begin\n    (as-contract (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-apower mint-fixed (get amount recipient) (get recipient recipient))))\n    (ok (+ (try! prior) (get amount recipient)))))\n(define-private (check-is-approved)\n  (ok (asserts! (default-to false (map-get? approved-operators tx-sender)) ERR-NOT-AUTHORIZED)))",
    "analysis": {
      "summary": "This contract defines a system for managing approved operators, processing batches of operations, and minting and burning a specific token, with access control enforced.",
      "explanation": "The contract implements a governance or administrative mechanism, likely for a DAO (Decentralized Autonomous Organization), to control who can perform certain actions, such as minting and burning tokens, and to keep track of processed batches to prevent reprocessing. Here's a breakdown of its key components:\n\n- **Implementation of a Trait** <L1>: The contract starts by implementing a trait from another contract, which sets a standard for proposal handling, indicating this contract is part of a larger, modular system.\n\n- **Constants** <L2-3>: Defines error codes for unauthorized access and for trying to process an already processed batch.\n\n- **Data Maps** <L4-5>: Two maps are defined. `approved-operators` tracks which principals (addresses) are allowed to perform certain actions. `processed-batches` keeps a record of which cycle and batch combinations have been processed, to ensure operations are not repeated.\n\n- **Access Control Functions** <L6-7>: `is-dao-or-extension` checks if the caller is the DAO or an approved extension, ensuring that only authorized entities can execute certain actions. `is-cycle-batch-processed` checks if a given cycle and batch have already been processed.\n\n- **Operator Management** <L8-12>: Allows the DAO or an extension to update the list of approved operators, providing a mechanism to dynamically control access.\n\n- **Execution Function** <L13-17>: A public function that performs a series of operations, including calling another contract to add an approved contract and setting an approved operator. This demonstrates how the contract interacts with external contracts and manages internal state.\n\n- **Mint and Burn Function** <L18-24>: This function allows for minting and burning of a specific token for a list of recipients within a batch. It checks for authorization and whether the batch has already been processed before proceeding, illustrating complex state management and external contract interactions.\n\n- **Helper Functions** <L25-30>: Includes a private function for iterating over recipients to mint tokens and a function to check if the caller is an approved operator. These support the main functionality by modularizing repetitive tasks and access control checks.\n\nOverall, the contract showcases patterns for managing permissions, interacting with external contracts, and ensuring operations are only performed once. It's a good example of how to structure complex administrative logic in Clarity smart contracts.",
      "tags": [
        "DAO",
        "governance",
        "token-management",
        "access-control"
      ]
    }
  },
  {
    "rank": 191,
    "contract": "SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charismatic-flow-dexterity",
    "calls": 128,
    "source": ";; Charismatic Flow - LP Token, AMM DEX and Hold-to-Earn Engine\n;; SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charismatic-flow-dexterity\n\n;; Implement SIP-010 trait\n(impl-trait 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-traits-v1.sip010-ft-trait)\n\n;; Define the LP token\n(define-fungible-token index)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant CONTRACT (as-contract tx-sender))\n(define-constant ERR_UNAUTHORIZED (err u401))\n(define-constant ERR_INVALID_FEE (err u402))\n(define-constant MAX_SWAP_FEE u50000) ;; 5%\n(define-constant FEE_DENOMINATION u1000000)\n(define-constant PRECISION u1000000)\n(define-constant MAX_ALPHA u1000000) ;; 1.0 in fixed point\n(define-constant MIN_ALPHA u0)       ;; 0.0 = constant sum (stableswap)\n                                     ;; 1.0 = constant product\n;; Storage\n(define-data-var owner principal DEPLOYER)\n(define-data-var alpha uint u1000000) ;; Default to constant product\n(define-data-var swap-fee uint u50000) ;; Default to 5%\n(define-data-var token-uri (optional (string-utf8 256)) \n  (some u\"https://charisma.rocks/api/v0/indexes/SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charismatic-flow-dexterity\"))\n(define-data-var first-start-block uint stacks-block-height)\n(define-map last-tap-block principal uint)\n\n;; Configuration functions\n(define-public (set-owner (new-owner principal))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set owner new-owner))))\n\n(define-public (set-swap-fee (new-fee uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (asserts! (<= new-fee MAX_SWAP_FEE) ERR_UNAUTHORIZED)\n    (ok (var-set swap-fee new-fee))))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if (is-eq contract-caller (var-get owner))\n    (ok (var-set token-uri (some value))) \n    ERR_UNAUTHORIZED))\n\n;; Core AMM operations\n(define-private (calculate-output-amount (x uint) (y uint) (dx uint) (amp uint))\n  (let (\n    ;; Constant sum portion (better for similar values)\n    (sum-term (/ (* dx y) x))\n    ;; Constant product portion (better for different values)\n    (product-term (/ (* dx y) (+ x dx)))\n    ;; Weighted sum of both terms\n    (weighted-output (+ (* (- PRECISION amp) sum-term) (* amp product-term))))\n    (/ weighted-output PRECISION)))\n\n(define-public (swap (forward bool) (amt-in uint))\n  (let (\n    (sender tx-sender)\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    (paid-energy (match (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 exhaust u10000000 sender) success true error false))\n    ;; Calculate effective input amount\n    (effective-in (if paid-energy amt-in (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION)))\n    ;; Calculate output with hybrid curve\n    (amt-out (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha))))\n    (try! (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-in sender CONTRACT none) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer amt-in sender CONTRACT none)))\n    (try! (as-contract (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer amt-out CONTRACT sender none)\n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-out CONTRACT sender none))))\n    (ok {amt-in: amt-in, amt-out: amt-out})))\n\n(define-public (mint (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (if (is-eq total-supply u0) amount (/ (* amount reserve0) total-supply)))\n    (token1-amount (if (is-eq total-supply u0) amount (/ (* amount reserve1) total-supply))))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token0-amount who CONTRACT none))\n    (try! (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer token1-amount who CONTRACT none))\n    (try! (ft-mint? index amount who))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n(define-public (burn (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (/ (* amount reserve0) total-supply))\n    (token1-amount (/ (* amount reserve1) total-supply)))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (ft-burn? index amount who))\n    (try! (as-contract (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token0-amount CONTRACT who none)))\n    (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token transfer token1-amount CONTRACT who none)))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n;; Read functions\n(define-read-only (get-owner)\n  (ok (var-get owner)))\n\n(define-read-only (get-alpha)\n  (ok (var-get alpha)))\n\n(define-read-only (get-tokens)\n  (ok {token0: 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token, token1: 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token}))\n\n(define-read-only (get-swap-fee)\n  (ok (var-get swap-fee)))\n\n(define-read-only (get-reserves)\n  (ok {\n    token0: (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)),\n    token1: (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT))\n  }))\n\n(define-read-only (get-quote (forward bool) (amt-in uint) (apply-fee bool))\n  (let (\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-token get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    (effective-in (if apply-fee (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION) amt-in)))\n    (ok (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha)))))\n\n;; SIP-010 Implementation\n(define-read-only (get-name)\n  (ok \"Charismatic Flow\"))\n\n(define-read-only (get-symbol)\n  (ok \"CMF\"))\n\n(define-read-only (get-decimals)\n  (ok u6))\n\n(define-read-only (get-balance (who principal))\n  (ok (ft-get-balance index who)))\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply index)))\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri)))\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender from) ERR_UNAUTHORIZED)\n    (ft-transfer? index amount from to)))\n\n;; Hold-to-Earn functions\n(define-private (get-balance-at (data { address: principal, block: uint }))\n    (let ((target-block (get block data)))\n        (if (< target-block stacks-block-height)\n            (let ((block-hash (unwrap-panic (get-stacks-block-info? id-header-hash target-block))))\n                (at-block block-hash (unwrap-panic (get-balance (get address data)))))\n                (unwrap-panic (get-balance (get address data))))))\n\n(define-private (calculate-trapezoid-areas-39 (balances (list 39 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u18)) (unwrap-panic (element-at balances u19))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u19)) (unwrap-panic (element-at balances u20))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u20)) (unwrap-panic (element-at balances u21))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u21)) (unwrap-panic (element-at balances u22))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u22)) (unwrap-panic (element-at balances u23))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u23)) (unwrap-panic (element-at balances u24))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u24)) (unwrap-panic (element-at balances u25))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u25)) (unwrap-panic (element-at balances u26))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u26)) (unwrap-panic (element-at balances u27))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u27)) (unwrap-panic (element-at balances u28))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u28)) (unwrap-panic (element-at balances u29))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u29)) (unwrap-panic (element-at balances u30))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u30)) (unwrap-panic (element-at balances u31))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u31)) (unwrap-panic (element-at balances u32))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u32)) (unwrap-panic (element-at balances u33))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u33)) (unwrap-panic (element-at balances u34))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u34)) (unwrap-panic (element-at balances u35))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u35)) (unwrap-panic (element-at balances u36))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u36)) (unwrap-panic (element-at balances u37))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u37)) (unwrap-panic (element-at balances u38))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-19 (balances (list 19 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-9 (balances (list 9 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-5 (balances (list 5 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-2 (balances (list 2 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)))\n\n(define-private (calculate-balance-integral-39 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-39 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u38))\n        (areas (calculate-trapezoid-areas-39 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-19 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-19 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u18))\n        (areas (calculate-trapezoid-areas-19 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-9 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-9 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u8))\n        (areas (calculate-trapezoid-areas-9 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-5 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-5 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u4))\n        (areas (calculate-trapezoid-areas-5 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-2 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-2 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u1))\n        (areas (calculate-trapezoid-areas-2 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral (address principal) (start-block uint) (end-block uint))\n    (let (\n        (block-difference (- end-block start-block))\n        (thresholds (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 get-thresholds))))\n        (if (>= block-difference (get threshold-39-point thresholds)) (calculate-balance-integral-39 address start-block end-block)\n        (if (>= block-difference (get threshold-19-point thresholds)) (calculate-balance-integral-19 address start-block end-block)\n        (if (>= block-difference (get threshold-9-point thresholds)) (calculate-balance-integral-9 address start-block end-block)\n        (if (>= block-difference (get threshold-5-point thresholds)) (calculate-balance-integral-5 address start-block end-block)\n        (calculate-balance-integral-2 address start-block end-block)))))))\n\n(define-read-only (get-last-tap-block (address principal))\n    (default-to (var-get first-start-block) (map-get? last-tap-block address)))\n\n(define-public (tap)\n  (let (\n    (sender tx-sender)\n    (end-block stacks-block-height)\n    (start-block (get-last-tap-block sender))\n    (balance-integral (calculate-balance-integral sender start-block end-block))\n    (incentive-score (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.aura get-incentive-score CONTRACT))\n    (circulating-supply (unwrap-panic (get-total-supply)))\n    (potential-energy (/ (* balance-integral incentive-score) circulating-supply)))\n    (map-set last-tap-block sender end-block)\n    (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 energize potential-energy sender)))\n    \n(begin\n  (mint DEPLOYER u1000000)\n)    \n",
    "analysis": {
      "summary": "This contract is an Automated Market Maker (AMM) for a decentralized exchange (DEX), including liquidity provision through LP tokens, swap functionality, and a hold-to-earn mechanism.",
      "explanation": "This Clarity smart contract implements an AMM DEX with unique features like hold-to-earn, governed by various parameters such as swap fees and liquidity provision. It adheres to the SIP-010 standard for fungible tokens, allowing it to interact seamlessly with other contracts and wallets within the Stacks ecosystem.\n\n- **Constants and Variables**: The contract initializes with constants for the deployer, contract itself, error codes, and parameters like swap fee and alpha for the AMM formula. It also sets up storage variables for the contract owner, swap fee, token URI, and the start block for earnings calculations.\n\n- **Configuration Functions**: Functions like `set-owner`, `set-swap-fee`, and `set-token-uri` allow the contract owner to update critical parameters, ensuring adaptability to changing conditions or strategies.\n\n- **AMM Core Operations**: The `swap` function enables users to exchange tokens with the contract's reserves, adjusting for swap fees and using a hybrid AMM formula that balances constant sum and product models. The `mint` and `burn` functions allow users to add or remove liquidity from the pool, receiving LP tokens in return or redeeming them.\n\n- **Hold-to-Earn Mechanics**: Utilizes a sophisticated method to calculate users' holdings over time, rewarding them based on their sustained investment in the LP tokens. This mechanism encourages long-term liquidity provision by distributing additional rewards.\n\n- **SIP-010 Implementation**: Ensures compatibility with the Stacks ecosystem's standards for fungible tokens, including functions for token transfers, balance queries, and metadata access.\n\n- **Integration with Other Contracts**: Interacts with external contracts for token balances and transfers, and utilizes a separate contract for managing hold-to-earn calculations and rewards.\n\nOverall, this contract presents a comprehensive framework for a DEX, combining liquidity provision, trading, and incentive mechanisms to foster participation and stability within the ecosystem.",
      "tags": [
        "AMM",
        "DEX",
        "LP-Token",
        "Hold-to-Earn",
        "SIP-010",
        "Fungible-Token",
        "DeFi"
      ]
    }
  },
  {
    "rank": 192,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v149",
    "calls": 128,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-b (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-c (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-e (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-f (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-g (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-i (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-j (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-k (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-l (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-m (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-n (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-p (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-q (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-r (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53)))) (asserts! (> o24ee854d6599d6a5 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o24ee854d6599d6a5 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o24ee854d6599d6a5))))) (define-public (swap-helper-s (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-t (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-u (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-w (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-x (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-y (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-z (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o589d38268bdd3ffe>) (o058a5af358019b66 <o589d38268bdd3ffe>) (ob18b8c20d14820b3 uint) (o9100364e4509e17c bool) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (of194316e060f3bc1 o6222ee5620048475 o058a5af358019b66 ob18b8c20d14820b3 o9100364e4509e17c oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115)))))",
    "analysis": {
      "summary": "This contract facilitates complex swap operations between various tokens on the Stacks blockchain, utilizing multiple token standards and external contracts for liquidity and swap functionalities.",
      "explanation": "The contract is designed to interact with several external contracts and tokens, adhering to the SIP-010 fungible token standard and custom liquidity token traits. It defines a series of private and public functions aimed at swapping tokens under various conditions, leveraging external liquidity pools and swap mechanisms. Each `swap-helper` function is tailored for specific token pairs and swap scenarios, indicating a highly modular approach to handle token swaps. The contract employs error handling, asserts for sender authorization, and arithmetic operations to calculate swap amounts and fees, ensuring secure and efficient token swapping.",
      "tags": [
        "swap",
        "fungible-token",
        "liquidity-pool",
        "DeFi"
      ]
    }
  },
  {
    "rank": 193,
    "contract": "SP2X8WZK0A2X4BJC35JFX231CAHEQER5TMRFQBZ3K.test-dont-buy-stxcity-dex",
    "calls": 127,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u10000000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u5000000000)\n(define-constant VIRTUAL_STX_VALUE u1000000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u100000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP2X8WZK0A2X4BJC35JFX231CAHEQER5TMRFQBZ3K.test-dont-buy-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u9966777408637874)\n    (var-set stx-balance u3333333)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u1000000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism to facilitate token trading, with features to adjust trading based on reaching a target STX amount.",
      "explanation": "The contract uses the SIP-010 trait for token standards and defines a set of error constants for various failure modes. It sets up constants for the token's supply, DEX address, bonding curve configuration, fee structure, and specific wallets for fees and liquidity. The contract allows trading (buying and selling tokens) based on a bonding curve formula, adjusting for fees and ensuring trades are authorized and meet specified conditions. The 'buy' and 'sell' functions handle the core trading logic, including fee deductions, token transfers, and state updates. The contract also includes read-only functions to estimate buyable tokens or sellable STX based on the current state, which is influenced by the bonding curve's k = x*y formula, where 'x' and 'y' represent the token and STX balances, respectively. The initial state is set in the contract's beginning, making the DEX immediately tradable upon deployment. Notably, the contract emphasizes a non-custodial and decentralized approach, with no ownership privileges for the deployer beyond initial setup.",
      "tags": [
        "DeFi",
        "DEX",
        "bonding-curve",
        "trading",
        "non-custodial"
      ]
    }
  },
  {
    "rank": 194,
    "contract": "SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X.swap-helper-v203",
    "calls": 124,
    "source": "(use-trait ocb3efe2975f75d1d 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) (use-trait o7813309820cd7b19 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.trait-sip-010.sip-010-trait) (use-trait od3fe56900a57147c 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.sip-010-v1a.sip-010-trait) (use-trait o376172857413743a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (use-trait o61f60b1a41db3adf 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait oabc2f5b3982b0123 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait o318649a6b009833d 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait oeb241b403e5527bf 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait o589d38268bdd3ffe 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (define-constant o251d9c806aa06446 'SP3JASPNNQH43AH4YGCWQ3F2VCRHMFY69H0NZSZ6X) (define-constant o658cd23527ef3be7 (err u100)) (define-data-var o18bcb7cd1d78d084 uint u0) (define-private (o8adeff1da6d86250 (o5183708558b845a4 <o7813309820cd7b19>) (o5fea83bcb8e0304e <o7813309820cd7b19>) (of9072970fa5f70f9 uint) (oa7a6b3d31391d51c uint) (o5cea0eb4dd77c883 uint) (o977b01773ea33d9d uint)) (let ((ob2906abcf7e5d8aa (/ (* o977b01773ea33d9d (pow u10 u8)) (pow u10 oa7a6b3d31391d51c))) (occ050efa6f1ad2eb (try! (as-contract (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper o5183708558b845a4 o5fea83bcb8e0304e of9072970fa5f70f9 ob2906abcf7e5d8aa none))))) (ok (/ (* occ050efa6f1ad2eb (pow u10 o5cea0eb4dd77c883)) (pow u10 u8))))) (define-private (o76c0dbe41b8c1e62 (o5183708558b845a4 <ocb3efe2975f75d1d>) (o5fea83bcb8e0304e <ocb3efe2975f75d1d>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0) (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (ob865e08a0fc1d9be (o5183708558b845a4 <od3fe56900a57147c>) (o5fea83bcb8e0304e <od3fe56900a57147c>) (o5236adf8c84faa6c <o376172857413743a>) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (if oa54fdbb339c82f79 (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0) (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y o5183708558b845a4 o5fea83bcb8e0304e o5236adf8c84faa6c o977b01773ea33d9d u0)))))) (ok (unwrap-panic (element-at o0528a5fe71ef2ab0 (if oa54fdbb339c82f79 u0 u1)))))) (define-private (o2ee4fb2388ad5104 (o5183708558b845a4 <o61f60b1a41db3adf>) (o5fea83bcb8e0304e <o61f60b1a41db3adf>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-private (oc9bd3483422ecf0d (o5183708558b845a4 <oabc2f5b3982b0123>) (o5fea83bcb8e0304e <oabc2f5b3982b0123>) (o26a22f288488cc6a <oeb241b403e5527bf>) (oc53901217b812f93 <o318649a6b009833d>) (o977b01773ea33d9d uint)) (let ((o9808b37ac42bb57f (try! (as-contract (contract-call? o26a22f288488cc6a swap o5183708558b845a4 o5fea83bcb8e0304e oc53901217b812f93 o977b01773ea33d9d u1))))) (ok (get amt-out o9808b37ac42bb57f)))) (define-private (of194316e060f3bc1 (o5183708558b845a4 <o589d38268bdd3ffe>) (o5fea83bcb8e0304e <o589d38268bdd3ffe>) (o9fc055c63f245c01 uint) (oa54fdbb339c82f79 bool) (o977b01773ea33d9d uint)) (let ((o0528a5fe71ef2ab0 (try! (as-contract (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-router swap-exact-tokens-for-tokens o9fc055c63f245c01 o5183708558b845a4 o5fea83bcb8e0304e (if oa54fdbb339c82f79 o5fea83bcb8e0304e o5183708558b845a4) (if oa54fdbb339c82f79 o5183708558b845a4 o5fea83bcb8e0304e) 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.univ2-share-fee-to o977b01773ea33d9d u1))))) (ok (get amt-out o0528a5fe71ef2ab0)))) (define-public (swap-helper-a (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <o7813309820cd7b19>) (o308ebec51bfd0456 <o7813309820cd7b19>) (o3240f72b7d63ad5c uint) (o0e4bf6db9328f071 uint) (of70e8036c4578b8e uint) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o8adeff1da6d86250 ofddb7909dc88b496 o308ebec51bfd0456 o3240f72b7d63ad5c o0e4bf6db9328f071 of70e8036c4578b8e o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-b (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-c (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-d (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-e (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-f (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-g (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-h (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <oabc2f5b3982b0123>) (o058a5af358019b66 <oabc2f5b3982b0123>) (o845aa5f7e1f1ef3f <oeb241b403e5527bf>) (odb56dc180df9b8b4 <o318649a6b009833d>) (ofddb7909dc88b496 <o589d38268bdd3ffe>) (o308ebec51bfd0456 <o589d38268bdd3ffe>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (oc9bd3483422ecf0d o6222ee5620048475 o058a5af358019b66 o845aa5f7e1f1ef3f odb56dc180df9b8b4 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (of194316e060f3bc1 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-i (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53)))) (asserts! (> o24ee854d6599d6a5 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o24ee854d6599d6a5 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o24ee854d6599d6a5))))) (define-public (swap-helper-j (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-k (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-l (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-m (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-n (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-o (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-p (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <od3fe56900a57147c>) (o308ebec51bfd0456 <od3fe56900a57147c>) (o5e37b8f12e5f8cd3 <o376172857413743a>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (ob865e08a0fc1d9be ofddb7909dc88b496 o308ebec51bfd0456 o5e37b8f12e5f8cd3 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-q (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-r (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-s (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-t (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o61f60b1a41db3adf>) (o32471ceb4b83bb82 <o61f60b1a41db3adf>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o2ee4fb2388ad5104 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-u (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <oabc2f5b3982b0123>) (o32471ceb4b83bb82 <oabc2f5b3982b0123>) (o7f2bea13efe379cf <oeb241b403e5527bf>) (occ512e3ce293a88d <o318649a6b009833d>) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (oc9bd3483422ecf0d o64bf53b61a82e231 o32471ceb4b83bb82 o7f2bea13efe379cf occ512e3ce293a88d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-v (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o7813309820cd7b19>) (o32471ceb4b83bb82 <o7813309820cd7b19>) (oe0a84ea13bfff7ec uint) (o47e279d0d1556de9 uint) (obf4a954592f2bb9d uint) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o8adeff1da6d86250 o64bf53b61a82e231 o32471ceb4b83bb82 oe0a84ea13bfff7ec o47e279d0d1556de9 obf4a954592f2bb9d o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-w (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <ocb3efe2975f75d1d>) (o308ebec51bfd0456 <ocb3efe2975f75d1d>) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <o589d38268bdd3ffe>) (o32471ceb4b83bb82 <o589d38268bdd3ffe>) (o6ce3e0b7b3fb5f52 uint) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o76c0dbe41b8c1e62 ofddb7909dc88b496 o308ebec51bfd0456 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (of194316e060f3bc1 o64bf53b61a82e231 o32471ceb4b83bb82 o6ce3e0b7b3fb5f52 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-x (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5)))) (asserts! (> o4e18b94dbd373379 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o4e18b94dbd373379 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o4e18b94dbd373379))))) (define-public (swap-helper-y (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <od3fe56900a57147c>) (o32471ceb4b83bb82 <od3fe56900a57147c>) (o725b324191460391 <o376172857413743a>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (ob865e08a0fc1d9be o64bf53b61a82e231 o32471ceb4b83bb82 o725b324191460391 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115))))) (define-public (swap-helper-z (o87c7a796c552562f <o7813309820cd7b19>) (od1e16e39c3ae077e <o7813309820cd7b19>) (oa50276e4cadd7eec uint) (o7cb229189ad207e4 uint) (o3fb1a657efbba615 uint) (o6222ee5620048475 <o7813309820cd7b19>) (o058a5af358019b66 <o7813309820cd7b19>) (o0f67b4e6fe5826fd uint) (oe987b5eac483fc19 uint) (o8787ffc6287d1006 uint) (ofddb7909dc88b496 <o61f60b1a41db3adf>) (o308ebec51bfd0456 <o61f60b1a41db3adf>) (o1c00ac1a22dcfdd4 uint) (o9c872ac3126295d6 bool) (o64bf53b61a82e231 <ocb3efe2975f75d1d>) (o32471ceb4b83bb82 <ocb3efe2975f75d1d>) (o29d03067121926b6 bool) (of7c11ba2970224a6 (buff 16))) (begin (asserts! (is-eq tx-sender o251d9c806aa06446) o658cd23527ef3be7) (let ((odf901e39ba14fb8e (stx-get-balance tx-sender)) (odd59dadf63662557 (var-get o18bcb7cd1d78d084)) (o3af13a03158432c7 (mod odf901e39ba14fb8e u1000000)) (oaa40aa3cf40d06e0 (mod odd59dadf63662557 u1000)) (of1609deeb37347cf (+ (* o3af13a03158432c7 oaa40aa3cf40d06e0) odf901e39ba14fb8e)) (o7f3673b9f15cfe2d (mod (buff-to-uint-be of7c11ba2970224a6) of1609deeb37347cf))) (try! (stx-transfer? o7f3673b9f15cfe2d tx-sender (as-contract tx-sender))) (let ((oa45c4de00028fb53 (unwrap-panic (o8adeff1da6d86250 o87c7a796c552562f od1e16e39c3ae077e oa50276e4cadd7eec o7cb229189ad207e4 o3fb1a657efbba615 o7f3673b9f15cfe2d))) (o24ee854d6599d6a5 (unwrap-panic (o8adeff1da6d86250 o6222ee5620048475 o058a5af358019b66 o0f67b4e6fe5826fd oe987b5eac483fc19 o8787ffc6287d1006 oa45c4de00028fb53))) (o4e18b94dbd373379 (unwrap-panic (o2ee4fb2388ad5104 ofddb7909dc88b496 o308ebec51bfd0456 o1c00ac1a22dcfdd4 o9c872ac3126295d6 o24ee854d6599d6a5))) (o0a990e2e6120c115 (unwrap-panic (o76c0dbe41b8c1e62 o64bf53b61a82e231 o32471ceb4b83bb82 o29d03067121926b6 o4e18b94dbd373379)))) (asserts! (> o0a990e2e6120c115 o7f3673b9f15cfe2d) (err u101)) (try! (as-contract (stx-transfer? o0a990e2e6120c115 tx-sender o251d9c806aa06446))) (var-set o18bcb7cd1d78d084 (+ odd59dadf63662557 u1)) (ok o0a990e2e6120c115)))))",
    "analysis": {
      "summary": "This contract facilitates complex swap operations across multiple liquidity pools on the Stacks blockchain, utilizing various SIP-010 compliant tokens.",
      "explanation": "The contract is designed to interact with multiple DeFi protocols on the Stacks blockchain to execute swaps. It uses traits from SIP-010 standard for fungible tokens and other specific traits for liquidity pool interactions. The contract defines a series of private and public functions (`swap-helper-a` to `swap-helper-z`) to handle different swap scenarios, leveraging the composability of Stacks DeFi ecosystem. Each `swap-helper` function performs a sequence of operations starting with an assertion to ensure the caller is authorized, followed by a series of token swaps across different protocols, and concluding with balance transfers. The contract employs error handling to manage unsuccessful operations and updates a counter to track the number of swaps performed. It's a complex orchestration of cross-protocol interactions, showcasing the potential for building advanced DeFi tools on Stacks.",
      "tags": [
        "DeFi",
        "swap",
        "SIP-010",
        "fungible-token",
        "liquidity-pool",
        "cross-protocol"
      ]
    }
  },
  {
    "rank": 195,
    "contract": "SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dmgcrow-dexterity",
    "calls": 124,
    "source": ";; DMG-CROW - LP Token, AMM DEX and Hold-to-Earn Engine\n;; SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dmgcrow-dexterity\n\n;; Implement SIP-010 trait\n(impl-trait 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-traits-v1.sip010-ft-trait)\n\n;; Define the LP token\n(define-fungible-token index)\n\n;; Constants\n(define-constant DEPLOYER tx-sender)\n(define-constant CONTRACT (as-contract tx-sender))\n(define-constant ERR_UNAUTHORIZED (err u401))\n(define-constant ERR_INVALID_FEE (err u402))\n(define-constant MAX_SWAP_FEE u50000) ;; 5%\n(define-constant FEE_DENOMINATION u1000000)\n(define-constant PRECISION u1000000)\n(define-constant MAX_ALPHA u1000000) ;; 1.0 in fixed point\n(define-constant MIN_ALPHA u0)       ;; 0.0 = constant sum (stableswap)\n                                     ;; 1.0 = constant product\n;; Storage\n(define-data-var owner principal DEPLOYER)\n(define-data-var alpha uint u1000000) ;; Default to constant product\n(define-data-var swap-fee uint u50000) ;; Default to 5%\n(define-data-var token-uri (optional (string-utf8 256)) \n  (some u\"https://charisma.rocks/api/v0/indexes/SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dmgcrow-dexterity\"))\n(define-data-var first-start-block uint stacks-block-height)\n(define-map last-tap-block principal uint)\n\n;; Configuration functions\n(define-public (set-owner (new-owner principal))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (ok (var-set owner new-owner))))\n\n(define-public (set-swap-fee (new-fee uint))\n  (begin\n    (asserts! (is-eq contract-caller (var-get owner)) ERR_UNAUTHORIZED)\n    (asserts! (<= new-fee MAX_SWAP_FEE) ERR_UNAUTHORIZED)\n    (ok (var-set swap-fee new-fee))))\n\n(define-public (set-token-uri (value (string-utf8 256)))\n  (if (is-eq contract-caller (var-get owner))\n    (ok (var-set token-uri (some value))) \n    ERR_UNAUTHORIZED))\n\n;; Core AMM operations\n(define-private (calculate-output-amount (x uint) (y uint) (dx uint) (amp uint))\n  (let (\n    ;; Constant sum portion (better for similar values)\n    (sum-term (/ (* dx y) x))\n    ;; Constant product portion (better for different values)\n    (product-term (/ (* dx y) (+ x dx)))\n    ;; Weighted sum of both terms\n    (weighted-output (+ (* (- PRECISION amp) sum-term) (* amp product-term))))\n    (/ weighted-output PRECISION)))\n\n(define-public (swap (forward bool) (amt-in uint))\n  (let (\n    (sender tx-sender)\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    (paid-energy (match (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 exhaust u10000000 sender) success true error false))\n    ;; Calculate effective input amount\n    (effective-in (if paid-energy amt-in (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION)))\n    ;; Calculate output with hybrid curve\n    (amt-out (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha))))\n    (try! (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-in sender CONTRACT none) \n      (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve transfer amt-in sender CONTRACT none)))\n    (try! (as-contract (if forward (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve transfer amt-out CONTRACT sender none)\n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer amt-out CONTRACT sender none))))\n    (ok {amt-in: amt-in, amt-out: amt-out})))\n\n(define-public (mint (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (if (is-eq total-supply u0) amount (/ (* amount reserve0) total-supply)))\n    (token1-amount (if (is-eq total-supply u0) amount (/ (* amount reserve1) total-supply))))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token0-amount who CONTRACT none))\n    (try! (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve transfer token1-amount who CONTRACT none))\n    (try! (ft-mint? index amount who))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n(define-public (burn (who principal) (amount uint))\n  (let (\n    (reserve0 (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)))\n    (reserve1 (unwrap-panic (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve get-balance CONTRACT)))\n    (total-supply (ft-get-supply index))\n    (token0-amount (/ (* amount reserve0) total-supply))\n    (token1-amount (/ (* amount reserve1) total-supply)))\n    (asserts! (is-eq tx-sender who) ERR_UNAUTHORIZED)\n    (try! (ft-burn? index amount who))\n    (try! (as-contract (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token transfer token0-amount CONTRACT who none)))\n    (try! (as-contract (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve transfer token1-amount CONTRACT who none)))\n    (ok {token0-amount: token0-amount, token1-amount: token1-amount, lp-amount: amount})))\n\n;; Read functions\n(define-read-only (get-owner)\n  (ok (var-get owner)))\n\n(define-read-only (get-alpha)\n  (ok (var-get alpha)))\n\n(define-read-only (get-tokens)\n  (ok {token0: 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token, token1: 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve}))\n\n(define-read-only (get-swap-fee)\n  (ok (var-get swap-fee)))\n\n(define-read-only (get-reserves)\n  (ok {\n    token0: (unwrap-panic (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT)),\n    token1: (unwrap-panic (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve get-balance CONTRACT))\n  }))\n\n(define-read-only (get-quote (forward bool) (amt-in uint) (apply-fee bool))\n  (let (\n    (reserve-in (unwrap-panic (if forward (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT) \n      (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve get-balance CONTRACT))))\n    (reserve-out (unwrap-panic (if forward (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve get-balance CONTRACT) \n      (contract-call? 'SP2D5BGGJ956A635JG7CJQ59FTRFRB0893514EZPJ.dme000-governance-token get-balance CONTRACT))))\n    (effective-in (if apply-fee (/ (* amt-in (- FEE_DENOMINATION (var-get swap-fee))) FEE_DENOMINATION) amt-in)))\n    (ok (calculate-output-amount reserve-in reserve-out effective-in (var-get alpha)))))\n\n;; SIP-010 Implementation\n(define-read-only (get-name)\n  (ok \"DMG-CROW\"))\n\n(define-read-only (get-symbol)\n  (ok \"DMG-CROW\"))\n\n(define-read-only (get-decimals)\n  (ok u6))\n\n(define-read-only (get-balance (who principal))\n  (ok (ft-get-balance index who)))\n\n(define-read-only (get-total-supply)\n  (ok (ft-get-supply index)))\n\n(define-read-only (get-token-uri)\n  (ok (var-get token-uri)))\n\n(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))\n  (begin\n    (asserts! (is-eq tx-sender from) ERR_UNAUTHORIZED)\n    (ft-transfer? index amount from to)))\n\n;; Hold-to-Earn functions\n(define-private (get-balance-at (data { address: principal, block: uint }))\n    (let ((target-block (get block data)))\n        (if (< target-block stacks-block-height)\n            (let ((block-hash (unwrap-panic (get-stacks-block-info? id-header-hash target-block))))\n                (at-block block-hash (unwrap-panic (get-balance (get address data)))))\n                (unwrap-panic (get-balance (get address data))))))\n\n(define-private (calculate-trapezoid-areas-39 (balances (list 39 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u18)) (unwrap-panic (element-at balances u19))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u19)) (unwrap-panic (element-at balances u20))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u20)) (unwrap-panic (element-at balances u21))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u21)) (unwrap-panic (element-at balances u22))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u22)) (unwrap-panic (element-at balances u23))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u23)) (unwrap-panic (element-at balances u24))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u24)) (unwrap-panic (element-at balances u25))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u25)) (unwrap-panic (element-at balances u26))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u26)) (unwrap-panic (element-at balances u27))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u27)) (unwrap-panic (element-at balances u28))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u28)) (unwrap-panic (element-at balances u29))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u29)) (unwrap-panic (element-at balances u30))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u30)) (unwrap-panic (element-at balances u31))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u31)) (unwrap-panic (element-at balances u32))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u32)) (unwrap-panic (element-at balances u33))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u33)) (unwrap-panic (element-at balances u34))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u34)) (unwrap-panic (element-at balances u35))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u35)) (unwrap-panic (element-at balances u36))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u36)) (unwrap-panic (element-at balances u37))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u37)) (unwrap-panic (element-at balances u38))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-19 (balances (list 19 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u8)) (unwrap-panic (element-at balances u9))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u9)) (unwrap-panic (element-at balances u10))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u10)) (unwrap-panic (element-at balances u11))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u11)) (unwrap-panic (element-at balances u12))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u12)) (unwrap-panic (element-at balances u13))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u13)) (unwrap-panic (element-at balances u14))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u14)) (unwrap-panic (element-at balances u15))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u15)) (unwrap-panic (element-at balances u16))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u16)) (unwrap-panic (element-at balances u17))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u17)) (unwrap-panic (element-at balances u18))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-9 (balances (list 9 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u4)) (unwrap-panic (element-at balances u5))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u5)) (unwrap-panic (element-at balances u6))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u6)) (unwrap-panic (element-at balances u7))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u7)) (unwrap-panic (element-at balances u8))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-5 (balances (list 5 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u1)) (unwrap-panic (element-at balances u2))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u2)) (unwrap-panic (element-at balances u3))) dx) u2)\n        (/ (* (+ (unwrap-panic (element-at balances u3)) (unwrap-panic (element-at balances u4))) dx) u2)))\n\n(define-private (calculate-trapezoid-areas-2 (balances (list 2 uint)) (dx uint))\n    (list\n        (/ (* (+ (unwrap-panic (element-at balances u0)) (unwrap-panic (element-at balances u1))) dx) u2)))\n\n(define-private (calculate-balance-integral-39 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-39 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u38))\n        (areas (calculate-trapezoid-areas-39 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-19 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-19 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u18))\n        (areas (calculate-trapezoid-areas-19 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-9 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-9 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u8))\n        (areas (calculate-trapezoid-areas-9 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-5 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-5 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u4))\n        (areas (calculate-trapezoid-areas-5 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral-2 (address principal) (start-block uint) (end-block uint))\n    (let (\n        (sample-points (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 generate-sample-points-2 address start-block end-block))\n        (balances (map get-balance-at sample-points))\n        (dx (/ (- end-block start-block) u1))\n        (areas (calculate-trapezoid-areas-2 balances dx)))\n        (fold + areas u0)))\n\n(define-private (calculate-balance-integral (address principal) (start-block uint) (end-block uint))\n    (let (\n        (block-difference (- end-block start-block))\n        (thresholds (unwrap-panic (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.meme-engine-manager-rc2 get-thresholds))))\n        (if (>= block-difference (get threshold-39-point thresholds)) (calculate-balance-integral-39 address start-block end-block)\n        (if (>= block-difference (get threshold-19-point thresholds)) (calculate-balance-integral-19 address start-block end-block)\n        (if (>= block-difference (get threshold-9-point thresholds)) (calculate-balance-integral-9 address start-block end-block)\n        (if (>= block-difference (get threshold-5-point thresholds)) (calculate-balance-integral-5 address start-block end-block)\n        (calculate-balance-integral-2 address start-block end-block)))))))\n\n(define-read-only (get-last-tap-block (address principal))\n    (default-to (var-get first-start-block) (map-get? last-tap-block address)))\n\n(define-public (tap)\n  (let (\n    (sender tx-sender)\n    (end-block stacks-block-height)\n    (start-block (get-last-tap-block sender))\n    (balance-integral (calculate-balance-integral sender start-block end-block))\n    (incentive-score (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.aura get-incentive-score CONTRACT))\n    (circulating-supply (unwrap-panic (get-total-supply)))\n    (potential-energy (/ (* balance-integral incentive-score) circulating-supply)))\n    (map-set last-tap-block sender end-block)\n    (contract-call? 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.charisma-rulebook-v0 energize potential-energy sender)))\n\n(begin (mint DEPLOYER u1))  \n",
    "analysis": {
      "summary": "This contract is a liquidity pool (LP) token, automated market maker (AMM) decentralized exchange (DEX), and hold-to-earn engine on the Stacks blockchain, implementing the SIP-010 fungible token standard.",
      "explanation": "The contract starts by implementing the SIP-010 trait for fungible tokens, ensuring compatibility with the Stacks ecosystem's fungible token standards. It defines a fungible token called 'index' to represent liquidity provider (LP) tokens. Constants are defined for the contract deployer, contract itself, error codes, swap fee limits, and mathematical precision for calculations. The contract stores the owner, alpha (for AMM curve adjustment), swap fee, token URI, and the block at which the contract starts. It includes functions to adjust contract parameters such as owner, swap fee, and token URI, which are protected by assertions ensuring only the owner can make these changes.\n\nCore AMM functions include 'swap', which allows users to exchange tokens by interacting with external contracts representing token reserves, and 'mint'/'burn' functions for managing LP tokens in response to liquidity provision or withdrawal. The contract calculates swap amounts using a hybrid curve, factored by the 'alpha' variable, allowing for a balance between constant sum and constant product AMM models.\n\nHold-to-earn features are implemented through functions that calculate a user's balance integral over time, rewarding users based on their LP token holding duration and amounts. The 'tap' function allows users to claim their rewards, calculated by a balance integral method that considers the user's LP token balance over specified block intervals.\n\nSIP-010 implementation details include standard functions for token name, symbol, decimals, balance, total supply, and token URI retrieval, alongside a transfer function that adheres to the SIP-010 standard for fungible tokens.\n\nThe contract concludes with the initial minting of 1 LP token to the deployer, kickstarting the liquidity pool.",
      "tags": [
        "LP-Token",
        "AMM",
        "DEX",
        "Hold-to-Earn",
        "SIP-010",
        "Fungible-Token",
        "DeFi",
        "Protocol"
      ]
    }
  },
  {
    "rank": 196,
    "contract": "SP3AFTJ38PSZQBXZGNCDGM05GR0SFY7HBPZD2ACR2.rocket-stxcity-dex",
    "calls": 124,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u1000000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u3000000000)\n(define-constant VIRTUAL_STX_VALUE u600000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u60000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP359XMJYWRDY24H7VDYJWKPAGHN75V8M0W1NBF3P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP3AFTJ38PSZQBXZGNCDGM05GR0SFY7HBPZD2ACR2.rocket-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u989010989010989)\n    (var-set stx-balance u6666667)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for token trading, automatically adjusting prices based on supply and demand.",
      "explanation": "The contract facilitates the buying and selling of a specific token using a bonding curve, which is a mathematical curve that determines the price of a token based on its supply. The contract does not grant any special privileges to the deployer, ensuring a decentralized operation. Key features include the ability to buy tokens by sending STX to the contract and sell tokens back to it, with prices automatically adjusted by the bonding curve. The contract also includes a mechanism to transfer STX and tokens to specific addresses once a target STX amount is reached, effectively completing the bonding curve phase and redistributing the assets according to predefined rules.\n\n- The contract uses the SIP-010 trait for token standards, ensuring compatibility with the broader Stacks ecosystem <L1>.\n- Constants define error messages, token supply, DEX address, and various parameters like target STX amount and fees <L4-22>.\n- The contract initializes with predefined values for tradability, virtual STX amount, token balance, and STX balance, making it ready for trading upon deployment <L120-126>.\n- The `buy` function allows users to purchase tokens at the current bonding curve price, transferring STX to the contract and receiving tokens in return. It includes a mechanism to complete the bonding curve phase if the target STX amount is reached, redistributing STX and tokens accordingly <L28-76>.\n- The `sell` function enables users to sell tokens back to the contract in exchange for STX, again based on the current bonding curve price <L77-118>.\n- `get-buyable-tokens` and `get-sellable-stx` are read-only functions that calculate the amount of tokens one can buy with a specified amount of STX and vice versa, based on the current state of the bonding curve <L119-163>.\n- The contract initializes with a tradable state and sets initial balances for tokens and STX, readying the contract for operation <L165-171>.",
      "tags": [
        "DeFi",
        "DEX",
        "bonding-curve",
        "token-trading",
        "protocol"
      ]
    }
  },
  {
    "rank": 197,
    "contract": "SP3ACD3WC1XTVJ0J3T3532TN4NFABRKMSD2WBBVWV.king-stxcity-dex",
    "calls": 123,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u10000000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP3ACD3WC1XTVJ0J3T3532TN4NFABRKMSD2WBBVWV.king-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u9354536950420954)\n    (var-set stx-balance u27600000)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u1000000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for token trading, with features like trading enable/disable, and automatic distribution upon reaching a target STX amount.",
      "explanation": "The contract facilitates buying and selling of a specific token using a bonding curve, which determines the price based on supply and demand. The contract uses the SIP-010 trait for token standards, ensuring compatibility with fungible tokens on the Stacks blockchain.\n\n- The contract initializes with predefined constants for the token supply, DEX address, target STX amount, and fee wallets (<L11-24>).\n- Tradable status, virtual STX amount, token and STX balances, and percentages for burning and deployer fees are set as mutable data variables (<L26-31>), allowing the contract to track its current state.\n- The `buy` function (<L33-81>) allows users to purchase tokens by sending STX to the contract. It calculates the number of tokens to be received based on the current STX amount and the bonding curve formula. A fee is deducted, and the remaining STX is added to the contract's balance. If the STX target is reached, a series of transactions distribute the STX and tokens to predefined addresses, including a burn address to reduce token supply.\n- The `sell` function (<L83-119>) enables users to sell tokens back to the contract in exchange for STX, following a similar fee and distribution logic.\n- `get-buyable-tokens` and `get-sellable-stx` (<L121-166>) are read-only functions providing estimates for trades without executing them, crucial for user interfaces to display potential trade outcomes.\n- The contract initializes with a call to set initial values and make the contract tradable (<L168-176>), demonstrating a setup phase that could be customized for different deployments.\n\nOverall, the contract is designed to operate autonomously without owner intervention, aligning with decentralized principles. The use of a bonding curve for pricing dynamically adjusts token prices based on the contract's balance, promoting a fair and efficient market mechanism.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "protocol",
        "SIP-010"
      ]
    }
  },
  {
    "rank": 198,
    "contract": "SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.curve-pool-v1_1_0-0001",
    "calls": 121,
    "source": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; traits\n(use-trait ft-trait 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait lp-token-trait .curve-lp-token-trait_v1_0_0.curve-lp-token-trait)\n(use-trait fees-trait     .curve-fees-trait_v1_0_0.curve-fees-trait)\n\n(impl-trait .curve-pool-trait_v1_0_0.curve-pool-trait)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; errors\n(define-constant err-init-preconditions   (err u101))\n(define-constant err-init-postconditions  (err u102))\n(define-constant err-mint-preconditions   (err u103))\n(define-constant err-mint-postconditions  (err u104))\n(define-constant err-burn-preconditions   (err u105))\n(define-constant err-burn-postconditions  (err u106))\n(define-constant err-swap-preconditions   (err u107))\n(define-constant err-swap-postconditions  (err u108))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; storage\n(define-data-var initialized bool false)\n(define-constant owner .curve-registry_v1_1_0)\n\n(define-data-var pool\n  {\n  symbol            : (string-ascii 32),\n  token0            : principal,\n  token1            : principal,\n  lp-token          : principal,\n  fees              : principal,\n  A                 : uint,\n  reserve0          : uint,\n  reserve1          : uint,\n  block-height      : uint,\n  burn-block-height : uint,\n  }\n  {\n  symbol            : \"\",\n  token0            : tx-sender, ;;arbitrary\n  token1            : tx-sender,\n  lp-token          : tx-sender,\n  fees              : tx-sender,\n  A                 : u85,\n  reserve0          : u0,\n  reserve1          : u0,\n  block-height      : block-height,\n  burn-block-height : burn-block-height,\n  })\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; read\n(define-read-only (get-pool)    (ok (var-get pool)))\n(define-read-only (do-get-pool) (var-get pool))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; write\n(define-private\n  (update-reserves\n    (r0 uint)\n    (r1 uint))\n  (let ((pool_ (do-get-pool)))\n    (ok (var-set pool (merge pool_ {\n      reserve0         : r0,\n      reserve1         : r1,\n      block-height     : block-height,\n      burn-block-height: burn-block-height,\n      })) )))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; ctors\n(define-private\n  (make-pool\n    (token0   <ft-trait>)\n    (token1   <ft-trait>)\n    (lp-token <lp-token-trait>)\n    (fees     <fees-trait>)\n    (A        uint)\n    (symbol   (string-ascii 32))\n    )\n  {\n    symbol           : symbol,\n    token0           : (contract-of token0),\n    token1           : (contract-of token1),\n    lp-token         : (contract-of lp-token),\n    fees             : (contract-of fees),\n    A                : A,\n    reserve0         : u0,\n    reserve1         : u0,\n    block-height     : block-height,\n    burn-block-height: burn-block-height,\n  })\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; init\n(define-public\n  (init\n    (token0   <ft-trait>)\n    (token1   <ft-trait>)\n    (lp-token <lp-token-trait>)\n    (fees     <fees-trait>)\n    (A         uint)\n    (symbol   (string-ascii 32))\n    )\n\n  (let ((t0    (contract-of token0))\n        (t1    (contract-of token1))\n        (lp    (contract-of lp-token))\n        (pool_ (make-pool token0 token1 lp-token fees A symbol)))\n\n    ;; Pre-conditions\n    (asserts!\n      (and (not (is-eq t0 t1))\n           (is-eq contract-caller owner)\n           (not (var-get initialized))\n      )\n      err-init-preconditions)\n\n    ;; Update global state\n\n    ;; Update local state\n    (var-set pool pool_)\n    (var-set initialized true)\n\n    ;; Post-conditions\n\n    ;; Return\n    (let ((event\n          {op  : \"init\",\n           user: tx-sender,\n           pool: pool_}))\n      (print event)\n      (ok pool_)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; mint\n(define-public\n  (mint\n    (token0   <ft-trait>)\n    (token1   <ft-trait>)\n    (lp-token <lp-token-trait>)\n    (amt0     uint)\n    (amt1     uint))\n\n  (let ((pool_        (do-get-pool))\n        (user         tx-sender)\n        (protocol     (as-contract tx-sender))\n\n        (total-supply (try! (contract-call? lp-token get-total-supply)))\n        (r0           (get reserve0 pool_))\n        (r1           (get reserve1 pool_))\n\n        (amts         (try! (lift token0 token1 amt0 amt1)))\n        (rs           (try! (lift token0 token1 r0 r1)))\n\n        (liquidity    (try! (contract-call?\n                             .curve-math_v1_0_0\n                             mint\n                             (get amt0 rs) (get amt0 amts) (get amt1 rs) (get amt1 amts)\n                             total-supply (get A pool_))))\n        )\n\n    ;; Pre-conditions\n    (asserts!\n      (and (is-eq (get lp-token pool_) (contract-of lp-token))\n           (is-eq (get token0   pool_) (contract-of token0))\n           (is-eq (get token1   pool_) (contract-of token1))\n           (> amt0 u0)\n           (> amt1 u0)\n           (> (get amt0 amts) u0)\n           (> (get amt1 amts) u0)\n           (> liquidity u0) )\n      err-mint-preconditions)\n\n    ;; Update global state\n    (try! (contract-call? token0 transfer amt0 user protocol none))\n    (try! (contract-call? token1 transfer amt1 user protocol none))\n    (try! (as-contract (contract-call? lp-token mint liquidity user)))\n\n    ;; Update local state\n    (unwrap-panic (update-reserves (+ r0 amt0) (+ r1 amt1)))\n\n    ;; Post-conditions\n    (asserts!\n     (and\n      ;; Guard against overflow in burn.\n      (> (* (+ total-supply liquidity) (+ (get amt0 rs) (get amt0 amts))) u0)\n      (> (* (+ total-supply liquidity) (+ (get amt1 rs) (get amt1 amts))) u0)\n      )\n     err-mint-postconditions)\n\n    ;; Return\n    (let ((event\n           {op          : \"mint\",\n            user        : user,\n            pool        : pool_,\n            amt0        : amt0,\n            amt1        : amt1,\n            liquidity   : liquidity,\n            total-supply: total-supply\n            }))\n      (print event)\n      (ok event)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; burn\n(define-public\n  (burn\n    (token0    <ft-trait>)\n    (token1    <ft-trait>)\n    (lp-token  <lp-token-trait>)\n    (liquidity uint))\n\n  (let ((pool_        (do-get-pool))\n        (user         tx-sender)\n        (protocol     (as-contract tx-sender))\n\n        (total-supply (try! (contract-call? lp-token get-total-supply)))\n        (r0           (get reserve0 pool_))\n        (r1           (get reserve1 pool_))\n\n        (rs           (try! (lift token0 token1 r0 r1)))\n\n        (res          (contract-call?\n                       .curve-math_v1_0_0\n                       burn\n                       (get amt0 rs) (get amt1 rs) total-supply liquidity))\n        (amt0_        (get dx res))\n        (amt1_        (get dy res))\n        (amts         (try! (lower token0 token1 amt0_ amt1_)))\n        (amt0         (get amt0 amts))\n        (amt1         (get amt1 amts))\n        )\n\n    ;; Pre-conditions\n    (asserts!\n      (and (is-eq (get lp-token pool_) (contract-of lp-token))\n           (is-eq (get token0   pool_) (contract-of token0))\n           (is-eq (get token1   pool_) (contract-of token1))\n           (> liquidity u0)\n           (> amt0 u0)\n           (> amt1 u0) )\n      err-burn-preconditions)\n\n    ;; Update global state\n    (try! (as-contract (contract-call? token0 transfer amt0 protocol user none)))\n    (try! (as-contract (contract-call? token1 transfer amt1 protocol user none)))\n    (try! (as-contract (contract-call? lp-token burn liquidity user)))\n\n    ;; Update local state\n    (unwrap-panic (update-reserves (- r0 amt0) (- r1 amt1)))\n\n    ;; Post-conditions\n\n    ;; Return\n    (let ((event\n          {op          : \"burn\",\n           user        : user,\n           pool        : pool_,\n           liquidity   : liquidity,\n           amt0        : amt0,\n           amt1        : amt1,\n           total-supply: total-supply\n           }))\n      (print event)\n      (ok event)) ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; swap\n(define-constant MAX-SWAP-SIZE {num: u1000, den: u10000}) ;; 10%\n\n(define-read-only\n (check-max-swap-size\n  (amt     uint)\n  (reserve uint) )\n (<= amt\n     (/ (* reserve (get num MAX-SWAP-SIZE))\n        (get den MAX-SWAP-SIZE))\n     ) )\n\n(define-public\n  (swap\n   (token-in        <ft-trait>)\n   (token-out       <ft-trait>)\n   (fees            <fees-trait>)\n   (amt-in          uint)\n   (amt-out-desired uint))\n\n  (let ((pool_     (var-get pool))\n        (user      tx-sender)\n        (protocol  (as-contract tx-sender))\n\n        (t0        (get token0 pool_))\n        (t1        (get token1 pool_))\n        (is-token0 (is-eq (contract-of token-in) t0))\n\n        (r0        (get reserve0 pool_))\n        (r1        (get reserve1 pool_))\n\n        (res              (try! (contract-call? fees calc-fees amt-in)))\n        (amt-in-adjusted  (get amt-in-adjusted  res))\n        (amt-fee-lps      (get amt-fee-lps      res))\n        (amt-fee-protocol (get amt-fee-protocol res))\n\n\n        (t0_ (if is-token0 token-in token-out))\n        (t1_ (if is-token0 token-out token-in))\n        (rs  (try! (lift t0_ t1_ r0 r1)))\n        (dx  (if is-token0\n                 (get amt0 (try! (lift t0_ t1_ amt-in-adjusted u0)))\n                 (get amt1 (try! (lift t0_ t1_ u0 amt-in-adjusted)))))\n\n        (amt-out_\n         (if is-token0\n             (unwrap-panic (contract-call? .curve-math_v1_0_0 find-dx\n                                           (get amt1 rs) (get amt0 rs) dx u0 (get A pool_)))\n             (unwrap-panic (contract-call? .curve-math_v1_0_0 find-dx\n                                           (get amt0 rs) (get amt1 rs) dx u0 (get A pool_)))))\n\n        (amt-out (if is-token0\n                     (get amt1 (try! (lower t0_ t1_ u0 amt-out_)))\n                     (get amt0 (try! (lower t0_ t1_ amt-out_ u0))) ))\n\n\n        (bals (if is-token0\n                  {bal0: (+ r0 amt-in-adjusted amt-fee-lps),\n                   bal1: (- r1 amt-out)}\n                  {bal0: (- r0 amt-out),\n                   bal1: (+ r1 amt-in-adjusted amt-fee-lps)}))\n        )\n\n    (asserts!\n     (and\n      (or (is-eq (contract-of token-in) t0)\n          (is-eq (contract-of token-in) t1))\n      (or (is-eq (contract-of token-out) t0)\n          (is-eq (contract-of token-out) t1))\n      (not (is-eq (contract-of token-in) (contract-of token-out)))\n\n      (is-eq (contract-of fees) (get fees pool_))\n\n      (>  amt-in          u0)\n      (>  amt-out-desired u0)\n      (>  amt-in-adjusted u0)\n      (>= amt-out         amt-out-desired)\n\n      (check-max-swap-size amt-in (if is-token0 r0 r1))\n\n      )\n     err-swap-preconditions)\n\n    ;; Update global state\n    (try! (contract-call? token-in transfer amt-in user protocol none))\n    (try! (as-contract (contract-call? token-out transfer amt-out protocol user none)))\n\n    (if (> amt-fee-protocol u0)\n      (begin\n        (try! (as-contract (contract-call? token-in transfer\n                                          amt-fee-protocol\n                                          protocol\n                                          (contract-of fees)\n                                          none)))\n        (try! (contract-call? fees receive is-token0 amt-fee-protocol)))\n        true)\n\n    ;; Update local state\n    (unwrap-panic (update-reserves (get bal0 bals) (get bal1 bals)))\n\n    ;; Post-conditions\n    ;; (asserts!\n    ;;  (if is-token0\n    ;;      (and\n    ;;       (>= (contract-call? token-in  get-balance protocol) (get bal0 bals))\n    ;;       (>= (contract-call? token-out get-balance protocol) (get bal1 bals)))\n    ;;      (and\n    ;;       (>= (contract-call? token-out get-balance protocol) (get bal0 bals))\n    ;;       (>= (contract-call? token-in  get-balance protocol) (get bal1 bals)))\n    ;;      )\n    ;;  err-swap-postconditions)\n\n    ;; Return\n    (let ((event\n           {op              : \"swap\",\n            user            : user,\n            pool            : pool_ ,\n            amt-in          : amt-in,\n            amt-out-desired : amt-out-desired,\n            amt-out         : amt-out,\n            amt-in-adjusted : amt-in-adjusted,\n            amt-fee-lps     : amt-fee-lps,\n            amt-fee-protocol: amt-fee-protocol,\n           }))\n      (print event)\n      (ok event) )\n    ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; precison\n(define-constant err-precision (err u666))\n\n;; pools using this code must not allow tokens with settable decimals\n(define-private\n (lift\n  (token0 <ft-trait>)\n  (token1 <ft-trait>)\n  (amt0   uint)\n  (amt1   uint)\n  )\n\n (let ((d0          (try! (contract-call? token0 get-decimals)))\n       (d1          (try! (contract-call? token1 get-decimals)))\n       (amt0-lifted (if (is-eq d0 u6) amt0 (/ amt0 u100)))\n       (amt1-lifted (if (is-eq d1 u6) amt1 (/ amt1 u100)))\n       )\n\n   (asserts!\n    (and\n     (or (is-eq d0 u6) (is-eq d0 u8))\n     (or (is-eq d1 u6) (is-eq d1 u8)))\n    err-precision)\n\n   (ok\n    {amt0: amt0-lifted,\n     amt1: amt1-lifted})))\n\n(define-private\n (lower\n  (token0 <ft-trait>)\n  (token1 <ft-trait>)\n  (amt0   uint)\n  (amt1   uint)\n  )\n\n (let ((d0           (try! (contract-call? token0 get-decimals)))\n       (d1           (try! (contract-call? token1 get-decimals)))\n       (amt0-lowered (if (is-eq d0 u6) amt0 (* amt0 u100)))\n       (amt1-lowered (if (is-eq d1 u6) amt1 (* amt1 u100)))\n       )\n\n   (asserts!\n    (and\n     (or (is-eq d0 u6) (is-eq d0 u8))\n     (or (is-eq d1 u6) (is-eq d1 u8)))\n    err-precision)\n\n   (ok\n    {amt0: amt0-lowered,\n     amt1: amt1-lowered})))\n\n;;; eof\n",
    "analysis": {
      "summary": "This contract implements a decentralized exchange pool for swapping tokens, adding liquidity, and removing liquidity, following a curve-based mathematical model.",
      "explanation": "The contract is designed to facilitate token swaps, liquidity provision (minting of LP tokens), and liquidity removal (burning of LP tokens) within a decentralized finance (DeFi) ecosystem on the Stacks blockchain. It uses external traits for fungible tokens and liquidity provider tokens, adheres to a specific pool trait, and integrates fee calculation and curve-based math for its operations.\n\n- **Traits and Implementation** (<L1-3>, <L5>): The contract uses the SIP-010 trait for fungible tokens, a custom LP token trait, and a fees trait. It implements a pool trait that likely defines the standard interface for a DeFi pool.\n\n- **Errors** (<L7-14>): Defines constants for various error states related to initialization, minting, burning, and swapping operations.\n\n- **Storage** (<L16-29>): Declares a boolean to track if the pool has been initialized and a complex data variable to store pool details such as token addresses, reserves, and the amplification coefficient 'A'.\n\n- **Read-only Functions** (<L31-34>): Provides functions to retrieve the current state of the pool.\n\n- **Private Functions** (<L36-40>, <L42-50>): Include helper functions for updating reserves and constructing the pool object.\n\n- **Initialization** (<L52-83>): A public function to initialize the pool with specified tokens, LP token, fees collector, amplification coefficient, and symbol. It checks preconditions to ensure tokens are not the same, the caller is the owner, and the pool is not already initialized.\n\n- **Minting** (<L85-134>): Allows adding liquidity by depositing a pair of tokens in exchange for LP tokens. It calculates the amount of LP tokens to mint based on the deposited amounts and the current pool state.\n\n- **Burning** (<L136-183>): Enables liquidity providers to remove liquidity by burning LP tokens in exchange for a proportionate share of the pool's reserves.\n\n- **Swapping** (<L185-262>): Facilitates token swaps with input validation, fee calculation, and reserve adjustments. It ensures swaps do not exceed a maximum size relative to the pool's reserves to prevent excessive price impact.\n\n- **Precision Handling** (<L264-297>): Contains helper functions to adjust token amounts based on their decimal places, ensuring consistent arithmetic across tokens with different precision.\n\nOverall, the contract is structured to support core DeFi functionalities with an emphasis on security (through precondition checks) and flexibility (through external traits and adjustable parameters).",
      "tags": [
        "DeFi",
        "DEX",
        "liquidity-pool",
        "swap",
        "fungible-token",
        "precision-handling"
      ]
    }
  },
  {
    "rank": 199,
    "contract": "SP155VXF22PS9SGV8GAQX3HZAKFHZD1N2JP0KKGPK.sandnigga-muneeb-munigga-stxcity-dex",
    "calls": 120,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 2.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u69420000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u2000000000)\n(define-constant VIRTUAL_STX_VALUE u400000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u40000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP359XMJYWRDY24H7VDYJWKPAGHN75V8M0W1NBF3P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP155VXF22PS9SGV8GAQX3HZAKFHZD1N2JP0KKGPK.sandnigga-muneeb-munigga-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  \n    (var-set token-balance u62478624786247864)\n    (var-set stx-balance u44440000)\n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u500000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This contract implements a decentralized exchange (DEX) using a bonding curve to facilitate token trading, automatically adjusting prices based on supply and demand.",
      "explanation": "The contract is designed for trading tokens against STX (the native cryptocurrency of the Stacks blockchain) using a bonding curve mechanism. It allows users to buy or sell tokens at prices determined by the curve, which adjusts based on the token's supply and demand. The contract includes mechanisms for calculating buy/sell prices, transferring tokens and STX between users and the contract, and handling fees. Notably, it features a unique approach to completing transactions once a target STX amount is reached, distributing tokens and STX among specified addresses and burning a portion of the tokens to potentially increase their value.\n\n- The contract uses the SIP-010 trait for token standards (<L1>), ensuring compatibility with the broader Stacks ecosystem.\n- Error constants (<L3-10>) define various error states for unauthorized access, insufficient balances, and trading issues.\n- Constants define the token supply, DEX address, and various parameters for the bonding curve and fees (<L12-25>).\n- Data variables track whether trading is enabled, balances of virtual STX and actual tokens, and percentages for burning and deployer rewards (<L27-33>).\n- The `buy` function (<L35-85>) allows users to purchase tokens with STX, adjusting balances and handling fees. It also checks if the STX target is reached to trigger distribution and burning mechanisms.\n- The `sell` function (<L87-124>) enables users to sell tokens back to the contract in exchange for STX, with similar balance adjustments and fee handling.\n- `get-buyable-tokens` and `get-sellable-stx` (<L126-161>, <L163-192>) are read-only functions that estimate how many tokens can be bought or sold for a given amount of STX, based on the current state of the bonding curve.\n- The contract initialization (<L194-202>) sets initial values for key variables and performs a token transfer, likely for initial liquidity or fee setup purposes.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "trading",
        "protocol"
      ]
    }
  },
  {
    "rank": 200,
    "contract": "SP2AWE8GJ52MKEAGGBTTNEEXZSM9VF8CTYK7ZCZDC.bucket-coin-stxcity-dex",
    "calls": 119,
    "source": "\n;; @title Bonding Curve DEX by STX.CITY\n;; @notice This decentralized exchange (DEX) facilitates the trading of tokens using a bonding curve mechanism.\n;; @dev This DEX will receive token from another contract and allow users to buy or sell this token.\n;; @dev Once the target STX amount is reached, the contract automatically sends the tokens and STX to the DEX addresses like Velar.\n;; @dev The deployer has no ownership privileges or control over the contract's operations.\n;; @version 1.0\n\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait) \n;; error constants\n(define-constant ERR-UNAUTHORIZED (err u401))\n(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))\n(define-constant ERR-TRADING-DISABLED (err u1001))\n(define-constant DEX-HAS-NOT-ENOUGH-STX (err u1002))\n(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))\n(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))\n(define-constant BUY-INFO-ERROR (err u2001))\n(define-constant SELL-INFO-ERROR (err u2002))\n\n(define-constant token-supply u45000000000000) ;; match with the token's supply (6 decimals)\n(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender)) ;; one contract per token\n\n;; bonding curve config\n(define-constant STX_TARGET_AMOUNT u10000000000)\n(define-constant VIRTUAL_STX_VALUE u2000000000) ;; 1/5 of STX_TARGET_AMOUNT\n(define-constant COMPLETE_FEE u200000000) ;; 2% of STX_TARGET_AMOUNT\n\n;; FEE AND DEX WALLETS\n(define-constant STX_CITY_SWAP_FEE_WALLET 'SP1WRH525WGKZJDCY8FSYASWVNVYB62580QNARMXP)\n(define-constant STX_CITY_COMPLETE_FEE_WALLET 'SP1JYZFESCWMGPWQR4BJTDZRXTHTXXYFEVJECNTY7)\n(define-constant AMM_WALLET 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P)\n(define-constant BURN_ADDRESS 'SP000000000000000000002Q6VF78) ;; burn mainnet\n\n(define-constant deployer tx-sender)\n(define-constant allow-token 'SP2AWE8GJ52MKEAGGBTTNEEXZSM9VF8CTYK7ZCZDC.bucket-coin-stxcity)\n\n;; data vars\n(define-data-var tradable bool false)\n(define-data-var virtual-stx-amount uint u0)\n(define-data-var token-balance uint u0)\n(define-data-var stx-balance uint u0)\n(define-data-var burn-percent uint u10)\n(define-data-var deployer-percent uint u10)\n\n(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint) ) \n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))\n      (stx-fee (get fee buy-info))\n      (stx-after-fee (get stx-buy buy-info))\n      (tokens-out (get buyable-token buy-info))\n      (new-token-balance (get new-token-balance buy-info))\n      (recipient tx-sender)\n      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))\n      \n    )\n      ;; user send stx fee to stxcity\n      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))\n      ;; user send stx to dex\n      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))\n      ;; dex send token to user\n      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))\n      (var-set stx-balance new-stx-balance )\n      (var-set token-balance new-token-balance)\n      (if (>= new-stx-balance  STX_TARGET_AMOUNT)\n        (begin\n          (let (\n            (contract-token-balance (var-get token-balance))\n            (burn-percent-val (var-get burn-percent) )\n            (burn-amount (/ (* contract-token-balance burn-percent-val) u100)) ;; burn tokens for a deflationary boost after the bonding curve completed\n            (remain-tokens (- contract-token-balance burn-amount))\n            (remain-stx (- (var-get stx-balance) COMPLETE_FEE))\n            (deployer-amount (/ (* burn-amount (var-get deployer-percent)) u100)) ;; deployer-amount is based on the burn amount\n            (burn-after-deployer-amount (- burn-amount deployer-amount))\n          )\n            ;; burn tokens\n            (try! (as-contract (contract-call? token-trait transfer burn-after-deployer-amount tx-sender BURN_ADDRESS none)))\n            ;; send to deployer\n            (try! (as-contract (contract-call? token-trait transfer deployer-amount tx-sender deployer none)))\n            ;; send to AMM's address\n            (try! (as-contract (contract-call? token-trait transfer remain-tokens tx-sender AMM_WALLET none)))\n            (try! (as-contract (stx-transfer? remain-stx tx-sender AMM_WALLET)))\n            ;; send fee\n            (try! (as-contract (stx-transfer? COMPLETE_FEE tx-sender STX_CITY_COMPLETE_FEE_WALLET)))\n            ;; update global variables\n            (var-set tradable false)\n            (var-set stx-balance u0)\n            (var-set token-balance u0) \n            (print {tokens-receive: tokens-out, stx-fee: stx-fee, final-fee: COMPLETE_FEE, tokens-burn: burn-amount, tokens-to-dex: remain-tokens, stx-to-dex: remain-stx,\n                current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })    \n            (ok tokens-out)\n          )\n        )\n        (begin \n          (print {tokens-receive: tokens-out, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })  \n          (ok tokens-out)\n        )\n      )\n    )\n  )\n)\n(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint) ) ;; swap out for virtual trading\n  (begin\n    (asserts! (var-get tradable) ERR-TRADING-DISABLED)\n    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)\n    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN )\n    (let (\n      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))\n      (stx-fee (get fee sell-info))\n      (stx-receive (get stx-receive sell-info))\n      (current-stx-balance (get current-stx-balance sell-info))\n      (stx-out (get stx-out sell-info))\n      (new-token-balance (get new-token-balance sell-info))\n      (recipient tx-sender)\n    )\n      (asserts! (>= current-stx-balance stx-receive) DEX-HAS-NOT-ENOUGH-STX)\n      (asserts! (is-eq contract-caller recipient) ERR-UNAUTHORIZED)\n      ;; user send token to dex\n      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))\n      ;; dex transfer stx to user and stxcity\n      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))\n      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))\n      ;; update global variable\n      (var-set stx-balance (- (var-get stx-balance) stx-out))\n      (var-set token-balance new-token-balance)\n      (print {stx-receive: stx-receive, stx-fee: stx-fee, current-stx-balance: (var-get stx-balance), token-balance: (var-get token-balance), tradable: (var-get tradable) })\n      (ok stx-receive)\n    )\n  )\n)\n;; stx -> token. Estimate the number of token you can receive with a stx amount\n(define-read-only (get-buyable-tokens (stx-amount uint)) \n  (let \n      (\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (stx-fee (/ (* stx-amount u2) u100)) ;; 2% fee\n      (stx-after-fee (- stx-amount stx-fee))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-stx-balance (+ current-stx-balance stx-after-fee)) \n      (new-token-balance (/ k new-stx-balance)) ;; x' = k / y'\n      (tokens-out (- current-token-balance new-token-balance))\n      (recommend-stx-amount (- STX_TARGET_AMOUNT (var-get stx-balance) ))\n      (recommend-stx-amount-after-fee (/ (* recommend-stx-amount u103) u100)) ;; 3% (including 2% fee)\n  )\n   (ok  {fee: stx-fee, buyable-token: tokens-out, stx-buy: stx-after-fee, \n        new-token-balance: new-token-balance, stx-balance: (var-get stx-balance), \n      recommend-stx-amount: recommend-stx-amount-after-fee, token-balance: (var-get token-balance) } ) ))  \n\n;; token -> stx. Estimate the number of stx you can receive with a token amount\n(define-read-only (get-sellable-stx (token-amount uint)) \n  (let \n      (\n      (tokens-in token-amount)\n      (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))\n      (current-token-balance (var-get token-balance))\n      (k (* current-token-balance current-stx-balance )) ;; k = x*y \n      (new-token-balance (+ current-token-balance tokens-in))\n      (new-stx-balance (/ k new-token-balance)) ;; y' = k / x'\n      (stx-out (- (- current-stx-balance new-stx-balance) u1)) ;; prevent the round number\n      (stx-fee (/ (* stx-out u2) u100)) ;; 2% fee\n      (stx-receive (- stx-out stx-fee))\n  )\n   (ok  {fee: stx-fee, \n        current-stx-balance: current-stx-balance,\n        receivable-stx: stx-receive, \n        stx-receive: stx-receive,\n        new-token-balance: new-token-balance, \n        stx-out: stx-out,\n        stx-balance: (var-get stx-balance), \n        token-balance: (var-get token-balance) } ) ))  \n\n(define-read-only (get-tradable) \n  (ok (var-get tradable))\n)\n\n;; initialize contract based on token's details\n(begin\n  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)\n  (var-set token-balance token-supply)  \n  (var-set tradable true)\n  (var-set burn-percent u20)\n  (var-set deployer-percent u10) ;; based on the burn-amount. It's about ~0.1 to 0.5% supply\n  (try! (stx-transfer? u1000000 tx-sender 'SP1WG62TA0D3K980WGSTZ0QA071TZD4ZXNKP0FQZ7))\n  (ok true)\n)\n",
    "analysis": {
      "summary": "This Clarity smart contract implements a decentralized exchange (DEX) using a bonding curve mechanism for trading tokens, with features for buying, selling, and automatic adjustments upon reaching target STX amounts.",
      "explanation": "The contract is designed to facilitate token trading on the Stacks blockchain using a bonding curve, which is a mathematical curve that determines the price of a token based on its supply. The contract includes mechanisms for buying and selling tokens, adjusting prices, and distributing fees and tokens upon reaching predefined targets.\n\n- The contract uses the SIP-010 trait for fungible tokens, ensuring compatibility with the standard token interface on Stacks (<L1>).\n- Error constants are defined for handling various error states (<L4-11>).\n- Constants are set for the token supply, DEX address, bonding curve configuration, fee, and wallet addresses (<L13-26>).\n- Tradable status, virtual STX amount, token balance, and STX balance are stored as data variables, allowing the contract to track the state of trading and balances (<L29-34>).\n- The `buy` function (<L36>) allows users to purchase tokens by sending STX to the contract. It calculates fees, updates balances, and transfers tokens. If the STX target amount is reached, it triggers a distribution mechanism, sending tokens and STX to specified addresses and adjusting the contract state.\n- The `sell` function (<L91>) enables users to sell tokens back to the contract in exchange for STX, based on the current bonding curve.\n- `get-buyable-tokens` (<L146>) and `get-sellable-stx` (<L171>) are read-only functions that provide estimates for trades without executing them, useful for UIs or pre-trade calculations.\n- The contract initializes with predefined values and sets the tradable status to true, allowing trading to begin immediately upon deployment (<L196>).\n\nThis contract does not include admin controls or ownership functions, emphasizing its decentralized nature. The use of a bonding curve for pricing and the automatic adjustment mechanisms are notable features, designed to create a self-balancing DEX that adjusts based on market activity.",
      "tags": [
        "DEX",
        "bonding-curve",
        "DeFi",
        "protocol",
        "trading",
        "Clarity"
      ]
    }
  }
]